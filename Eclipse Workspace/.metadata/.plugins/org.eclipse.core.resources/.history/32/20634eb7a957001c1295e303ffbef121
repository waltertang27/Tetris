/*
 * text_mode_vga_color.c
 * Minimal driver for text mode VGA support
 * This is for Week 2, with color support
 *
 *  Created on: Oct 25, 2021
 *      Author: zuofu
 */

#include <system.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <alt_types.h>
#include "text_mode_vga.h"

void textVGAColorClr()
{
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
	{
		vga_ctrl->VRAM[i] = 0x0;
	}
}

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
	alt_u8 st = 2;
	int i = 0;
	while (str[i]!=0)
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = st;
		i++;
	}
}

void Test(){
	textVGAColorClr();
	for (int i = 0; i < 16; i++)
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	int gameboard[20][10] = {
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, -1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, -1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, -1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, -1},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 5, 0, 0},
		{0, 0, 0, 0, 0, 0, 0, 5, 5, 0},
		{1, 1, 1, 0, 0, 0, 0, 5, 5, 0},
		{1, 1, 1, 1, 0, 0, 0, 5, 5, 0},
		{3, 3, 1, 3, 3, 3, 3, 3, 5, 0},
		{1, 3, 3, 3, 3, 3, 3, 3, 3, 0},
		{1, 1, 1, 2, 3, 1, 1, 1, 1, 0},
		{1, 1, 1, 2, 2, 2, 2, 7, 7, 0},
		{1, 5, 6, 6, 6, 7, 5, 5, 3, 0},
		{1, 5, 5, 6, 7, 7, 5, 5, 3, 0},
	};
	//I block: -1
	//J Block: -2
	//L block: -3
	//O block: -4
	//S-block: -5
	//T block: -6
	//Z block: -7
	drawGame(gameboard, 1, 15, 4, 15);
	drawGrid(11, 0, 15);
}

void drawGrid(alt_u8 foreground, alt_u8 background, alt_u8 text){
	//draw game grid
	//draw top left corner
	vga_ctrl->VRAM[174 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[174 * 2 + 1] = 0x03;
	//draw top wall
	for(int i = 0; i < 10; i++){
		vga_ctrl->VRAM[(175 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(175 + i) * 2 + 1] = 0x04;
	}
	//draw top right corner
	vga_ctrl->VRAM[185 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[185 * 2 + 1] = 0x05;
	//draw right wall
	for(int i = 0; i < 20; i++){
		vga_ctrl->VRAM[(225 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(225 + i * 40) * 2 + 1] = 0x06;
	}
	//draw bottom right corner
	vga_ctrl->VRAM[1025 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[1025 * 2 + 1] = 0x07;
	//draw bottom wall
	for(int i = 0; i < 10; i++){
		vga_ctrl->VRAM[(1015 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(1015 + i) * 2 + 1] = 0x08;
	}
	//draw bottom left corner
	vga_ctrl->VRAM[1014 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[1014 * 2 + 1] = 0x09;
	//draw left wall
	for(int i = 0; i < 20; i++){
		vga_ctrl->VRAM[(214 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(214 + i * 40) * 2 + 1] = 0x0a;
	}

	//draw next grid & words
	//draw top left corner
	vga_ctrl->VRAM[426 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[426 * 2 + 1] = 0x0b;
	//draw top wall
	for(int i = 0; i < 4; i++){
		vga_ctrl->VRAM[(427 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(427 + i) * 2 + 1] = 0x0c;
	}
	//draw top right corner
	vga_ctrl->VRAM[431 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[431 * 2 + 1] = 0x0d;
	//draw right wall
	for(int i = 0; i < 7; i++){
		vga_ctrl->VRAM[(471 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(471 + i * 40) * 2 + 1] = 0x0e;
	}
	//draw bottom right corner
	vga_ctrl->VRAM[751 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[751 * 2 + 1] = 0x0f;
	//draw bottom wall
	for(int i = 0; i < 4; i++){
		vga_ctrl->VRAM[(747 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(747 + i) * 2 + 1] = 0x10;
	}
	//draw bottom left corner
	vga_ctrl->VRAM[746 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[746 * 2 + 1] = 0x11;
	//draw left wall
	for(int i = 0; i < 7; i++){
		vga_ctrl->VRAM[(466 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(466 + i * 40) * 2 + 1] = 0x12;
	}
	//N
	vga_ctrl->VRAM[467 * 2] = text << 4 | background;
	vga_ctrl->VRAM[467 * 2 + 1] = 0x2d;
	//E
	vga_ctrl->VRAM[468 * 2] = text << 4 | background;
	vga_ctrl->VRAM[468 * 2 + 1] = 0x24;
	//X
	vga_ctrl->VRAM[469 * 2] = text << 4 | background;
	vga_ctrl->VRAM[469 * 2 + 1] = 0x37;
	//T
	vga_ctrl->VRAM[470 * 2] = text << 4 | background;
	vga_ctrl->VRAM[470 * 2 + 1] = 0x33;

	//draw stats grid & words
	//draw top left corner
	vga_ctrl->VRAM[41 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[41 * 2 + 1] = 0x0b;
	//draw top wall
	for(int i = 0; i < 11; i++){
		vga_ctrl->VRAM[(42 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(42 + i) * 2 + 1] = 0x0c;
	}
	//draw top right corner
	vga_ctrl->VRAM[53 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[53 * 2 + 1] = 0x0d;
	//draw right wall
	for(int i = 0; i < 24; i++){
		vga_ctrl->VRAM[(93 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(93 + i * 40) * 2 + 1] = 0x0e;
	}
	//draw bottom right corner
	vga_ctrl->VRAM[1053 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[1053 * 2 + 1] = 0x0f;
	//draw bottom wall
	for(int i = 0; i < 11; i++){
		vga_ctrl->VRAM[(1042 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(1042 + i) * 2 + 1] = 0x10;
	}
	//draw bottom left corner
	vga_ctrl->VRAM[1041 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[1041 * 2 + 1] = 0x11;
	//draw left wall
	for(int i = 0; i < 24; i++){
		vga_ctrl->VRAM[(81 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(81 + i * 40) * 2 + 1] = 0x12;
	}
	//S
	vga_ctrl->VRAM[123 * 2] = text << 4 | background;
	vga_ctrl->VRAM[123 * 2 + 1] = 0x32;
	//T
	vga_ctrl->VRAM[124 * 2] = text << 4 | background;
	vga_ctrl->VRAM[124 * 2 + 1] = 0x33;
	//A
	vga_ctrl->VRAM[125 * 2] = text << 4 | background;
	vga_ctrl->VRAM[125 * 2 + 1] = 0x20;
	//T
	vga_ctrl->VRAM[126 * 2] = text << 4 | background;
	vga_ctrl->VRAM[126 * 2 + 1] = 0x33;
	//I
	vga_ctrl->VRAM[127 * 2] = text << 4 | background;
	vga_ctrl->VRAM[127 * 2 + 1] = 0x28;
	//S
	vga_ctrl->VRAM[128 * 2] = text << 4 | background;
	vga_ctrl->VRAM[128 * 2 + 1] = 0x32;
	//T
	vga_ctrl->VRAM[129 * 2] = text << 4 | background;
	vga_ctrl->VRAM[129 * 2 + 1] = 0x33;
	//I
	vga_ctrl->VRAM[130 * 2] = text << 4 | background;
	vga_ctrl->VRAM[130 * 2 + 1] = 0x28;
	//C
	vga_ctrl->VRAM[131 * 2] = text << 4 | background;
	vga_ctrl->VRAM[131 * 2 + 1] = 0x22;

	//draw score grid & words
	//draw top left corner
	vga_ctrl->VRAM[66 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[66 * 2 + 1] = 0x0b;
	//draw top wall
	for(int i = 0; i < 9; i++){
		vga_ctrl->VRAM[(67 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(67 + i) * 2 + 1] = 0x0c;
	}
	//draw top right corner
	vga_ctrl->VRAM[76 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[76 * 2 + 1] = 0x0d;
	//draw right wall
	for(int i = 0; i < 7; i++){
		vga_ctrl->VRAM[(116 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(116 + i * 40) * 2 + 1] = 0x0e;
	}
	//draw bottom right corner
	vga_ctrl->VRAM[396 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[396 * 2 + 1] = 0x0f;
	//draw bottom wall
	for(int i = 0; i < 9; i++){
		vga_ctrl->VRAM[(387 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(387 + i) * 2 + 1] = 0x10;
	}
	//draw bottom left corner
	vga_ctrl->VRAM[386 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[386 * 2 + 1] = 0x11;
	//draw left wall
	for(int i = 0; i < 7; i++){
		vga_ctrl->VRAM[(106 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(106 + i * 40) * 2 + 1] = 0x12;
	}
	for(int i = 0; i < 5; i++){
		vga_ctrl->VRAM[108 + i * 2] = text << 4 | background;
		vga_ctrl->VRAM[228 + i * 2] = text << 4 | background;
	}
	//S
	vga_ctrl->VRAM[108 * 2] = text << 4 | background;
	vga_ctrl->VRAM[108 * 2 + 1] = 0x32;
	//C
	vga_ctrl->VRAM[1209 * 2] = text << 4 | background;
	vga_ctrl->VRAM[109 * 2 + 1] = 0x22;
	//O
	vga_ctrl->VRAM[110 * 2] = text << 4 | background;
	vga_ctrl->VRAM[110 * 2 + 1] = 0x2e;
	//R
	vga_ctrl->VRAM[111 * 2] = text << 4 | background;
	vga_ctrl->VRAM[111 * 2 + 1] = 0x31;
	//E
	vga_ctrl->VRAM[112 * 2] = text << 4 | background;
	vga_ctrl->VRAM[112 * 2 + 1] = 0x24;
	//L
	vga_ctrl->VRAM[228 * 2] = text << 4 | background;
	vga_ctrl->VRAM[228 * 2 + 1] = 0x2b;
	//I
	vga_ctrl->VRAM[229 * 2] = text << 4 | background;
	vga_ctrl->VRAM[229 * 2 + 1] = 0x28;
	//N
	vga_ctrl->VRAM[230 * 2] = text << 4 | background;
	vga_ctrl->VRAM[230 * 2 + 1] = 0x2d;
	//E
	vga_ctrl->VRAM[231 * 2] = text << 4 | background;
	vga_ctrl->VRAM[231 * 2 + 1] = 0x24;
	//S
	vga_ctrl->VRAM[232 * 2] = text << 4 | background;
	vga_ctrl->VRAM[232 * 2 + 1] = 0x32;

	//draw level & words
	//draw top left corner
	vga_ctrl->VRAM[786 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[786 * 2 + 1] = 0x0b;
	//draw top wall
	for(int i = 0; i < 7; i++){
		vga_ctrl->VRAM[(787 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(787 + i) * 2 + 1] = 0x0c;
	}
	//draw top right corner
	vga_ctrl->VRAM[794 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[794 * 2 + 1] = 0x0d;
	//draw right wall
	for(int i = 0; i < 4; i++){
		vga_ctrl->VRAM[(834 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(834 + i * 40) * 2 + 1] = 0x0e;
	}
	//draw bottom right corner
	vga_ctrl->VRAM[994 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[994 * 2 + 1] = 0x0f;
	//draw bottom wall
	for(int i = 0; i < 7; i++){
		vga_ctrl->VRAM[(987 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(987 + i) * 2 + 1] = 0x10;
	}
	//draw bottom left corner
	vga_ctrl->VRAM[986 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[986 * 2 + 1] = 0x11;
	//draw left wall
	for(int i = 0; i < 4; i++){
		vga_ctrl->VRAM[(826 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(826 + i * 40) * 2 + 1] = 0x12;
	}
	for(int i = 0; i < 5; i++){
		vga_ctrl->VRAM[868 + i * 2] = text << 4 | background;
	}
	//L
	vga_ctrl->VRAM[867 * 2] = text << 4 | background;
	vga_ctrl->VRAM[867 * 2 + 1] = 0x2b;
	//E
	vga_ctrl->VRAM[868 * 2] = text << 4 | background;
	vga_ctrl->VRAM[868 * 2 + 1] = 0x24;
	//V
	vga_ctrl->VRAM[869 * 2] = text << 4 | background;
	vga_ctrl->VRAM[869 * 2 + 1] = 0x35;
	//E
	vga_ctrl->VRAM[870 * 2] = text << 4 | background;
	vga_ctrl->VRAM[870 * 2 + 1] = 0x24;
	//L
	vga_ctrl->VRAM[871 * 2] = text << 4 | background;
	vga_ctrl->VRAM[871 * 2 + 1] = 0x2b;
}

void drawGame(int gameboard[20][10], alt_u8 fg1, alt_u8 bg1, alt_u8 fg2, alt_u8 bg2){
	//iterate over full array
	for(int i = 0; i < 20; i++){
		for(int j = 0; j < 10; j++){
			int block = abs(gameboard[i][j]);
			if(block == 0){
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = 0x0;
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x0;
			}
			if(block == 1){ //draw I block
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg1 << 4 | bg1;
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x01;
			}
			else if(block == 2){ //draw J block
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg1 << 4 | bg1;
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x02;
			}
			else if(block == 3){ //draw L block
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg2 << 4 | bg2;
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x02;
			}
			else if(block == 4){ //draw O block
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg1 << 4 | bg1;
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x01;
			}
			else if(block == 5){ //draw S block
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg1 << 4 | bg1;
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x02;
			}
			else if(block == 6){ //draw T block
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg1 << 4 | bg1;
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x01;
			}
			else if(block == 7){ //draw Z block
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg2 << 4 | bg2;
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x2;
			}
		}
	}
}



void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	if(color % 2 == 0){
		vga_ctrl->PALETTE[color >> 1] = (red << 9) | (green << 5) | (blue << 1);
	}
	else{
		vga_ctrl->PALETTE[color >> 1] = vga_ctrl->PALETTE[color >> 1] | (red << 21) | (green << 17) | (blue << 13);
	}

}


void textVGAColorScreenSaver()
{
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
	//initialize palette
	for (int i = 0; i < 16; i++)
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);

	}
	for (int i = 0; i < 8; i++){
		printf("REG %i : %08x\n", i, (unsigned int)vga_ctrl->PALETTE[i]);
	}
	while (1)
	{
		fg = rand() % 16;
		bg = rand() % 16;
		while (fg == bg)
		{
			fg = rand() % 16;
			bg = rand() % 16;
		}
		sprintf(color_string, "abcdefghijklmnopqrstuvwxyz");
		x = rand() % (40-strlen(color_string));
		y = rand() % 30;
		textVGADrawColorText (color_string, x, y, bg, fg);
		usleep (100000);
	}
}

