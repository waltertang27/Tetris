#include "tetris.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>

//I block: -1
//J Block: -2
//L block: -3
//O block: -4
//S-block: -5
//T block: -6
//Z block: -7

//the next block to spawn on screen
void dropIBlock() {
    gameboard[0][4] = -1;
    gameboard[0][5] = -1;
    gameboard[0][6] = -1;
    gameboard[0][7] = -1;
}

void dropJBlock() {
	gameboard[0][3] = -2;
	gameboard[1][3] = -2;
	gameboard[1][4] = -2;
	gameboard[1][5] = -2;
}

void dropLBlock() {
	gameboard[0][5] = -3;
	gameboard[1][3] = -3;
	gameboard[1][4] = -3;
    gameboard[1][5] = -3;
}

void dropOBlock() {
	gameboard[0][4] = -4;
	gameboard[1][4] = -4;
	gameboard[0][5] = -4;
	gameboard[1][5] = -4;
}

void dropSBlock() {
	gameboard[0][5] = -5;
	gameboard[0][4] = -5;
	gameboard[1][4] = -5;
	gameboard[1][3] = -5;
}

void dropTlock() {
	gameboard[0][5] = -6;
	gameboard[1][3] = -6;
	gameboard[1][4] = -6;
	gameboard[1][5] = -6;
}

void dropZBlock() {
	gameboard[0][3] = -7;
	gameboard[0][4] = -7;
	gameboard[1][4] = -7;
	gameboard[1][5] = -7;
}

void tetris() {
    bool gameOver = false;  //checks if game is over
    int prevBlock = 0; //store previous block id
    int num; //random block generation
    int frameDelay = 48; //value to adjust speed of block drop
    bool newBlock = true; //determine when a new block is needed
    while(!gameOver) {  //runs while game not over
    	//spawn new block
    	if(newBlock){
			num = rand() % 7;   //generate a random number corresponding to a block
			switch(num) {
				case 0:
					dropIBlock();
					break;
				case 1:
					dropJBlock();
					break;
				case 2:
					dropLBlock();
					break;
				case 3:
					dopOBlock();
					break;
				case 4:
					dropSBlock();
					break;
				case 5:
					dropTBlock();
					break;
				case 6:
					dropZBlock();
					break;
			default:
			}
    	}
    }

}

//moves the piece DOWN, checks for collisions. Unfinished - need to check for bounds
void drop() {

}

bool isGameOver(int board) {

    return true;
}

//checks if the rows on the board have been filled. if a row is full, clear it
void fullRow(int &board) {
    for(unsigned i = 0; i < 20; i++) {
        for(unsigned j = 0; j < 10; j++) {
            if(board[i][j] == 0) {
                break;
            }
            if(j == 9) {
                for(int k = 0; k < 10; k++) {
                    board[i][k] = 0;
                }
            }
        }
    }
}





