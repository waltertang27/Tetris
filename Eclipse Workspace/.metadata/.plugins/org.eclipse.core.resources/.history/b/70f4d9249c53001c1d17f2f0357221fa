 #include "tetris.h"
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <stdbool.h>

//I block: -1
//J Block: -2
//L block: -3
//O block: -4
//S-block: -5
//T block: -6
//Z block: -7

//the next block to spawn on screen
void dropIBlock() {
    gameboard[0][4] = -1;
    gameboard[0][5] = -1;
    gameboard[0][6] = -1;
    gameboard[0][7] = -1;
}

void dropJBlock() {
	gameboard[0][3] = -2;
	gameboard[1][3] = -2;
	gameboard[1][4] = -2;
	gameboard[1][5] = -2;
}

void dropLBlock() {
	gameboard[0][5] = -3;
	gameboard[1][3] = -3;
	gameboard[1][4] = -3;
    gameboard[1][5] = -3;
}

void dropOBlock() {
	gameboard[0][4] = -4;
	gameboard[1][4] = -4;
	gameboard[0][5] = -4;
	gameboard[1][5] = -4;
}

void dropSBlock() {
	gameboard[0][5] = -5;
	gameboard[0][4] = -5;
	gameboard[1][4] = -5;
	gameboard[1][3] = -5;
}

void dropTlock() {
	gameboard[0][5] = -6;
	gameboard[1][3] = -6;
	gameboard[1][4] = -6;
	gameboard[1][5] = -6;
}

void dropZBlock() {
	gameboard[0][3] = -7;
	gameboard[0][4] = -7;
	gameboard[1][4] = -7;
	gameboard[1][5] = -7;
}

void tetris() {
    bool gameOver = false;  //checks if game is over
    int prevBlock = 0; //store previous block id
    int num = 0; //random block generation
    int frameDelay = 48; //value to adjust speed of block drop
    bool newBlock = true; //determine when a new block is needed
    int prevKey = 0; //key pressed in previous frame
    int DAS = 16; //held key move delay
    while(!gameOver) {  //runs while game not over
    	//spawn new block
    	if(newBlock){
    		prevBlock = num;
    		num = spawnBlock(prevBlock);
    	}
    	/*
    	//handle keyboard movement
    	if(KEY LEFT && prevKey == KEY LEFT){ //movement left if key is held
    		if(DAS == 0){
    			shiftLeft();
    			DAS = 6;
    		}
    		DAS--;
    	}
    	else if(KEY LEFT){ //movement when left key pressed
    		shiftLeft();
    		prevKey = KEY LEFT;
    	}
    	else if(KEY RIGHT && prevKey == KEY RIGHT){ // movement right if key is held
    		if(DAS == 0){
    			shiftRight();
    			DAS = 6;
    		}
    		DAS--;
    	}
    	else if (KEY RIGHT){ //movement when right key pressed
    		shiftRight();
    		prevKey = KEY RIGHT;
    	}
    	else{ //reset if no key pressed
    		prevKey = 0;
    		DAS = 16;
    	}
    	*/
    }

}

int spawnBlock(int prevBlock){
	int num = 0;
	num = (rand() % 7) + 1;   //generate a random number corresponding to a block
	//reroll if block is same as previous, biases against repeat blocks but does not prevent them
	if(num == prevBlock){
		num = (rand() % 7) + 1;
	}
	switch(num) {
		case 1:
			dropIBlock();
			break;
		case 2:
			dropJBlock();
			break;
		case 3:
			dropLBlock();
			break;
		case 4:
			dopOBlock();
			break;
		case 5:
			dropSBlock();
			break;
		case 6:
			dropTBlock();
			break;
		case 7:
			dropZBlock();
			break;
	default:
	}
	return num;
}

void shiftLeft(){
	int newBoard[20][10] = {0};
	int count = 0; //when 4 cells have been shifted, shift is complete
	for(int i = 0; i < 20; i++){
		for(int j = 0; j < 10; j++){
			int current = gameBoard[i][j];
			if(current > 0){ //copy static blocks to new board
				newBoard[i][j] = current;
			}
			if(current < 0){ //shift moving block on new board
				if(j > 0){
					newBoard[i][j - 1] = current;
					newBoard[i][j] = 0;
					count++;
				}
				else{return;} //do not shift if cell is on left wall
			}
			if(count == 4){ //update game board
				for(int k = 0; k < 20; k++){
					for(int l = 0; l < 10; l++){
						gameBoard[i][j] = newBoard[i][j]
					}
				}
			}
		}
	}
}

void shiftRight(){

}














//moves the piece DOWN, checks for collisions. Unfinished - need to check for bounds
void drop() {

}

bool isGameOver(int board) {

    return true;
}

//checks if the rows on the board have been filled. if a row is full, clear it
void fullRow(int &board) {
    for(unsigned i = 0; i < 20; i++) {
        for(unsigned j = 0; j < 10; j++) {
            if(board[i][j] == 0) {
                break;
            }
            if(j == 9) {
                for(int k = 0; k < 10; k++) {
                    board[i][k] = 0;
                }
            }
        }
    }
}




