
FinalProject_app.elf:     file format elf32-littlenios2
FinalProject_app.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0001e014 memsz 0x0001e014 flags r-x
    LOAD off    0x0001f034 vaddr 0x0401e034 paddr 0x0401ffbc align 2**12
         filesz 0x00001f88 memsz 0x00001f88 flags rw-
    LOAD off    0x00021f44 vaddr 0x04021f44 paddr 0x04021f44 align 2**12
         filesz 0x00000000 memsz 0x00000624 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001d88c  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000578  0401dabc  0401dabc  0001eabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f88  0401e034  0401ffbc  0001f034  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000624  04021f44  04021f44  00021f44  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04022568  04022568  00020fbc  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  080051c0  080051c0  00020fbc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00020fbc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001100  00000000  00000000  00020fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002a3f1  00000000  00000000  000220e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000a906  00000000  00000000  0004c4d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e3ec  00000000  00000000  00056dd7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000033b0  00000000  00000000  000651c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004857  00000000  00000000  00068574  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017b1f  00000000  00000000  0006cdcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000848ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001958  00000000  00000000  00084930  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0008a382  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0008a385  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008a391  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008a392  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0008a393  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0008a397  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0008a39b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  0008a39f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  0008a3a8  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  0008a3b1  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  0008a3ba  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000026  00000000  00000000  0008a3c2  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e6f  00000000  00000000  0008a3e8  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008a93e  00000000  00000000  0008f257  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
0401dabc l    d  .rodata	00000000 .rodata
0401e034 l    d  .rwdata	00000000 .rwdata
04021f44 l    d  .bss	00000000 .bss
04022568 l    d  .sdram	00000000 .sdram
080051c0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FinalProject_app_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
0401ff60 l     O .rwdata	00000004 vga_ctrl
0401e034 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 tetris.c
0401ff64 l     O .rwdata	00000004 vga_ctrl
0401e1a4 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga.c
0401ff68 l     O .rwdata	00000004 vga_ctrl
0401e314 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 usb_kb.c
0401ff6c l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
04021f60 l     O .bss	00000004 usb_delay.2613
04021f64 l     O .bss	00000001 tmp_addr.2614
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 clock.c
00000000 l    df *ABS*	00000000 impure.c
0401e4b4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 time.c
00000000 l    df *ABS*	00000000 timesr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401de86 l     O .rodata	00000010 zeroes.4404
040122c8 l     F .text	000000bc __sbprintf
0401de96 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
040124d8 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04014030 l     F .text	00000008 __fp_unlock
04014044 l     F .text	0000019c __sinit.part.1
040141e0 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 gettimeofdayr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0401e8f8 l     O .rwdata	00000020 lc_ctype_charset
0401e8d8 l     O .rwdata	00000020 lc_message_charset
0401e918 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0401dec4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
040175c8 l     F .text	000000fc __sprint_r.part.0
0401dfe8 l     O .rodata	00000010 zeroes.4349
04018c04 l     F .text	000000bc __sbprintf
0401dff8 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0401ace8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0401adfc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0401ae28 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_gettod.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0401b110 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0401b1f8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0401b2e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0401b4c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0401ffac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_times.c
0401b8d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0401b9bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0401baf8 l     F .text	00000034 alt_dev_reg
0401ef00 l     O .rwdata	00001060 jtag_uart
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0401bdf0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0401bffc l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0401c830 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0401cbc8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401d028 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0401d188 l     F .text	0000003c alt_get_errno
0401d1c4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04021fac g     O .bss	00000004 alt_instruction_exception_handler
04016c0c g     F .text	00000074 _mprec_log10
040069c0 g     F .text	0000012c draw3
04016cf8 g     F .text	0000008c __any_on
040191b8 g     F .text	00000054 _isatty_r
0401ded0 g     O .rodata	00000028 __mprec_tinytens
0401b3fc g     F .text	0000007c alt_main
0401ff70 g     O .rwdata	00000008 ctrl_xfers
0400fd90 g     F .text	000000c0 _puts_r
04022468 g     O .bss	00000100 alt_irq
0401920c g     F .text	00000060 _lseek_r
0400d260 g     F .text	00000644 USB_Task
0401ffbc g       *ABS*	00000000 __flash_rwdata_start
0401ab84 g     F .text	00000088 .hidden __eqdf2
04014e64 g     F .text	0000005c _gettimeofday_r
04022568 g       *ABS*	00000000 __alt_heap_start
04006f38 g     F .text	000000dc draw9
0400fd54 g     F .text	0000003c printf
04008d6c g     F .text	00000094 drawScore
04006ca8 g     F .text	000000d8 draw6
04019424 g     F .text	0000009c _wcrtomb_r
0400c3a8 g     F .text	00000088 kbdPoll
04017488 g     F .text	0000005c __sseek
04014390 g     F .text	00000010 __sinit
04021f44 g     O .bss	00000004 keycode
040192cc g     F .text	00000140 __swbuf_r
04014ec0 g     F .text	0000007c _setlocale_r
040141e8 g     F .text	00000078 __sfmoreglue
0401b49c g     F .text	00000024 __malloc_unlock
0400b554 g     F .text	000001f0 GetDriverandReport
04015a48 g     F .text	0000015c memmove
0400750c g     F .text	000000e0 draw15
04007a08 g     F .text	00001188 drawGrid
040004f8 g     F .text	00000038 dropTBlock
04014378 g     F .text	00000018 _cleanup
04015ccc g     F .text	000000a8 _Balloc
0400c4fc g     F .text	000000b8 MAXreg_wr
0401e484 g     O .rwdata	00000030 ClientDriverTable
0400e6cc g     F .text	000000dc .hidden __gtdf2
0401d40c g     F .text	00000024 altera_nios2_gen2_irq_init
04009d84 g     F .text	00000310 drawStats
0400d8a4 g     F .text	0000002c MSDProbe
04000000 g     F .entry	0000000c __reset
0401b914 g     F .text	00000078 times
0400b288 g     F .text	000002cc enterHighScore
0400cd1c g     F .text	000000e8 XferCtrlData
04000020 g       *ABS*	00000000 __flash_exceptions_start
04021fb0 g     O .bss	00000010 hid_ep
0401915c g     F .text	0000005c _fstat_r
04021f68 g     O .bss	00000004 errno
04017404 g     F .text	00000008 __seofread
04021f98 g     O .bss	00000004 alt_argv
04027f60 g       *ABS*	00000000 _gp
0401b98c g     F .text	00000030 usleep
0400495c g     F .text	00000f90 rotateLeft
0400c674 g     F .text	0000007c MAXreg_rd
0401ed80 g     O .rwdata	00000180 alt_fd_list
0400c2e0 g     F .text	00000040 HID_init
0401d430 g     F .text	00000090 alt_find_dev
0400ffc8 g     F .text	00000008 _times_r
0400fbdc g     F .text	00000148 memcpy
04014038 g     F .text	0000000c _cleanup_r
0401ac0c g     F .text	000000dc .hidden __floatsidf
0401d10c g     F .text	0000007c alt_io_redirect
0400e7a8 g     F .text	000000f4 .hidden __ltdf2
0401dabc g       *ABS*	00000000 __DTOR_END__
0400fe50 g     F .text	00000014 puts
0401d68c g     F .text	0000009c alt_exception_cause_generated_bad_addr
040172e8 g     F .text	00000074 __fpclassifyd
04016b68 g     F .text	000000a4 __ratio
04000450 g     F .text	00000038 dropLBlock
04018be8 g     F .text	0000001c __vfiprintf_internal
0401c1f4 g     F .text	0000021c altera_avalon_jtag_uart_read
0400fd24 g     F .text	00000030 _printf_r
080051c0 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0400dc18 g     F .text	00000064 .hidden __udivsi3
0401b14c g     F .text	000000ac isatty
0400ac48 g     F .text	0000032c chooseLevel
0401df20 g     O .rodata	000000c8 __mprec_tens
04014f3c g     F .text	0000000c __locale_charset
04021f84 g     O .bss	00000008 alt_timezone
0400daac g     F .text	00000074 .hidden __fixunsdfsi
04021f80 g     O .bss	00000004 __malloc_top_pad
0401ff78 g     O .rwdata	00000001 usb_task_state
0401ff84 g     O .rwdata	00000004 __mb_cur_max
040071cc g     F .text	00000134 draw12
04014f6c g     F .text	0000000c _localeconv_r
04016100 g     F .text	0000003c __i2b
04014814 g     F .text	000004c8 __sfvwrite_r
0401735c g     F .text	00000054 _sbrk_r
0401926c g     F .text	00000060 _read_r
0400c9d0 g     F .text	00000094 MAX3421E_init
0400ba40 g     F .text	00000038 setKeycode
0401ffa4 g     O .rwdata	00000004 alt_max_fd
0400ba78 g     F .text	00000058 keyboardDriver
04018e50 g     F .text	000000f0 _fclose_r
04014000 g     F .text	00000030 fflush
04021f7c g     O .bss	00000004 __malloc_max_sbrked_mem
04006aec g     F .text	000000dc draw4
0401a2d8 g     F .text	000008ac .hidden __adddf3
04002284 g     F .text	00000f3c shiftRight
04016910 g     F .text	0000010c __b2d
04019d14 g     F .text	000005c4 .hidden __umoddi3
0401b320 g     F .text	000000dc lseek
0401ff7c g     O .rwdata	00000004 _global_impure_ptr
04016d84 g     F .text	00000564 _realloc_r
04022568 g       *ABS*	00000000 __bss_end
0401cf38 g     F .text	000000f0 alt_iic_isr_register
0401b7d0 g     F .text	00000108 alt_tick
04019718 g     F .text	000005fc .hidden __udivdi3
040190b8 g     F .text	00000024 _fputwc_r
0401def8 g     O .rodata	00000028 __mprec_bigtens
04015ee4 g     F .text	00000104 __s2b
0400fa84 g     F .text	000000a8 .hidden __floatunsidf
04016650 g     F .text	00000060 __mcmp
04000418 g     F .text	00000038 dropJBlock
040143b0 g     F .text	00000018 __fp_lock_all
0401ceec g     F .text	0000004c alt_ic_irq_enabled
0401b734 g     F .text	0000009c alt_alarm_stop
04021fa8 g     O .bss	00000004 alt_irq_active
0400d96c g     F .text	0000002c DummyProbe
040000fc g     F .exceptions	000000d4 alt_irq_handler
0401ed58 g     O .rwdata	00000028 alt_dev_null
0400c320 g     F .text	00000088 mousePoll
040077a4 g     F .text	00000134 draw18
0400c824 g     F .text	00000024 Vbus_power
0400aadc g     F .text	0000016c endGame
0401cba8 g     F .text	00000020 alt_dcache_flush_all
04015fe8 g     F .text	00000068 __hi0bits
0400fa04 g     F .text	00000080 .hidden __fixdfsi
0401ffbc g       *ABS*	00000000 __ram_rwdata_end
0401ff9c g     O .rwdata	00000008 alt_dev_list
0401b9f8 g     F .text	00000100 write
0401e034 g       *ABS*	00000000 __ram_rodata_end
04021f65 g     O .bss	00000001 usb_error
0401ae64 g     F .text	000000b8 fstat
0400e7a8 g     F .text	000000f4 .hidden __ledf2
040163c8 g     F .text	00000140 __pow5mult
040048f4 g     F .text	00000068 gameOver
040176dc g     F .text	0000150c ___vfiprintf_internal_r
04021f74 g     O .bss	00000004 __nlocale_changed
0400dc7c g     F .text	00000058 .hidden __umodsi3
04022568 g       *ABS*	00000000 end
0401bd30 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04000530 g     F .text	00000038 dropZBlock
0400ce78 g     F .text	0000019c XferDispatchPkt
0401dabc g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0401c8a8 g     F .text	0000007c alt_avalon_timer_sc_init
0400fb2c g     F .text	00000064 .hidden __clzsi2
04000568 g     F .text	00000bf4 tetris
0401c410 g     F .text	00000224 altera_avalon_jtag_uart_write
040143a0 g     F .text	00000004 __sfp_lock_acquire
04015964 g     F .text	000000e4 memchr
0400ffd0 g     F .text	000022dc ___vfprintf_internal_r
0400cb9c g     F .text	00000034 MaxGpxHandler
04014504 g     F .text	00000310 _free_r
04014f48 g     F .text	00000010 __locale_mb_cur_max
0400b164 g     F .text	000000b0 drawPause
0401d908 g     F .text	00000180 __call_exitprocs
04004478 g     F .text	0000047c lineClear
04021f70 g     O .bss	00000004 __mlocale_changed
04006d80 g     F .text	000000dc draw7
0400691c g     F .text	000000a4 draw2
0401ff88 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
04021fa0 g     O .bss	00000004 _alt_tick_rate
0400c6f0 g     F .text	0000008c MAXbytes_rd
0400fe7c g     F .text	00000064 rand
04016508 g     F .text	00000148 __lshift
0401c634 g     F .text	000001fc alt_avalon_spi_command
04021fa4 g     O .bss	00000004 _alt_nticks
0401b4fc g     F .text	00000104 read
0401bb64 g     F .text	00000068 alt_sys_init
040076c4 g     F .text	000000e0 draw17
04022420 g     O .bss	00000048 devtable
0401d7f0 g     F .text	00000118 __register_exitproc
040058ec g     F .text	00000f90 rotateRight
0400bed8 g     F .text	00000408 HIDKProbe
04021fc0 g     O .bss	00000018 msd_ep
040070ec g     F .text	000000e0 draw11
0401613c g     F .text	0000028c __multiply
0401c09c g     F .text	00000068 altera_avalon_jtag_uart_close
0400d1c8 g     F .text	00000098 USB_init
04022320 g     O .bss	00000100 bigbuf
0400dcd4 g     F .text	00000028 .hidden __mulsi3
0401e034 g       *ABS*	00000000 __ram_rwdata_start
0401dabc g       *ABS*	00000000 __ram_rodata_start
04021fd8 g     O .bss	00000028 __malloc_current_mallinfo
04021f5c g     O .bss	00000001 last_usb_task_state
04016a1c g     F .text	0000014c __d2b
04021f54 g     O .bss	00000008 dev0ep
04008cdc g     F .text	00000090 drawLevel
0400b790 g     F .text	00000050 clearLED
0401bbcc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0401d5c8 g     F .text	000000c4 alt_get_fd
0401ca50 g     F .text	00000158 alt_busy_sleep
0400d8d0 g     F .text	00000038 MSDEventHandler
04018d20 g     F .text	00000054 _close_r
0400115c g     F .text	0000003c max
0401d774 g     F .text	0000007c memcmp
0401bc8c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04022568 g       *ABS*	00000000 __alt_stack_base
0401bcdc g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04012384 g     F .text	00000154 __swsetup_r
0400dcfc g     F .text	000009d0 .hidden __divdf3
04014260 g     F .text	00000118 __sfp
04016c80 g     F .text	00000078 __copybits
0401e950 g     O .rwdata	00000408 __malloc_av_
040143ac g     F .text	00000004 __sinit_lock_release
0400d934 g     F .text	00000038 CDCEventHandler
0400e89c g     F .text	0000086c .hidden __muldf3
0400d998 g     F .text	00000038 DummyEventHandler
040173b0 g     F .text	00000054 __sread
04006e5c g     F .text	000000dc draw8
0401d4c0 g     F .text	00000108 alt_find_file
0401cc04 g     F .text	000000a4 alt_dev_llist_insert
0401b478 g     F .text	00000024 __malloc_lock
0401b684 g     F .text	000000b0 sbrk
04013fa4 g     F .text	0000005c _fflush_r
04018d74 g     F .text	000000dc _calloc_r
0401af1c g     F .text	000001f4 gettimeofday
04021f44 g       *ABS*	00000000 __bss_start
0400c848 g     F .text	00000188 MAX_busprobe
04021f50 g     O .bss	00000002 hid_device
04015ba4 g     F .text	00000128 memset
0400026c g     F .text	00000174 main
0400ca64 g     F .text	0000006c MAX3421E_Task
04001198 g     F .text	000000b0 spawnBlock
04007300 g     F .text	00000130 draw13
04021f9c g     O .bss	00000004 alt_envp
04021f78 g     O .bss	00000004 __malloc_max_total_mem
0401bc2c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0401940c g     F .text	00000018 __swbuf
0400fe64 g     F .text	00000018 srand
0400da28 g     F .text	00000084 ConvUTF8ToStr
040031c0 g     F .text	000012b8 drop
040174e4 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04018f40 g     F .text	00000014 fclose
0400af74 g     F .text	000001f0 drawHighScore
04012700 g     F .text	00001688 _dtoa_r
04015158 g     F .text	0000080c _malloc_r
04019580 g     F .text	00000030 __ascii_wctomb
0400ff78 g     F .text	00000050 time
0401ffa8 g     O .rwdata	00000004 alt_errno
04014cdc g     F .text	000000c4 _fwalk
0400687c g     F .text	000000a0 draw1
0400db20 g     F .text	00000084 .hidden __divsi3
0400d014 g     F .text	000001b4 XferInTransfer
0400a094 g     F .text	00000108 setColorPalette
0400b900 g     F .text	00000140 printSignedHex1
040143e0 g     F .text	00000124 _malloc_trim_r
04022000 g     O .bss	00000320 gameBoard
0401dabc g       *ABS*	00000000 __CTOR_END__
04021f48 g     O .bss	00000003 scorer
0400d9f0 g     F .text	00000038 GetDevtable
040174ec g     F .text	000000dc strcmp
0401dabc g       *ABS*	00000000 __flash_rodata_start
0401dabc g       *ABS*	00000000 __DTOR_LIST__
0400935c g     F .text	000004a0 drawStatBlocks
0400ce04 g     F .text	00000074 XferCtrlND
0401ab84 g     F .text	00000088 .hidden __nedf2
0400c77c g     F .text	000000a8 MAX3421E_reset
04006bc8 g     F .text	000000e0 draw5
0401bb2c g     F .text	00000038 alt_irq_init
0401b600 g     F .text	00000084 alt_release_fd
04008e94 g     F .text	000004c8 drawGame
04007430 g     F .text	000000dc draw14
0401dd3c g     O .rodata	00000100 .hidden __clz_tab
04021f6c g     O .bss	00000004 _PathLocale
0401d728 g     F .text	00000014 atexit
04018cc0 g     F .text	00000060 _write_r
04014f78 g     F .text	00000018 setlocale
0401ff80 g     O .rwdata	00000004 _impure_ptr
04021f94 g     O .bss	00000004 alt_argc
04013d88 g     F .text	0000021c __sflush_r
0401cd08 g     F .text	00000060 _do_dtors
04014f64 g     F .text	00000008 __locale_cjk_lang
0400c5b4 g     F .text	000000c0 MAXbytes_wr
040078d8 g     F .text	00000130 draw19
04000020 g       .exceptions	00000000 alt_irq_entry
040097fc g     F .text	00000588 drawNext
040168ac g     F .text	00000064 __ulp
040143c8 g     F .text	00000018 __fp_unlock_all
0400b214 g     F .text	00000074 unpause
0401ff94 g     O .rwdata	00000008 alt_fs_list
0400d908 g     F .text	0000002c CDCProbe
04021f8c g     O .bss	00000008 alt_resettime
04000020 g       *ABS*	00000000 __ram_exceptions_start
04014f90 g     F .text	0000000c localeconv
0400b744 g     F .text	0000004c setLED
0400d9d0 g     F .text	00000020 GetUsbTaskState
0401cd88 g     F .text	00000050 alt_ic_isr_register
0401dbc0 g     O .rodata	00000010 devclasses
0400a19c g     F .text	000008d4 startScreen
0401ffbc g       *ABS*	00000000 _edata
0400c468 g     F .text	00000038 HIDKEventHandler
04022568 g       *ABS*	00000000 _end
0400cad0 g     F .text	000000cc MaxIntHandler
04018f54 g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
0401c104 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0400c4a0 g     F .text	00000034 SPI_init
0401ce60 g     F .text	0000008c alt_ic_irq_disable
040075ec g     F .text	000000d8 draw16
0401740c g     F .text	0000007c __swrite
0401ff8c g     O .rwdata	00000004 __malloc_trim_threshold
04014f58 g     F .text	0000000c __locale_msgcharset
04007014 g     F .text	000000d8 draw10
0401d73c g     F .text	00000038 exit
04014da0 g     F .text	000000c4 _fwalk_reent
040166b0 g     F .text	000001fc __mdiff
0400dba4 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
040143a4 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04021f4c g     O .bss	00000004 highscore
0400c430 g     F .text	00000038 HIDMEventHandler
040003e0 g     F .text	00000038 dropIBlock
0401da88 g     F .text	00000034 _exit
0401c924 g     F .text	0000012c alt_alarm_start
0400b7e0 g     F .text	00000120 printSignedHex0
0401960c g     F .text	0000010c .hidden __muldi3
04014f9c g     F .text	000001bc __smakebuf_r
0400fee0 g     F .text	00000098 strlen
0401d2b0 g     F .text	0000015c open
0400e6cc g     F .text	000000dc .hidden __gedf2
0400fb90 g     F .text	0000004c clock
0400aa70 g     F .text	0000006c clearScreen
0401ff90 g     O .rwdata	00000004 __wctomb
040176c4 g     F .text	00000018 __sprint_r
0401cd68 g     F .text	00000020 alt_icache_flush_all
0401ffb8 g     O .rwdata	00000004 alt_priority_mask
040004c0 g     F .text	00000038 dropSBlock
0401cdd8 g     F .text	00000088 alt_ic_irq_enable
040122ac g     F .text	0000001c __vfprintf_internal
04001248 g     F .text	0000103c shiftLeft
0400bad0 g     F .text	00000408 HIDMProbe
040195b0 g     F .text	0000005c _wctomb_r
04008e00 g     F .text	00000094 drawLines
04008b90 g     F .text	0000014c drawDigit
0400c4d4 g     F .text	00000028 SPI_wr
0400f108 g     F .text	000008fc .hidden __subdf3
04016050 g     F .text	000000b0 __lo0bits
0401ffb0 g     O .rwdata	00000008 alt_alarm_list
0401cca8 g     F .text	00000060 _do_ctors
040194c0 g     F .text	000000c0 wcrtomb
0401ad24 g     F .text	000000d8 close
04000488 g     F .text	00000038 dropOBlock
0401b260 g     F .text	00000084 alt_load
040190dc g     F .text	00000080 fputwc
040143a8 g     F .text	00000004 __sinit_lock_acquire
0400cbd0 g     F .text	0000014c XferCtrlReq
04015d9c g     F .text	00000148 __multadd
04015d74 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100b4 	movhi	r2,1026
 4000140:	10891a04 	addi	r2,r2,9320
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100b4 	movhi	r2,1026
 4000158:	10891a04 	addi	r2,r2,9320
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory2_0+0xfbffaf6c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory2_0+0xfbffaf60>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a81317 	ldw	r2,-24500(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a81317 	ldw	r2,-24500(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 400023c:	d69fd814 	ori	gp,gp,32608
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	008100b4 	movhi	r2,1026
    ori r2, r2, %lo(__bss_start)
 4000244:	1087d114 	ori	r2,r2,8004

    movhi r3, %hi(__bss_end)
 4000248:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 400024c:	18c95a14 	ori	r3,r3,9576

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_mem_onchip_memory2_0+0xfbffb094>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	401b2600 	call	401b260 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	401b3fc0 	call	401b3fc <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_mem_onchip_memory2_0+0xfbffb0a8>

0400026c <main>:
#include "tetris.h"
#include "usb_kb/MAX3421E.h"
#include "usb_kb/transfer.h"
#include "usb_kb.h"

int main(){
 400026c:	defff604 	addi	sp,sp,-40
 4000270:	dfc00915 	stw	ra,36(sp)
 4000274:	df000815 	stw	fp,32(sp)
 4000278:	dcc00715 	stw	r19,28(sp)
 400027c:	dc800615 	stw	r18,24(sp)
 4000280:	dc400515 	stw	r17,20(sp)
 4000284:	dc000415 	stw	r16,16(sp)
 4000288:	df000804 	addi	fp,sp,32
	printf("initializing MAX3421E...\n");
 400028c:	010100b4 	movhi	r4,1026
 4000290:	2136af04 	addi	r4,r4,-9540
 4000294:	400fe500 	call	400fe50 <puts>
	MAX3421E_init();
 4000298:	400c9d00 	call	400c9d0 <MAX3421E_init>
	printf("initializing USB...\n");
 400029c:	010100b4 	movhi	r4,1026
 40002a0:	2136b604 	addi	r4,r4,-9512
 40002a4:	400fe500 	call	400fe50 <puts>
	USB_init();
 40002a8:	400d1c80 	call	400d1c8 <USB_init>
	clearScreen(); //initialize screen
 40002ac:	400aa700 	call	400aa70 <clearScreen>
	for (int i = 0; i < 16; i++) //set color palette
 40002b0:	e03ff815 	stw	zero,-32(fp)
 40002b4:	00002806 	br	4000358 <main+0xec>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 40002b8:	e0bff817 	ldw	r2,-32(fp)
 40002bc:	14403fcc 	andi	r17,r2,255
 40002c0:	040100b4 	movhi	r16,1026
 40002c4:	84380d04 	addi	r16,r16,-8140
 40002c8:	e0bff817 	ldw	r2,-32(fp)
 40002cc:	014005c4 	movi	r5,23
 40002d0:	1009883a 	mov	r4,r2
 40002d4:	400dcd40 	call	400dcd4 <__mulsi3>
 40002d8:	8085883a 	add	r2,r16,r2
 40002dc:	10800504 	addi	r2,r2,20
 40002e0:	10800003 	ldbu	r2,0(r2)
 40002e4:	14803fcc 	andi	r18,r2,255
 40002e8:	040100b4 	movhi	r16,1026
 40002ec:	84380d04 	addi	r16,r16,-8140
 40002f0:	e0bff817 	ldw	r2,-32(fp)
 40002f4:	014005c4 	movi	r5,23
 40002f8:	1009883a 	mov	r4,r2
 40002fc:	400dcd40 	call	400dcd4 <__mulsi3>
 4000300:	8085883a 	add	r2,r16,r2
 4000304:	10800544 	addi	r2,r2,21
 4000308:	10800003 	ldbu	r2,0(r2)
 400030c:	14c03fcc 	andi	r19,r2,255
 4000310:	040100b4 	movhi	r16,1026
 4000314:	84380d04 	addi	r16,r16,-8140
 4000318:	e0bff817 	ldw	r2,-32(fp)
 400031c:	014005c4 	movi	r5,23
 4000320:	1009883a 	mov	r4,r2
 4000324:	400dcd40 	call	400dcd4 <__mulsi3>
 4000328:	8085883a 	add	r2,r16,r2
 400032c:	10800584 	addi	r2,r2,22
 4000330:	10800003 	ldbu	r2,0(r2)
 4000334:	10803fcc 	andi	r2,r2,255
 4000338:	100f883a 	mov	r7,r2
 400033c:	980d883a 	mov	r6,r19
 4000340:	900b883a 	mov	r5,r18
 4000344:	8809883a 	mov	r4,r17
 4000348:	400a0940 	call	400a094 <setColorPalette>
	printf("initializing MAX3421E...\n");
	MAX3421E_init();
	printf("initializing USB...\n");
	USB_init();
	clearScreen(); //initialize screen
	for (int i = 0; i < 16; i++) //set color palette
 400034c:	e0bff817 	ldw	r2,-32(fp)
 4000350:	10800044 	addi	r2,r2,1
 4000354:	e0bff815 	stw	r2,-32(fp)
 4000358:	e0bff817 	ldw	r2,-32(fp)
 400035c:	10800410 	cmplti	r2,r2,16
 4000360:	103fd51e 	bne	r2,zero,40002b8 <__alt_mem_onchip_memory2_0+0xfbffb0f8>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	highscore = 0; //initialize high score
 4000364:	d027fb15 	stw	zero,-24596(gp)
	for(int i = 0; i < 3; i++){ //initialize high scorer
 4000368:	e03ff915 	stw	zero,-28(fp)
 400036c:	00000706 	br	400038c <main+0x120>
		scorer[i] = 0;
 4000370:	e0fff917 	ldw	r3,-28(fp)
 4000374:	d0a7fa04 	addi	r2,gp,-24600
 4000378:	1885883a 	add	r2,r3,r2
 400037c:	10000005 	stb	zero,0(r2)
	for (int i = 0; i < 16; i++) //set color palette
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
	}
	highscore = 0; //initialize high score
	for(int i = 0; i < 3; i++){ //initialize high scorer
 4000380:	e0bff917 	ldw	r2,-28(fp)
 4000384:	10800044 	addi	r2,r2,1
 4000388:	e0bff915 	stw	r2,-28(fp)
 400038c:	e0bff917 	ldw	r2,-28(fp)
 4000390:	108000d0 	cmplti	r2,r2,3
 4000394:	103ff61e 	bne	r2,zero,4000370 <__alt_mem_onchip_memory2_0+0xfbffb1b0>
		scorer[i] = 0;
	}
	while(1){ //run game
		drawHighScore(); //draw high score on title screen
 4000398:	400af740 	call	400af74 <drawHighScore>
		startScreen(); //show title screen
 400039c:	400a19c0 	call	400a19c <startScreen>
		int startLv = chooseLevel(); //run level select
 40003a0:	400ac480 	call	400ac48 <chooseLevel>
 40003a4:	e0bffa15 	stw	r2,-24(fp)
		clearScreen(); //empty screen
 40003a8:	400aa700 	call	400aa70 <clearScreen>
		int score = tetris(startLv); //run game
 40003ac:	e13ffa17 	ldw	r4,-24(fp)
 40003b0:	40005680 	call	4000568 <tetris>
 40003b4:	e0bffb15 	stw	r2,-20(fp)
		endGame(); //show game over text
 40003b8:	400aadc0 	call	400aadc <endGame>
		if(score > highscore){ //update high score and allow user to enter name
 40003bc:	d0e7fb17 	ldw	r3,-24596(gp)
 40003c0:	e0bffb17 	ldw	r2,-20(fp)
 40003c4:	1880040e 	bge	r3,r2,40003d8 <main+0x16c>
			highscore = score;
 40003c8:	e0bffb17 	ldw	r2,-20(fp)
 40003cc:	d0a7fb15 	stw	r2,-24596(gp)
			clearScreen();
 40003d0:	400aa700 	call	400aa70 <clearScreen>
			enterHighScore();
 40003d4:	400b2880 	call	400b288 <enterHighScore>
		}
		clearScreen(); //return to title screen
 40003d8:	400aa700 	call	400aa70 <clearScreen>
	}
 40003dc:	003fee06 	br	4000398 <__alt_mem_onchip_memory2_0+0xfbffb1d8>

040003e0 <dropIBlock>:
//O block: -4
//S-block: -5
//T block: -6
//Z block: -7

void dropIBlock() {
 40003e0:	defffe04 	addi	sp,sp,-8
 40003e4:	dfc00115 	stw	ra,4(sp)
 40003e8:	df000015 	stw	fp,0(sp)
 40003ec:	d839883a 	mov	fp,sp
	draw2(3,0,-1);
 40003f0:	01bfffc4 	movi	r6,-1
 40003f4:	000b883a 	mov	r5,zero
 40003f8:	010000c4 	movi	r4,3
 40003fc:	400691c0 	call	400691c <draw2>
}
 4000400:	0001883a 	nop
 4000404:	e037883a 	mov	sp,fp
 4000408:	dfc00117 	ldw	ra,4(sp)
 400040c:	df000017 	ldw	fp,0(sp)
 4000410:	dec00204 	addi	sp,sp,8
 4000414:	f800283a 	ret

04000418 <dropJBlock>:

void dropJBlock() {
 4000418:	defffe04 	addi	sp,sp,-8
 400041c:	dfc00115 	stw	ra,4(sp)
 4000420:	df000015 	stw	fp,0(sp)
 4000424:	d839883a 	mov	fp,sp
	draw5(3,0,-2);
 4000428:	01bfff84 	movi	r6,-2
 400042c:	000b883a 	mov	r5,zero
 4000430:	010000c4 	movi	r4,3
 4000434:	4006bc80 	call	4006bc8 <draw5>
}
 4000438:	0001883a 	nop
 400043c:	e037883a 	mov	sp,fp
 4000440:	dfc00117 	ldw	ra,4(sp)
 4000444:	df000017 	ldw	fp,0(sp)
 4000448:	dec00204 	addi	sp,sp,8
 400044c:	f800283a 	ret

04000450 <dropLBlock>:

void dropLBlock() {
 4000450:	defffe04 	addi	sp,sp,-8
 4000454:	dfc00115 	stw	ra,4(sp)
 4000458:	df000015 	stw	fp,0(sp)
 400045c:	d839883a 	mov	fp,sp
	draw11(3,0,-3);
 4000460:	01bfff44 	movi	r6,-3
 4000464:	000b883a 	mov	r5,zero
 4000468:	010000c4 	movi	r4,3
 400046c:	40070ec0 	call	40070ec <draw11>
}
 4000470:	0001883a 	nop
 4000474:	e037883a 	mov	sp,fp
 4000478:	dfc00117 	ldw	ra,4(sp)
 400047c:	df000017 	ldw	fp,0(sp)
 4000480:	dec00204 	addi	sp,sp,8
 4000484:	f800283a 	ret

04000488 <dropOBlock>:

void dropOBlock() {
 4000488:	defffe04 	addi	sp,sp,-8
 400048c:	dfc00115 	stw	ra,4(sp)
 4000490:	df000015 	stw	fp,0(sp)
 4000494:	d839883a 	mov	fp,sp
	draw3(4,0,-4);
 4000498:	01bfff04 	movi	r6,-4
 400049c:	000b883a 	mov	r5,zero
 40004a0:	01000104 	movi	r4,4
 40004a4:	40069c00 	call	40069c0 <draw3>
}
 40004a8:	0001883a 	nop
 40004ac:	e037883a 	mov	sp,fp
 40004b0:	dfc00117 	ldw	ra,4(sp)
 40004b4:	df000017 	ldw	fp,0(sp)
 40004b8:	dec00204 	addi	sp,sp,8
 40004bc:	f800283a 	ret

040004c0 <dropSBlock>:

void dropSBlock() {
 40004c0:	defffe04 	addi	sp,sp,-8
 40004c4:	dfc00115 	stw	ra,4(sp)
 40004c8:	df000015 	stw	fp,0(sp)
 40004cc:	d839883a 	mov	fp,sp
	draw13(3,0,-5);
 40004d0:	01bffec4 	movi	r6,-5
 40004d4:	000b883a 	mov	r5,zero
 40004d8:	010000c4 	movi	r4,3
 40004dc:	40073000 	call	4007300 <draw13>
}
 40004e0:	0001883a 	nop
 40004e4:	e037883a 	mov	sp,fp
 40004e8:	dfc00117 	ldw	ra,4(sp)
 40004ec:	df000017 	ldw	fp,0(sp)
 40004f0:	dec00204 	addi	sp,sp,8
 40004f4:	f800283a 	ret

040004f8 <dropTBlock>:

void dropTBlock() {
 40004f8:	defffe04 	addi	sp,sp,-8
 40004fc:	dfc00115 	stw	ra,4(sp)
 4000500:	df000015 	stw	fp,0(sp)
 4000504:	d839883a 	mov	fp,sp
	draw15(3,0,-6);
 4000508:	01bffe84 	movi	r6,-6
 400050c:	000b883a 	mov	r5,zero
 4000510:	010000c4 	movi	r4,3
 4000514:	400750c0 	call	400750c <draw15>
}
 4000518:	0001883a 	nop
 400051c:	e037883a 	mov	sp,fp
 4000520:	dfc00117 	ldw	ra,4(sp)
 4000524:	df000017 	ldw	fp,0(sp)
 4000528:	dec00204 	addi	sp,sp,8
 400052c:	f800283a 	ret

04000530 <dropZBlock>:

void dropZBlock() {
 4000530:	defffe04 	addi	sp,sp,-8
 4000534:	dfc00115 	stw	ra,4(sp)
 4000538:	df000015 	stw	fp,0(sp)
 400053c:	d839883a 	mov	fp,sp
	draw19(3,0,-7);
 4000540:	01bffe44 	movi	r6,-7
 4000544:	000b883a 	mov	r5,zero
 4000548:	010000c4 	movi	r4,3
 400054c:	40078d80 	call	40078d8 <draw19>
}
 4000550:	0001883a 	nop
 4000554:	e037883a 	mov	sp,fp
 4000558:	dfc00117 	ldw	ra,4(sp)
 400055c:	df000017 	ldw	fp,0(sp)
 4000560:	dec00204 	addi	sp,sp,8
 4000564:	f800283a 	ret

04000568 <tetris>:

int tetris(int startLevel) {
 4000568:	deffa004 	addi	sp,sp,-384
 400056c:	dfc05f15 	stw	ra,380(sp)
 4000570:	df005e15 	stw	fp,376(sp)
 4000574:	dc005d15 	stw	r16,372(sp)
 4000578:	df005e04 	addi	fp,sp,376
 400057c:	e13ffe15 	stw	r4,-8(fp)
	srand(time(0)); //random seed based on time
 4000580:	0009883a 	mov	r4,zero
 4000584:	400ff780 	call	400ff78 <time>
 4000588:	1009883a 	mov	r4,r2
 400058c:	400fe640 	call	400fe64 <srand>
	clock_t start, end; //keep track of time used for function (from https://www.geeksforgeeks.org/how-to-measure-time-taken-by-a-program-in-c/ )
	double time;
    bool endGame = false;  //checks if game is over
 4000590:	e03fa505 	stb	zero,-364(fp)
    int prevBlock = 0; //duplicate check
 4000594:	e03fbe15 	stw	zero,-264(fp)
    int nextBlock = (rand() % 7) + 1; //random block generation
 4000598:	400fe7c0 	call	400fe7c <rand>
 400059c:	014001c4 	movi	r5,7
 40005a0:	1009883a 	mov	r4,r2
 40005a4:	400dba40 	call	400dba4 <__modsi3>
 40005a8:	10800044 	addi	r2,r2,1
 40005ac:	e0bfa615 	stw	r2,-360(fp)
    int currBlock = 0;
 40005b0:	e03fa715 	stw	zero,-356(fp)
    int level = startLevel;
 40005b4:	e0bffe17 	ldw	r2,-8(fp)
 40005b8:	e0bfa815 	stw	r2,-352(fp)
    int frameDelay[19] = {24, 22, 20, 18, 16, 14, 12, 10, 8, 6, 4, 4, 4, 3, 3, 3, 2, 2, 2}; //value to adjust speed of block drop
 40005bc:	008100b4 	movhi	r2,1026
 40005c0:	10b6bb04 	addi	r2,r2,-9492
 40005c4:	e0ffc404 	addi	r3,fp,-240
 40005c8:	1009883a 	mov	r4,r2
 40005cc:	00801304 	movi	r2,76
 40005d0:	100d883a 	mov	r6,r2
 40005d4:	200b883a 	mov	r5,r4
 40005d8:	1809883a 	mov	r4,r3
 40005dc:	400fbdc0 	call	400fbdc <memcpy>
    int softDrop[19] = {12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 2, 2, 1, 1, 1, 1, 1, 1}; //softDrop speed by level
 40005e0:	008100b4 	movhi	r2,1026
 40005e4:	10b6ce04 	addi	r2,r2,-9416
 40005e8:	e0ffd704 	addi	r3,fp,-164
 40005ec:	1009883a 	mov	r4,r2
 40005f0:	00801304 	movi	r2,76
 40005f4:	100d883a 	mov	r6,r2
 40005f8:	200b883a 	mov	r5,r4
 40005fc:	1809883a 	mov	r4,r3
 4000600:	400fbdc0 	call	400fbdc <memcpy>
    int SDC; //soft drop frame counter
    int color1[10] = {1, 2, 5, 1, 12, 10, 4, 1, 9, 4}; //level color palette sets
 4000604:	00800044 	movi	r2,1
 4000608:	e0bfea15 	stw	r2,-88(fp)
 400060c:	00800084 	movi	r2,2
 4000610:	e0bfeb15 	stw	r2,-84(fp)
 4000614:	00800144 	movi	r2,5
 4000618:	e0bfec15 	stw	r2,-80(fp)
 400061c:	00800044 	movi	r2,1
 4000620:	e0bfed15 	stw	r2,-76(fp)
 4000624:	00800304 	movi	r2,12
 4000628:	e0bfee15 	stw	r2,-72(fp)
 400062c:	00800284 	movi	r2,10
 4000630:	e0bfef15 	stw	r2,-68(fp)
 4000634:	00800104 	movi	r2,4
 4000638:	e0bff015 	stw	r2,-64(fp)
 400063c:	00800044 	movi	r2,1
 4000640:	e0bff115 	stw	r2,-60(fp)
 4000644:	00800244 	movi	r2,9
 4000648:	e0bff215 	stw	r2,-56(fp)
 400064c:	00800104 	movi	r2,4
 4000650:	e0bff315 	stw	r2,-52(fp)
    int color2[10] = {5, 10, 13, 2, 10, 9, 8, 4, 12, 14};
 4000654:	00800144 	movi	r2,5
 4000658:	e0bff415 	stw	r2,-48(fp)
 400065c:	00800284 	movi	r2,10
 4000660:	e0bff515 	stw	r2,-44(fp)
 4000664:	00800344 	movi	r2,13
 4000668:	e0bff615 	stw	r2,-40(fp)
 400066c:	00800084 	movi	r2,2
 4000670:	e0bff715 	stw	r2,-36(fp)
 4000674:	00800284 	movi	r2,10
 4000678:	e0bff815 	stw	r2,-32(fp)
 400067c:	00800244 	movi	r2,9
 4000680:	e0bff915 	stw	r2,-28(fp)
 4000684:	00800204 	movi	r2,8
 4000688:	e0bffa15 	stw	r2,-24(fp)
 400068c:	00800104 	movi	r2,4
 4000690:	e0bffb15 	stw	r2,-20(fp)
 4000694:	00800304 	movi	r2,12
 4000698:	e0bffc15 	stw	r2,-16(fp)
 400069c:	00800384 	movi	r2,14
 40006a0:	e0bffd15 	stw	r2,-12(fp)
    int frame = 0; //current frame value for block drop
 40006a4:	e03faa15 	stw	zero,-344(fp)
    bool newBlock = true; //determine when a new block is needed
 40006a8:	00800044 	movi	r2,1
 40006ac:	e0bfab05 	stb	r2,-340(fp)
    int prevKey = 0; //key pressed in previous frame
 40006b0:	e03fac15 	stw	zero,-336(fp)
    int DAS = 6; //held key move delay
 40006b4:	00800184 	movi	r2,6
 40006b8:	e0bfad15 	stw	r2,-332(fp)
    int blockState = 0; //index of block state (all states shown here: https://harddrop.com/w/images/0/07/NESTetris-pieces.png )
 40006bc:	e03fae15 	stw	zero,-328(fp)
    int Y = 0; //falling block top left corner x coord
 40006c0:	e03faf15 	stw	zero,-324(fp)
    int X = 0; //falling block top left corner y coord
 40006c4:	e03fb015 	stw	zero,-320(fp)
	int score = 0;
 40006c8:	e03fb115 	stw	zero,-316(fp)
	int lineCount = 0; //overall line counter
 40006cc:	e03fb215 	stw	zero,-312(fp)
	int levelLines = 0; //line counter for level up
 40006d0:	e03fb315 	stw	zero,-308(fp)
	int I = 0; //piece counters for stats
 40006d4:	e03fb415 	stw	zero,-304(fp)
	int J = 0;
 40006d8:	e03fb515 	stw	zero,-300(fp)
	int L = 0;
 40006dc:	e03fb615 	stw	zero,-296(fp)
	int O = 0;
 40006e0:	e03fb715 	stw	zero,-292(fp)
	int S = 0;
 40006e4:	e03fb815 	stw	zero,-288(fp)
	int T = 0;
 40006e8:	e03fb915 	stw	zero,-284(fp)
	int Z = 0;
 40006ec:	e03fba15 	stw	zero,-280(fp)
	for(int i = 0; i < 20; i++){
 40006f0:	e03fbb15 	stw	zero,-276(fp)
 40006f4:	00001806 	br	4000758 <tetris+0x1f0>
		for(int j = 0; j < 10; j++){
 40006f8:	e03fbc15 	stw	zero,-272(fp)
 40006fc:	00001006 	br	4000740 <tetris+0x1d8>
			gameBoard[i][j] = 0;
 4000700:	040100b4 	movhi	r16,1026
 4000704:	84080004 	addi	r16,r16,8192
 4000708:	e0bfbb17 	ldw	r2,-276(fp)
 400070c:	01400284 	movi	r5,10
 4000710:	1009883a 	mov	r4,r2
 4000714:	400dcd40 	call	400dcd4 <__mulsi3>
 4000718:	1007883a 	mov	r3,r2
 400071c:	e0bfbc17 	ldw	r2,-272(fp)
 4000720:	1885883a 	add	r2,r3,r2
 4000724:	1085883a 	add	r2,r2,r2
 4000728:	1085883a 	add	r2,r2,r2
 400072c:	8085883a 	add	r2,r16,r2
 4000730:	10000015 	stw	zero,0(r2)
	int O = 0;
	int S = 0;
	int T = 0;
	int Z = 0;
	for(int i = 0; i < 20; i++){
		for(int j = 0; j < 10; j++){
 4000734:	e0bfbc17 	ldw	r2,-272(fp)
 4000738:	10800044 	addi	r2,r2,1
 400073c:	e0bfbc15 	stw	r2,-272(fp)
 4000740:	e0bfbc17 	ldw	r2,-272(fp)
 4000744:	10800290 	cmplti	r2,r2,10
 4000748:	103fed1e 	bne	r2,zero,4000700 <__alt_mem_onchip_memory2_0+0xfbffb540>
	int L = 0;
	int O = 0;
	int S = 0;
	int T = 0;
	int Z = 0;
	for(int i = 0; i < 20; i++){
 400074c:	e0bfbb17 	ldw	r2,-276(fp)
 4000750:	10800044 	addi	r2,r2,1
 4000754:	e0bfbb15 	stw	r2,-276(fp)
 4000758:	e0bfbb17 	ldw	r2,-276(fp)
 400075c:	10800510 	cmplti	r2,r2,20
 4000760:	103fe51e 	bne	r2,zero,40006f8 <__alt_mem_onchip_memory2_0+0xfbffb538>
		for(int j = 0; j < 10; j++){
			gameBoard[i][j] = 0;
		}
	}
	drawGrid(11, 0, 15);
 4000764:	018003c4 	movi	r6,15
 4000768:	000b883a 	mov	r5,zero
 400076c:	010002c4 	movi	r4,11
 4000770:	4007a080 	call	4007a08 <drawGrid>
	drawLevel(level);
 4000774:	e13fa817 	ldw	r4,-352(fp)
 4000778:	4008cdc0 	call	4008cdc <drawLevel>
	drawLines(lineCount);
 400077c:	e13fb217 	ldw	r4,-312(fp)
 4000780:	4008e000 	call	4008e00 <drawLines>
	drawStatBlocks(color1[level % 10], 15, color2[level % 10], 15);
 4000784:	e0bfa817 	ldw	r2,-352(fp)
 4000788:	01400284 	movi	r5,10
 400078c:	1009883a 	mov	r4,r2
 4000790:	400dba40 	call	400dba4 <__modsi3>
 4000794:	1085883a 	add	r2,r2,r2
 4000798:	1085883a 	add	r2,r2,r2
 400079c:	e0ffa504 	addi	r3,fp,-364
 40007a0:	1885883a 	add	r2,r3,r2
 40007a4:	10804504 	addi	r2,r2,276
 40007a8:	10800017 	ldw	r2,0(r2)
 40007ac:	14003fcc 	andi	r16,r2,255
 40007b0:	e0bfa817 	ldw	r2,-352(fp)
 40007b4:	01400284 	movi	r5,10
 40007b8:	1009883a 	mov	r4,r2
 40007bc:	400dba40 	call	400dba4 <__modsi3>
 40007c0:	1085883a 	add	r2,r2,r2
 40007c4:	1085883a 	add	r2,r2,r2
 40007c8:	e0ffa504 	addi	r3,fp,-364
 40007cc:	1885883a 	add	r2,r3,r2
 40007d0:	10804f04 	addi	r2,r2,316
 40007d4:	10800017 	ldw	r2,0(r2)
 40007d8:	10803fcc 	andi	r2,r2,255
 40007dc:	01c003c4 	movi	r7,15
 40007e0:	100d883a 	mov	r6,r2
 40007e4:	014003c4 	movi	r5,15
 40007e8:	8009883a 	mov	r4,r16
 40007ec:	400935c0 	call	400935c <drawStatBlocks>
    while(!endGame) {  //runs while game not over
 40007f0:	00024f06 	br	4001130 <tetris+0xbc8>
    	start = clock();
 40007f4:	400fb900 	call	400fb90 <clock>
 40007f8:	e0bfbf15 	stw	r2,-260(fp)
    	keycode = keyboardDriver(keycode); //get new keypress
 40007fc:	d0a7f917 	ldw	r2,-24604(gp)
 4000800:	1009883a 	mov	r4,r2
 4000804:	400ba780 	call	400ba78 <keyboardDriver>
 4000808:	d0a7f915 	stw	r2,-24604(gp)
    	//spawn new block
    	if(newBlock){
 400080c:	e0bfab03 	ldbu	r2,-340(fp)
 4000810:	10008726 	beq	r2,zero,4000a30 <tetris+0x4c8>
    		prevBlock = currBlock;
 4000814:	e0bfa717 	ldw	r2,-356(fp)
 4000818:	e0bfbe15 	stw	r2,-264(fp)
    		currBlock = nextBlock;
 400081c:	e0bfa617 	ldw	r2,-360(fp)
 4000820:	e0bfa715 	stw	r2,-356(fp)
    		nextBlock = (rand() % 7) + 1;   //generate a random number corresponding to a block
 4000824:	400fe7c0 	call	400fe7c <rand>
 4000828:	014001c4 	movi	r5,7
 400082c:	1009883a 	mov	r4,r2
 4000830:	400dba40 	call	400dba4 <__modsi3>
 4000834:	10800044 	addi	r2,r2,1
 4000838:	e0bfa615 	stw	r2,-360(fp)
    		//reroll if block is same as previous, biases against repeat blocks but does not prevent them
    		if(nextBlock == prevBlock){
 400083c:	e0ffa617 	ldw	r3,-360(fp)
 4000840:	e0bfbe17 	ldw	r2,-264(fp)
 4000844:	1880061e 	bne	r3,r2,4000860 <tetris+0x2f8>
    			nextBlock = (rand() % 7) + 1;
 4000848:	400fe7c0 	call	400fe7c <rand>
 400084c:	014001c4 	movi	r5,7
 4000850:	1009883a 	mov	r4,r2
 4000854:	400dba40 	call	400dba4 <__modsi3>
 4000858:	10800044 	addi	r2,r2,1
 400085c:	e0bfa615 	stw	r2,-360(fp)
    		}
    		drawNext(0, 0, 0, 0, 0);
 4000860:	d8000015 	stw	zero,0(sp)
 4000864:	000f883a 	mov	r7,zero
 4000868:	000d883a 	mov	r6,zero
 400086c:	000b883a 	mov	r5,zero
 4000870:	0009883a 	mov	r4,zero
 4000874:	40097fc0 	call	40097fc <drawNext>
    		drawNext(nextBlock, color1[level % 10], 15, color2[level % 10], 15);
 4000878:	e0bfa817 	ldw	r2,-352(fp)
 400087c:	01400284 	movi	r5,10
 4000880:	1009883a 	mov	r4,r2
 4000884:	400dba40 	call	400dba4 <__modsi3>
 4000888:	1085883a 	add	r2,r2,r2
 400088c:	1085883a 	add	r2,r2,r2
 4000890:	e0ffa504 	addi	r3,fp,-364
 4000894:	1885883a 	add	r2,r3,r2
 4000898:	10804504 	addi	r2,r2,276
 400089c:	10800017 	ldw	r2,0(r2)
 40008a0:	14003fcc 	andi	r16,r2,255
 40008a4:	e0bfa817 	ldw	r2,-352(fp)
 40008a8:	01400284 	movi	r5,10
 40008ac:	1009883a 	mov	r4,r2
 40008b0:	400dba40 	call	400dba4 <__modsi3>
 40008b4:	1085883a 	add	r2,r2,r2
 40008b8:	1085883a 	add	r2,r2,r2
 40008bc:	e0ffa504 	addi	r3,fp,-364
 40008c0:	1885883a 	add	r2,r3,r2
 40008c4:	10804f04 	addi	r2,r2,316
 40008c8:	10800017 	ldw	r2,0(r2)
 40008cc:	10c03fcc 	andi	r3,r2,255
 40008d0:	008003c4 	movi	r2,15
 40008d4:	d8800015 	stw	r2,0(sp)
 40008d8:	180f883a 	mov	r7,r3
 40008dc:	018003c4 	movi	r6,15
 40008e0:	800b883a 	mov	r5,r16
 40008e4:	e13fa617 	ldw	r4,-360(fp)
 40008e8:	40097fc0 	call	40097fc <drawNext>
    		spawnBlock(currBlock);
 40008ec:	e13fa717 	ldw	r4,-356(fp)
 40008f0:	40011980 	call	4001198 <spawnBlock>
    		Y = 0;
 40008f4:	e03faf15 	stw	zero,-324(fp)
    		X = 3;
 40008f8:	008000c4 	movi	r2,3
 40008fc:	e0bfb015 	stw	r2,-320(fp)
    		switch(currBlock){
 4000900:	e0bfa717 	ldw	r2,-356(fp)
 4000904:	10800228 	cmpgeui	r2,r2,8
 4000908:	10003b1e 	bne	r2,zero,40009f8 <tetris+0x490>
 400090c:	e0bfa717 	ldw	r2,-356(fp)
 4000910:	100690ba 	slli	r3,r2,2
 4000914:	00810034 	movhi	r2,1024
 4000918:	10824a04 	addi	r2,r2,2344
 400091c:	1885883a 	add	r2,r3,r2
 4000920:	10800017 	ldw	r2,0(r2)
 4000924:	1000683a 	jmp	r2
 4000928:	040009f8 	rdprs	r16,zero,39
 400092c:	04000948 	cmpgei	r16,zero,37
 4000930:	04000960 	cmpeqi	r16,zero,37
 4000934:	04000978 	rdprs	r16,zero,37
 4000938:	04000990 	cmplti	r16,zero,38
 400093c:	040009b0 	cmpltui	r16,zero,38
 4000940:	040009c8 	cmpgei	r16,zero,39
 4000944:	040009e0 	cmpeqi	r16,zero,39
    		case 1:
    			I++;
 4000948:	e0bfb417 	ldw	r2,-304(fp)
 400094c:	10800044 	addi	r2,r2,1
 4000950:	e0bfb415 	stw	r2,-304(fp)
    			blockState = 2;
 4000954:	00800084 	movi	r2,2
 4000958:	e0bfae15 	stw	r2,-328(fp)
    			break;
 400095c:	00002806 	br	4000a00 <tetris+0x498>
    		case 2:
    			J++;
 4000960:	e0bfb517 	ldw	r2,-300(fp)
 4000964:	10800044 	addi	r2,r2,1
 4000968:	e0bfb515 	stw	r2,-300(fp)
    			blockState = 5;
 400096c:	00800144 	movi	r2,5
 4000970:	e0bfae15 	stw	r2,-328(fp)
    			break;
 4000974:	00002206 	br	4000a00 <tetris+0x498>
    		case 3:
    			L++;
 4000978:	e0bfb617 	ldw	r2,-296(fp)
 400097c:	10800044 	addi	r2,r2,1
 4000980:	e0bfb615 	stw	r2,-296(fp)
    			blockState = 11;
 4000984:	008002c4 	movi	r2,11
 4000988:	e0bfae15 	stw	r2,-328(fp)
    			break;
 400098c:	00001c06 	br	4000a00 <tetris+0x498>
    		case 4:
    			O++;
 4000990:	e0bfb717 	ldw	r2,-292(fp)
 4000994:	10800044 	addi	r2,r2,1
 4000998:	e0bfb715 	stw	r2,-292(fp)
    			blockState = 3;
 400099c:	008000c4 	movi	r2,3
 40009a0:	e0bfae15 	stw	r2,-328(fp)
    			X = 4;
 40009a4:	00800104 	movi	r2,4
 40009a8:	e0bfb015 	stw	r2,-320(fp)
    			break;
 40009ac:	00001406 	br	4000a00 <tetris+0x498>
    		case 5:
    			S++;
 40009b0:	e0bfb817 	ldw	r2,-288(fp)
 40009b4:	10800044 	addi	r2,r2,1
 40009b8:	e0bfb815 	stw	r2,-288(fp)
    			blockState = 13;
 40009bc:	00800344 	movi	r2,13
 40009c0:	e0bfae15 	stw	r2,-328(fp)
    			break;
 40009c4:	00000e06 	br	4000a00 <tetris+0x498>
    		case 6:
    			T++;
 40009c8:	e0bfb917 	ldw	r2,-284(fp)
 40009cc:	10800044 	addi	r2,r2,1
 40009d0:	e0bfb915 	stw	r2,-284(fp)
    			blockState = 15;
 40009d4:	008003c4 	movi	r2,15
 40009d8:	e0bfae15 	stw	r2,-328(fp)
    			break;
 40009dc:	00000806 	br	4000a00 <tetris+0x498>
    		case 7:
    			Z++;
 40009e0:	e0bfba17 	ldw	r2,-280(fp)
 40009e4:	10800044 	addi	r2,r2,1
 40009e8:	e0bfba15 	stw	r2,-280(fp)
    			blockState = 19;
 40009ec:	008004c4 	movi	r2,19
 40009f0:	e0bfae15 	stw	r2,-328(fp)
    			break;
 40009f4:	00000206 	br	4000a00 <tetris+0x498>
    		default:
    			blockState = 0;
 40009f8:	e03fae15 	stw	zero,-328(fp)
    			break;
 40009fc:	0001883a 	nop
    		}
    		drawStats(T, J, Z, O, S, L, I);
 4000a00:	e0bfb417 	ldw	r2,-304(fp)
 4000a04:	d8800215 	stw	r2,8(sp)
 4000a08:	e0bfb617 	ldw	r2,-296(fp)
 4000a0c:	d8800115 	stw	r2,4(sp)
 4000a10:	e0bfb817 	ldw	r2,-288(fp)
 4000a14:	d8800015 	stw	r2,0(sp)
 4000a18:	e1ffb717 	ldw	r7,-292(fp)
 4000a1c:	e1bfba17 	ldw	r6,-280(fp)
 4000a20:	e17fb517 	ldw	r5,-300(fp)
 4000a24:	e13fb917 	ldw	r4,-284(fp)
 4000a28:	4009d840 	call	4009d84 <drawStats>
    		newBlock = false;
 4000a2c:	e03fab05 	stb	zero,-340(fp)
    	}
    	//handle keyboard movement
    	if(keycode == 80 && prevKey == 80){ //movement left if key is held
 4000a30:	d0a7f917 	ldw	r2,-24604(gp)
 4000a34:	10801418 	cmpnei	r2,r2,80
 4000a38:	1000141e 	bne	r2,zero,4000a8c <tetris+0x524>
 4000a3c:	e0bfac17 	ldw	r2,-336(fp)
 4000a40:	10801418 	cmpnei	r2,r2,80
 4000a44:	1000111e 	bne	r2,zero,4000a8c <tetris+0x524>
    		if(DAS == 0){
 4000a48:	e0bfad17 	ldw	r2,-332(fp)
 4000a4c:	10000b1e 	bne	r2,zero,4000a7c <tetris+0x514>
    			if(shiftLeft(blockState, X, Y)){
 4000a50:	e1bfaf17 	ldw	r6,-324(fp)
 4000a54:	e17fb017 	ldw	r5,-320(fp)
 4000a58:	e13fae17 	ldw	r4,-328(fp)
 4000a5c:	40012480 	call	4001248 <shiftLeft>
 4000a60:	10803fcc 	andi	r2,r2,255
 4000a64:	10000326 	beq	r2,zero,4000a74 <tetris+0x50c>
    				X -= 1;
 4000a68:	e0bfb017 	ldw	r2,-320(fp)
 4000a6c:	10bfffc4 	addi	r2,r2,-1
 4000a70:	e0bfb015 	stw	r2,-320(fp)
    			}
    			DAS = 3;
 4000a74:	008000c4 	movi	r2,3
 4000a78:	e0bfad15 	stw	r2,-332(fp)
    		}
    		DAS--;
 4000a7c:	e0bfad17 	ldw	r2,-332(fp)
 4000a80:	10bfffc4 	addi	r2,r2,-1
 4000a84:	e0bfad15 	stw	r2,-332(fp)
 4000a88:	0000ab06 	br	4000d38 <tetris+0x7d0>
    	}
    	else if(keycode == 80){ //movement when left key pressed
 4000a8c:	d0a7f917 	ldw	r2,-24604(gp)
 4000a90:	10801418 	cmpnei	r2,r2,80
 4000a94:	10000c1e 	bne	r2,zero,4000ac8 <tetris+0x560>
			if(shiftLeft(blockState, X, Y)){
 4000a98:	e1bfaf17 	ldw	r6,-324(fp)
 4000a9c:	e17fb017 	ldw	r5,-320(fp)
 4000aa0:	e13fae17 	ldw	r4,-328(fp)
 4000aa4:	40012480 	call	4001248 <shiftLeft>
 4000aa8:	10803fcc 	andi	r2,r2,255
 4000aac:	10000326 	beq	r2,zero,4000abc <tetris+0x554>
				X -= 1;
 4000ab0:	e0bfb017 	ldw	r2,-320(fp)
 4000ab4:	10bfffc4 	addi	r2,r2,-1
 4000ab8:	e0bfb015 	stw	r2,-320(fp)
			}
    		prevKey = 80;
 4000abc:	00801404 	movi	r2,80
 4000ac0:	e0bfac15 	stw	r2,-336(fp)
 4000ac4:	00009c06 	br	4000d38 <tetris+0x7d0>
    	}
    	else if(keycode == 79 && prevKey == 79){ // movement right if key is held
 4000ac8:	d0a7f917 	ldw	r2,-24604(gp)
 4000acc:	108013d8 	cmpnei	r2,r2,79
 4000ad0:	1000141e 	bne	r2,zero,4000b24 <tetris+0x5bc>
 4000ad4:	e0bfac17 	ldw	r2,-336(fp)
 4000ad8:	108013d8 	cmpnei	r2,r2,79
 4000adc:	1000111e 	bne	r2,zero,4000b24 <tetris+0x5bc>
    		if(DAS == 0){
 4000ae0:	e0bfad17 	ldw	r2,-332(fp)
 4000ae4:	10000b1e 	bne	r2,zero,4000b14 <tetris+0x5ac>
    			if(shiftRight(blockState, X, Y)){
 4000ae8:	e1bfaf17 	ldw	r6,-324(fp)
 4000aec:	e17fb017 	ldw	r5,-320(fp)
 4000af0:	e13fae17 	ldw	r4,-328(fp)
 4000af4:	40022840 	call	4002284 <shiftRight>
 4000af8:	10803fcc 	andi	r2,r2,255
 4000afc:	10000326 	beq	r2,zero,4000b0c <tetris+0x5a4>
    				X += 1;
 4000b00:	e0bfb017 	ldw	r2,-320(fp)
 4000b04:	10800044 	addi	r2,r2,1
 4000b08:	e0bfb015 	stw	r2,-320(fp)
    			}
    			DAS = 3;
 4000b0c:	008000c4 	movi	r2,3
 4000b10:	e0bfad15 	stw	r2,-332(fp)
    		}
    		DAS--;
 4000b14:	e0bfad17 	ldw	r2,-332(fp)
 4000b18:	10bfffc4 	addi	r2,r2,-1
 4000b1c:	e0bfad15 	stw	r2,-332(fp)
 4000b20:	00008506 	br	4000d38 <tetris+0x7d0>
    	}
    	else if (keycode == 79){ //movement when right key pressed
 4000b24:	d0a7f917 	ldw	r2,-24604(gp)
 4000b28:	108013d8 	cmpnei	r2,r2,79
 4000b2c:	10000c1e 	bne	r2,zero,4000b60 <tetris+0x5f8>
			if(shiftRight(blockState, X, Y)){
 4000b30:	e1bfaf17 	ldw	r6,-324(fp)
 4000b34:	e17fb017 	ldw	r5,-320(fp)
 4000b38:	e13fae17 	ldw	r4,-328(fp)
 4000b3c:	40022840 	call	4002284 <shiftRight>
 4000b40:	10803fcc 	andi	r2,r2,255
 4000b44:	10000326 	beq	r2,zero,4000b54 <tetris+0x5ec>
				X += 1;
 4000b48:	e0bfb017 	ldw	r2,-320(fp)
 4000b4c:	10800044 	addi	r2,r2,1
 4000b50:	e0bfb015 	stw	r2,-320(fp)
			}
    		prevKey = 79;
 4000b54:	008013c4 	movi	r2,79
 4000b58:	e0bfac15 	stw	r2,-336(fp)
 4000b5c:	00007606 	br	4000d38 <tetris+0x7d0>
    	}
    	else if(keycode == 81 && prevKey == 81){ //soft drop when down key pressed
 4000b60:	d0a7f917 	ldw	r2,-24604(gp)
 4000b64:	10801458 	cmpnei	r2,r2,81
 4000b68:	1000261e 	bne	r2,zero,4000c04 <tetris+0x69c>
 4000b6c:	e0bfac17 	ldw	r2,-336(fp)
 4000b70:	10801458 	cmpnei	r2,r2,81
 4000b74:	1000231e 	bne	r2,zero,4000c04 <tetris+0x69c>
    		if(SDC == 0){
 4000b78:	e0bfa917 	ldw	r2,-348(fp)
 4000b7c:	10001d1e 	bne	r2,zero,4000bf4 <tetris+0x68c>
    			score += 1; //1 point per tile soft dropped
 4000b80:	e0bfb117 	ldw	r2,-316(fp)
 4000b84:	10800044 	addi	r2,r2,1
 4000b88:	e0bfb115 	stw	r2,-316(fp)
    			newBlock = drop(blockState, X, Y);
 4000b8c:	e1bfaf17 	ldw	r6,-324(fp)
 4000b90:	e17fb017 	ldw	r5,-320(fp)
 4000b94:	e13fae17 	ldw	r4,-328(fp)
 4000b98:	40031c00 	call	40031c0 <drop>
 4000b9c:	e0bfab05 	stb	r2,-340(fp)
				if(!newBlock){
 4000ba0:	e0bfab03 	ldbu	r2,-340(fp)
 4000ba4:	1080005c 	xori	r2,r2,1
 4000ba8:	10803fcc 	andi	r2,r2,255
 4000bac:	10000326 	beq	r2,zero,4000bbc <tetris+0x654>
					Y += 1;
 4000bb0:	e0bfaf17 	ldw	r2,-324(fp)
 4000bb4:	10800044 	addi	r2,r2,1
 4000bb8:	e0bfaf15 	stw	r2,-324(fp)
				}
    			if(level < 19){
 4000bbc:	e0bfa817 	ldw	r2,-352(fp)
 4000bc0:	108004c8 	cmpgei	r2,r2,19
 4000bc4:	10000a1e 	bne	r2,zero,4000bf0 <tetris+0x688>
    				SDC = softDrop[level] + 1; //soft drop moves at double normal drop speed
 4000bc8:	e0bfa817 	ldw	r2,-352(fp)
 4000bcc:	1085883a 	add	r2,r2,r2
 4000bd0:	1085883a 	add	r2,r2,r2
 4000bd4:	e0ffa504 	addi	r3,fp,-364
 4000bd8:	1885883a 	add	r2,r3,r2
 4000bdc:	10803204 	addi	r2,r2,200
 4000be0:	10800017 	ldw	r2,0(r2)
 4000be4:	10800044 	addi	r2,r2,1
 4000be8:	e0bfa915 	stw	r2,-348(fp)
 4000bec:	00000106 	br	4000bf4 <tetris+0x68c>
    			}
    			else{
    				SDC = 0;
 4000bf0:	e03fa915 	stw	zero,-348(fp)
    			}
    		}
    		SDC--;
 4000bf4:	e0bfa917 	ldw	r2,-348(fp)
 4000bf8:	10bfffc4 	addi	r2,r2,-1
 4000bfc:	e0bfa915 	stw	r2,-348(fp)
 4000c00:	00004d06 	br	4000d38 <tetris+0x7d0>
    	}
    	else if(keycode == 81){
 4000c04:	d0a7f917 	ldw	r2,-24604(gp)
 4000c08:	10801458 	cmpnei	r2,r2,81
 4000c0c:	10001f1e 	bne	r2,zero,4000c8c <tetris+0x724>
    		score += 1; //1 point per tile soft dropped
 4000c10:	e0bfb117 	ldw	r2,-316(fp)
 4000c14:	10800044 	addi	r2,r2,1
 4000c18:	e0bfb115 	stw	r2,-316(fp)
    		newBlock = drop(blockState, X, Y);
 4000c1c:	e1bfaf17 	ldw	r6,-324(fp)
 4000c20:	e17fb017 	ldw	r5,-320(fp)
 4000c24:	e13fae17 	ldw	r4,-328(fp)
 4000c28:	40031c00 	call	40031c0 <drop>
 4000c2c:	e0bfab05 	stb	r2,-340(fp)
    		if(!newBlock){
 4000c30:	e0bfab03 	ldbu	r2,-340(fp)
 4000c34:	1080005c 	xori	r2,r2,1
 4000c38:	10803fcc 	andi	r2,r2,255
 4000c3c:	10000326 	beq	r2,zero,4000c4c <tetris+0x6e4>
    			Y += 1;
 4000c40:	e0bfaf17 	ldw	r2,-324(fp)
 4000c44:	10800044 	addi	r2,r2,1
 4000c48:	e0bfaf15 	stw	r2,-324(fp)
    		}
    		if(level < 19){
 4000c4c:	e0bfa817 	ldw	r2,-352(fp)
 4000c50:	108004c8 	cmpgei	r2,r2,19
 4000c54:	1000091e 	bne	r2,zero,4000c7c <tetris+0x714>
    			SDC = softDrop[level];
 4000c58:	e0bfa817 	ldw	r2,-352(fp)
 4000c5c:	1085883a 	add	r2,r2,r2
 4000c60:	1085883a 	add	r2,r2,r2
 4000c64:	e0ffa504 	addi	r3,fp,-364
 4000c68:	1885883a 	add	r2,r3,r2
 4000c6c:	10803204 	addi	r2,r2,200
 4000c70:	10800017 	ldw	r2,0(r2)
 4000c74:	e0bfa915 	stw	r2,-348(fp)
 4000c78:	00000106 	br	4000c80 <tetris+0x718>
    		}
    		else{
    			SDC = 0;
 4000c7c:	e03fa915 	stw	zero,-348(fp)
    		}
    		prevKey = 81;
 4000c80:	00801444 	movi	r2,81
 4000c84:	e0bfac15 	stw	r2,-336(fp)
 4000c88:	00002b06 	br	4000d38 <tetris+0x7d0>
    	}
    	else if(keycode == 41){
 4000c8c:	d0a7f917 	ldw	r2,-24604(gp)
 4000c90:	10800a58 	cmpnei	r2,r2,41
 4000c94:	1000181e 	bne	r2,zero,4000cf8 <tetris+0x790>
    		drawPause();
 4000c98:	400b1640 	call	400b164 <drawPause>
    		usleep(100000);
 4000c9c:	010000b4 	movhi	r4,2
 4000ca0:	2121a804 	addi	r4,r4,-31072
 4000ca4:	401b98c0 	call	401b98c <usleep>
    		keycode = keyboardDriver(keycode);
 4000ca8:	d0a7f917 	ldw	r2,-24604(gp)
 4000cac:	1009883a 	mov	r4,r2
 4000cb0:	400ba780 	call	400ba78 <keyboardDriver>
 4000cb4:	d0a7f915 	stw	r2,-24604(gp)
    		while(keycode != 41 && keycode != 40){ //enter and esc both unpause
 4000cb8:	00000406 	br	4000ccc <tetris+0x764>
    			keycode = keyboardDriver(keycode);
 4000cbc:	d0a7f917 	ldw	r2,-24604(gp)
 4000cc0:	1009883a 	mov	r4,r2
 4000cc4:	400ba780 	call	400ba78 <keyboardDriver>
 4000cc8:	d0a7f915 	stw	r2,-24604(gp)
    	}
    	else if(keycode == 41){
    		drawPause();
    		usleep(100000);
    		keycode = keyboardDriver(keycode);
    		while(keycode != 41 && keycode != 40){ //enter and esc both unpause
 4000ccc:	d0a7f917 	ldw	r2,-24604(gp)
 4000cd0:	10800a60 	cmpeqi	r2,r2,41
 4000cd4:	1000031e 	bne	r2,zero,4000ce4 <tetris+0x77c>
 4000cd8:	d0a7f917 	ldw	r2,-24604(gp)
 4000cdc:	10800a18 	cmpnei	r2,r2,40
 4000ce0:	103ff61e 	bne	r2,zero,4000cbc <__alt_mem_onchip_memory2_0+0xfbffbafc>
    			keycode = keyboardDriver(keycode);
    		}
    		unpause();
 4000ce4:	400b2140 	call	400b214 <unpause>
    		usleep(100000);
 4000ce8:	010000b4 	movhi	r4,2
 4000cec:	2121a804 	addi	r4,r4,-31072
 4000cf0:	401b98c0 	call	401b98c <usleep>
 4000cf4:	00001006 	br	4000d38 <tetris+0x7d0>
    	}
    	else{ //reset if no key pressed
    		prevKey = 0;
 4000cf8:	e03fac15 	stw	zero,-336(fp)
    		DAS = 6;
 4000cfc:	00800184 	movi	r2,6
 4000d00:	e0bfad15 	stw	r2,-332(fp)
    		if(level < 19){
 4000d04:	e0bfa817 	ldw	r2,-352(fp)
 4000d08:	108004c8 	cmpgei	r2,r2,19
 4000d0c:	1000091e 	bne	r2,zero,4000d34 <tetris+0x7cc>
    			SDC = softDrop[level];
 4000d10:	e0bfa817 	ldw	r2,-352(fp)
 4000d14:	1085883a 	add	r2,r2,r2
 4000d18:	1085883a 	add	r2,r2,r2
 4000d1c:	e0ffa504 	addi	r3,fp,-364
 4000d20:	1885883a 	add	r2,r3,r2
 4000d24:	10803204 	addi	r2,r2,200
 4000d28:	10800017 	ldw	r2,0(r2)
 4000d2c:	e0bfa915 	stw	r2,-348(fp)
 4000d30:	00000106 	br	4000d38 <tetris+0x7d0>
    		}
    		else{
    			SDC = 0;
 4000d34:	e03fa915 	stw	zero,-348(fp)
    		}
    	}

    	//handle rotation (Right-Handed Nintendo Rotation System)
    	if(keycode == 29){ //rotate left on z
 4000d38:	d0a7f917 	ldw	r2,-24604(gp)
 4000d3c:	10800758 	cmpnei	r2,r2,29
 4000d40:	1000051e 	bne	r2,zero,4000d58 <tetris+0x7f0>
    		blockState = rotateLeft(blockState, X, Y);
 4000d44:	e1bfaf17 	ldw	r6,-324(fp)
 4000d48:	e17fb017 	ldw	r5,-320(fp)
 4000d4c:	e13fae17 	ldw	r4,-328(fp)
 4000d50:	400495c0 	call	400495c <rotateLeft>
 4000d54:	e0bfae15 	stw	r2,-328(fp)
    	}
    	if(keycode == 27){ //rotate right on x
 4000d58:	d0a7f917 	ldw	r2,-24604(gp)
 4000d5c:	108006d8 	cmpnei	r2,r2,27
 4000d60:	1000051e 	bne	r2,zero,4000d78 <tetris+0x810>
    		blockState = rotateRight(blockState, X, Y);
 4000d64:	e1bfaf17 	ldw	r6,-324(fp)
 4000d68:	e17fb017 	ldw	r5,-320(fp)
 4000d6c:	e13fae17 	ldw	r4,-328(fp)
 4000d70:	40058ec0 	call	40058ec <rotateRight>
 4000d74:	e0bfae15 	stw	r2,-328(fp)
    	}

    	//handle block auto-drop
    	if(level < 19){
 4000d78:	e0bfa817 	ldw	r2,-352(fp)
 4000d7c:	108004c8 	cmpgei	r2,r2,19
 4000d80:	1000171e 	bne	r2,zero,4000de0 <tetris+0x878>
			if(frameDelay[level] == frame){
 4000d84:	e0bfa817 	ldw	r2,-352(fp)
 4000d88:	1085883a 	add	r2,r2,r2
 4000d8c:	1085883a 	add	r2,r2,r2
 4000d90:	e0ffa504 	addi	r3,fp,-364
 4000d94:	1885883a 	add	r2,r3,r2
 4000d98:	10801f04 	addi	r2,r2,124
 4000d9c:	10c00017 	ldw	r3,0(r2)
 4000da0:	e0bfaa17 	ldw	r2,-344(fp)
 4000da4:	18801e1e 	bne	r3,r2,4000e20 <tetris+0x8b8>
				newBlock = drop(blockState, X, Y);
 4000da8:	e1bfaf17 	ldw	r6,-324(fp)
 4000dac:	e17fb017 	ldw	r5,-320(fp)
 4000db0:	e13fae17 	ldw	r4,-328(fp)
 4000db4:	40031c00 	call	40031c0 <drop>
 4000db8:	e0bfab05 	stb	r2,-340(fp)
				if(!newBlock){
 4000dbc:	e0bfab03 	ldbu	r2,-340(fp)
 4000dc0:	1080005c 	xori	r2,r2,1
 4000dc4:	10803fcc 	andi	r2,r2,255
 4000dc8:	10000326 	beq	r2,zero,4000dd8 <tetris+0x870>
					Y += 1;
 4000dcc:	e0bfaf17 	ldw	r2,-324(fp)
 4000dd0:	10800044 	addi	r2,r2,1
 4000dd4:	e0bfaf15 	stw	r2,-324(fp)
				}
				frame = 0;
 4000dd8:	e03faa15 	stw	zero,-344(fp)
 4000ddc:	00001006 	br	4000e20 <tetris+0x8b8>
			}
    	}
    	else{
			if(1 == frame){
 4000de0:	e0bfaa17 	ldw	r2,-344(fp)
 4000de4:	10800058 	cmpnei	r2,r2,1
 4000de8:	10000d1e 	bne	r2,zero,4000e20 <tetris+0x8b8>
				newBlock = drop(blockState, X, Y);
 4000dec:	e1bfaf17 	ldw	r6,-324(fp)
 4000df0:	e17fb017 	ldw	r5,-320(fp)
 4000df4:	e13fae17 	ldw	r4,-328(fp)
 4000df8:	40031c00 	call	40031c0 <drop>
 4000dfc:	e0bfab05 	stb	r2,-340(fp)
				if(!newBlock){
 4000e00:	e0bfab03 	ldbu	r2,-340(fp)
 4000e04:	1080005c 	xori	r2,r2,1
 4000e08:	10803fcc 	andi	r2,r2,255
 4000e0c:	10000326 	beq	r2,zero,4000e1c <tetris+0x8b4>
					Y += 1;
 4000e10:	e0bfaf17 	ldw	r2,-324(fp)
 4000e14:	10800044 	addi	r2,r2,1
 4000e18:	e0bfaf15 	stw	r2,-324(fp)
				}
				frame = 0;
 4000e1c:	e03faa15 	stw	zero,-344(fp)
			}
    	}

    	//handle line clearing and end game
    	if(newBlock){
 4000e20:	e0bfab03 	ldbu	r2,-340(fp)
 4000e24:	10006b26 	beq	r2,zero,4000fd4 <tetris+0xa6c>
    		bool addscore = false;
 4000e28:	e03fbd05 	stb	zero,-268(fp)
    		int lines = lineClear(Y);
 4000e2c:	e13faf17 	ldw	r4,-324(fp)
 4000e30:	40044780 	call	4004478 <lineClear>
 4000e34:	e0bfc015 	stw	r2,-256(fp)
    		if(lines > 0){
 4000e38:	e0bfc017 	ldw	r2,-256(fp)
 4000e3c:	0080020e 	bge	zero,r2,4000e48 <tetris+0x8e0>
    			addscore = true;
 4000e40:	00800044 	movi	r2,1
 4000e44:	e0bfbd05 	stb	r2,-268(fp)
    		}
    		if(addscore){
 4000e48:	e0bfbd03 	ldbu	r2,-268(fp)
 4000e4c:	10005f26 	beq	r2,zero,4000fcc <tetris+0xa64>
        		lineCount += lines;
 4000e50:	e0ffb217 	ldw	r3,-312(fp)
 4000e54:	e0bfc017 	ldw	r2,-256(fp)
 4000e58:	1885883a 	add	r2,r3,r2
 4000e5c:	e0bfb215 	stw	r2,-312(fp)
        		levelLines += lines;
 4000e60:	e0ffb317 	ldw	r3,-308(fp)
 4000e64:	e0bfc017 	ldw	r2,-256(fp)
 4000e68:	1885883a 	add	r2,r3,r2
 4000e6c:	e0bfb315 	stw	r2,-308(fp)
        		if(lines == 1){
 4000e70:	e0bfc017 	ldw	r2,-256(fp)
 4000e74:	10800058 	cmpnei	r2,r2,1
 4000e78:	1000091e 	bne	r2,zero,4000ea0 <tetris+0x938>
        			score += 40*(level + 1);
 4000e7c:	e0bfa817 	ldw	r2,-352(fp)
 4000e80:	10800044 	addi	r2,r2,1
 4000e84:	01400a04 	movi	r5,40
 4000e88:	1009883a 	mov	r4,r2
 4000e8c:	400dcd40 	call	400dcd4 <__mulsi3>
 4000e90:	1007883a 	mov	r3,r2
 4000e94:	e0bfb117 	ldw	r2,-316(fp)
 4000e98:	10c5883a 	add	r2,r2,r3
 4000e9c:	e0bfb115 	stw	r2,-316(fp)
        		}
        		if(lines == 2){
 4000ea0:	e0bfc017 	ldw	r2,-256(fp)
 4000ea4:	10800098 	cmpnei	r2,r2,2
 4000ea8:	1000091e 	bne	r2,zero,4000ed0 <tetris+0x968>
        			score += 100*(level + 1);
 4000eac:	e0bfa817 	ldw	r2,-352(fp)
 4000eb0:	10800044 	addi	r2,r2,1
 4000eb4:	01401904 	movi	r5,100
 4000eb8:	1009883a 	mov	r4,r2
 4000ebc:	400dcd40 	call	400dcd4 <__mulsi3>
 4000ec0:	1007883a 	mov	r3,r2
 4000ec4:	e0bfb117 	ldw	r2,-316(fp)
 4000ec8:	10c5883a 	add	r2,r2,r3
 4000ecc:	e0bfb115 	stw	r2,-316(fp)
        		}
        		if(lines == 3){
 4000ed0:	e0bfc017 	ldw	r2,-256(fp)
 4000ed4:	108000d8 	cmpnei	r2,r2,3
 4000ed8:	1000091e 	bne	r2,zero,4000f00 <tetris+0x998>
        			score += 300*(level + 1);
 4000edc:	e0bfa817 	ldw	r2,-352(fp)
 4000ee0:	10800044 	addi	r2,r2,1
 4000ee4:	01404b04 	movi	r5,300
 4000ee8:	1009883a 	mov	r4,r2
 4000eec:	400dcd40 	call	400dcd4 <__mulsi3>
 4000ef0:	1007883a 	mov	r3,r2
 4000ef4:	e0bfb117 	ldw	r2,-316(fp)
 4000ef8:	10c5883a 	add	r2,r2,r3
 4000efc:	e0bfb115 	stw	r2,-316(fp)
        		}
        		if(lines == 4){
 4000f00:	e0bfc017 	ldw	r2,-256(fp)
 4000f04:	10800118 	cmpnei	r2,r2,4
 4000f08:	1000091e 	bne	r2,zero,4000f30 <tetris+0x9c8>
        			score += 1200*(level + 1);
 4000f0c:	e0bfa817 	ldw	r2,-352(fp)
 4000f10:	10800044 	addi	r2,r2,1
 4000f14:	01412c04 	movi	r5,1200
 4000f18:	1009883a 	mov	r4,r2
 4000f1c:	400dcd40 	call	400dcd4 <__mulsi3>
 4000f20:	1007883a 	mov	r3,r2
 4000f24:	e0bfb117 	ldw	r2,-316(fp)
 4000f28:	10c5883a 	add	r2,r2,r3
 4000f2c:	e0bfb115 	stw	r2,-316(fp)
        		}
        		drawLines(lineCount);
 4000f30:	e13fb217 	ldw	r4,-312(fp)
 4000f34:	4008e000 	call	4008e00 <drawLines>
    			//usleep(100000); //drop delay
    			frame = 0; //reset drop timer
 4000f38:	e03faa15 	stw	zero,-344(fp)
    				if(lineCount >= (startLevel * 10) + 10 || lineCount >= max((startLevel*10) - 50), 100){
    					level += 1;
    					levelLines = 0;
    				}
    			}*/
    			if(levelLines > 10){ //level up every10 lines
 4000f3c:	e0bfb317 	ldw	r2,-308(fp)
 4000f40:	108002d0 	cmplti	r2,r2,11
 4000f44:	1000211e 	bne	r2,zero,4000fcc <tetris+0xa64>
    				level += 1;
 4000f48:	e0bfa817 	ldw	r2,-352(fp)
 4000f4c:	10800044 	addi	r2,r2,1
 4000f50:	e0bfa815 	stw	r2,-352(fp)
    				drawLevel(level);
 4000f54:	e13fa817 	ldw	r4,-352(fp)
 4000f58:	4008cdc0 	call	4008cdc <drawLevel>
    				drawStatBlocks(color1[level % 10], 15, color2[level % 10], 15);
 4000f5c:	e0bfa817 	ldw	r2,-352(fp)
 4000f60:	01400284 	movi	r5,10
 4000f64:	1009883a 	mov	r4,r2
 4000f68:	400dba40 	call	400dba4 <__modsi3>
 4000f6c:	1085883a 	add	r2,r2,r2
 4000f70:	1085883a 	add	r2,r2,r2
 4000f74:	e0ffa504 	addi	r3,fp,-364
 4000f78:	1885883a 	add	r2,r3,r2
 4000f7c:	10804504 	addi	r2,r2,276
 4000f80:	10800017 	ldw	r2,0(r2)
 4000f84:	14003fcc 	andi	r16,r2,255
 4000f88:	e0bfa817 	ldw	r2,-352(fp)
 4000f8c:	01400284 	movi	r5,10
 4000f90:	1009883a 	mov	r4,r2
 4000f94:	400dba40 	call	400dba4 <__modsi3>
 4000f98:	1085883a 	add	r2,r2,r2
 4000f9c:	1085883a 	add	r2,r2,r2
 4000fa0:	e0ffa504 	addi	r3,fp,-364
 4000fa4:	1885883a 	add	r2,r3,r2
 4000fa8:	10804f04 	addi	r2,r2,316
 4000fac:	10800017 	ldw	r2,0(r2)
 4000fb0:	10803fcc 	andi	r2,r2,255
 4000fb4:	01c003c4 	movi	r7,15
 4000fb8:	100d883a 	mov	r6,r2
 4000fbc:	014003c4 	movi	r5,15
 4000fc0:	8009883a 	mov	r4,r16
 4000fc4:	400935c0 	call	400935c <drawStatBlocks>
    				levelLines = 0;
 4000fc8:	e03fb315 	stw	zero,-308(fp)
    			}
    		}
    		endGame = gameOver();
 4000fcc:	40048f40 	call	40048f4 <gameOver>
 4000fd0:	e0bfa505 	stb	r2,-364(fp)
    	}
    	drawGame(gameBoard, color1[level % 10], 15, color2[level % 10], 15);
 4000fd4:	e0bfa817 	ldw	r2,-352(fp)
 4000fd8:	01400284 	movi	r5,10
 4000fdc:	1009883a 	mov	r4,r2
 4000fe0:	400dba40 	call	400dba4 <__modsi3>
 4000fe4:	1085883a 	add	r2,r2,r2
 4000fe8:	1085883a 	add	r2,r2,r2
 4000fec:	e0ffa504 	addi	r3,fp,-364
 4000ff0:	1885883a 	add	r2,r3,r2
 4000ff4:	10804504 	addi	r2,r2,276
 4000ff8:	10800017 	ldw	r2,0(r2)
 4000ffc:	14003fcc 	andi	r16,r2,255
 4001000:	e0bfa817 	ldw	r2,-352(fp)
 4001004:	01400284 	movi	r5,10
 4001008:	1009883a 	mov	r4,r2
 400100c:	400dba40 	call	400dba4 <__modsi3>
 4001010:	1085883a 	add	r2,r2,r2
 4001014:	1085883a 	add	r2,r2,r2
 4001018:	e0ffa504 	addi	r3,fp,-364
 400101c:	1885883a 	add	r2,r3,r2
 4001020:	10804f04 	addi	r2,r2,316
 4001024:	10800017 	ldw	r2,0(r2)
 4001028:	10c03fcc 	andi	r3,r2,255
 400102c:	008003c4 	movi	r2,15
 4001030:	d8800015 	stw	r2,0(sp)
 4001034:	180f883a 	mov	r7,r3
 4001038:	018003c4 	movi	r6,15
 400103c:	800b883a 	mov	r5,r16
 4001040:	010100b4 	movhi	r4,1026
 4001044:	21080004 	addi	r4,r4,8192
 4001048:	4008e940 	call	4008e94 <drawGame>
    	drawScore(score);
 400104c:	e13fb117 	ldw	r4,-316(fp)
 4001050:	4008d6c0 	call	4008d6c <drawScore>
    	frame++;
 4001054:	e0bfaa17 	ldw	r2,-344(fp)
 4001058:	10800044 	addi	r2,r2,1
 400105c:	e0bfaa15 	stw	r2,-344(fp)
    	end = clock();
 4001060:	400fb900 	call	400fb90 <clock>
 4001064:	e0bfc115 	stw	r2,-252(fp)
    	time = ((double) (end - start)) / CLOCKS_PER_SEC;
 4001068:	e0ffc117 	ldw	r3,-252(fp)
 400106c:	e0bfbf17 	ldw	r2,-260(fp)
 4001070:	1885c83a 	sub	r2,r3,r2
 4001074:	1009883a 	mov	r4,r2
 4001078:	400fa840 	call	400fa84 <__floatunsidf>
 400107c:	1011883a 	mov	r8,r2
 4001080:	1813883a 	mov	r9,r3
 4001084:	000d883a 	mov	r6,zero
 4001088:	01d023f4 	movhi	r7,16527
 400108c:	39d00004 	addi	r7,r7,16384
 4001090:	4009883a 	mov	r4,r8
 4001094:	480b883a 	mov	r5,r9
 4001098:	400dcfc0 	call	400dcfc <__divdf3>
 400109c:	1009883a 	mov	r4,r2
 40010a0:	180b883a 	mov	r5,r3
 40010a4:	e13fc215 	stw	r4,-248(fp)
 40010a8:	e17fc315 	stw	r5,-244(fp)
    	time *= 1000000;
 40010ac:	000d883a 	mov	r6,zero
 40010b0:	01d04bf4 	movhi	r7,16687
 40010b4:	39e12004 	addi	r7,r7,-31616
 40010b8:	e13fc217 	ldw	r4,-248(fp)
 40010bc:	e17fc317 	ldw	r5,-244(fp)
 40010c0:	400e89c0 	call	400e89c <__muldf3>
 40010c4:	1009883a 	mov	r4,r2
 40010c8:	180b883a 	mov	r5,r3
 40010cc:	e13fc215 	stw	r4,-248(fp)
 40010d0:	e17fc315 	stw	r5,-244(fp)
    	if(time < 33000){
 40010d4:	000d883a 	mov	r6,zero
 40010d8:	01d03834 	movhi	r7,16608
 40010dc:	39c74004 	addi	r7,r7,7424
 40010e0:	e13fc217 	ldw	r4,-248(fp)
 40010e4:	e17fc317 	ldw	r5,-244(fp)
 40010e8:	400e7a80 	call	400e7a8 <__ledf2>
 40010ec:	10000116 	blt	r2,zero,40010f4 <tetris+0xb8c>
 40010f0:	00000f06 	br	4001130 <tetris+0xbc8>
    		usleep(33000 - time);
 40010f4:	e1bfc217 	ldw	r6,-248(fp)
 40010f8:	e1ffc317 	ldw	r7,-244(fp)
 40010fc:	0009883a 	mov	r4,zero
 4001100:	01503834 	movhi	r5,16608
 4001104:	29474004 	addi	r5,r5,7424
 4001108:	400f1080 	call	400f108 <__subdf3>
 400110c:	1009883a 	mov	r4,r2
 4001110:	180b883a 	mov	r5,r3
 4001114:	2005883a 	mov	r2,r4
 4001118:	2807883a 	mov	r3,r5
 400111c:	1009883a 	mov	r4,r2
 4001120:	180b883a 	mov	r5,r3
 4001124:	400daac0 	call	400daac <__fixunsdfsi>
 4001128:	1009883a 	mov	r4,r2
 400112c:	401b98c0 	call	401b98c <usleep>
	}
	drawGrid(11, 0, 15);
	drawLevel(level);
	drawLines(lineCount);
	drawStatBlocks(color1[level % 10], 15, color2[level % 10], 15);
    while(!endGame) {  //runs while game not over
 4001130:	e0bfa503 	ldbu	r2,-364(fp)
 4001134:	1080005c 	xori	r2,r2,1
 4001138:	10803fcc 	andi	r2,r2,255
 400113c:	103dad1e 	bne	r2,zero,40007f4 <__alt_mem_onchip_memory2_0+0xfbffb634>
    	time *= 1000000;
    	if(time < 33000){
    		usleep(33000 - time);
    	}
    }
    return score;
 4001140:	e0bfb117 	ldw	r2,-316(fp)
}
 4001144:	e6ffff04 	addi	sp,fp,-4
 4001148:	dfc00217 	ldw	ra,8(sp)
 400114c:	df000117 	ldw	fp,4(sp)
 4001150:	dc000017 	ldw	r16,0(sp)
 4001154:	dec00304 	addi	sp,sp,12
 4001158:	f800283a 	ret

0400115c <max>:

int max(int a, int b){
 400115c:	defffd04 	addi	sp,sp,-12
 4001160:	df000215 	stw	fp,8(sp)
 4001164:	df000204 	addi	fp,sp,8
 4001168:	e13ffe15 	stw	r4,-8(fp)
 400116c:	e17fff15 	stw	r5,-4(fp)
	if(a > b){
 4001170:	e0bffe17 	ldw	r2,-8(fp)
 4001174:	e0ffff17 	ldw	r3,-4(fp)
 4001178:	1880020e 	bge	r3,r2,4001184 <max+0x28>
		return a;
 400117c:	e0bffe17 	ldw	r2,-8(fp)
 4001180:	00000106 	br	4001188 <max+0x2c>
	}
	return b;
 4001184:	e0bfff17 	ldw	r2,-4(fp)
}
 4001188:	e037883a 	mov	sp,fp
 400118c:	df000017 	ldw	fp,0(sp)
 4001190:	dec00104 	addi	sp,sp,4
 4001194:	f800283a 	ret

04001198 <spawnBlock>:

void spawnBlock(int Block){
 4001198:	defffd04 	addi	sp,sp,-12
 400119c:	dfc00215 	stw	ra,8(sp)
 40011a0:	df000115 	stw	fp,4(sp)
 40011a4:	df000104 	addi	fp,sp,4
 40011a8:	e13fff15 	stw	r4,-4(fp)
	switch(Block) {
 40011ac:	e0bfff17 	ldw	r2,-4(fp)
 40011b0:	10800228 	cmpgeui	r2,r2,8
 40011b4:	10001d1e 	bne	r2,zero,400122c <spawnBlock+0x94>
 40011b8:	e0bfff17 	ldw	r2,-4(fp)
 40011bc:	100690ba 	slli	r3,r2,2
 40011c0:	00810034 	movhi	r2,1024
 40011c4:	10847504 	addi	r2,r2,4564
 40011c8:	1885883a 	add	r2,r3,r2
 40011cc:	10800017 	ldw	r2,0(r2)
 40011d0:	1000683a 	jmp	r2
 40011d4:	0400122c 	andhi	r16,zero,72
 40011d8:	040011f4 	movhi	r16,71
 40011dc:	040011fc 	xorhi	r16,zero,71
 40011e0:	04001204 	movi	r16,72
 40011e4:	0400120c 	andi	r16,zero,72
 40011e8:	04001214 	movui	r16,72
 40011ec:	0400121c 	xori	r16,zero,72
 40011f0:	04001224 	muli	r16,zero,72
		case 1:
			dropIBlock();
 40011f4:	40003e00 	call	40003e0 <dropIBlock>
			break;
 40011f8:	00000d06 	br	4001230 <spawnBlock+0x98>
		case 2:
			dropJBlock();
 40011fc:	40004180 	call	4000418 <dropJBlock>
			break;
 4001200:	00000b06 	br	4001230 <spawnBlock+0x98>
		case 3:
			dropLBlock();
 4001204:	40004500 	call	4000450 <dropLBlock>
			break;
 4001208:	00000906 	br	4001230 <spawnBlock+0x98>
		case 4:
			dropOBlock();
 400120c:	40004880 	call	4000488 <dropOBlock>
			break;
 4001210:	00000706 	br	4001230 <spawnBlock+0x98>
		case 5:
			dropSBlock();
 4001214:	40004c00 	call	40004c0 <dropSBlock>
			break;
 4001218:	00000506 	br	4001230 <spawnBlock+0x98>
		case 6:
			dropTBlock();
 400121c:	40004f80 	call	40004f8 <dropTBlock>
			break;
 4001220:	00000306 	br	4001230 <spawnBlock+0x98>
		case 7:
			dropZBlock();
 4001224:	40005300 	call	4000530 <dropZBlock>
			break;
 4001228:	00000106 	br	4001230 <spawnBlock+0x98>
		default:
			break;
 400122c:	0001883a 	nop
	}
}
 4001230:	0001883a 	nop
 4001234:	e037883a 	mov	sp,fp
 4001238:	dfc00117 	ldw	ra,4(sp)
 400123c:	df000017 	ldw	fp,0(sp)
 4001240:	dec00204 	addi	sp,sp,8
 4001244:	f800283a 	ret

04001248 <shiftLeft>:

bool shiftLeft(int blockState, int X, int Y){
 4001248:	defff704 	addi	sp,sp,-36
 400124c:	dfc00815 	stw	ra,32(sp)
 4001250:	df000715 	stw	fp,28(sp)
 4001254:	dc400615 	stw	r17,24(sp)
 4001258:	dc000515 	stw	r16,20(sp)
 400125c:	df000704 	addi	fp,sp,28
 4001260:	e13ffb15 	stw	r4,-20(fp)
 4001264:	e17ffc15 	stw	r5,-16(fp)
 4001268:	e1bffd15 	stw	r6,-12(fp)
	switch(blockState){
 400126c:	e0bffb17 	ldw	r2,-20(fp)
 4001270:	10800528 	cmpgeui	r2,r2,20
 4001274:	1003fb1e 	bne	r2,zero,4002264 <shiftLeft+0x101c>
 4001278:	e0bffb17 	ldw	r2,-20(fp)
 400127c:	100690ba 	slli	r3,r2,2
 4001280:	00810034 	movhi	r2,1024
 4001284:	1084a504 	addi	r2,r2,4756
 4001288:	1885883a 	add	r2,r3,r2
 400128c:	10800017 	ldw	r2,0(r2)
 4001290:	1000683a 	jmp	r2
 4001294:	04002264 	muli	r16,zero,137
 4001298:	040012e4 	muli	r16,zero,75
 400129c:	04001360 	cmpeqi	r16,zero,77
 40012a0:	0400140c 	andi	r16,zero,80
 40012a4:	040014c0 	call	40014c <__reset-0x3bffeb4>
 40012a8:	04001578 	rdprs	r16,zero,85
 40012ac:	04001668 	cmpgeui	r16,zero,89
 40012b0:	0400171c 	xori	r16,zero,92
 40012b4:	04001810 	cmplti	r16,zero,96
 40012b8:	040018c8 	cmpgei	r16,zero,99
 40012bc:	04001a14 	movui	r16,104
 40012c0:	04001ac8 	cmpgei	r16,zero,107
 40012c4:	04001bbc 	xorhi	r16,zero,110
 40012c8:	04001c74 	movhi	r16,113
 40012cc:	04001d68 	cmpgeui	r16,zero,117
 40012d0:	04001e20 	cmpeqi	r16,zero,120
 40012d4:	04001f10 	cmplti	r16,zero,124
 40012d8:	04001fc4 	movi	r16,127
 40012dc:	040020b8 	rdprs	r16,zero,130
 40012e0:	04002170 	cmpltui	r16,zero,133
	case 1:
		if(X == 0 || gameBoard[Y + 2][X - 1] > 0){
 40012e4:	e0bffc17 	ldw	r2,-16(fp)
 40012e8:	10000f26 	beq	r2,zero,4001328 <shiftLeft+0xe0>
 40012ec:	e0bffd17 	ldw	r2,-12(fp)
 40012f0:	10c00084 	addi	r3,r2,2
 40012f4:	e0bffc17 	ldw	r2,-16(fp)
 40012f8:	147fffc4 	addi	r17,r2,-1
 40012fc:	040100b4 	movhi	r16,1026
 4001300:	84080004 	addi	r16,r16,8192
 4001304:	01400284 	movi	r5,10
 4001308:	1809883a 	mov	r4,r3
 400130c:	400dcd40 	call	400dcd4 <__mulsi3>
 4001310:	1445883a 	add	r2,r2,r17
 4001314:	1085883a 	add	r2,r2,r2
 4001318:	1085883a 	add	r2,r2,r2
 400131c:	8085883a 	add	r2,r16,r2
 4001320:	10800017 	ldw	r2,0(r2)
 4001324:	0080020e 	bge	zero,r2,4001330 <shiftLeft+0xe8>
			return false;
 4001328:	0005883a 	mov	r2,zero
 400132c:	0003ce06 	br	4002268 <shiftLeft+0x1020>
		}
		draw1(X, Y, 0);
 4001330:	000d883a 	mov	r6,zero
 4001334:	e17ffd17 	ldw	r5,-12(fp)
 4001338:	e13ffc17 	ldw	r4,-16(fp)
 400133c:	400687c0 	call	400687c <draw1>
		draw1(X - 1, Y, -1);
 4001340:	e0bffc17 	ldw	r2,-16(fp)
 4001344:	10bfffc4 	addi	r2,r2,-1
 4001348:	01bfffc4 	movi	r6,-1
 400134c:	e17ffd17 	ldw	r5,-12(fp)
 4001350:	1009883a 	mov	r4,r2
 4001354:	400687c0 	call	400687c <draw1>
		return true;
 4001358:	00800044 	movi	r2,1
 400135c:	0003c206 	br	4002268 <shiftLeft+0x1020>
	case 2:
		if(X == -2){
 4001360:	e0bffc17 	ldw	r2,-16(fp)
 4001364:	10bfff98 	cmpnei	r2,r2,-2
 4001368:	1000021e 	bne	r2,zero,4001374 <shiftLeft+0x12c>
			return false;
 400136c:	0005883a 	mov	r2,zero
 4001370:	0003bd06 	br	4002268 <shiftLeft+0x1020>
		}
		for(int i = 0; i < 4; i++){
 4001374:	e03ff915 	stw	zero,-28(fp)
 4001378:	00001506 	br	40013d0 <shiftLeft+0x188>
			if(gameBoard[Y + i][X + 1] > 0){
 400137c:	e0fffd17 	ldw	r3,-12(fp)
 4001380:	e0bff917 	ldw	r2,-28(fp)
 4001384:	1887883a 	add	r3,r3,r2
 4001388:	e0bffc17 	ldw	r2,-16(fp)
 400138c:	14400044 	addi	r17,r2,1
 4001390:	040100b4 	movhi	r16,1026
 4001394:	84080004 	addi	r16,r16,8192
 4001398:	01400284 	movi	r5,10
 400139c:	1809883a 	mov	r4,r3
 40013a0:	400dcd40 	call	400dcd4 <__mulsi3>
 40013a4:	1445883a 	add	r2,r2,r17
 40013a8:	1085883a 	add	r2,r2,r2
 40013ac:	1085883a 	add	r2,r2,r2
 40013b0:	8085883a 	add	r2,r16,r2
 40013b4:	10800017 	ldw	r2,0(r2)
 40013b8:	0080020e 	bge	zero,r2,40013c4 <shiftLeft+0x17c>
				return false;
 40013bc:	0005883a 	mov	r2,zero
 40013c0:	0003a906 	br	4002268 <shiftLeft+0x1020>
		return true;
	case 2:
		if(X == -2){
			return false;
		}
		for(int i = 0; i < 4; i++){
 40013c4:	e0bff917 	ldw	r2,-28(fp)
 40013c8:	10800044 	addi	r2,r2,1
 40013cc:	e0bff915 	stw	r2,-28(fp)
 40013d0:	e0bff917 	ldw	r2,-28(fp)
 40013d4:	10800110 	cmplti	r2,r2,4
 40013d8:	103fe81e 	bne	r2,zero,400137c <__alt_mem_onchip_memory2_0+0xfbffc1bc>
			if(gameBoard[Y + i][X + 1] > 0){
				return false;
			}
		}
		draw2(X, Y, 0);
 40013dc:	000d883a 	mov	r6,zero
 40013e0:	e17ffd17 	ldw	r5,-12(fp)
 40013e4:	e13ffc17 	ldw	r4,-16(fp)
 40013e8:	400691c0 	call	400691c <draw2>
		draw2(X - 1, Y, -1);
 40013ec:	e0bffc17 	ldw	r2,-16(fp)
 40013f0:	10bfffc4 	addi	r2,r2,-1
 40013f4:	01bfffc4 	movi	r6,-1
 40013f8:	e17ffd17 	ldw	r5,-12(fp)
 40013fc:	1009883a 	mov	r4,r2
 4001400:	400691c0 	call	400691c <draw2>
		return true;
 4001404:	00800044 	movi	r2,1
 4001408:	00039706 	br	4002268 <shiftLeft+0x1020>
	case 3:
		if(X == 0 || gameBoard[Y][X - 1] > 0 || gameBoard[Y + 1][X - 1] > 0){
 400140c:	e0bffc17 	ldw	r2,-16(fp)
 4001410:	10001d26 	beq	r2,zero,4001488 <shiftLeft+0x240>
 4001414:	e0bffc17 	ldw	r2,-16(fp)
 4001418:	147fffc4 	addi	r17,r2,-1
 400141c:	040100b4 	movhi	r16,1026
 4001420:	84080004 	addi	r16,r16,8192
 4001424:	e0bffd17 	ldw	r2,-12(fp)
 4001428:	01400284 	movi	r5,10
 400142c:	1009883a 	mov	r4,r2
 4001430:	400dcd40 	call	400dcd4 <__mulsi3>
 4001434:	1445883a 	add	r2,r2,r17
 4001438:	1085883a 	add	r2,r2,r2
 400143c:	1085883a 	add	r2,r2,r2
 4001440:	8085883a 	add	r2,r16,r2
 4001444:	10800017 	ldw	r2,0(r2)
 4001448:	00800f16 	blt	zero,r2,4001488 <shiftLeft+0x240>
 400144c:	e0bffd17 	ldw	r2,-12(fp)
 4001450:	10c00044 	addi	r3,r2,1
 4001454:	e0bffc17 	ldw	r2,-16(fp)
 4001458:	147fffc4 	addi	r17,r2,-1
 400145c:	040100b4 	movhi	r16,1026
 4001460:	84080004 	addi	r16,r16,8192
 4001464:	01400284 	movi	r5,10
 4001468:	1809883a 	mov	r4,r3
 400146c:	400dcd40 	call	400dcd4 <__mulsi3>
 4001470:	1445883a 	add	r2,r2,r17
 4001474:	1085883a 	add	r2,r2,r2
 4001478:	1085883a 	add	r2,r2,r2
 400147c:	8085883a 	add	r2,r16,r2
 4001480:	10800017 	ldw	r2,0(r2)
 4001484:	0080020e 	bge	zero,r2,4001490 <shiftLeft+0x248>
			return false;
 4001488:	0005883a 	mov	r2,zero
 400148c:	00037606 	br	4002268 <shiftLeft+0x1020>
		}
		draw3(X, Y, 0);
 4001490:	000d883a 	mov	r6,zero
 4001494:	e17ffd17 	ldw	r5,-12(fp)
 4001498:	e13ffc17 	ldw	r4,-16(fp)
 400149c:	40069c00 	call	40069c0 <draw3>
		draw3(X - 1, Y, -4);
 40014a0:	e0bffc17 	ldw	r2,-16(fp)
 40014a4:	10bfffc4 	addi	r2,r2,-1
 40014a8:	01bfff04 	movi	r6,-4
 40014ac:	e17ffd17 	ldw	r5,-12(fp)
 40014b0:	1009883a 	mov	r4,r2
 40014b4:	40069c00 	call	40069c0 <draw3>
		return true;
 40014b8:	00800044 	movi	r2,1
 40014bc:	00036a06 	br	4002268 <shiftLeft+0x1020>
	case 4:
		if(X == 0 || gameBoard[Y + 1][X - 1] > 0 || gameBoard[Y + 2][X + 1] > 0){
 40014c0:	e0bffc17 	ldw	r2,-16(fp)
 40014c4:	10001e26 	beq	r2,zero,4001540 <shiftLeft+0x2f8>
 40014c8:	e0bffd17 	ldw	r2,-12(fp)
 40014cc:	10c00044 	addi	r3,r2,1
 40014d0:	e0bffc17 	ldw	r2,-16(fp)
 40014d4:	147fffc4 	addi	r17,r2,-1
 40014d8:	040100b4 	movhi	r16,1026
 40014dc:	84080004 	addi	r16,r16,8192
 40014e0:	01400284 	movi	r5,10
 40014e4:	1809883a 	mov	r4,r3
 40014e8:	400dcd40 	call	400dcd4 <__mulsi3>
 40014ec:	1445883a 	add	r2,r2,r17
 40014f0:	1085883a 	add	r2,r2,r2
 40014f4:	1085883a 	add	r2,r2,r2
 40014f8:	8085883a 	add	r2,r16,r2
 40014fc:	10800017 	ldw	r2,0(r2)
 4001500:	00800f16 	blt	zero,r2,4001540 <shiftLeft+0x2f8>
 4001504:	e0bffd17 	ldw	r2,-12(fp)
 4001508:	10c00084 	addi	r3,r2,2
 400150c:	e0bffc17 	ldw	r2,-16(fp)
 4001510:	14400044 	addi	r17,r2,1
 4001514:	040100b4 	movhi	r16,1026
 4001518:	84080004 	addi	r16,r16,8192
 400151c:	01400284 	movi	r5,10
 4001520:	1809883a 	mov	r4,r3
 4001524:	400dcd40 	call	400dcd4 <__mulsi3>
 4001528:	1445883a 	add	r2,r2,r17
 400152c:	1085883a 	add	r2,r2,r2
 4001530:	1085883a 	add	r2,r2,r2
 4001534:	8085883a 	add	r2,r16,r2
 4001538:	10800017 	ldw	r2,0(r2)
 400153c:	0080020e 	bge	zero,r2,4001548 <shiftLeft+0x300>
			return false;
 4001540:	0005883a 	mov	r2,zero
 4001544:	00034806 	br	4002268 <shiftLeft+0x1020>
		}
		draw4(X, Y, 0);
 4001548:	000d883a 	mov	r6,zero
 400154c:	e17ffd17 	ldw	r5,-12(fp)
 4001550:	e13ffc17 	ldw	r4,-16(fp)
 4001554:	4006aec0 	call	4006aec <draw4>
		draw4(X - 1, Y, -2);
 4001558:	e0bffc17 	ldw	r2,-16(fp)
 400155c:	10bfffc4 	addi	r2,r2,-1
 4001560:	01bfff84 	movi	r6,-2
 4001564:	e17ffd17 	ldw	r5,-12(fp)
 4001568:	1009883a 	mov	r4,r2
 400156c:	4006aec0 	call	4006aec <draw4>
		return true;
 4001570:	00800044 	movi	r2,1
 4001574:	00033c06 	br	4002268 <shiftLeft+0x1020>
	case 5:
		if(X == 0 || gameBoard[Y][X] > 0 || gameBoard[Y + 1][X] > 0 || gameBoard[Y + 2][X - 1] > 0){
 4001578:	e0bffc17 	ldw	r2,-16(fp)
 400157c:	10002c26 	beq	r2,zero,4001630 <shiftLeft+0x3e8>
 4001580:	040100b4 	movhi	r16,1026
 4001584:	84080004 	addi	r16,r16,8192
 4001588:	e0bffd17 	ldw	r2,-12(fp)
 400158c:	01400284 	movi	r5,10
 4001590:	1009883a 	mov	r4,r2
 4001594:	400dcd40 	call	400dcd4 <__mulsi3>
 4001598:	1007883a 	mov	r3,r2
 400159c:	e0bffc17 	ldw	r2,-16(fp)
 40015a0:	1885883a 	add	r2,r3,r2
 40015a4:	1085883a 	add	r2,r2,r2
 40015a8:	1085883a 	add	r2,r2,r2
 40015ac:	8085883a 	add	r2,r16,r2
 40015b0:	10800017 	ldw	r2,0(r2)
 40015b4:	00801e16 	blt	zero,r2,4001630 <shiftLeft+0x3e8>
 40015b8:	e0bffd17 	ldw	r2,-12(fp)
 40015bc:	10800044 	addi	r2,r2,1
 40015c0:	040100b4 	movhi	r16,1026
 40015c4:	84080004 	addi	r16,r16,8192
 40015c8:	01400284 	movi	r5,10
 40015cc:	1009883a 	mov	r4,r2
 40015d0:	400dcd40 	call	400dcd4 <__mulsi3>
 40015d4:	1007883a 	mov	r3,r2
 40015d8:	e0bffc17 	ldw	r2,-16(fp)
 40015dc:	1885883a 	add	r2,r3,r2
 40015e0:	1085883a 	add	r2,r2,r2
 40015e4:	1085883a 	add	r2,r2,r2
 40015e8:	8085883a 	add	r2,r16,r2
 40015ec:	10800017 	ldw	r2,0(r2)
 40015f0:	00800f16 	blt	zero,r2,4001630 <shiftLeft+0x3e8>
 40015f4:	e0bffd17 	ldw	r2,-12(fp)
 40015f8:	10c00084 	addi	r3,r2,2
 40015fc:	e0bffc17 	ldw	r2,-16(fp)
 4001600:	147fffc4 	addi	r17,r2,-1
 4001604:	040100b4 	movhi	r16,1026
 4001608:	84080004 	addi	r16,r16,8192
 400160c:	01400284 	movi	r5,10
 4001610:	1809883a 	mov	r4,r3
 4001614:	400dcd40 	call	400dcd4 <__mulsi3>
 4001618:	1445883a 	add	r2,r2,r17
 400161c:	1085883a 	add	r2,r2,r2
 4001620:	1085883a 	add	r2,r2,r2
 4001624:	8085883a 	add	r2,r16,r2
 4001628:	10800017 	ldw	r2,0(r2)
 400162c:	0080020e 	bge	zero,r2,4001638 <shiftLeft+0x3f0>
			return false;
 4001630:	0005883a 	mov	r2,zero
 4001634:	00030c06 	br	4002268 <shiftLeft+0x1020>
		}
		draw5(X, Y, 0);
 4001638:	000d883a 	mov	r6,zero
 400163c:	e17ffd17 	ldw	r5,-12(fp)
 4001640:	e13ffc17 	ldw	r4,-16(fp)
 4001644:	4006bc80 	call	4006bc8 <draw5>
		draw5(X - 1, Y, -2);
 4001648:	e0bffc17 	ldw	r2,-16(fp)
 400164c:	10bfffc4 	addi	r2,r2,-1
 4001650:	01bfff84 	movi	r6,-2
 4001654:	e17ffd17 	ldw	r5,-12(fp)
 4001658:	1009883a 	mov	r4,r2
 400165c:	4006bc80 	call	4006bc8 <draw5>
		return true;
 4001660:	00800044 	movi	r2,1
 4001664:	00030006 	br	4002268 <shiftLeft+0x1020>
	case 6:
		if(X == 0 || gameBoard[Y][X - 1] > 0 || gameBoard[Y + 1][X - 1] > 0){
 4001668:	e0bffc17 	ldw	r2,-16(fp)
 400166c:	10001d26 	beq	r2,zero,40016e4 <shiftLeft+0x49c>
 4001670:	e0bffc17 	ldw	r2,-16(fp)
 4001674:	147fffc4 	addi	r17,r2,-1
 4001678:	040100b4 	movhi	r16,1026
 400167c:	84080004 	addi	r16,r16,8192
 4001680:	e0bffd17 	ldw	r2,-12(fp)
 4001684:	01400284 	movi	r5,10
 4001688:	1009883a 	mov	r4,r2
 400168c:	400dcd40 	call	400dcd4 <__mulsi3>
 4001690:	1445883a 	add	r2,r2,r17
 4001694:	1085883a 	add	r2,r2,r2
 4001698:	1085883a 	add	r2,r2,r2
 400169c:	8085883a 	add	r2,r16,r2
 40016a0:	10800017 	ldw	r2,0(r2)
 40016a4:	00800f16 	blt	zero,r2,40016e4 <shiftLeft+0x49c>
 40016a8:	e0bffd17 	ldw	r2,-12(fp)
 40016ac:	10c00044 	addi	r3,r2,1
 40016b0:	e0bffc17 	ldw	r2,-16(fp)
 40016b4:	147fffc4 	addi	r17,r2,-1
 40016b8:	040100b4 	movhi	r16,1026
 40016bc:	84080004 	addi	r16,r16,8192
 40016c0:	01400284 	movi	r5,10
 40016c4:	1809883a 	mov	r4,r3
 40016c8:	400dcd40 	call	400dcd4 <__mulsi3>
 40016cc:	1445883a 	add	r2,r2,r17
 40016d0:	1085883a 	add	r2,r2,r2
 40016d4:	1085883a 	add	r2,r2,r2
 40016d8:	8085883a 	add	r2,r16,r2
 40016dc:	10800017 	ldw	r2,0(r2)
 40016e0:	0080020e 	bge	zero,r2,40016ec <shiftLeft+0x4a4>
			return false;
 40016e4:	0005883a 	mov	r2,zero
 40016e8:	0002df06 	br	4002268 <shiftLeft+0x1020>
		}
		draw6(X, Y, 0);
 40016ec:	000d883a 	mov	r6,zero
 40016f0:	e17ffd17 	ldw	r5,-12(fp)
 40016f4:	e13ffc17 	ldw	r4,-16(fp)
 40016f8:	4006ca80 	call	4006ca8 <draw6>
		draw6(X - 1, Y, -2);
 40016fc:	e0bffc17 	ldw	r2,-16(fp)
 4001700:	10bfffc4 	addi	r2,r2,-1
 4001704:	01bfff84 	movi	r6,-2
 4001708:	e17ffd17 	ldw	r5,-12(fp)
 400170c:	1009883a 	mov	r4,r2
 4001710:	4006ca80 	call	4006ca8 <draw6>
		return true;
 4001714:	00800044 	movi	r2,1
 4001718:	0002d306 	br	4002268 <shiftLeft+0x1020>
	case 7:
		if(X == -1 || gameBoard[Y][X] > 0 || gameBoard[Y + 1][X] > 0 || gameBoard[Y + 2][X] > 0){
 400171c:	e0bffc17 	ldw	r2,-16(fp)
 4001720:	10bfffe0 	cmpeqi	r2,r2,-1
 4001724:	10002c1e 	bne	r2,zero,40017d8 <shiftLeft+0x590>
 4001728:	040100b4 	movhi	r16,1026
 400172c:	84080004 	addi	r16,r16,8192
 4001730:	e0bffd17 	ldw	r2,-12(fp)
 4001734:	01400284 	movi	r5,10
 4001738:	1009883a 	mov	r4,r2
 400173c:	400dcd40 	call	400dcd4 <__mulsi3>
 4001740:	1007883a 	mov	r3,r2
 4001744:	e0bffc17 	ldw	r2,-16(fp)
 4001748:	1885883a 	add	r2,r3,r2
 400174c:	1085883a 	add	r2,r2,r2
 4001750:	1085883a 	add	r2,r2,r2
 4001754:	8085883a 	add	r2,r16,r2
 4001758:	10800017 	ldw	r2,0(r2)
 400175c:	00801e16 	blt	zero,r2,40017d8 <shiftLeft+0x590>
 4001760:	e0bffd17 	ldw	r2,-12(fp)
 4001764:	10800044 	addi	r2,r2,1
 4001768:	040100b4 	movhi	r16,1026
 400176c:	84080004 	addi	r16,r16,8192
 4001770:	01400284 	movi	r5,10
 4001774:	1009883a 	mov	r4,r2
 4001778:	400dcd40 	call	400dcd4 <__mulsi3>
 400177c:	1007883a 	mov	r3,r2
 4001780:	e0bffc17 	ldw	r2,-16(fp)
 4001784:	1885883a 	add	r2,r3,r2
 4001788:	1085883a 	add	r2,r2,r2
 400178c:	1085883a 	add	r2,r2,r2
 4001790:	8085883a 	add	r2,r16,r2
 4001794:	10800017 	ldw	r2,0(r2)
 4001798:	00800f16 	blt	zero,r2,40017d8 <shiftLeft+0x590>
 400179c:	e0bffd17 	ldw	r2,-12(fp)
 40017a0:	10800084 	addi	r2,r2,2
 40017a4:	040100b4 	movhi	r16,1026
 40017a8:	84080004 	addi	r16,r16,8192
 40017ac:	01400284 	movi	r5,10
 40017b0:	1009883a 	mov	r4,r2
 40017b4:	400dcd40 	call	400dcd4 <__mulsi3>
 40017b8:	1007883a 	mov	r3,r2
 40017bc:	e0bffc17 	ldw	r2,-16(fp)
 40017c0:	1885883a 	add	r2,r3,r2
 40017c4:	1085883a 	add	r2,r2,r2
 40017c8:	1085883a 	add	r2,r2,r2
 40017cc:	8085883a 	add	r2,r16,r2
 40017d0:	10800017 	ldw	r2,0(r2)
 40017d4:	0080020e 	bge	zero,r2,40017e0 <shiftLeft+0x598>
			return false;
 40017d8:	0005883a 	mov	r2,zero
 40017dc:	0002a206 	br	4002268 <shiftLeft+0x1020>
		}
		draw7(X, Y, 0);
 40017e0:	000d883a 	mov	r6,zero
 40017e4:	e17ffd17 	ldw	r5,-12(fp)
 40017e8:	e13ffc17 	ldw	r4,-16(fp)
 40017ec:	4006d800 	call	4006d80 <draw7>
		draw7(X - 1, Y, -2);
 40017f0:	e0bffc17 	ldw	r2,-16(fp)
 40017f4:	10bfffc4 	addi	r2,r2,-1
 40017f8:	01bfff84 	movi	r6,-2
 40017fc:	e17ffd17 	ldw	r5,-12(fp)
 4001800:	1009883a 	mov	r4,r2
 4001804:	4006d800 	call	4006d80 <draw7>
		return true;
 4001808:	00800044 	movi	r2,1
 400180c:	00029606 	br	4002268 <shiftLeft+0x1020>
	case 8:
		if(X == 0 || gameBoard[Y + 1][X - 1] > 0 || gameBoard[Y + 2][X - 1] > 0){
 4001810:	e0bffc17 	ldw	r2,-16(fp)
 4001814:	10001e26 	beq	r2,zero,4001890 <shiftLeft+0x648>
 4001818:	e0bffd17 	ldw	r2,-12(fp)
 400181c:	10c00044 	addi	r3,r2,1
 4001820:	e0bffc17 	ldw	r2,-16(fp)
 4001824:	147fffc4 	addi	r17,r2,-1
 4001828:	040100b4 	movhi	r16,1026
 400182c:	84080004 	addi	r16,r16,8192
 4001830:	01400284 	movi	r5,10
 4001834:	1809883a 	mov	r4,r3
 4001838:	400dcd40 	call	400dcd4 <__mulsi3>
 400183c:	1445883a 	add	r2,r2,r17
 4001840:	1085883a 	add	r2,r2,r2
 4001844:	1085883a 	add	r2,r2,r2
 4001848:	8085883a 	add	r2,r16,r2
 400184c:	10800017 	ldw	r2,0(r2)
 4001850:	00800f16 	blt	zero,r2,4001890 <shiftLeft+0x648>
 4001854:	e0bffd17 	ldw	r2,-12(fp)
 4001858:	10c00084 	addi	r3,r2,2
 400185c:	e0bffc17 	ldw	r2,-16(fp)
 4001860:	147fffc4 	addi	r17,r2,-1
 4001864:	040100b4 	movhi	r16,1026
 4001868:	84080004 	addi	r16,r16,8192
 400186c:	01400284 	movi	r5,10
 4001870:	1809883a 	mov	r4,r3
 4001874:	400dcd40 	call	400dcd4 <__mulsi3>
 4001878:	1445883a 	add	r2,r2,r17
 400187c:	1085883a 	add	r2,r2,r2
 4001880:	1085883a 	add	r2,r2,r2
 4001884:	8085883a 	add	r2,r16,r2
 4001888:	10800017 	ldw	r2,0(r2)
 400188c:	0080020e 	bge	zero,r2,4001898 <shiftLeft+0x650>
			return false;
 4001890:	0005883a 	mov	r2,zero
 4001894:	00027406 	br	4002268 <shiftLeft+0x1020>
		}
		draw8(X, Y, 0);
 4001898:	000d883a 	mov	r6,zero
 400189c:	e17ffd17 	ldw	r5,-12(fp)
 40018a0:	e13ffc17 	ldw	r4,-16(fp)
 40018a4:	4006e5c0 	call	4006e5c <draw8>
		draw8(X - 1, Y, -3);
 40018a8:	e0bffc17 	ldw	r2,-16(fp)
 40018ac:	10bfffc4 	addi	r2,r2,-1
 40018b0:	01bfff44 	movi	r6,-3
 40018b4:	e17ffd17 	ldw	r5,-12(fp)
 40018b8:	1009883a 	mov	r4,r2
 40018bc:	4006e5c0 	call	4006e5c <draw8>
		return true;
 40018c0:	00800044 	movi	r2,1
 40018c4:	00026806 	br	4002268 <shiftLeft+0x1020>
	case 9:
		if(X == 0 || gameBoard[Y][X - 1] > 0 || gameBoard[Y + 1][X] > 0 || gameBoard[Y + 2][X] > 0){
 40018c8:	e0bffc17 	ldw	r2,-16(fp)
 40018cc:	10002c26 	beq	r2,zero,4001980 <shiftLeft+0x738>
 40018d0:	e0bffc17 	ldw	r2,-16(fp)
 40018d4:	147fffc4 	addi	r17,r2,-1
 40018d8:	040100b4 	movhi	r16,1026
 40018dc:	84080004 	addi	r16,r16,8192
 40018e0:	e0bffd17 	ldw	r2,-12(fp)
 40018e4:	01400284 	movi	r5,10
 40018e8:	1009883a 	mov	r4,r2
 40018ec:	400dcd40 	call	400dcd4 <__mulsi3>
 40018f0:	1445883a 	add	r2,r2,r17
 40018f4:	1085883a 	add	r2,r2,r2
 40018f8:	1085883a 	add	r2,r2,r2
 40018fc:	8085883a 	add	r2,r16,r2
 4001900:	10800017 	ldw	r2,0(r2)
 4001904:	00801e16 	blt	zero,r2,4001980 <shiftLeft+0x738>
 4001908:	e0bffd17 	ldw	r2,-12(fp)
 400190c:	10800044 	addi	r2,r2,1
 4001910:	040100b4 	movhi	r16,1026
 4001914:	84080004 	addi	r16,r16,8192
 4001918:	01400284 	movi	r5,10
 400191c:	1009883a 	mov	r4,r2
 4001920:	400dcd40 	call	400dcd4 <__mulsi3>
 4001924:	1007883a 	mov	r3,r2
 4001928:	e0bffc17 	ldw	r2,-16(fp)
 400192c:	1885883a 	add	r2,r3,r2
 4001930:	1085883a 	add	r2,r2,r2
 4001934:	1085883a 	add	r2,r2,r2
 4001938:	8085883a 	add	r2,r16,r2
 400193c:	10800017 	ldw	r2,0(r2)
 4001940:	00800f16 	blt	zero,r2,4001980 <shiftLeft+0x738>
 4001944:	e0bffd17 	ldw	r2,-12(fp)
 4001948:	10800084 	addi	r2,r2,2
 400194c:	040100b4 	movhi	r16,1026
 4001950:	84080004 	addi	r16,r16,8192
 4001954:	01400284 	movi	r5,10
 4001958:	1009883a 	mov	r4,r2
 400195c:	400dcd40 	call	400dcd4 <__mulsi3>
 4001960:	1007883a 	mov	r3,r2
 4001964:	e0bffc17 	ldw	r2,-16(fp)
 4001968:	1885883a 	add	r2,r3,r2
 400196c:	1085883a 	add	r2,r2,r2
 4001970:	1085883a 	add	r2,r2,r2
 4001974:	8085883a 	add	r2,r16,r2
 4001978:	10800017 	ldw	r2,0(r2)
 400197c:	0080020e 	bge	zero,r2,4001988 <shiftLeft+0x740>
			return false;
 4001980:	0005883a 	mov	r2,zero
 4001984:	00023806 	br	4002268 <shiftLeft+0x1020>
		}
		for(int i = 0; i < 3; i++){
 4001988:	e03ffa15 	stw	zero,-24(fp)
 400198c:	00001206 	br	40019d8 <shiftLeft+0x790>
			gameBoard[Y + i][X + 1] = 0;
 4001990:	e0fffd17 	ldw	r3,-12(fp)
 4001994:	e0bffa17 	ldw	r2,-24(fp)
 4001998:	1887883a 	add	r3,r3,r2
 400199c:	e0bffc17 	ldw	r2,-16(fp)
 40019a0:	14400044 	addi	r17,r2,1
 40019a4:	040100b4 	movhi	r16,1026
 40019a8:	84080004 	addi	r16,r16,8192
 40019ac:	01400284 	movi	r5,10
 40019b0:	1809883a 	mov	r4,r3
 40019b4:	400dcd40 	call	400dcd4 <__mulsi3>
 40019b8:	1445883a 	add	r2,r2,r17
 40019bc:	1085883a 	add	r2,r2,r2
 40019c0:	1085883a 	add	r2,r2,r2
 40019c4:	8085883a 	add	r2,r16,r2
 40019c8:	10000015 	stw	zero,0(r2)
		return true;
	case 9:
		if(X == 0 || gameBoard[Y][X - 1] > 0 || gameBoard[Y + 1][X] > 0 || gameBoard[Y + 2][X] > 0){
			return false;
		}
		for(int i = 0; i < 3; i++){
 40019cc:	e0bffa17 	ldw	r2,-24(fp)
 40019d0:	10800044 	addi	r2,r2,1
 40019d4:	e0bffa15 	stw	r2,-24(fp)
 40019d8:	e0bffa17 	ldw	r2,-24(fp)
 40019dc:	108000d0 	cmplti	r2,r2,3
 40019e0:	103feb1e 	bne	r2,zero,4001990 <__alt_mem_onchip_memory2_0+0xfbffc7d0>
			gameBoard[Y + i][X + 1] = 0;
		}
		draw9(X, Y, 0);
 40019e4:	000d883a 	mov	r6,zero
 40019e8:	e17ffd17 	ldw	r5,-12(fp)
 40019ec:	e13ffc17 	ldw	r4,-16(fp)
 40019f0:	4006f380 	call	4006f38 <draw9>
		draw9(X - 1, Y, -3);
 40019f4:	e0bffc17 	ldw	r2,-16(fp)
 40019f8:	10bfffc4 	addi	r2,r2,-1
 40019fc:	01bfff44 	movi	r6,-3
 4001a00:	e17ffd17 	ldw	r5,-12(fp)
 4001a04:	1009883a 	mov	r4,r2
 4001a08:	4006f380 	call	4006f38 <draw9>
		return true;
 4001a0c:	00800044 	movi	r2,1
 4001a10:	00021506 	br	4002268 <shiftLeft+0x1020>
	case 10:
		if(X == 0 || gameBoard[Y][X + 1] > 0 || gameBoard[Y + 1][X - 1] > 0){
 4001a14:	e0bffc17 	ldw	r2,-16(fp)
 4001a18:	10001d26 	beq	r2,zero,4001a90 <shiftLeft+0x848>
 4001a1c:	e0bffc17 	ldw	r2,-16(fp)
 4001a20:	14400044 	addi	r17,r2,1
 4001a24:	040100b4 	movhi	r16,1026
 4001a28:	84080004 	addi	r16,r16,8192
 4001a2c:	e0bffd17 	ldw	r2,-12(fp)
 4001a30:	01400284 	movi	r5,10
 4001a34:	1009883a 	mov	r4,r2
 4001a38:	400dcd40 	call	400dcd4 <__mulsi3>
 4001a3c:	1445883a 	add	r2,r2,r17
 4001a40:	1085883a 	add	r2,r2,r2
 4001a44:	1085883a 	add	r2,r2,r2
 4001a48:	8085883a 	add	r2,r16,r2
 4001a4c:	10800017 	ldw	r2,0(r2)
 4001a50:	00800f16 	blt	zero,r2,4001a90 <shiftLeft+0x848>
 4001a54:	e0bffd17 	ldw	r2,-12(fp)
 4001a58:	10c00044 	addi	r3,r2,1
 4001a5c:	e0bffc17 	ldw	r2,-16(fp)
 4001a60:	147fffc4 	addi	r17,r2,-1
 4001a64:	040100b4 	movhi	r16,1026
 4001a68:	84080004 	addi	r16,r16,8192
 4001a6c:	01400284 	movi	r5,10
 4001a70:	1809883a 	mov	r4,r3
 4001a74:	400dcd40 	call	400dcd4 <__mulsi3>
 4001a78:	1445883a 	add	r2,r2,r17
 4001a7c:	1085883a 	add	r2,r2,r2
 4001a80:	1085883a 	add	r2,r2,r2
 4001a84:	8085883a 	add	r2,r16,r2
 4001a88:	10800017 	ldw	r2,0(r2)
 4001a8c:	0080020e 	bge	zero,r2,4001a98 <shiftLeft+0x850>
			return false;
 4001a90:	0005883a 	mov	r2,zero
 4001a94:	0001f406 	br	4002268 <shiftLeft+0x1020>
		}
		draw10(X, Y, 0);
 4001a98:	000d883a 	mov	r6,zero
 4001a9c:	e17ffd17 	ldw	r5,-12(fp)
 4001aa0:	e13ffc17 	ldw	r4,-16(fp)
 4001aa4:	40070140 	call	4007014 <draw10>
		draw10(X - 1, Y, -3);
 4001aa8:	e0bffc17 	ldw	r2,-16(fp)
 4001aac:	10bfffc4 	addi	r2,r2,-1
 4001ab0:	01bfff44 	movi	r6,-3
 4001ab4:	e17ffd17 	ldw	r5,-12(fp)
 4001ab8:	1009883a 	mov	r4,r2
 4001abc:	40070140 	call	4007014 <draw10>
		return true;
 4001ac0:	00800044 	movi	r2,1
 4001ac4:	0001e806 	br	4002268 <shiftLeft+0x1020>
	case 11:
		if(X == -1 || gameBoard[Y][X] > 0 || gameBoard[Y + 1][X] > 0 || gameBoard[Y + 2][X] > 0){
 4001ac8:	e0bffc17 	ldw	r2,-16(fp)
 4001acc:	10bfffe0 	cmpeqi	r2,r2,-1
 4001ad0:	10002c1e 	bne	r2,zero,4001b84 <shiftLeft+0x93c>
 4001ad4:	040100b4 	movhi	r16,1026
 4001ad8:	84080004 	addi	r16,r16,8192
 4001adc:	e0bffd17 	ldw	r2,-12(fp)
 4001ae0:	01400284 	movi	r5,10
 4001ae4:	1009883a 	mov	r4,r2
 4001ae8:	400dcd40 	call	400dcd4 <__mulsi3>
 4001aec:	1007883a 	mov	r3,r2
 4001af0:	e0bffc17 	ldw	r2,-16(fp)
 4001af4:	1885883a 	add	r2,r3,r2
 4001af8:	1085883a 	add	r2,r2,r2
 4001afc:	1085883a 	add	r2,r2,r2
 4001b00:	8085883a 	add	r2,r16,r2
 4001b04:	10800017 	ldw	r2,0(r2)
 4001b08:	00801e16 	blt	zero,r2,4001b84 <shiftLeft+0x93c>
 4001b0c:	e0bffd17 	ldw	r2,-12(fp)
 4001b10:	10800044 	addi	r2,r2,1
 4001b14:	040100b4 	movhi	r16,1026
 4001b18:	84080004 	addi	r16,r16,8192
 4001b1c:	01400284 	movi	r5,10
 4001b20:	1009883a 	mov	r4,r2
 4001b24:	400dcd40 	call	400dcd4 <__mulsi3>
 4001b28:	1007883a 	mov	r3,r2
 4001b2c:	e0bffc17 	ldw	r2,-16(fp)
 4001b30:	1885883a 	add	r2,r3,r2
 4001b34:	1085883a 	add	r2,r2,r2
 4001b38:	1085883a 	add	r2,r2,r2
 4001b3c:	8085883a 	add	r2,r16,r2
 4001b40:	10800017 	ldw	r2,0(r2)
 4001b44:	00800f16 	blt	zero,r2,4001b84 <shiftLeft+0x93c>
 4001b48:	e0bffd17 	ldw	r2,-12(fp)
 4001b4c:	10800084 	addi	r2,r2,2
 4001b50:	040100b4 	movhi	r16,1026
 4001b54:	84080004 	addi	r16,r16,8192
 4001b58:	01400284 	movi	r5,10
 4001b5c:	1009883a 	mov	r4,r2
 4001b60:	400dcd40 	call	400dcd4 <__mulsi3>
 4001b64:	1007883a 	mov	r3,r2
 4001b68:	e0bffc17 	ldw	r2,-16(fp)
 4001b6c:	1885883a 	add	r2,r3,r2
 4001b70:	1085883a 	add	r2,r2,r2
 4001b74:	1085883a 	add	r2,r2,r2
 4001b78:	8085883a 	add	r2,r16,r2
 4001b7c:	10800017 	ldw	r2,0(r2)
 4001b80:	0080020e 	bge	zero,r2,4001b8c <shiftLeft+0x944>
			return false;
 4001b84:	0005883a 	mov	r2,zero
 4001b88:	0001b706 	br	4002268 <shiftLeft+0x1020>
		}
		draw11(X, Y, 0);
 4001b8c:	000d883a 	mov	r6,zero
 4001b90:	e17ffd17 	ldw	r5,-12(fp)
 4001b94:	e13ffc17 	ldw	r4,-16(fp)
 4001b98:	40070ec0 	call	40070ec <draw11>
		draw11(X - 1, Y, -3);
 4001b9c:	e0bffc17 	ldw	r2,-16(fp)
 4001ba0:	10bfffc4 	addi	r2,r2,-1
 4001ba4:	01bfff44 	movi	r6,-3
 4001ba8:	e17ffd17 	ldw	r5,-12(fp)
 4001bac:	1009883a 	mov	r4,r2
 4001bb0:	40070ec0 	call	40070ec <draw11>
		return true;
 4001bb4:	00800044 	movi	r2,1
 4001bb8:	0001ab06 	br	4002268 <shiftLeft+0x1020>
	case 12:
		if(X == 0 || gameBoard[Y + 1][X] > 0 || gameBoard[Y + 2][X - 1] > 0){
 4001bbc:	e0bffc17 	ldw	r2,-16(fp)
 4001bc0:	10001e26 	beq	r2,zero,4001c3c <shiftLeft+0x9f4>
 4001bc4:	e0bffd17 	ldw	r2,-12(fp)
 4001bc8:	10800044 	addi	r2,r2,1
 4001bcc:	040100b4 	movhi	r16,1026
 4001bd0:	84080004 	addi	r16,r16,8192
 4001bd4:	01400284 	movi	r5,10
 4001bd8:	1009883a 	mov	r4,r2
 4001bdc:	400dcd40 	call	400dcd4 <__mulsi3>
 4001be0:	1007883a 	mov	r3,r2
 4001be4:	e0bffc17 	ldw	r2,-16(fp)
 4001be8:	1885883a 	add	r2,r3,r2
 4001bec:	1085883a 	add	r2,r2,r2
 4001bf0:	1085883a 	add	r2,r2,r2
 4001bf4:	8085883a 	add	r2,r16,r2
 4001bf8:	10800017 	ldw	r2,0(r2)
 4001bfc:	00800f16 	blt	zero,r2,4001c3c <shiftLeft+0x9f4>
 4001c00:	e0bffd17 	ldw	r2,-12(fp)
 4001c04:	10c00084 	addi	r3,r2,2
 4001c08:	e0bffc17 	ldw	r2,-16(fp)
 4001c0c:	147fffc4 	addi	r17,r2,-1
 4001c10:	040100b4 	movhi	r16,1026
 4001c14:	84080004 	addi	r16,r16,8192
 4001c18:	01400284 	movi	r5,10
 4001c1c:	1809883a 	mov	r4,r3
 4001c20:	400dcd40 	call	400dcd4 <__mulsi3>
 4001c24:	1445883a 	add	r2,r2,r17
 4001c28:	1085883a 	add	r2,r2,r2
 4001c2c:	1085883a 	add	r2,r2,r2
 4001c30:	8085883a 	add	r2,r16,r2
 4001c34:	10800017 	ldw	r2,0(r2)
 4001c38:	0080020e 	bge	zero,r2,4001c44 <shiftLeft+0x9fc>
			return false;
 4001c3c:	0005883a 	mov	r2,zero
 4001c40:	00018906 	br	4002268 <shiftLeft+0x1020>
		}
		draw12(X, Y, 0);
 4001c44:	000d883a 	mov	r6,zero
 4001c48:	e17ffd17 	ldw	r5,-12(fp)
 4001c4c:	e13ffc17 	ldw	r4,-16(fp)
 4001c50:	40071cc0 	call	40071cc <draw12>
		draw12(X - 1, Y, -5);
 4001c54:	e0bffc17 	ldw	r2,-16(fp)
 4001c58:	10bfffc4 	addi	r2,r2,-1
 4001c5c:	01bffec4 	movi	r6,-5
 4001c60:	e17ffd17 	ldw	r5,-12(fp)
 4001c64:	1009883a 	mov	r4,r2
 4001c68:	40071cc0 	call	40071cc <draw12>
		return true;
 4001c6c:	00800044 	movi	r2,1
 4001c70:	00017d06 	br	4002268 <shiftLeft+0x1020>
	case 13:
		if(X == -1 || gameBoard[Y][X] > 0 || gameBoard[Y + 1][X] > 0 || gameBoard[Y + 2][X + 1] > 0){
 4001c74:	e0bffc17 	ldw	r2,-16(fp)
 4001c78:	10bfffe0 	cmpeqi	r2,r2,-1
 4001c7c:	10002c1e 	bne	r2,zero,4001d30 <shiftLeft+0xae8>
 4001c80:	040100b4 	movhi	r16,1026
 4001c84:	84080004 	addi	r16,r16,8192
 4001c88:	e0bffd17 	ldw	r2,-12(fp)
 4001c8c:	01400284 	movi	r5,10
 4001c90:	1009883a 	mov	r4,r2
 4001c94:	400dcd40 	call	400dcd4 <__mulsi3>
 4001c98:	1007883a 	mov	r3,r2
 4001c9c:	e0bffc17 	ldw	r2,-16(fp)
 4001ca0:	1885883a 	add	r2,r3,r2
 4001ca4:	1085883a 	add	r2,r2,r2
 4001ca8:	1085883a 	add	r2,r2,r2
 4001cac:	8085883a 	add	r2,r16,r2
 4001cb0:	10800017 	ldw	r2,0(r2)
 4001cb4:	00801e16 	blt	zero,r2,4001d30 <shiftLeft+0xae8>
 4001cb8:	e0bffd17 	ldw	r2,-12(fp)
 4001cbc:	10800044 	addi	r2,r2,1
 4001cc0:	040100b4 	movhi	r16,1026
 4001cc4:	84080004 	addi	r16,r16,8192
 4001cc8:	01400284 	movi	r5,10
 4001ccc:	1009883a 	mov	r4,r2
 4001cd0:	400dcd40 	call	400dcd4 <__mulsi3>
 4001cd4:	1007883a 	mov	r3,r2
 4001cd8:	e0bffc17 	ldw	r2,-16(fp)
 4001cdc:	1885883a 	add	r2,r3,r2
 4001ce0:	1085883a 	add	r2,r2,r2
 4001ce4:	1085883a 	add	r2,r2,r2
 4001ce8:	8085883a 	add	r2,r16,r2
 4001cec:	10800017 	ldw	r2,0(r2)
 4001cf0:	00800f16 	blt	zero,r2,4001d30 <shiftLeft+0xae8>
 4001cf4:	e0bffd17 	ldw	r2,-12(fp)
 4001cf8:	10c00084 	addi	r3,r2,2
 4001cfc:	e0bffc17 	ldw	r2,-16(fp)
 4001d00:	14400044 	addi	r17,r2,1
 4001d04:	040100b4 	movhi	r16,1026
 4001d08:	84080004 	addi	r16,r16,8192
 4001d0c:	01400284 	movi	r5,10
 4001d10:	1809883a 	mov	r4,r3
 4001d14:	400dcd40 	call	400dcd4 <__mulsi3>
 4001d18:	1445883a 	add	r2,r2,r17
 4001d1c:	1085883a 	add	r2,r2,r2
 4001d20:	1085883a 	add	r2,r2,r2
 4001d24:	8085883a 	add	r2,r16,r2
 4001d28:	10800017 	ldw	r2,0(r2)
 4001d2c:	0080020e 	bge	zero,r2,4001d38 <shiftLeft+0xaf0>
			return false;
 4001d30:	0005883a 	mov	r2,zero
 4001d34:	00014c06 	br	4002268 <shiftLeft+0x1020>
		}
		draw13(X, Y, 0);
 4001d38:	000d883a 	mov	r6,zero
 4001d3c:	e17ffd17 	ldw	r5,-12(fp)
 4001d40:	e13ffc17 	ldw	r4,-16(fp)
 4001d44:	40073000 	call	4007300 <draw13>
		draw13(X - 1, Y, -5);
 4001d48:	e0bffc17 	ldw	r2,-16(fp)
 4001d4c:	10bfffc4 	addi	r2,r2,-1
 4001d50:	01bffec4 	movi	r6,-5
 4001d54:	e17ffd17 	ldw	r5,-12(fp)
 4001d58:	1009883a 	mov	r4,r2
 4001d5c:	40073000 	call	4007300 <draw13>
		return true;
 4001d60:	00800044 	movi	r2,1
 4001d64:	00014006 	br	4002268 <shiftLeft+0x1020>
	case 14:
		if(X == 0 || gameBoard[Y + 1][X - 1] > 0 || gameBoard[Y + 2][X] > 0){
 4001d68:	e0bffc17 	ldw	r2,-16(fp)
 4001d6c:	10001e26 	beq	r2,zero,4001de8 <shiftLeft+0xba0>
 4001d70:	e0bffd17 	ldw	r2,-12(fp)
 4001d74:	10c00044 	addi	r3,r2,1
 4001d78:	e0bffc17 	ldw	r2,-16(fp)
 4001d7c:	147fffc4 	addi	r17,r2,-1
 4001d80:	040100b4 	movhi	r16,1026
 4001d84:	84080004 	addi	r16,r16,8192
 4001d88:	01400284 	movi	r5,10
 4001d8c:	1809883a 	mov	r4,r3
 4001d90:	400dcd40 	call	400dcd4 <__mulsi3>
 4001d94:	1445883a 	add	r2,r2,r17
 4001d98:	1085883a 	add	r2,r2,r2
 4001d9c:	1085883a 	add	r2,r2,r2
 4001da0:	8085883a 	add	r2,r16,r2
 4001da4:	10800017 	ldw	r2,0(r2)
 4001da8:	00800f16 	blt	zero,r2,4001de8 <shiftLeft+0xba0>
 4001dac:	e0bffd17 	ldw	r2,-12(fp)
 4001db0:	10800084 	addi	r2,r2,2
 4001db4:	040100b4 	movhi	r16,1026
 4001db8:	84080004 	addi	r16,r16,8192
 4001dbc:	01400284 	movi	r5,10
 4001dc0:	1009883a 	mov	r4,r2
 4001dc4:	400dcd40 	call	400dcd4 <__mulsi3>
 4001dc8:	1007883a 	mov	r3,r2
 4001dcc:	e0bffc17 	ldw	r2,-16(fp)
 4001dd0:	1885883a 	add	r2,r3,r2
 4001dd4:	1085883a 	add	r2,r2,r2
 4001dd8:	1085883a 	add	r2,r2,r2
 4001ddc:	8085883a 	add	r2,r16,r2
 4001de0:	10800017 	ldw	r2,0(r2)
 4001de4:	0080020e 	bge	zero,r2,4001df0 <shiftLeft+0xba8>
			return false;
 4001de8:	0005883a 	mov	r2,zero
 4001dec:	00011e06 	br	4002268 <shiftLeft+0x1020>
		}
		draw14(X, Y, 0);
 4001df0:	000d883a 	mov	r6,zero
 4001df4:	e17ffd17 	ldw	r5,-12(fp)
 4001df8:	e13ffc17 	ldw	r4,-16(fp)
 4001dfc:	40074300 	call	4007430 <draw14>
		draw14(X - 1, Y, -6);
 4001e00:	e0bffc17 	ldw	r2,-16(fp)
 4001e04:	10bfffc4 	addi	r2,r2,-1
 4001e08:	01bffe84 	movi	r6,-6
 4001e0c:	e17ffd17 	ldw	r5,-12(fp)
 4001e10:	1009883a 	mov	r4,r2
 4001e14:	40074300 	call	4007430 <draw14>
		return true;
 4001e18:	00800044 	movi	r2,1
 4001e1c:	00011206 	br	4002268 <shiftLeft+0x1020>
	case 15:
		if(X == 0 || gameBoard[Y][X] > 0 || gameBoard[Y + 1][X - 1] > 0 || gameBoard[Y + 2][X] > 0){
 4001e20:	e0bffc17 	ldw	r2,-16(fp)
 4001e24:	10002c26 	beq	r2,zero,4001ed8 <shiftLeft+0xc90>
 4001e28:	040100b4 	movhi	r16,1026
 4001e2c:	84080004 	addi	r16,r16,8192
 4001e30:	e0bffd17 	ldw	r2,-12(fp)
 4001e34:	01400284 	movi	r5,10
 4001e38:	1009883a 	mov	r4,r2
 4001e3c:	400dcd40 	call	400dcd4 <__mulsi3>
 4001e40:	1007883a 	mov	r3,r2
 4001e44:	e0bffc17 	ldw	r2,-16(fp)
 4001e48:	1885883a 	add	r2,r3,r2
 4001e4c:	1085883a 	add	r2,r2,r2
 4001e50:	1085883a 	add	r2,r2,r2
 4001e54:	8085883a 	add	r2,r16,r2
 4001e58:	10800017 	ldw	r2,0(r2)
 4001e5c:	00801e16 	blt	zero,r2,4001ed8 <shiftLeft+0xc90>
 4001e60:	e0bffd17 	ldw	r2,-12(fp)
 4001e64:	10c00044 	addi	r3,r2,1
 4001e68:	e0bffc17 	ldw	r2,-16(fp)
 4001e6c:	147fffc4 	addi	r17,r2,-1
 4001e70:	040100b4 	movhi	r16,1026
 4001e74:	84080004 	addi	r16,r16,8192
 4001e78:	01400284 	movi	r5,10
 4001e7c:	1809883a 	mov	r4,r3
 4001e80:	400dcd40 	call	400dcd4 <__mulsi3>
 4001e84:	1445883a 	add	r2,r2,r17
 4001e88:	1085883a 	add	r2,r2,r2
 4001e8c:	1085883a 	add	r2,r2,r2
 4001e90:	8085883a 	add	r2,r16,r2
 4001e94:	10800017 	ldw	r2,0(r2)
 4001e98:	00800f16 	blt	zero,r2,4001ed8 <shiftLeft+0xc90>
 4001e9c:	e0bffd17 	ldw	r2,-12(fp)
 4001ea0:	10800084 	addi	r2,r2,2
 4001ea4:	040100b4 	movhi	r16,1026
 4001ea8:	84080004 	addi	r16,r16,8192
 4001eac:	01400284 	movi	r5,10
 4001eb0:	1009883a 	mov	r4,r2
 4001eb4:	400dcd40 	call	400dcd4 <__mulsi3>
 4001eb8:	1007883a 	mov	r3,r2
 4001ebc:	e0bffc17 	ldw	r2,-16(fp)
 4001ec0:	1885883a 	add	r2,r3,r2
 4001ec4:	1085883a 	add	r2,r2,r2
 4001ec8:	1085883a 	add	r2,r2,r2
 4001ecc:	8085883a 	add	r2,r16,r2
 4001ed0:	10800017 	ldw	r2,0(r2)
 4001ed4:	0080020e 	bge	zero,r2,4001ee0 <shiftLeft+0xc98>
			return false;
 4001ed8:	0005883a 	mov	r2,zero
 4001edc:	0000e206 	br	4002268 <shiftLeft+0x1020>
		}
		draw15(X, Y, 0);
 4001ee0:	000d883a 	mov	r6,zero
 4001ee4:	e17ffd17 	ldw	r5,-12(fp)
 4001ee8:	e13ffc17 	ldw	r4,-16(fp)
 4001eec:	400750c0 	call	400750c <draw15>
		draw15(X - 1, Y, -6);
 4001ef0:	e0bffc17 	ldw	r2,-16(fp)
 4001ef4:	10bfffc4 	addi	r2,r2,-1
 4001ef8:	01bffe84 	movi	r6,-6
 4001efc:	e17ffd17 	ldw	r5,-12(fp)
 4001f00:	1009883a 	mov	r4,r2
 4001f04:	400750c0 	call	400750c <draw15>
		return true;
 4001f08:	00800044 	movi	r2,1
 4001f0c:	0000d606 	br	4002268 <shiftLeft+0x1020>
	case 16:
		if(X == 0 || gameBoard[Y][X] > 0 || gameBoard[Y + 1][X - 1] > 0){
 4001f10:	e0bffc17 	ldw	r2,-16(fp)
 4001f14:	10001d26 	beq	r2,zero,4001f8c <shiftLeft+0xd44>
 4001f18:	040100b4 	movhi	r16,1026
 4001f1c:	84080004 	addi	r16,r16,8192
 4001f20:	e0bffd17 	ldw	r2,-12(fp)
 4001f24:	01400284 	movi	r5,10
 4001f28:	1009883a 	mov	r4,r2
 4001f2c:	400dcd40 	call	400dcd4 <__mulsi3>
 4001f30:	1007883a 	mov	r3,r2
 4001f34:	e0bffc17 	ldw	r2,-16(fp)
 4001f38:	1885883a 	add	r2,r3,r2
 4001f3c:	1085883a 	add	r2,r2,r2
 4001f40:	1085883a 	add	r2,r2,r2
 4001f44:	8085883a 	add	r2,r16,r2
 4001f48:	10800017 	ldw	r2,0(r2)
 4001f4c:	00800f16 	blt	zero,r2,4001f8c <shiftLeft+0xd44>
 4001f50:	e0bffd17 	ldw	r2,-12(fp)
 4001f54:	10c00044 	addi	r3,r2,1
 4001f58:	e0bffc17 	ldw	r2,-16(fp)
 4001f5c:	147fffc4 	addi	r17,r2,-1
 4001f60:	040100b4 	movhi	r16,1026
 4001f64:	84080004 	addi	r16,r16,8192
 4001f68:	01400284 	movi	r5,10
 4001f6c:	1809883a 	mov	r4,r3
 4001f70:	400dcd40 	call	400dcd4 <__mulsi3>
 4001f74:	1445883a 	add	r2,r2,r17
 4001f78:	1085883a 	add	r2,r2,r2
 4001f7c:	1085883a 	add	r2,r2,r2
 4001f80:	8085883a 	add	r2,r16,r2
 4001f84:	10800017 	ldw	r2,0(r2)
 4001f88:	0080020e 	bge	zero,r2,4001f94 <shiftLeft+0xd4c>
			return false;
 4001f8c:	0005883a 	mov	r2,zero
 4001f90:	0000b506 	br	4002268 <shiftLeft+0x1020>
		}
		draw16(X, Y, 0);
 4001f94:	000d883a 	mov	r6,zero
 4001f98:	e17ffd17 	ldw	r5,-12(fp)
 4001f9c:	e13ffc17 	ldw	r4,-16(fp)
 4001fa0:	40075ec0 	call	40075ec <draw16>
		draw16(X - 1, Y, -6);
 4001fa4:	e0bffc17 	ldw	r2,-16(fp)
 4001fa8:	10bfffc4 	addi	r2,r2,-1
 4001fac:	01bffe84 	movi	r6,-6
 4001fb0:	e17ffd17 	ldw	r5,-12(fp)
 4001fb4:	1009883a 	mov	r4,r2
 4001fb8:	40075ec0 	call	40075ec <draw16>
		return true;
 4001fbc:	00800044 	movi	r2,1
 4001fc0:	0000a906 	br	4002268 <shiftLeft+0x1020>
	case 17:
		if(X == -1 || gameBoard[Y][X] > 0 || gameBoard[Y + 1][X] > 0 || gameBoard[Y + 2][X] > 0){
 4001fc4:	e0bffc17 	ldw	r2,-16(fp)
 4001fc8:	10bfffe0 	cmpeqi	r2,r2,-1
 4001fcc:	10002c1e 	bne	r2,zero,4002080 <shiftLeft+0xe38>
 4001fd0:	040100b4 	movhi	r16,1026
 4001fd4:	84080004 	addi	r16,r16,8192
 4001fd8:	e0bffd17 	ldw	r2,-12(fp)
 4001fdc:	01400284 	movi	r5,10
 4001fe0:	1009883a 	mov	r4,r2
 4001fe4:	400dcd40 	call	400dcd4 <__mulsi3>
 4001fe8:	1007883a 	mov	r3,r2
 4001fec:	e0bffc17 	ldw	r2,-16(fp)
 4001ff0:	1885883a 	add	r2,r3,r2
 4001ff4:	1085883a 	add	r2,r2,r2
 4001ff8:	1085883a 	add	r2,r2,r2
 4001ffc:	8085883a 	add	r2,r16,r2
 4002000:	10800017 	ldw	r2,0(r2)
 4002004:	00801e16 	blt	zero,r2,4002080 <shiftLeft+0xe38>
 4002008:	e0bffd17 	ldw	r2,-12(fp)
 400200c:	10800044 	addi	r2,r2,1
 4002010:	040100b4 	movhi	r16,1026
 4002014:	84080004 	addi	r16,r16,8192
 4002018:	01400284 	movi	r5,10
 400201c:	1009883a 	mov	r4,r2
 4002020:	400dcd40 	call	400dcd4 <__mulsi3>
 4002024:	1007883a 	mov	r3,r2
 4002028:	e0bffc17 	ldw	r2,-16(fp)
 400202c:	1885883a 	add	r2,r3,r2
 4002030:	1085883a 	add	r2,r2,r2
 4002034:	1085883a 	add	r2,r2,r2
 4002038:	8085883a 	add	r2,r16,r2
 400203c:	10800017 	ldw	r2,0(r2)
 4002040:	00800f16 	blt	zero,r2,4002080 <shiftLeft+0xe38>
 4002044:	e0bffd17 	ldw	r2,-12(fp)
 4002048:	10800084 	addi	r2,r2,2
 400204c:	040100b4 	movhi	r16,1026
 4002050:	84080004 	addi	r16,r16,8192
 4002054:	01400284 	movi	r5,10
 4002058:	1009883a 	mov	r4,r2
 400205c:	400dcd40 	call	400dcd4 <__mulsi3>
 4002060:	1007883a 	mov	r3,r2
 4002064:	e0bffc17 	ldw	r2,-16(fp)
 4002068:	1885883a 	add	r2,r3,r2
 400206c:	1085883a 	add	r2,r2,r2
 4002070:	1085883a 	add	r2,r2,r2
 4002074:	8085883a 	add	r2,r16,r2
 4002078:	10800017 	ldw	r2,0(r2)
 400207c:	0080020e 	bge	zero,r2,4002088 <shiftLeft+0xe40>
			return false;
 4002080:	0005883a 	mov	r2,zero
 4002084:	00007806 	br	4002268 <shiftLeft+0x1020>
		}
		draw17(X, Y, 0);
 4002088:	000d883a 	mov	r6,zero
 400208c:	e17ffd17 	ldw	r5,-12(fp)
 4002090:	e13ffc17 	ldw	r4,-16(fp)
 4002094:	40076c40 	call	40076c4 <draw17>
		draw17(X - 1, Y, -6);
 4002098:	e0bffc17 	ldw	r2,-16(fp)
 400209c:	10bfffc4 	addi	r2,r2,-1
 40020a0:	01bffe84 	movi	r6,-6
 40020a4:	e17ffd17 	ldw	r5,-12(fp)
 40020a8:	1009883a 	mov	r4,r2
 40020ac:	40076c40 	call	40076c4 <draw17>
		return true;
 40020b0:	00800044 	movi	r2,1
 40020b4:	00006c06 	br	4002268 <shiftLeft+0x1020>
	case 18:
		if(X == 0 || gameBoard[Y + 1][X - 1] > 0 || gameBoard[Y + 2][X] > 0){
 40020b8:	e0bffc17 	ldw	r2,-16(fp)
 40020bc:	10001e26 	beq	r2,zero,4002138 <shiftLeft+0xef0>
 40020c0:	e0bffd17 	ldw	r2,-12(fp)
 40020c4:	10c00044 	addi	r3,r2,1
 40020c8:	e0bffc17 	ldw	r2,-16(fp)
 40020cc:	147fffc4 	addi	r17,r2,-1
 40020d0:	040100b4 	movhi	r16,1026
 40020d4:	84080004 	addi	r16,r16,8192
 40020d8:	01400284 	movi	r5,10
 40020dc:	1809883a 	mov	r4,r3
 40020e0:	400dcd40 	call	400dcd4 <__mulsi3>
 40020e4:	1445883a 	add	r2,r2,r17
 40020e8:	1085883a 	add	r2,r2,r2
 40020ec:	1085883a 	add	r2,r2,r2
 40020f0:	8085883a 	add	r2,r16,r2
 40020f4:	10800017 	ldw	r2,0(r2)
 40020f8:	00800f16 	blt	zero,r2,4002138 <shiftLeft+0xef0>
 40020fc:	e0bffd17 	ldw	r2,-12(fp)
 4002100:	10800084 	addi	r2,r2,2
 4002104:	040100b4 	movhi	r16,1026
 4002108:	84080004 	addi	r16,r16,8192
 400210c:	01400284 	movi	r5,10
 4002110:	1009883a 	mov	r4,r2
 4002114:	400dcd40 	call	400dcd4 <__mulsi3>
 4002118:	1007883a 	mov	r3,r2
 400211c:	e0bffc17 	ldw	r2,-16(fp)
 4002120:	1885883a 	add	r2,r3,r2
 4002124:	1085883a 	add	r2,r2,r2
 4002128:	1085883a 	add	r2,r2,r2
 400212c:	8085883a 	add	r2,r16,r2
 4002130:	10800017 	ldw	r2,0(r2)
 4002134:	0080020e 	bge	zero,r2,4002140 <shiftLeft+0xef8>
			return false;
 4002138:	0005883a 	mov	r2,zero
 400213c:	00004a06 	br	4002268 <shiftLeft+0x1020>
		}
		draw18(X, Y, 0);
 4002140:	000d883a 	mov	r6,zero
 4002144:	e17ffd17 	ldw	r5,-12(fp)
 4002148:	e13ffc17 	ldw	r4,-16(fp)
 400214c:	40077a40 	call	40077a4 <draw18>
		draw18(X - 1, Y, -7);
 4002150:	e0bffc17 	ldw	r2,-16(fp)
 4002154:	10bfffc4 	addi	r2,r2,-1
 4002158:	01bffe44 	movi	r6,-7
 400215c:	e17ffd17 	ldw	r5,-12(fp)
 4002160:	1009883a 	mov	r4,r2
 4002164:	40077a40 	call	40077a4 <draw18>
		return true;
 4002168:	00800044 	movi	r2,1
 400216c:	00003e06 	br	4002268 <shiftLeft+0x1020>
	case 19:
		if(X == -1 || gameBoard[Y][X + 1] > 0 || gameBoard[Y + 1][X] > 0 || gameBoard[Y + 2][X] > 0){
 4002170:	e0bffc17 	ldw	r2,-16(fp)
 4002174:	10bfffe0 	cmpeqi	r2,r2,-1
 4002178:	10002c1e 	bne	r2,zero,400222c <shiftLeft+0xfe4>
 400217c:	e0bffc17 	ldw	r2,-16(fp)
 4002180:	14400044 	addi	r17,r2,1
 4002184:	040100b4 	movhi	r16,1026
 4002188:	84080004 	addi	r16,r16,8192
 400218c:	e0bffd17 	ldw	r2,-12(fp)
 4002190:	01400284 	movi	r5,10
 4002194:	1009883a 	mov	r4,r2
 4002198:	400dcd40 	call	400dcd4 <__mulsi3>
 400219c:	1445883a 	add	r2,r2,r17
 40021a0:	1085883a 	add	r2,r2,r2
 40021a4:	1085883a 	add	r2,r2,r2
 40021a8:	8085883a 	add	r2,r16,r2
 40021ac:	10800017 	ldw	r2,0(r2)
 40021b0:	00801e16 	blt	zero,r2,400222c <shiftLeft+0xfe4>
 40021b4:	e0bffd17 	ldw	r2,-12(fp)
 40021b8:	10800044 	addi	r2,r2,1
 40021bc:	040100b4 	movhi	r16,1026
 40021c0:	84080004 	addi	r16,r16,8192
 40021c4:	01400284 	movi	r5,10
 40021c8:	1009883a 	mov	r4,r2
 40021cc:	400dcd40 	call	400dcd4 <__mulsi3>
 40021d0:	1007883a 	mov	r3,r2
 40021d4:	e0bffc17 	ldw	r2,-16(fp)
 40021d8:	1885883a 	add	r2,r3,r2
 40021dc:	1085883a 	add	r2,r2,r2
 40021e0:	1085883a 	add	r2,r2,r2
 40021e4:	8085883a 	add	r2,r16,r2
 40021e8:	10800017 	ldw	r2,0(r2)
 40021ec:	00800f16 	blt	zero,r2,400222c <shiftLeft+0xfe4>
 40021f0:	e0bffd17 	ldw	r2,-12(fp)
 40021f4:	10800084 	addi	r2,r2,2
 40021f8:	040100b4 	movhi	r16,1026
 40021fc:	84080004 	addi	r16,r16,8192
 4002200:	01400284 	movi	r5,10
 4002204:	1009883a 	mov	r4,r2
 4002208:	400dcd40 	call	400dcd4 <__mulsi3>
 400220c:	1007883a 	mov	r3,r2
 4002210:	e0bffc17 	ldw	r2,-16(fp)
 4002214:	1885883a 	add	r2,r3,r2
 4002218:	1085883a 	add	r2,r2,r2
 400221c:	1085883a 	add	r2,r2,r2
 4002220:	8085883a 	add	r2,r16,r2
 4002224:	10800017 	ldw	r2,0(r2)
 4002228:	0080020e 	bge	zero,r2,4002234 <shiftLeft+0xfec>
			return false;
 400222c:	0005883a 	mov	r2,zero
 4002230:	00000d06 	br	4002268 <shiftLeft+0x1020>
		}
		draw19(X, Y, 0);
 4002234:	000d883a 	mov	r6,zero
 4002238:	e17ffd17 	ldw	r5,-12(fp)
 400223c:	e13ffc17 	ldw	r4,-16(fp)
 4002240:	40078d80 	call	40078d8 <draw19>
		draw19(X - 1, Y, -7);
 4002244:	e0bffc17 	ldw	r2,-16(fp)
 4002248:	10bfffc4 	addi	r2,r2,-1
 400224c:	01bffe44 	movi	r6,-7
 4002250:	e17ffd17 	ldw	r5,-12(fp)
 4002254:	1009883a 	mov	r4,r2
 4002258:	40078d80 	call	40078d8 <draw19>
		return true;
 400225c:	00800044 	movi	r2,1
 4002260:	00000106 	br	4002268 <shiftLeft+0x1020>
	default:
		return false;
 4002264:	0005883a 	mov	r2,zero
	}
}
 4002268:	e6fffe04 	addi	sp,fp,-8
 400226c:	dfc00317 	ldw	ra,12(sp)
 4002270:	df000217 	ldw	fp,8(sp)
 4002274:	dc400117 	ldw	r17,4(sp)
 4002278:	dc000017 	ldw	r16,0(sp)
 400227c:	dec00404 	addi	sp,sp,16
 4002280:	f800283a 	ret

04002284 <shiftRight>:

bool shiftRight(int blockState, int X, int Y){
 4002284:	defff504 	addi	sp,sp,-44
 4002288:	dfc00a15 	stw	ra,40(sp)
 400228c:	df000915 	stw	fp,36(sp)
 4002290:	dc400815 	stw	r17,32(sp)
 4002294:	dc000715 	stw	r16,28(sp)
 4002298:	df000904 	addi	fp,sp,36
 400229c:	e13ffb15 	stw	r4,-20(fp)
 40022a0:	e17ffc15 	stw	r5,-16(fp)
 40022a4:	e1bffd15 	stw	r6,-12(fp)
	switch(blockState){
 40022a8:	e0bffb17 	ldw	r2,-20(fp)
 40022ac:	10800528 	cmpgeui	r2,r2,20
 40022b0:	1003bb1e 	bne	r2,zero,40031a0 <shiftRight+0xf1c>
 40022b4:	e0bffb17 	ldw	r2,-20(fp)
 40022b8:	100690ba 	slli	r3,r2,2
 40022bc:	00810034 	movhi	r2,1024
 40022c0:	1088b404 	addi	r2,r2,8912
 40022c4:	1885883a 	add	r2,r3,r2
 40022c8:	10800017 	ldw	r2,0(r2)
 40022cc:	1000683a 	jmp	r2
 40022d0:	040031a0 	cmpeqi	r16,zero,198
 40022d4:	04002320 	cmpeqi	r16,zero,140
 40022d8:	040023a0 	cmpeqi	r16,zero,142
 40022dc:	0400244c 	andi	r16,zero,145
 40022e0:	04002504 	movi	r16,148
 40022e4:	040025c0 	call	40025c <__reset-0x3bffda4>
 40022e8:	0400266c 	andhi	r16,zero,153
 40022ec:	04002724 	muli	r16,zero,156
 40022f0:	04002818 	cmpnei	r16,zero,160
 40022f4:	040028d4 	movui	r16,163
 40022f8:	04002980 	call	400298 <__reset-0x3bffd68>
 40022fc:	04002a38 	rdprs	r16,zero,168
 4002300:	04002b2c 	andhi	r16,zero,172
 4002304:	04002be8 	cmpgeui	r16,zero,175
 4002308:	04002cdc 	xori	r16,zero,179
 400230c:	04002d98 	cmpnei	r16,zero,182
 4002310:	04002e44 	movi	r16,185
 4002314:	04002efc 	xorhi	r16,zero,187
 4002318:	04002ff0 	cmpltui	r16,zero,191
 400231c:	040030ac 	andhi	r16,zero,194
	case 1:
		if(X == 6 || gameBoard[Y + 2][X + 4] > 0){
 4002320:	e0bffc17 	ldw	r2,-16(fp)
 4002324:	108001a0 	cmpeqi	r2,r2,6
 4002328:	10000f1e 	bne	r2,zero,4002368 <shiftRight+0xe4>
 400232c:	e0bffd17 	ldw	r2,-12(fp)
 4002330:	10c00084 	addi	r3,r2,2
 4002334:	e0bffc17 	ldw	r2,-16(fp)
 4002338:	14400104 	addi	r17,r2,4
 400233c:	040100b4 	movhi	r16,1026
 4002340:	84080004 	addi	r16,r16,8192
 4002344:	01400284 	movi	r5,10
 4002348:	1809883a 	mov	r4,r3
 400234c:	400dcd40 	call	400dcd4 <__mulsi3>
 4002350:	1445883a 	add	r2,r2,r17
 4002354:	1085883a 	add	r2,r2,r2
 4002358:	1085883a 	add	r2,r2,r2
 400235c:	8085883a 	add	r2,r16,r2
 4002360:	10800017 	ldw	r2,0(r2)
 4002364:	0080020e 	bge	zero,r2,4002370 <shiftRight+0xec>
			return false;
 4002368:	0005883a 	mov	r2,zero
 400236c:	00038d06 	br	40031a4 <shiftRight+0xf20>
		}
		draw1(X, Y, 0);
 4002370:	000d883a 	mov	r6,zero
 4002374:	e17ffd17 	ldw	r5,-12(fp)
 4002378:	e13ffc17 	ldw	r4,-16(fp)
 400237c:	400687c0 	call	400687c <draw1>
		draw1(X + 1, Y, -1);
 4002380:	e0bffc17 	ldw	r2,-16(fp)
 4002384:	10800044 	addi	r2,r2,1
 4002388:	01bfffc4 	movi	r6,-1
 400238c:	e17ffd17 	ldw	r5,-12(fp)
 4002390:	1009883a 	mov	r4,r2
 4002394:	400687c0 	call	400687c <draw1>
		return true;
 4002398:	00800044 	movi	r2,1
 400239c:	00038106 	br	40031a4 <shiftRight+0xf20>
	case 2:
		if(X == 7){
 40023a0:	e0bffc17 	ldw	r2,-16(fp)
 40023a4:	108001d8 	cmpnei	r2,r2,7
 40023a8:	1000021e 	bne	r2,zero,40023b4 <shiftRight+0x130>
			return false;
 40023ac:	0005883a 	mov	r2,zero
 40023b0:	00037c06 	br	40031a4 <shiftRight+0xf20>
		}
		for(int i = 0; i < 4; i++){
 40023b4:	e03ff715 	stw	zero,-36(fp)
 40023b8:	00001506 	br	4002410 <shiftRight+0x18c>
			if(gameBoard[Y + i][X + 3] > 0){
 40023bc:	e0fffd17 	ldw	r3,-12(fp)
 40023c0:	e0bff717 	ldw	r2,-36(fp)
 40023c4:	1887883a 	add	r3,r3,r2
 40023c8:	e0bffc17 	ldw	r2,-16(fp)
 40023cc:	144000c4 	addi	r17,r2,3
 40023d0:	040100b4 	movhi	r16,1026
 40023d4:	84080004 	addi	r16,r16,8192
 40023d8:	01400284 	movi	r5,10
 40023dc:	1809883a 	mov	r4,r3
 40023e0:	400dcd40 	call	400dcd4 <__mulsi3>
 40023e4:	1445883a 	add	r2,r2,r17
 40023e8:	1085883a 	add	r2,r2,r2
 40023ec:	1085883a 	add	r2,r2,r2
 40023f0:	8085883a 	add	r2,r16,r2
 40023f4:	10800017 	ldw	r2,0(r2)
 40023f8:	0080020e 	bge	zero,r2,4002404 <shiftRight+0x180>
				return false;
 40023fc:	0005883a 	mov	r2,zero
 4002400:	00036806 	br	40031a4 <shiftRight+0xf20>
		return true;
	case 2:
		if(X == 7){
			return false;
		}
		for(int i = 0; i < 4; i++){
 4002404:	e0bff717 	ldw	r2,-36(fp)
 4002408:	10800044 	addi	r2,r2,1
 400240c:	e0bff715 	stw	r2,-36(fp)
 4002410:	e0bff717 	ldw	r2,-36(fp)
 4002414:	10800110 	cmplti	r2,r2,4
 4002418:	103fe81e 	bne	r2,zero,40023bc <__alt_mem_onchip_memory2_0+0xfbffd1fc>
			if(gameBoard[Y + i][X + 3] > 0){
				return false;
			}
		}
		draw2(X, Y, 0);
 400241c:	000d883a 	mov	r6,zero
 4002420:	e17ffd17 	ldw	r5,-12(fp)
 4002424:	e13ffc17 	ldw	r4,-16(fp)
 4002428:	400691c0 	call	400691c <draw2>
		draw2(X + 1, Y, -1);
 400242c:	e0bffc17 	ldw	r2,-16(fp)
 4002430:	10800044 	addi	r2,r2,1
 4002434:	01bfffc4 	movi	r6,-1
 4002438:	e17ffd17 	ldw	r5,-12(fp)
 400243c:	1009883a 	mov	r4,r2
 4002440:	400691c0 	call	400691c <draw2>
		return true;
 4002444:	00800044 	movi	r2,1
 4002448:	00035606 	br	40031a4 <shiftRight+0xf20>
	case 3:
		if(X == 8 || gameBoard[Y][X + 2] > 0 || gameBoard[Y + 1][X + 2] > 0){
 400244c:	e0bffc17 	ldw	r2,-16(fp)
 4002450:	10800220 	cmpeqi	r2,r2,8
 4002454:	10001d1e 	bne	r2,zero,40024cc <shiftRight+0x248>
 4002458:	e0bffc17 	ldw	r2,-16(fp)
 400245c:	14400084 	addi	r17,r2,2
 4002460:	040100b4 	movhi	r16,1026
 4002464:	84080004 	addi	r16,r16,8192
 4002468:	e0bffd17 	ldw	r2,-12(fp)
 400246c:	01400284 	movi	r5,10
 4002470:	1009883a 	mov	r4,r2
 4002474:	400dcd40 	call	400dcd4 <__mulsi3>
 4002478:	1445883a 	add	r2,r2,r17
 400247c:	1085883a 	add	r2,r2,r2
 4002480:	1085883a 	add	r2,r2,r2
 4002484:	8085883a 	add	r2,r16,r2
 4002488:	10800017 	ldw	r2,0(r2)
 400248c:	00800f16 	blt	zero,r2,40024cc <shiftRight+0x248>
 4002490:	e0bffd17 	ldw	r2,-12(fp)
 4002494:	10c00044 	addi	r3,r2,1
 4002498:	e0bffc17 	ldw	r2,-16(fp)
 400249c:	14400084 	addi	r17,r2,2
 40024a0:	040100b4 	movhi	r16,1026
 40024a4:	84080004 	addi	r16,r16,8192
 40024a8:	01400284 	movi	r5,10
 40024ac:	1809883a 	mov	r4,r3
 40024b0:	400dcd40 	call	400dcd4 <__mulsi3>
 40024b4:	1445883a 	add	r2,r2,r17
 40024b8:	1085883a 	add	r2,r2,r2
 40024bc:	1085883a 	add	r2,r2,r2
 40024c0:	8085883a 	add	r2,r16,r2
 40024c4:	10800017 	ldw	r2,0(r2)
 40024c8:	0080020e 	bge	zero,r2,40024d4 <shiftRight+0x250>
			return false;
 40024cc:	0005883a 	mov	r2,zero
 40024d0:	00033406 	br	40031a4 <shiftRight+0xf20>
		}
		draw3(X, Y, 0);
 40024d4:	000d883a 	mov	r6,zero
 40024d8:	e17ffd17 	ldw	r5,-12(fp)
 40024dc:	e13ffc17 	ldw	r4,-16(fp)
 40024e0:	40069c00 	call	40069c0 <draw3>
		draw3(X + 1, Y, -4);
 40024e4:	e0bffc17 	ldw	r2,-16(fp)
 40024e8:	10800044 	addi	r2,r2,1
 40024ec:	01bfff04 	movi	r6,-4
 40024f0:	e17ffd17 	ldw	r5,-12(fp)
 40024f4:	1009883a 	mov	r4,r2
 40024f8:	40069c00 	call	40069c0 <draw3>
		return true;
 40024fc:	00800044 	movi	r2,1
 4002500:	00032806 	br	40031a4 <shiftRight+0xf20>
	case 4:
		if(X == 7 || gameBoard[Y + 1][X + 3] > 0 || gameBoard[Y + 2][X + 3] > 0){
 4002504:	e0bffc17 	ldw	r2,-16(fp)
 4002508:	108001e0 	cmpeqi	r2,r2,7
 400250c:	10001e1e 	bne	r2,zero,4002588 <shiftRight+0x304>
 4002510:	e0bffd17 	ldw	r2,-12(fp)
 4002514:	10c00044 	addi	r3,r2,1
 4002518:	e0bffc17 	ldw	r2,-16(fp)
 400251c:	144000c4 	addi	r17,r2,3
 4002520:	040100b4 	movhi	r16,1026
 4002524:	84080004 	addi	r16,r16,8192
 4002528:	01400284 	movi	r5,10
 400252c:	1809883a 	mov	r4,r3
 4002530:	400dcd40 	call	400dcd4 <__mulsi3>
 4002534:	1445883a 	add	r2,r2,r17
 4002538:	1085883a 	add	r2,r2,r2
 400253c:	1085883a 	add	r2,r2,r2
 4002540:	8085883a 	add	r2,r16,r2
 4002544:	10800017 	ldw	r2,0(r2)
 4002548:	00800f16 	blt	zero,r2,4002588 <shiftRight+0x304>
 400254c:	e0bffd17 	ldw	r2,-12(fp)
 4002550:	10c00084 	addi	r3,r2,2
 4002554:	e0bffc17 	ldw	r2,-16(fp)
 4002558:	144000c4 	addi	r17,r2,3
 400255c:	040100b4 	movhi	r16,1026
 4002560:	84080004 	addi	r16,r16,8192
 4002564:	01400284 	movi	r5,10
 4002568:	1809883a 	mov	r4,r3
 400256c:	400dcd40 	call	400dcd4 <__mulsi3>
 4002570:	1445883a 	add	r2,r2,r17
 4002574:	1085883a 	add	r2,r2,r2
 4002578:	1085883a 	add	r2,r2,r2
 400257c:	8085883a 	add	r2,r16,r2
 4002580:	10800017 	ldw	r2,0(r2)
 4002584:	0080020e 	bge	zero,r2,4002590 <shiftRight+0x30c>
			return false;
 4002588:	0005883a 	mov	r2,zero
 400258c:	00030506 	br	40031a4 <shiftRight+0xf20>
		}
		draw4(X, Y, 0);
 4002590:	000d883a 	mov	r6,zero
 4002594:	e17ffd17 	ldw	r5,-12(fp)
 4002598:	e13ffc17 	ldw	r4,-16(fp)
 400259c:	4006aec0 	call	4006aec <draw4>
		draw4(X + 1, Y, -2);
 40025a0:	e0bffc17 	ldw	r2,-16(fp)
 40025a4:	10800044 	addi	r2,r2,1
 40025a8:	01bfff84 	movi	r6,-2
 40025ac:	e17ffd17 	ldw	r5,-12(fp)
 40025b0:	1009883a 	mov	r4,r2
 40025b4:	4006aec0 	call	4006aec <draw4>
		return true;
 40025b8:	00800044 	movi	r2,1
 40025bc:	0002f906 	br	40031a4 <shiftRight+0xf20>
	case 5:
		if(X == 8){
 40025c0:	e0bffc17 	ldw	r2,-16(fp)
 40025c4:	10800218 	cmpnei	r2,r2,8
 40025c8:	1000021e 	bne	r2,zero,40025d4 <shiftRight+0x350>
			return false;
 40025cc:	0005883a 	mov	r2,zero
 40025d0:	0002f406 	br	40031a4 <shiftRight+0xf20>
		}
		for(int i = 0; i < 3; i++){
 40025d4:	e03ff815 	stw	zero,-32(fp)
 40025d8:	00001506 	br	4002630 <shiftRight+0x3ac>
			if(gameBoard[Y + i][X + 2] > 0){
 40025dc:	e0fffd17 	ldw	r3,-12(fp)
 40025e0:	e0bff817 	ldw	r2,-32(fp)
 40025e4:	1887883a 	add	r3,r3,r2
 40025e8:	e0bffc17 	ldw	r2,-16(fp)
 40025ec:	14400084 	addi	r17,r2,2
 40025f0:	040100b4 	movhi	r16,1026
 40025f4:	84080004 	addi	r16,r16,8192
 40025f8:	01400284 	movi	r5,10
 40025fc:	1809883a 	mov	r4,r3
 4002600:	400dcd40 	call	400dcd4 <__mulsi3>
 4002604:	1445883a 	add	r2,r2,r17
 4002608:	1085883a 	add	r2,r2,r2
 400260c:	1085883a 	add	r2,r2,r2
 4002610:	8085883a 	add	r2,r16,r2
 4002614:	10800017 	ldw	r2,0(r2)
 4002618:	0080020e 	bge	zero,r2,4002624 <shiftRight+0x3a0>
				return false;
 400261c:	0005883a 	mov	r2,zero
 4002620:	0002e006 	br	40031a4 <shiftRight+0xf20>
		return true;
	case 5:
		if(X == 8){
			return false;
		}
		for(int i = 0; i < 3; i++){
 4002624:	e0bff817 	ldw	r2,-32(fp)
 4002628:	10800044 	addi	r2,r2,1
 400262c:	e0bff815 	stw	r2,-32(fp)
 4002630:	e0bff817 	ldw	r2,-32(fp)
 4002634:	108000d0 	cmplti	r2,r2,3
 4002638:	103fe81e 	bne	r2,zero,40025dc <__alt_mem_onchip_memory2_0+0xfbffd41c>
			if(gameBoard[Y + i][X + 2] > 0){
				return false;
			}
		}
		draw5(X, Y, 0);
 400263c:	000d883a 	mov	r6,zero
 4002640:	e17ffd17 	ldw	r5,-12(fp)
 4002644:	e13ffc17 	ldw	r4,-16(fp)
 4002648:	4006bc80 	call	4006bc8 <draw5>
		draw5(X + 1, Y, -2);
 400264c:	e0bffc17 	ldw	r2,-16(fp)
 4002650:	10800044 	addi	r2,r2,1
 4002654:	01bfff84 	movi	r6,-2
 4002658:	e17ffd17 	ldw	r5,-12(fp)
 400265c:	1009883a 	mov	r4,r2
 4002660:	4006bc80 	call	4006bc8 <draw5>
		return true;
 4002664:	00800044 	movi	r2,1
 4002668:	0002ce06 	br	40031a4 <shiftRight+0xf20>
	case 6:
		if(X == 7 || gameBoard[Y][X + 1] > 0 || gameBoard[Y + 1][X + 3] > 0){
 400266c:	e0bffc17 	ldw	r2,-16(fp)
 4002670:	108001e0 	cmpeqi	r2,r2,7
 4002674:	10001d1e 	bne	r2,zero,40026ec <shiftRight+0x468>
 4002678:	e0bffc17 	ldw	r2,-16(fp)
 400267c:	14400044 	addi	r17,r2,1
 4002680:	040100b4 	movhi	r16,1026
 4002684:	84080004 	addi	r16,r16,8192
 4002688:	e0bffd17 	ldw	r2,-12(fp)
 400268c:	01400284 	movi	r5,10
 4002690:	1009883a 	mov	r4,r2
 4002694:	400dcd40 	call	400dcd4 <__mulsi3>
 4002698:	1445883a 	add	r2,r2,r17
 400269c:	1085883a 	add	r2,r2,r2
 40026a0:	1085883a 	add	r2,r2,r2
 40026a4:	8085883a 	add	r2,r16,r2
 40026a8:	10800017 	ldw	r2,0(r2)
 40026ac:	00800f16 	blt	zero,r2,40026ec <shiftRight+0x468>
 40026b0:	e0bffd17 	ldw	r2,-12(fp)
 40026b4:	10c00044 	addi	r3,r2,1
 40026b8:	e0bffc17 	ldw	r2,-16(fp)
 40026bc:	144000c4 	addi	r17,r2,3
 40026c0:	040100b4 	movhi	r16,1026
 40026c4:	84080004 	addi	r16,r16,8192
 40026c8:	01400284 	movi	r5,10
 40026cc:	1809883a 	mov	r4,r3
 40026d0:	400dcd40 	call	400dcd4 <__mulsi3>
 40026d4:	1445883a 	add	r2,r2,r17
 40026d8:	1085883a 	add	r2,r2,r2
 40026dc:	1085883a 	add	r2,r2,r2
 40026e0:	8085883a 	add	r2,r16,r2
 40026e4:	10800017 	ldw	r2,0(r2)
 40026e8:	0080020e 	bge	zero,r2,40026f4 <shiftRight+0x470>
			return false;
 40026ec:	0005883a 	mov	r2,zero
 40026f0:	0002ac06 	br	40031a4 <shiftRight+0xf20>
		}
		draw6(X, Y, 0);
 40026f4:	000d883a 	mov	r6,zero
 40026f8:	e17ffd17 	ldw	r5,-12(fp)
 40026fc:	e13ffc17 	ldw	r4,-16(fp)
 4002700:	4006ca80 	call	4006ca8 <draw6>
		draw6(X + 1, Y, -2);
 4002704:	e0bffc17 	ldw	r2,-16(fp)
 4002708:	10800044 	addi	r2,r2,1
 400270c:	01bfff84 	movi	r6,-2
 4002710:	e17ffd17 	ldw	r5,-12(fp)
 4002714:	1009883a 	mov	r4,r2
 4002718:	4006ca80 	call	4006ca8 <draw6>
		return true;
 400271c:	00800044 	movi	r2,1
 4002720:	0002a006 	br	40031a4 <shiftRight+0xf20>
	case 7:
		if(X == 7 || gameBoard[Y][X +3] > 0 || gameBoard[Y + 1][X + 2] > 0 || gameBoard[Y + 2][X + 2] > 0){
 4002724:	e0bffc17 	ldw	r2,-16(fp)
 4002728:	108001e0 	cmpeqi	r2,r2,7
 400272c:	10002c1e 	bne	r2,zero,40027e0 <shiftRight+0x55c>
 4002730:	e0bffc17 	ldw	r2,-16(fp)
 4002734:	144000c4 	addi	r17,r2,3
 4002738:	040100b4 	movhi	r16,1026
 400273c:	84080004 	addi	r16,r16,8192
 4002740:	e0bffd17 	ldw	r2,-12(fp)
 4002744:	01400284 	movi	r5,10
 4002748:	1009883a 	mov	r4,r2
 400274c:	400dcd40 	call	400dcd4 <__mulsi3>
 4002750:	1445883a 	add	r2,r2,r17
 4002754:	1085883a 	add	r2,r2,r2
 4002758:	1085883a 	add	r2,r2,r2
 400275c:	8085883a 	add	r2,r16,r2
 4002760:	10800017 	ldw	r2,0(r2)
 4002764:	00801e16 	blt	zero,r2,40027e0 <shiftRight+0x55c>
 4002768:	e0bffd17 	ldw	r2,-12(fp)
 400276c:	10c00044 	addi	r3,r2,1
 4002770:	e0bffc17 	ldw	r2,-16(fp)
 4002774:	14400084 	addi	r17,r2,2
 4002778:	040100b4 	movhi	r16,1026
 400277c:	84080004 	addi	r16,r16,8192
 4002780:	01400284 	movi	r5,10
 4002784:	1809883a 	mov	r4,r3
 4002788:	400dcd40 	call	400dcd4 <__mulsi3>
 400278c:	1445883a 	add	r2,r2,r17
 4002790:	1085883a 	add	r2,r2,r2
 4002794:	1085883a 	add	r2,r2,r2
 4002798:	8085883a 	add	r2,r16,r2
 400279c:	10800017 	ldw	r2,0(r2)
 40027a0:	00800f16 	blt	zero,r2,40027e0 <shiftRight+0x55c>
 40027a4:	e0bffd17 	ldw	r2,-12(fp)
 40027a8:	10c00084 	addi	r3,r2,2
 40027ac:	e0bffc17 	ldw	r2,-16(fp)
 40027b0:	14400084 	addi	r17,r2,2
 40027b4:	040100b4 	movhi	r16,1026
 40027b8:	84080004 	addi	r16,r16,8192
 40027bc:	01400284 	movi	r5,10
 40027c0:	1809883a 	mov	r4,r3
 40027c4:	400dcd40 	call	400dcd4 <__mulsi3>
 40027c8:	1445883a 	add	r2,r2,r17
 40027cc:	1085883a 	add	r2,r2,r2
 40027d0:	1085883a 	add	r2,r2,r2
 40027d4:	8085883a 	add	r2,r16,r2
 40027d8:	10800017 	ldw	r2,0(r2)
 40027dc:	0080020e 	bge	zero,r2,40027e8 <shiftRight+0x564>
			return false;
 40027e0:	0005883a 	mov	r2,zero
 40027e4:	00026f06 	br	40031a4 <shiftRight+0xf20>
		}
		draw7(X, Y, 0);
 40027e8:	000d883a 	mov	r6,zero
 40027ec:	e17ffd17 	ldw	r5,-12(fp)
 40027f0:	e13ffc17 	ldw	r4,-16(fp)
 40027f4:	4006d800 	call	4006d80 <draw7>
		draw7(X + 1, Y, -2);
 40027f8:	e0bffc17 	ldw	r2,-16(fp)
 40027fc:	10800044 	addi	r2,r2,1
 4002800:	01bfff84 	movi	r6,-2
 4002804:	e17ffd17 	ldw	r5,-12(fp)
 4002808:	1009883a 	mov	r4,r2
 400280c:	4006d800 	call	4006d80 <draw7>
		return true;
 4002810:	00800044 	movi	r2,1
 4002814:	00026306 	br	40031a4 <shiftRight+0xf20>
	case 8:
		if(X == 7 || gameBoard[Y + 1][X + 3] > 0 || gameBoard[Y + 2][X + 1] > 0){
 4002818:	e0bffc17 	ldw	r2,-16(fp)
 400281c:	108001e0 	cmpeqi	r2,r2,7
 4002820:	10001e1e 	bne	r2,zero,400289c <shiftRight+0x618>
 4002824:	e0bffd17 	ldw	r2,-12(fp)
 4002828:	10c00044 	addi	r3,r2,1
 400282c:	e0bffc17 	ldw	r2,-16(fp)
 4002830:	144000c4 	addi	r17,r2,3
 4002834:	040100b4 	movhi	r16,1026
 4002838:	84080004 	addi	r16,r16,8192
 400283c:	01400284 	movi	r5,10
 4002840:	1809883a 	mov	r4,r3
 4002844:	400dcd40 	call	400dcd4 <__mulsi3>
 4002848:	1445883a 	add	r2,r2,r17
 400284c:	1085883a 	add	r2,r2,r2
 4002850:	1085883a 	add	r2,r2,r2
 4002854:	8085883a 	add	r2,r16,r2
 4002858:	10800017 	ldw	r2,0(r2)
 400285c:	00800f16 	blt	zero,r2,400289c <shiftRight+0x618>
 4002860:	e0bffd17 	ldw	r2,-12(fp)
 4002864:	10c00084 	addi	r3,r2,2
 4002868:	e0bffc17 	ldw	r2,-16(fp)
 400286c:	14400044 	addi	r17,r2,1
 4002870:	040100b4 	movhi	r16,1026
 4002874:	84080004 	addi	r16,r16,8192
 4002878:	01400284 	movi	r5,10
 400287c:	1809883a 	mov	r4,r3
 4002880:	400dcd40 	call	400dcd4 <__mulsi3>
 4002884:	1445883a 	add	r2,r2,r17
 4002888:	1085883a 	add	r2,r2,r2
 400288c:	1085883a 	add	r2,r2,r2
 4002890:	8085883a 	add	r2,r16,r2
 4002894:	10800017 	ldw	r2,0(r2)
 4002898:	0080020e 	bge	zero,r2,40028a4 <shiftRight+0x620>
			return false;
 400289c:	0005883a 	mov	r2,zero
 40028a0:	00024006 	br	40031a4 <shiftRight+0xf20>
		}
		draw8(X, Y, 0);
 40028a4:	000d883a 	mov	r6,zero
 40028a8:	e17ffd17 	ldw	r5,-12(fp)
 40028ac:	e13ffc17 	ldw	r4,-16(fp)
 40028b0:	4006e5c0 	call	4006e5c <draw8>
		draw8(X + 1, Y, -3);
 40028b4:	e0bffc17 	ldw	r2,-16(fp)
 40028b8:	10800044 	addi	r2,r2,1
 40028bc:	01bfff44 	movi	r6,-3
 40028c0:	e17ffd17 	ldw	r5,-12(fp)
 40028c4:	1009883a 	mov	r4,r2
 40028c8:	4006e5c0 	call	4006e5c <draw8>
		return true;
 40028cc:	00800044 	movi	r2,1
 40028d0:	00023406 	br	40031a4 <shiftRight+0xf20>
	case 9:
		if(X == 8){
 40028d4:	e0bffc17 	ldw	r2,-16(fp)
 40028d8:	10800218 	cmpnei	r2,r2,8
 40028dc:	1000021e 	bne	r2,zero,40028e8 <shiftRight+0x664>
			return false;
 40028e0:	0005883a 	mov	r2,zero
 40028e4:	00022f06 	br	40031a4 <shiftRight+0xf20>
		}
		for(int i = 0; i < 3; i++){
 40028e8:	e03ff915 	stw	zero,-28(fp)
 40028ec:	00001506 	br	4002944 <shiftRight+0x6c0>
			if(gameBoard[Y + i][X + 2] > 0){
 40028f0:	e0fffd17 	ldw	r3,-12(fp)
 40028f4:	e0bff917 	ldw	r2,-28(fp)
 40028f8:	1887883a 	add	r3,r3,r2
 40028fc:	e0bffc17 	ldw	r2,-16(fp)
 4002900:	14400084 	addi	r17,r2,2
 4002904:	040100b4 	movhi	r16,1026
 4002908:	84080004 	addi	r16,r16,8192
 400290c:	01400284 	movi	r5,10
 4002910:	1809883a 	mov	r4,r3
 4002914:	400dcd40 	call	400dcd4 <__mulsi3>
 4002918:	1445883a 	add	r2,r2,r17
 400291c:	1085883a 	add	r2,r2,r2
 4002920:	1085883a 	add	r2,r2,r2
 4002924:	8085883a 	add	r2,r16,r2
 4002928:	10800017 	ldw	r2,0(r2)
 400292c:	0080020e 	bge	zero,r2,4002938 <shiftRight+0x6b4>
				return false;
 4002930:	0005883a 	mov	r2,zero
 4002934:	00021b06 	br	40031a4 <shiftRight+0xf20>
		return true;
	case 9:
		if(X == 8){
			return false;
		}
		for(int i = 0; i < 3; i++){
 4002938:	e0bff917 	ldw	r2,-28(fp)
 400293c:	10800044 	addi	r2,r2,1
 4002940:	e0bff915 	stw	r2,-28(fp)
 4002944:	e0bff917 	ldw	r2,-28(fp)
 4002948:	108000d0 	cmplti	r2,r2,3
 400294c:	103fe81e 	bne	r2,zero,40028f0 <__alt_mem_onchip_memory2_0+0xfbffd730>
			if(gameBoard[Y + i][X + 2] > 0){
				return false;
			}
		}
		draw9(X, Y, 0);
 4002950:	000d883a 	mov	r6,zero
 4002954:	e17ffd17 	ldw	r5,-12(fp)
 4002958:	e13ffc17 	ldw	r4,-16(fp)
 400295c:	4006f380 	call	4006f38 <draw9>
		draw9(X + 1, Y, -3);
 4002960:	e0bffc17 	ldw	r2,-16(fp)
 4002964:	10800044 	addi	r2,r2,1
 4002968:	01bfff44 	movi	r6,-3
 400296c:	e17ffd17 	ldw	r5,-12(fp)
 4002970:	1009883a 	mov	r4,r2
 4002974:	4006f380 	call	4006f38 <draw9>
		return true;
 4002978:	00800044 	movi	r2,1
 400297c:	00020906 	br	40031a4 <shiftRight+0xf20>
	case 10:
		if(X == 7 || gameBoard[Y][X + 3] > 0 || gameBoard[Y + 1][X + 3] > 0){
 4002980:	e0bffc17 	ldw	r2,-16(fp)
 4002984:	108001e0 	cmpeqi	r2,r2,7
 4002988:	10001d1e 	bne	r2,zero,4002a00 <shiftRight+0x77c>
 400298c:	e0bffc17 	ldw	r2,-16(fp)
 4002990:	144000c4 	addi	r17,r2,3
 4002994:	040100b4 	movhi	r16,1026
 4002998:	84080004 	addi	r16,r16,8192
 400299c:	e0bffd17 	ldw	r2,-12(fp)
 40029a0:	01400284 	movi	r5,10
 40029a4:	1009883a 	mov	r4,r2
 40029a8:	400dcd40 	call	400dcd4 <__mulsi3>
 40029ac:	1445883a 	add	r2,r2,r17
 40029b0:	1085883a 	add	r2,r2,r2
 40029b4:	1085883a 	add	r2,r2,r2
 40029b8:	8085883a 	add	r2,r16,r2
 40029bc:	10800017 	ldw	r2,0(r2)
 40029c0:	00800f16 	blt	zero,r2,4002a00 <shiftRight+0x77c>
 40029c4:	e0bffd17 	ldw	r2,-12(fp)
 40029c8:	10c00044 	addi	r3,r2,1
 40029cc:	e0bffc17 	ldw	r2,-16(fp)
 40029d0:	144000c4 	addi	r17,r2,3
 40029d4:	040100b4 	movhi	r16,1026
 40029d8:	84080004 	addi	r16,r16,8192
 40029dc:	01400284 	movi	r5,10
 40029e0:	1809883a 	mov	r4,r3
 40029e4:	400dcd40 	call	400dcd4 <__mulsi3>
 40029e8:	1445883a 	add	r2,r2,r17
 40029ec:	1085883a 	add	r2,r2,r2
 40029f0:	1085883a 	add	r2,r2,r2
 40029f4:	8085883a 	add	r2,r16,r2
 40029f8:	10800017 	ldw	r2,0(r2)
 40029fc:	0080020e 	bge	zero,r2,4002a08 <shiftRight+0x784>
			return false;
 4002a00:	0005883a 	mov	r2,zero
 4002a04:	0001e706 	br	40031a4 <shiftRight+0xf20>
		}
		draw10(X, Y, 0);
 4002a08:	000d883a 	mov	r6,zero
 4002a0c:	e17ffd17 	ldw	r5,-12(fp)
 4002a10:	e13ffc17 	ldw	r4,-16(fp)
 4002a14:	40070140 	call	4007014 <draw10>
		draw10(X + 1, Y, -3);
 4002a18:	e0bffc17 	ldw	r2,-16(fp)
 4002a1c:	10800044 	addi	r2,r2,1
 4002a20:	01bfff44 	movi	r6,-3
 4002a24:	e17ffd17 	ldw	r5,-12(fp)
 4002a28:	1009883a 	mov	r4,r2
 4002a2c:	40070140 	call	4007014 <draw10>
		return true;
 4002a30:	00800044 	movi	r2,1
 4002a34:	0001db06 	br	40031a4 <shiftRight+0xf20>
	case 11:
		if(X == 7 || gameBoard[Y][X + 2] > 0 || gameBoard[Y + 1][X + 2] > 0 || gameBoard[Y + 2][X + 3] > 0){
 4002a38:	e0bffc17 	ldw	r2,-16(fp)
 4002a3c:	108001e0 	cmpeqi	r2,r2,7
 4002a40:	10002c1e 	bne	r2,zero,4002af4 <shiftRight+0x870>
 4002a44:	e0bffc17 	ldw	r2,-16(fp)
 4002a48:	14400084 	addi	r17,r2,2
 4002a4c:	040100b4 	movhi	r16,1026
 4002a50:	84080004 	addi	r16,r16,8192
 4002a54:	e0bffd17 	ldw	r2,-12(fp)
 4002a58:	01400284 	movi	r5,10
 4002a5c:	1009883a 	mov	r4,r2
 4002a60:	400dcd40 	call	400dcd4 <__mulsi3>
 4002a64:	1445883a 	add	r2,r2,r17
 4002a68:	1085883a 	add	r2,r2,r2
 4002a6c:	1085883a 	add	r2,r2,r2
 4002a70:	8085883a 	add	r2,r16,r2
 4002a74:	10800017 	ldw	r2,0(r2)
 4002a78:	00801e16 	blt	zero,r2,4002af4 <shiftRight+0x870>
 4002a7c:	e0bffd17 	ldw	r2,-12(fp)
 4002a80:	10c00044 	addi	r3,r2,1
 4002a84:	e0bffc17 	ldw	r2,-16(fp)
 4002a88:	14400084 	addi	r17,r2,2
 4002a8c:	040100b4 	movhi	r16,1026
 4002a90:	84080004 	addi	r16,r16,8192
 4002a94:	01400284 	movi	r5,10
 4002a98:	1809883a 	mov	r4,r3
 4002a9c:	400dcd40 	call	400dcd4 <__mulsi3>
 4002aa0:	1445883a 	add	r2,r2,r17
 4002aa4:	1085883a 	add	r2,r2,r2
 4002aa8:	1085883a 	add	r2,r2,r2
 4002aac:	8085883a 	add	r2,r16,r2
 4002ab0:	10800017 	ldw	r2,0(r2)
 4002ab4:	00800f16 	blt	zero,r2,4002af4 <shiftRight+0x870>
 4002ab8:	e0bffd17 	ldw	r2,-12(fp)
 4002abc:	10c00084 	addi	r3,r2,2
 4002ac0:	e0bffc17 	ldw	r2,-16(fp)
 4002ac4:	144000c4 	addi	r17,r2,3
 4002ac8:	040100b4 	movhi	r16,1026
 4002acc:	84080004 	addi	r16,r16,8192
 4002ad0:	01400284 	movi	r5,10
 4002ad4:	1809883a 	mov	r4,r3
 4002ad8:	400dcd40 	call	400dcd4 <__mulsi3>
 4002adc:	1445883a 	add	r2,r2,r17
 4002ae0:	1085883a 	add	r2,r2,r2
 4002ae4:	1085883a 	add	r2,r2,r2
 4002ae8:	8085883a 	add	r2,r16,r2
 4002aec:	10800017 	ldw	r2,0(r2)
 4002af0:	0080020e 	bge	zero,r2,4002afc <shiftRight+0x878>
			return false;
 4002af4:	0005883a 	mov	r2,zero
 4002af8:	0001aa06 	br	40031a4 <shiftRight+0xf20>
		}
		draw11(X, Y, 0);
 4002afc:	000d883a 	mov	r6,zero
 4002b00:	e17ffd17 	ldw	r5,-12(fp)
 4002b04:	e13ffc17 	ldw	r4,-16(fp)
 4002b08:	40070ec0 	call	40070ec <draw11>
		draw11(X + 1, Y, -3);
 4002b0c:	e0bffc17 	ldw	r2,-16(fp)
 4002b10:	10800044 	addi	r2,r2,1
 4002b14:	01bfff44 	movi	r6,-3
 4002b18:	e17ffd17 	ldw	r5,-12(fp)
 4002b1c:	1009883a 	mov	r4,r2
 4002b20:	40070ec0 	call	40070ec <draw11>
		return true;
 4002b24:	00800044 	movi	r2,1
 4002b28:	00019e06 	br	40031a4 <shiftRight+0xf20>
	case 12:
		if(X == 7 || gameBoard[Y + 1][X + 3] > 0 || gameBoard[Y + 2][X + 2] > 0){
 4002b2c:	e0bffc17 	ldw	r2,-16(fp)
 4002b30:	108001e0 	cmpeqi	r2,r2,7
 4002b34:	10001e1e 	bne	r2,zero,4002bb0 <shiftRight+0x92c>
 4002b38:	e0bffd17 	ldw	r2,-12(fp)
 4002b3c:	10c00044 	addi	r3,r2,1
 4002b40:	e0bffc17 	ldw	r2,-16(fp)
 4002b44:	144000c4 	addi	r17,r2,3
 4002b48:	040100b4 	movhi	r16,1026
 4002b4c:	84080004 	addi	r16,r16,8192
 4002b50:	01400284 	movi	r5,10
 4002b54:	1809883a 	mov	r4,r3
 4002b58:	400dcd40 	call	400dcd4 <__mulsi3>
 4002b5c:	1445883a 	add	r2,r2,r17
 4002b60:	1085883a 	add	r2,r2,r2
 4002b64:	1085883a 	add	r2,r2,r2
 4002b68:	8085883a 	add	r2,r16,r2
 4002b6c:	10800017 	ldw	r2,0(r2)
 4002b70:	00800f16 	blt	zero,r2,4002bb0 <shiftRight+0x92c>
 4002b74:	e0bffd17 	ldw	r2,-12(fp)
 4002b78:	10c00084 	addi	r3,r2,2
 4002b7c:	e0bffc17 	ldw	r2,-16(fp)
 4002b80:	14400084 	addi	r17,r2,2
 4002b84:	040100b4 	movhi	r16,1026
 4002b88:	84080004 	addi	r16,r16,8192
 4002b8c:	01400284 	movi	r5,10
 4002b90:	1809883a 	mov	r4,r3
 4002b94:	400dcd40 	call	400dcd4 <__mulsi3>
 4002b98:	1445883a 	add	r2,r2,r17
 4002b9c:	1085883a 	add	r2,r2,r2
 4002ba0:	1085883a 	add	r2,r2,r2
 4002ba4:	8085883a 	add	r2,r16,r2
 4002ba8:	10800017 	ldw	r2,0(r2)
 4002bac:	0080020e 	bge	zero,r2,4002bb8 <shiftRight+0x934>
			return false;
 4002bb0:	0005883a 	mov	r2,zero
 4002bb4:	00017b06 	br	40031a4 <shiftRight+0xf20>
		}
		draw12(X, Y, 0);
 4002bb8:	000d883a 	mov	r6,zero
 4002bbc:	e17ffd17 	ldw	r5,-12(fp)
 4002bc0:	e13ffc17 	ldw	r4,-16(fp)
 4002bc4:	40071cc0 	call	40071cc <draw12>
		draw12(X + 1, Y, -5);
 4002bc8:	e0bffc17 	ldw	r2,-16(fp)
 4002bcc:	10800044 	addi	r2,r2,1
 4002bd0:	01bffec4 	movi	r6,-5
 4002bd4:	e17ffd17 	ldw	r5,-12(fp)
 4002bd8:	1009883a 	mov	r4,r2
 4002bdc:	40071cc0 	call	40071cc <draw12>
		return true;
 4002be0:	00800044 	movi	r2,1
 4002be4:	00016f06 	br	40031a4 <shiftRight+0xf20>
	case 13:
		if(X == 7 || gameBoard[Y][X + 2] > 0 || gameBoard[Y + 1][X + 3] > 0 || gameBoard[Y + 2][X + 3] > 0){
 4002be8:	e0bffc17 	ldw	r2,-16(fp)
 4002bec:	108001e0 	cmpeqi	r2,r2,7
 4002bf0:	10002c1e 	bne	r2,zero,4002ca4 <shiftRight+0xa20>
 4002bf4:	e0bffc17 	ldw	r2,-16(fp)
 4002bf8:	14400084 	addi	r17,r2,2
 4002bfc:	040100b4 	movhi	r16,1026
 4002c00:	84080004 	addi	r16,r16,8192
 4002c04:	e0bffd17 	ldw	r2,-12(fp)
 4002c08:	01400284 	movi	r5,10
 4002c0c:	1009883a 	mov	r4,r2
 4002c10:	400dcd40 	call	400dcd4 <__mulsi3>
 4002c14:	1445883a 	add	r2,r2,r17
 4002c18:	1085883a 	add	r2,r2,r2
 4002c1c:	1085883a 	add	r2,r2,r2
 4002c20:	8085883a 	add	r2,r16,r2
 4002c24:	10800017 	ldw	r2,0(r2)
 4002c28:	00801e16 	blt	zero,r2,4002ca4 <shiftRight+0xa20>
 4002c2c:	e0bffd17 	ldw	r2,-12(fp)
 4002c30:	10c00044 	addi	r3,r2,1
 4002c34:	e0bffc17 	ldw	r2,-16(fp)
 4002c38:	144000c4 	addi	r17,r2,3
 4002c3c:	040100b4 	movhi	r16,1026
 4002c40:	84080004 	addi	r16,r16,8192
 4002c44:	01400284 	movi	r5,10
 4002c48:	1809883a 	mov	r4,r3
 4002c4c:	400dcd40 	call	400dcd4 <__mulsi3>
 4002c50:	1445883a 	add	r2,r2,r17
 4002c54:	1085883a 	add	r2,r2,r2
 4002c58:	1085883a 	add	r2,r2,r2
 4002c5c:	8085883a 	add	r2,r16,r2
 4002c60:	10800017 	ldw	r2,0(r2)
 4002c64:	00800f16 	blt	zero,r2,4002ca4 <shiftRight+0xa20>
 4002c68:	e0bffd17 	ldw	r2,-12(fp)
 4002c6c:	10c00084 	addi	r3,r2,2
 4002c70:	e0bffc17 	ldw	r2,-16(fp)
 4002c74:	144000c4 	addi	r17,r2,3
 4002c78:	040100b4 	movhi	r16,1026
 4002c7c:	84080004 	addi	r16,r16,8192
 4002c80:	01400284 	movi	r5,10
 4002c84:	1809883a 	mov	r4,r3
 4002c88:	400dcd40 	call	400dcd4 <__mulsi3>
 4002c8c:	1445883a 	add	r2,r2,r17
 4002c90:	1085883a 	add	r2,r2,r2
 4002c94:	1085883a 	add	r2,r2,r2
 4002c98:	8085883a 	add	r2,r16,r2
 4002c9c:	10800017 	ldw	r2,0(r2)
 4002ca0:	0080020e 	bge	zero,r2,4002cac <shiftRight+0xa28>
			return false;
 4002ca4:	0005883a 	mov	r2,zero
 4002ca8:	00013e06 	br	40031a4 <shiftRight+0xf20>
		}
		draw13(X, Y, 0);
 4002cac:	000d883a 	mov	r6,zero
 4002cb0:	e17ffd17 	ldw	r5,-12(fp)
 4002cb4:	e13ffc17 	ldw	r4,-16(fp)
 4002cb8:	40073000 	call	4007300 <draw13>
		draw13(X + 1, Y, -5);
 4002cbc:	e0bffc17 	ldw	r2,-16(fp)
 4002cc0:	10800044 	addi	r2,r2,1
 4002cc4:	01bffec4 	movi	r6,-5
 4002cc8:	e17ffd17 	ldw	r5,-12(fp)
 4002ccc:	1009883a 	mov	r4,r2
 4002cd0:	40073000 	call	4007300 <draw13>
		return true;
 4002cd4:	00800044 	movi	r2,1
 4002cd8:	00013206 	br	40031a4 <shiftRight+0xf20>
	case 14:
		if(X == 7 || gameBoard[Y + 1][X + 3] > 0 || gameBoard[Y + 2][X + 2] > 0){
 4002cdc:	e0bffc17 	ldw	r2,-16(fp)
 4002ce0:	108001e0 	cmpeqi	r2,r2,7
 4002ce4:	10001e1e 	bne	r2,zero,4002d60 <shiftRight+0xadc>
 4002ce8:	e0bffd17 	ldw	r2,-12(fp)
 4002cec:	10c00044 	addi	r3,r2,1
 4002cf0:	e0bffc17 	ldw	r2,-16(fp)
 4002cf4:	144000c4 	addi	r17,r2,3
 4002cf8:	040100b4 	movhi	r16,1026
 4002cfc:	84080004 	addi	r16,r16,8192
 4002d00:	01400284 	movi	r5,10
 4002d04:	1809883a 	mov	r4,r3
 4002d08:	400dcd40 	call	400dcd4 <__mulsi3>
 4002d0c:	1445883a 	add	r2,r2,r17
 4002d10:	1085883a 	add	r2,r2,r2
 4002d14:	1085883a 	add	r2,r2,r2
 4002d18:	8085883a 	add	r2,r16,r2
 4002d1c:	10800017 	ldw	r2,0(r2)
 4002d20:	00800f16 	blt	zero,r2,4002d60 <shiftRight+0xadc>
 4002d24:	e0bffd17 	ldw	r2,-12(fp)
 4002d28:	10c00084 	addi	r3,r2,2
 4002d2c:	e0bffc17 	ldw	r2,-16(fp)
 4002d30:	14400084 	addi	r17,r2,2
 4002d34:	040100b4 	movhi	r16,1026
 4002d38:	84080004 	addi	r16,r16,8192
 4002d3c:	01400284 	movi	r5,10
 4002d40:	1809883a 	mov	r4,r3
 4002d44:	400dcd40 	call	400dcd4 <__mulsi3>
 4002d48:	1445883a 	add	r2,r2,r17
 4002d4c:	1085883a 	add	r2,r2,r2
 4002d50:	1085883a 	add	r2,r2,r2
 4002d54:	8085883a 	add	r2,r16,r2
 4002d58:	10800017 	ldw	r2,0(r2)
 4002d5c:	0080020e 	bge	zero,r2,4002d68 <shiftRight+0xae4>
			return false;
 4002d60:	0005883a 	mov	r2,zero
 4002d64:	00010f06 	br	40031a4 <shiftRight+0xf20>
		}
		draw14(X, Y, 0);
 4002d68:	000d883a 	mov	r6,zero
 4002d6c:	e17ffd17 	ldw	r5,-12(fp)
 4002d70:	e13ffc17 	ldw	r4,-16(fp)
 4002d74:	40074300 	call	4007430 <draw14>
		draw14(X + 1, Y, -6);
 4002d78:	e0bffc17 	ldw	r2,-16(fp)
 4002d7c:	10800044 	addi	r2,r2,1
 4002d80:	01bffe84 	movi	r6,-6
 4002d84:	e17ffd17 	ldw	r5,-12(fp)
 4002d88:	1009883a 	mov	r4,r2
 4002d8c:	40074300 	call	4007430 <draw14>
		return true;
 4002d90:	00800044 	movi	r2,1
 4002d94:	00010306 	br	40031a4 <shiftRight+0xf20>
	case 15:
		if(X == 8){
 4002d98:	e0bffc17 	ldw	r2,-16(fp)
 4002d9c:	10800218 	cmpnei	r2,r2,8
 4002da0:	1000021e 	bne	r2,zero,4002dac <shiftRight+0xb28>
			return false;
 4002da4:	0005883a 	mov	r2,zero
 4002da8:	0000fe06 	br	40031a4 <shiftRight+0xf20>
		}
		for(int i = 0; i < 3; i++){
 4002dac:	e03ffa15 	stw	zero,-24(fp)
 4002db0:	00001506 	br	4002e08 <shiftRight+0xb84>
			if(gameBoard[Y + i][X + 2] > 0){
 4002db4:	e0fffd17 	ldw	r3,-12(fp)
 4002db8:	e0bffa17 	ldw	r2,-24(fp)
 4002dbc:	1887883a 	add	r3,r3,r2
 4002dc0:	e0bffc17 	ldw	r2,-16(fp)
 4002dc4:	14400084 	addi	r17,r2,2
 4002dc8:	040100b4 	movhi	r16,1026
 4002dcc:	84080004 	addi	r16,r16,8192
 4002dd0:	01400284 	movi	r5,10
 4002dd4:	1809883a 	mov	r4,r3
 4002dd8:	400dcd40 	call	400dcd4 <__mulsi3>
 4002ddc:	1445883a 	add	r2,r2,r17
 4002de0:	1085883a 	add	r2,r2,r2
 4002de4:	1085883a 	add	r2,r2,r2
 4002de8:	8085883a 	add	r2,r16,r2
 4002dec:	10800017 	ldw	r2,0(r2)
 4002df0:	0080020e 	bge	zero,r2,4002dfc <shiftRight+0xb78>
				return false;
 4002df4:	0005883a 	mov	r2,zero
 4002df8:	0000ea06 	br	40031a4 <shiftRight+0xf20>
		return true;
	case 15:
		if(X == 8){
			return false;
		}
		for(int i = 0; i < 3; i++){
 4002dfc:	e0bffa17 	ldw	r2,-24(fp)
 4002e00:	10800044 	addi	r2,r2,1
 4002e04:	e0bffa15 	stw	r2,-24(fp)
 4002e08:	e0bffa17 	ldw	r2,-24(fp)
 4002e0c:	108000d0 	cmplti	r2,r2,3
 4002e10:	103fe81e 	bne	r2,zero,4002db4 <__alt_mem_onchip_memory2_0+0xfbffdbf4>
			if(gameBoard[Y + i][X + 2] > 0){
				return false;
			}
		}
		draw15(X, Y, 0);
 4002e14:	000d883a 	mov	r6,zero
 4002e18:	e17ffd17 	ldw	r5,-12(fp)
 4002e1c:	e13ffc17 	ldw	r4,-16(fp)
 4002e20:	400750c0 	call	400750c <draw15>
		draw15(X + 1, Y, -6);
 4002e24:	e0bffc17 	ldw	r2,-16(fp)
 4002e28:	10800044 	addi	r2,r2,1
 4002e2c:	01bffe84 	movi	r6,-6
 4002e30:	e17ffd17 	ldw	r5,-12(fp)
 4002e34:	1009883a 	mov	r4,r2
 4002e38:	400750c0 	call	400750c <draw15>
		return true;
 4002e3c:	00800044 	movi	r2,1
 4002e40:	0000d806 	br	40031a4 <shiftRight+0xf20>
	case 16:
		if(X == 7 || gameBoard[Y][X + 2] > 0 || gameBoard[Y + 1][X + 3] > 0){
 4002e44:	e0bffc17 	ldw	r2,-16(fp)
 4002e48:	108001e0 	cmpeqi	r2,r2,7
 4002e4c:	10001d1e 	bne	r2,zero,4002ec4 <shiftRight+0xc40>
 4002e50:	e0bffc17 	ldw	r2,-16(fp)
 4002e54:	14400084 	addi	r17,r2,2
 4002e58:	040100b4 	movhi	r16,1026
 4002e5c:	84080004 	addi	r16,r16,8192
 4002e60:	e0bffd17 	ldw	r2,-12(fp)
 4002e64:	01400284 	movi	r5,10
 4002e68:	1009883a 	mov	r4,r2
 4002e6c:	400dcd40 	call	400dcd4 <__mulsi3>
 4002e70:	1445883a 	add	r2,r2,r17
 4002e74:	1085883a 	add	r2,r2,r2
 4002e78:	1085883a 	add	r2,r2,r2
 4002e7c:	8085883a 	add	r2,r16,r2
 4002e80:	10800017 	ldw	r2,0(r2)
 4002e84:	00800f16 	blt	zero,r2,4002ec4 <shiftRight+0xc40>
 4002e88:	e0bffd17 	ldw	r2,-12(fp)
 4002e8c:	10c00044 	addi	r3,r2,1
 4002e90:	e0bffc17 	ldw	r2,-16(fp)
 4002e94:	144000c4 	addi	r17,r2,3
 4002e98:	040100b4 	movhi	r16,1026
 4002e9c:	84080004 	addi	r16,r16,8192
 4002ea0:	01400284 	movi	r5,10
 4002ea4:	1809883a 	mov	r4,r3
 4002ea8:	400dcd40 	call	400dcd4 <__mulsi3>
 4002eac:	1445883a 	add	r2,r2,r17
 4002eb0:	1085883a 	add	r2,r2,r2
 4002eb4:	1085883a 	add	r2,r2,r2
 4002eb8:	8085883a 	add	r2,r16,r2
 4002ebc:	10800017 	ldw	r2,0(r2)
 4002ec0:	0080020e 	bge	zero,r2,4002ecc <shiftRight+0xc48>
			return false;
 4002ec4:	0005883a 	mov	r2,zero
 4002ec8:	0000b606 	br	40031a4 <shiftRight+0xf20>
		}
		draw16(X, Y, 0);
 4002ecc:	000d883a 	mov	r6,zero
 4002ed0:	e17ffd17 	ldw	r5,-12(fp)
 4002ed4:	e13ffc17 	ldw	r4,-16(fp)
 4002ed8:	40075ec0 	call	40075ec <draw16>
		draw16(X + 1, Y, -6);
 4002edc:	e0bffc17 	ldw	r2,-16(fp)
 4002ee0:	10800044 	addi	r2,r2,1
 4002ee4:	01bffe84 	movi	r6,-6
 4002ee8:	e17ffd17 	ldw	r5,-12(fp)
 4002eec:	1009883a 	mov	r4,r2
 4002ef0:	40075ec0 	call	40075ec <draw16>
		return true;
 4002ef4:	00800044 	movi	r2,1
 4002ef8:	0000aa06 	br	40031a4 <shiftRight+0xf20>
	case 17:
		if(X == 7 || gameBoard[Y][X + 2] > 0 || gameBoard[Y + 1][X + 3] > 0 || gameBoard[Y + 2][X + 2] > 0){
 4002efc:	e0bffc17 	ldw	r2,-16(fp)
 4002f00:	108001e0 	cmpeqi	r2,r2,7
 4002f04:	10002c1e 	bne	r2,zero,4002fb8 <shiftRight+0xd34>
 4002f08:	e0bffc17 	ldw	r2,-16(fp)
 4002f0c:	14400084 	addi	r17,r2,2
 4002f10:	040100b4 	movhi	r16,1026
 4002f14:	84080004 	addi	r16,r16,8192
 4002f18:	e0bffd17 	ldw	r2,-12(fp)
 4002f1c:	01400284 	movi	r5,10
 4002f20:	1009883a 	mov	r4,r2
 4002f24:	400dcd40 	call	400dcd4 <__mulsi3>
 4002f28:	1445883a 	add	r2,r2,r17
 4002f2c:	1085883a 	add	r2,r2,r2
 4002f30:	1085883a 	add	r2,r2,r2
 4002f34:	8085883a 	add	r2,r16,r2
 4002f38:	10800017 	ldw	r2,0(r2)
 4002f3c:	00801e16 	blt	zero,r2,4002fb8 <shiftRight+0xd34>
 4002f40:	e0bffd17 	ldw	r2,-12(fp)
 4002f44:	10c00044 	addi	r3,r2,1
 4002f48:	e0bffc17 	ldw	r2,-16(fp)
 4002f4c:	144000c4 	addi	r17,r2,3
 4002f50:	040100b4 	movhi	r16,1026
 4002f54:	84080004 	addi	r16,r16,8192
 4002f58:	01400284 	movi	r5,10
 4002f5c:	1809883a 	mov	r4,r3
 4002f60:	400dcd40 	call	400dcd4 <__mulsi3>
 4002f64:	1445883a 	add	r2,r2,r17
 4002f68:	1085883a 	add	r2,r2,r2
 4002f6c:	1085883a 	add	r2,r2,r2
 4002f70:	8085883a 	add	r2,r16,r2
 4002f74:	10800017 	ldw	r2,0(r2)
 4002f78:	00800f16 	blt	zero,r2,4002fb8 <shiftRight+0xd34>
 4002f7c:	e0bffd17 	ldw	r2,-12(fp)
 4002f80:	10c00084 	addi	r3,r2,2
 4002f84:	e0bffc17 	ldw	r2,-16(fp)
 4002f88:	14400084 	addi	r17,r2,2
 4002f8c:	040100b4 	movhi	r16,1026
 4002f90:	84080004 	addi	r16,r16,8192
 4002f94:	01400284 	movi	r5,10
 4002f98:	1809883a 	mov	r4,r3
 4002f9c:	400dcd40 	call	400dcd4 <__mulsi3>
 4002fa0:	1445883a 	add	r2,r2,r17
 4002fa4:	1085883a 	add	r2,r2,r2
 4002fa8:	1085883a 	add	r2,r2,r2
 4002fac:	8085883a 	add	r2,r16,r2
 4002fb0:	10800017 	ldw	r2,0(r2)
 4002fb4:	0080020e 	bge	zero,r2,4002fc0 <shiftRight+0xd3c>
			return false;
 4002fb8:	0005883a 	mov	r2,zero
 4002fbc:	00007906 	br	40031a4 <shiftRight+0xf20>
		}
		draw17(X, Y, 0);
 4002fc0:	000d883a 	mov	r6,zero
 4002fc4:	e17ffd17 	ldw	r5,-12(fp)
 4002fc8:	e13ffc17 	ldw	r4,-16(fp)
 4002fcc:	40076c40 	call	40076c4 <draw17>
		draw17(X + 1, Y, -6);
 4002fd0:	e0bffc17 	ldw	r2,-16(fp)
 4002fd4:	10800044 	addi	r2,r2,1
 4002fd8:	01bffe84 	movi	r6,-6
 4002fdc:	e17ffd17 	ldw	r5,-12(fp)
 4002fe0:	1009883a 	mov	r4,r2
 4002fe4:	40076c40 	call	40076c4 <draw17>
		return true;
 4002fe8:	00800044 	movi	r2,1
 4002fec:	00006d06 	br	40031a4 <shiftRight+0xf20>
	case 18:
		if(X == 7 || gameBoard[Y + 1][X + 2] > 0 || gameBoard[Y + 2][X + 3] > 0){
 4002ff0:	e0bffc17 	ldw	r2,-16(fp)
 4002ff4:	108001e0 	cmpeqi	r2,r2,7
 4002ff8:	10001e1e 	bne	r2,zero,4003074 <shiftRight+0xdf0>
 4002ffc:	e0bffd17 	ldw	r2,-12(fp)
 4003000:	10c00044 	addi	r3,r2,1
 4003004:	e0bffc17 	ldw	r2,-16(fp)
 4003008:	14400084 	addi	r17,r2,2
 400300c:	040100b4 	movhi	r16,1026
 4003010:	84080004 	addi	r16,r16,8192
 4003014:	01400284 	movi	r5,10
 4003018:	1809883a 	mov	r4,r3
 400301c:	400dcd40 	call	400dcd4 <__mulsi3>
 4003020:	1445883a 	add	r2,r2,r17
 4003024:	1085883a 	add	r2,r2,r2
 4003028:	1085883a 	add	r2,r2,r2
 400302c:	8085883a 	add	r2,r16,r2
 4003030:	10800017 	ldw	r2,0(r2)
 4003034:	00800f16 	blt	zero,r2,4003074 <shiftRight+0xdf0>
 4003038:	e0bffd17 	ldw	r2,-12(fp)
 400303c:	10c00084 	addi	r3,r2,2
 4003040:	e0bffc17 	ldw	r2,-16(fp)
 4003044:	144000c4 	addi	r17,r2,3
 4003048:	040100b4 	movhi	r16,1026
 400304c:	84080004 	addi	r16,r16,8192
 4003050:	01400284 	movi	r5,10
 4003054:	1809883a 	mov	r4,r3
 4003058:	400dcd40 	call	400dcd4 <__mulsi3>
 400305c:	1445883a 	add	r2,r2,r17
 4003060:	1085883a 	add	r2,r2,r2
 4003064:	1085883a 	add	r2,r2,r2
 4003068:	8085883a 	add	r2,r16,r2
 400306c:	10800017 	ldw	r2,0(r2)
 4003070:	0080020e 	bge	zero,r2,400307c <shiftRight+0xdf8>
			return false;
 4003074:	0005883a 	mov	r2,zero
 4003078:	00004a06 	br	40031a4 <shiftRight+0xf20>
		}
		draw18(X, Y, 0);
 400307c:	000d883a 	mov	r6,zero
 4003080:	e17ffd17 	ldw	r5,-12(fp)
 4003084:	e13ffc17 	ldw	r4,-16(fp)
 4003088:	40077a40 	call	40077a4 <draw18>
		draw18(X + 1, Y, -7);
 400308c:	e0bffc17 	ldw	r2,-16(fp)
 4003090:	10800044 	addi	r2,r2,1
 4003094:	01bffe44 	movi	r6,-7
 4003098:	e17ffd17 	ldw	r5,-12(fp)
 400309c:	1009883a 	mov	r4,r2
 40030a0:	40077a40 	call	40077a4 <draw18>
		return true;
 40030a4:	00800044 	movi	r2,1
 40030a8:	00003e06 	br	40031a4 <shiftRight+0xf20>
	case 19:
		if(X == 7 || gameBoard[Y][X + 3] > 0 || gameBoard[Y + 1][X + 3] > 0 || gameBoard[Y + 2][X + 2] > 0){
 40030ac:	e0bffc17 	ldw	r2,-16(fp)
 40030b0:	108001e0 	cmpeqi	r2,r2,7
 40030b4:	10002c1e 	bne	r2,zero,4003168 <shiftRight+0xee4>
 40030b8:	e0bffc17 	ldw	r2,-16(fp)
 40030bc:	144000c4 	addi	r17,r2,3
 40030c0:	040100b4 	movhi	r16,1026
 40030c4:	84080004 	addi	r16,r16,8192
 40030c8:	e0bffd17 	ldw	r2,-12(fp)
 40030cc:	01400284 	movi	r5,10
 40030d0:	1009883a 	mov	r4,r2
 40030d4:	400dcd40 	call	400dcd4 <__mulsi3>
 40030d8:	1445883a 	add	r2,r2,r17
 40030dc:	1085883a 	add	r2,r2,r2
 40030e0:	1085883a 	add	r2,r2,r2
 40030e4:	8085883a 	add	r2,r16,r2
 40030e8:	10800017 	ldw	r2,0(r2)
 40030ec:	00801e16 	blt	zero,r2,4003168 <shiftRight+0xee4>
 40030f0:	e0bffd17 	ldw	r2,-12(fp)
 40030f4:	10c00044 	addi	r3,r2,1
 40030f8:	e0bffc17 	ldw	r2,-16(fp)
 40030fc:	144000c4 	addi	r17,r2,3
 4003100:	040100b4 	movhi	r16,1026
 4003104:	84080004 	addi	r16,r16,8192
 4003108:	01400284 	movi	r5,10
 400310c:	1809883a 	mov	r4,r3
 4003110:	400dcd40 	call	400dcd4 <__mulsi3>
 4003114:	1445883a 	add	r2,r2,r17
 4003118:	1085883a 	add	r2,r2,r2
 400311c:	1085883a 	add	r2,r2,r2
 4003120:	8085883a 	add	r2,r16,r2
 4003124:	10800017 	ldw	r2,0(r2)
 4003128:	00800f16 	blt	zero,r2,4003168 <shiftRight+0xee4>
 400312c:	e0bffd17 	ldw	r2,-12(fp)
 4003130:	10c00084 	addi	r3,r2,2
 4003134:	e0bffc17 	ldw	r2,-16(fp)
 4003138:	14400084 	addi	r17,r2,2
 400313c:	040100b4 	movhi	r16,1026
 4003140:	84080004 	addi	r16,r16,8192
 4003144:	01400284 	movi	r5,10
 4003148:	1809883a 	mov	r4,r3
 400314c:	400dcd40 	call	400dcd4 <__mulsi3>
 4003150:	1445883a 	add	r2,r2,r17
 4003154:	1085883a 	add	r2,r2,r2
 4003158:	1085883a 	add	r2,r2,r2
 400315c:	8085883a 	add	r2,r16,r2
 4003160:	10800017 	ldw	r2,0(r2)
 4003164:	0080020e 	bge	zero,r2,4003170 <shiftRight+0xeec>
			return false;
 4003168:	0005883a 	mov	r2,zero
 400316c:	00000d06 	br	40031a4 <shiftRight+0xf20>
		}
		draw19(X, Y, 0);
 4003170:	000d883a 	mov	r6,zero
 4003174:	e17ffd17 	ldw	r5,-12(fp)
 4003178:	e13ffc17 	ldw	r4,-16(fp)
 400317c:	40078d80 	call	40078d8 <draw19>
		draw19(X + 1, Y, -7);
 4003180:	e0bffc17 	ldw	r2,-16(fp)
 4003184:	10800044 	addi	r2,r2,1
 4003188:	01bffe44 	movi	r6,-7
 400318c:	e17ffd17 	ldw	r5,-12(fp)
 4003190:	1009883a 	mov	r4,r2
 4003194:	40078d80 	call	40078d8 <draw19>
		return true;
 4003198:	00800044 	movi	r2,1
 400319c:	00000106 	br	40031a4 <shiftRight+0xf20>
	default:
		return false;
 40031a0:	0005883a 	mov	r2,zero
	}
}
 40031a4:	e6fffe04 	addi	sp,fp,-8
 40031a8:	dfc00317 	ldw	ra,12(sp)
 40031ac:	df000217 	ldw	fp,8(sp)
 40031b0:	dc400117 	ldw	r17,4(sp)
 40031b4:	dc000017 	ldw	r16,0(sp)
 40031b8:	dec00404 	addi	sp,sp,16
 40031bc:	f800283a 	ret

040031c0 <drop>:

bool drop(int blockState, int X, int Y) {
 40031c0:	defff704 	addi	sp,sp,-36
 40031c4:	dfc00815 	stw	ra,32(sp)
 40031c8:	df000715 	stw	fp,28(sp)
 40031cc:	dc400615 	stw	r17,24(sp)
 40031d0:	dc000515 	stw	r16,20(sp)
 40031d4:	df000704 	addi	fp,sp,28
 40031d8:	e13ffb15 	stw	r4,-20(fp)
 40031dc:	e17ffc15 	stw	r5,-16(fp)
 40031e0:	e1bffd15 	stw	r6,-12(fp)
	bool stopDrop = false;
 40031e4:	e03ff905 	stb	zero,-28(fp)
	switch(blockState){
 40031e8:	e0bffb17 	ldw	r2,-20(fp)
 40031ec:	10800528 	cmpgeui	r2,r2,20
 40031f0:	1004991e 	bne	r2,zero,4004458 <drop+0x1298>
 40031f4:	e0bffb17 	ldw	r2,-20(fp)
 40031f8:	100690ba 	slli	r3,r2,2
 40031fc:	00810034 	movhi	r2,1024
 4003200:	108c8404 	addi	r2,r2,12816
 4003204:	1885883a 	add	r2,r3,r2
 4003208:	10800017 	ldw	r2,0(r2)
 400320c:	1000683a 	jmp	r2
 4003210:	04004458 	cmpnei	r16,zero,273
 4003214:	04003260 	cmpeqi	r16,zero,201
 4003218:	0400333c 	xorhi	r16,zero,204
 400321c:	040033dc 	xori	r16,zero,207
 4003220:	040034b8 	rdprs	r16,zero,210
 4003224:	040035d0 	cmplti	r16,zero,215
 4003228:	040036ac 	andhi	r16,zero,218
 400322c:	040037c4 	movi	r16,223
 4003230:	040038a0 	cmpeqi	r16,zero,226
 4003234:	040039b8 	rdprs	r16,zero,230
 4003238:	04003a94 	movui	r16,234
 400323c:	04003bac 	andhi	r16,zero,238
 4003240:	04003c88 	cmpgei	r16,zero,242
 4003244:	04003da0 	cmpeqi	r16,zero,246
 4003248:	04003e7c 	xorhi	r16,zero,249
 400324c:	04003f94 	movui	r16,254
 4003250:	04004070 	cmpltui	r16,zero,257
 4003254:	04004188 	cmpgei	r16,zero,262
 4003258:	04004264 	muli	r16,zero,265
 400325c:	0400437c 	xorhi	r16,zero,269
	case 1:
		if(Y == 17){
 4003260:	e0bffd17 	ldw	r2,-12(fp)
 4003264:	10800458 	cmpnei	r2,r2,17
 4003268:	1000031e 	bne	r2,zero,4003278 <drop+0xb8>
			stopDrop = true;
 400326c:	00800044 	movi	r2,1
 4003270:	e0bff905 	stb	r2,-28(fp)
 4003274:	00001906 	br	40032dc <drop+0x11c>
		}
		else{
			for(int i = 0; i < 4; i++){
 4003278:	e03ffa15 	stw	zero,-24(fp)
 400327c:	00001406 	br	40032d0 <drop+0x110>
				if(gameBoard[Y + 3][X + i] > 0){
 4003280:	e0bffd17 	ldw	r2,-12(fp)
 4003284:	110000c4 	addi	r4,r2,3
 4003288:	e0fffc17 	ldw	r3,-16(fp)
 400328c:	e0bffa17 	ldw	r2,-24(fp)
 4003290:	18a3883a 	add	r17,r3,r2
 4003294:	040100b4 	movhi	r16,1026
 4003298:	84080004 	addi	r16,r16,8192
 400329c:	01400284 	movi	r5,10
 40032a0:	400dcd40 	call	400dcd4 <__mulsi3>
 40032a4:	1445883a 	add	r2,r2,r17
 40032a8:	1085883a 	add	r2,r2,r2
 40032ac:	1085883a 	add	r2,r2,r2
 40032b0:	8085883a 	add	r2,r16,r2
 40032b4:	10800017 	ldw	r2,0(r2)
 40032b8:	0080020e 	bge	zero,r2,40032c4 <drop+0x104>
					stopDrop = true;
 40032bc:	00800044 	movi	r2,1
 40032c0:	e0bff905 	stb	r2,-28(fp)
	case 1:
		if(Y == 17){
			stopDrop = true;
		}
		else{
			for(int i = 0; i < 4; i++){
 40032c4:	e0bffa17 	ldw	r2,-24(fp)
 40032c8:	10800044 	addi	r2,r2,1
 40032cc:	e0bffa15 	stw	r2,-24(fp)
 40032d0:	e0bffa17 	ldw	r2,-24(fp)
 40032d4:	10800110 	cmplti	r2,r2,4
 40032d8:	103fe91e 	bne	r2,zero,4003280 <__alt_mem_onchip_memory2_0+0xfbffe0c0>
				if(gameBoard[Y + 3][X + i] > 0){
					stopDrop = true;
				}
			}
		}
		if(stopDrop){
 40032dc:	e0bff903 	ldbu	r2,-28(fp)
 40032e0:	10000a26 	beq	r2,zero,400330c <drop+0x14c>
			draw1(X, Y, 0);
 40032e4:	000d883a 	mov	r6,zero
 40032e8:	e17ffd17 	ldw	r5,-12(fp)
 40032ec:	e13ffc17 	ldw	r4,-16(fp)
 40032f0:	400687c0 	call	400687c <draw1>
			draw1(X, Y, 1);
 40032f4:	01800044 	movi	r6,1
 40032f8:	e17ffd17 	ldw	r5,-12(fp)
 40032fc:	e13ffc17 	ldw	r4,-16(fp)
 4003300:	400687c0 	call	400687c <draw1>
			return true;
 4003304:	00800044 	movi	r2,1
 4003308:	00045406 	br	400445c <drop+0x129c>
		}
		else{
			draw1(X, Y, 0);
 400330c:	000d883a 	mov	r6,zero
 4003310:	e17ffd17 	ldw	r5,-12(fp)
 4003314:	e13ffc17 	ldw	r4,-16(fp)
 4003318:	400687c0 	call	400687c <draw1>
			draw1(X, Y + 1, -1);
 400331c:	e0bffd17 	ldw	r2,-12(fp)
 4003320:	10800044 	addi	r2,r2,1
 4003324:	01bfffc4 	movi	r6,-1
 4003328:	100b883a 	mov	r5,r2
 400332c:	e13ffc17 	ldw	r4,-16(fp)
 4003330:	400687c0 	call	400687c <draw1>
			return false;
 4003334:	0005883a 	mov	r2,zero
 4003338:	00044806 	br	400445c <drop+0x129c>
		}
	case 2:
		if(Y == 16 || gameBoard[Y + 4][X + 2] > 0){
 400333c:	e0bffd17 	ldw	r2,-12(fp)
 4003340:	10800420 	cmpeqi	r2,r2,16
 4003344:	10000f1e 	bne	r2,zero,4003384 <drop+0x1c4>
 4003348:	e0bffd17 	ldw	r2,-12(fp)
 400334c:	10c00104 	addi	r3,r2,4
 4003350:	e0bffc17 	ldw	r2,-16(fp)
 4003354:	14400084 	addi	r17,r2,2
 4003358:	040100b4 	movhi	r16,1026
 400335c:	84080004 	addi	r16,r16,8192
 4003360:	01400284 	movi	r5,10
 4003364:	1809883a 	mov	r4,r3
 4003368:	400dcd40 	call	400dcd4 <__mulsi3>
 400336c:	1445883a 	add	r2,r2,r17
 4003370:	1085883a 	add	r2,r2,r2
 4003374:	1085883a 	add	r2,r2,r2
 4003378:	8085883a 	add	r2,r16,r2
 400337c:	10800017 	ldw	r2,0(r2)
 4003380:	00800a0e 	bge	zero,r2,40033ac <drop+0x1ec>
			draw2(X, Y, 0);
 4003384:	000d883a 	mov	r6,zero
 4003388:	e17ffd17 	ldw	r5,-12(fp)
 400338c:	e13ffc17 	ldw	r4,-16(fp)
 4003390:	400691c0 	call	400691c <draw2>
			draw2(X, Y, 1);
 4003394:	01800044 	movi	r6,1
 4003398:	e17ffd17 	ldw	r5,-12(fp)
 400339c:	e13ffc17 	ldw	r4,-16(fp)
 40033a0:	400691c0 	call	400691c <draw2>
			return true;
 40033a4:	00800044 	movi	r2,1
 40033a8:	00042c06 	br	400445c <drop+0x129c>
		}
		else{
			draw2(X, Y, 0);
 40033ac:	000d883a 	mov	r6,zero
 40033b0:	e17ffd17 	ldw	r5,-12(fp)
 40033b4:	e13ffc17 	ldw	r4,-16(fp)
 40033b8:	400691c0 	call	400691c <draw2>
			draw2(X, Y + 1, -1);
 40033bc:	e0bffd17 	ldw	r2,-12(fp)
 40033c0:	10800044 	addi	r2,r2,1
 40033c4:	01bfffc4 	movi	r6,-1
 40033c8:	100b883a 	mov	r5,r2
 40033cc:	e13ffc17 	ldw	r4,-16(fp)
 40033d0:	400691c0 	call	400691c <draw2>
			return false;
 40033d4:	0005883a 	mov	r2,zero
 40033d8:	00042006 	br	400445c <drop+0x129c>
		}
	case 3:
		if(Y == 18 || gameBoard[Y + 2][X] > 0 || gameBoard[Y + 2][X + 1] > 0){
 40033dc:	e0bffd17 	ldw	r2,-12(fp)
 40033e0:	108004a0 	cmpeqi	r2,r2,18
 40033e4:	10001e1e 	bne	r2,zero,4003460 <drop+0x2a0>
 40033e8:	e0bffd17 	ldw	r2,-12(fp)
 40033ec:	10800084 	addi	r2,r2,2
 40033f0:	040100b4 	movhi	r16,1026
 40033f4:	84080004 	addi	r16,r16,8192
 40033f8:	01400284 	movi	r5,10
 40033fc:	1009883a 	mov	r4,r2
 4003400:	400dcd40 	call	400dcd4 <__mulsi3>
 4003404:	1007883a 	mov	r3,r2
 4003408:	e0bffc17 	ldw	r2,-16(fp)
 400340c:	1885883a 	add	r2,r3,r2
 4003410:	1085883a 	add	r2,r2,r2
 4003414:	1085883a 	add	r2,r2,r2
 4003418:	8085883a 	add	r2,r16,r2
 400341c:	10800017 	ldw	r2,0(r2)
 4003420:	00800f16 	blt	zero,r2,4003460 <drop+0x2a0>
 4003424:	e0bffd17 	ldw	r2,-12(fp)
 4003428:	10c00084 	addi	r3,r2,2
 400342c:	e0bffc17 	ldw	r2,-16(fp)
 4003430:	14400044 	addi	r17,r2,1
 4003434:	040100b4 	movhi	r16,1026
 4003438:	84080004 	addi	r16,r16,8192
 400343c:	01400284 	movi	r5,10
 4003440:	1809883a 	mov	r4,r3
 4003444:	400dcd40 	call	400dcd4 <__mulsi3>
 4003448:	1445883a 	add	r2,r2,r17
 400344c:	1085883a 	add	r2,r2,r2
 4003450:	1085883a 	add	r2,r2,r2
 4003454:	8085883a 	add	r2,r16,r2
 4003458:	10800017 	ldw	r2,0(r2)
 400345c:	00800a0e 	bge	zero,r2,4003488 <drop+0x2c8>
			draw3(X, Y, 0);
 4003460:	000d883a 	mov	r6,zero
 4003464:	e17ffd17 	ldw	r5,-12(fp)
 4003468:	e13ffc17 	ldw	r4,-16(fp)
 400346c:	40069c00 	call	40069c0 <draw3>
			draw3(X, Y, 4);
 4003470:	01800104 	movi	r6,4
 4003474:	e17ffd17 	ldw	r5,-12(fp)
 4003478:	e13ffc17 	ldw	r4,-16(fp)
 400347c:	40069c00 	call	40069c0 <draw3>
			return true;
 4003480:	00800044 	movi	r2,1
 4003484:	0003f506 	br	400445c <drop+0x129c>
		}
		else{
			draw3(X, Y, 0);
 4003488:	000d883a 	mov	r6,zero
 400348c:	e17ffd17 	ldw	r5,-12(fp)
 4003490:	e13ffc17 	ldw	r4,-16(fp)
 4003494:	40069c00 	call	40069c0 <draw3>
			draw3(X, Y + 1, -4);
 4003498:	e0bffd17 	ldw	r2,-12(fp)
 400349c:	10800044 	addi	r2,r2,1
 40034a0:	01bfff04 	movi	r6,-4
 40034a4:	100b883a 	mov	r5,r2
 40034a8:	e13ffc17 	ldw	r4,-16(fp)
 40034ac:	40069c00 	call	40069c0 <draw3>
			return false;
 40034b0:	0005883a 	mov	r2,zero
 40034b4:	0003e906 	br	400445c <drop+0x129c>
		}
	case 4:
		if(Y == 17 || gameBoard[Y + 2][X] > 0 || gameBoard[Y + 2][X + 1] > 0 || gameBoard[Y + 3][X + 2] > 0){
 40034b8:	e0bffd17 	ldw	r2,-12(fp)
 40034bc:	10800460 	cmpeqi	r2,r2,17
 40034c0:	10002d1e 	bne	r2,zero,4003578 <drop+0x3b8>
 40034c4:	e0bffd17 	ldw	r2,-12(fp)
 40034c8:	10800084 	addi	r2,r2,2
 40034cc:	040100b4 	movhi	r16,1026
 40034d0:	84080004 	addi	r16,r16,8192
 40034d4:	01400284 	movi	r5,10
 40034d8:	1009883a 	mov	r4,r2
 40034dc:	400dcd40 	call	400dcd4 <__mulsi3>
 40034e0:	1007883a 	mov	r3,r2
 40034e4:	e0bffc17 	ldw	r2,-16(fp)
 40034e8:	1885883a 	add	r2,r3,r2
 40034ec:	1085883a 	add	r2,r2,r2
 40034f0:	1085883a 	add	r2,r2,r2
 40034f4:	8085883a 	add	r2,r16,r2
 40034f8:	10800017 	ldw	r2,0(r2)
 40034fc:	00801e16 	blt	zero,r2,4003578 <drop+0x3b8>
 4003500:	e0bffd17 	ldw	r2,-12(fp)
 4003504:	10c00084 	addi	r3,r2,2
 4003508:	e0bffc17 	ldw	r2,-16(fp)
 400350c:	14400044 	addi	r17,r2,1
 4003510:	040100b4 	movhi	r16,1026
 4003514:	84080004 	addi	r16,r16,8192
 4003518:	01400284 	movi	r5,10
 400351c:	1809883a 	mov	r4,r3
 4003520:	400dcd40 	call	400dcd4 <__mulsi3>
 4003524:	1445883a 	add	r2,r2,r17
 4003528:	1085883a 	add	r2,r2,r2
 400352c:	1085883a 	add	r2,r2,r2
 4003530:	8085883a 	add	r2,r16,r2
 4003534:	10800017 	ldw	r2,0(r2)
 4003538:	00800f16 	blt	zero,r2,4003578 <drop+0x3b8>
 400353c:	e0bffd17 	ldw	r2,-12(fp)
 4003540:	10c000c4 	addi	r3,r2,3
 4003544:	e0bffc17 	ldw	r2,-16(fp)
 4003548:	14400084 	addi	r17,r2,2
 400354c:	040100b4 	movhi	r16,1026
 4003550:	84080004 	addi	r16,r16,8192
 4003554:	01400284 	movi	r5,10
 4003558:	1809883a 	mov	r4,r3
 400355c:	400dcd40 	call	400dcd4 <__mulsi3>
 4003560:	1445883a 	add	r2,r2,r17
 4003564:	1085883a 	add	r2,r2,r2
 4003568:	1085883a 	add	r2,r2,r2
 400356c:	8085883a 	add	r2,r16,r2
 4003570:	10800017 	ldw	r2,0(r2)
 4003574:	00800a0e 	bge	zero,r2,40035a0 <drop+0x3e0>
			draw4(X, Y, 0);
 4003578:	000d883a 	mov	r6,zero
 400357c:	e17ffd17 	ldw	r5,-12(fp)
 4003580:	e13ffc17 	ldw	r4,-16(fp)
 4003584:	4006aec0 	call	4006aec <draw4>
			draw4(X, Y, 2);
 4003588:	01800084 	movi	r6,2
 400358c:	e17ffd17 	ldw	r5,-12(fp)
 4003590:	e13ffc17 	ldw	r4,-16(fp)
 4003594:	4006aec0 	call	4006aec <draw4>
			return true;
 4003598:	00800044 	movi	r2,1
 400359c:	0003af06 	br	400445c <drop+0x129c>
		}
		else{
			draw4(X, Y, 0);
 40035a0:	000d883a 	mov	r6,zero
 40035a4:	e17ffd17 	ldw	r5,-12(fp)
 40035a8:	e13ffc17 	ldw	r4,-16(fp)
 40035ac:	4006aec0 	call	4006aec <draw4>
			draw4(X, Y + 1, -2);
 40035b0:	e0bffd17 	ldw	r2,-12(fp)
 40035b4:	10800044 	addi	r2,r2,1
 40035b8:	01bfff84 	movi	r6,-2
 40035bc:	100b883a 	mov	r5,r2
 40035c0:	e13ffc17 	ldw	r4,-16(fp)
 40035c4:	4006aec0 	call	4006aec <draw4>
			return false;
 40035c8:	0005883a 	mov	r2,zero
 40035cc:	0003a306 	br	400445c <drop+0x129c>
		}
	case 5:
		if(Y == 17 || gameBoard[Y + 3][X] > 0 || gameBoard[Y + 3][X + 1] > 0){
 40035d0:	e0bffd17 	ldw	r2,-12(fp)
 40035d4:	10800460 	cmpeqi	r2,r2,17
 40035d8:	10001e1e 	bne	r2,zero,4003654 <drop+0x494>
 40035dc:	e0bffd17 	ldw	r2,-12(fp)
 40035e0:	108000c4 	addi	r2,r2,3
 40035e4:	040100b4 	movhi	r16,1026
 40035e8:	84080004 	addi	r16,r16,8192
 40035ec:	01400284 	movi	r5,10
 40035f0:	1009883a 	mov	r4,r2
 40035f4:	400dcd40 	call	400dcd4 <__mulsi3>
 40035f8:	1007883a 	mov	r3,r2
 40035fc:	e0bffc17 	ldw	r2,-16(fp)
 4003600:	1885883a 	add	r2,r3,r2
 4003604:	1085883a 	add	r2,r2,r2
 4003608:	1085883a 	add	r2,r2,r2
 400360c:	8085883a 	add	r2,r16,r2
 4003610:	10800017 	ldw	r2,0(r2)
 4003614:	00800f16 	blt	zero,r2,4003654 <drop+0x494>
 4003618:	e0bffd17 	ldw	r2,-12(fp)
 400361c:	10c000c4 	addi	r3,r2,3
 4003620:	e0bffc17 	ldw	r2,-16(fp)
 4003624:	14400044 	addi	r17,r2,1
 4003628:	040100b4 	movhi	r16,1026
 400362c:	84080004 	addi	r16,r16,8192
 4003630:	01400284 	movi	r5,10
 4003634:	1809883a 	mov	r4,r3
 4003638:	400dcd40 	call	400dcd4 <__mulsi3>
 400363c:	1445883a 	add	r2,r2,r17
 4003640:	1085883a 	add	r2,r2,r2
 4003644:	1085883a 	add	r2,r2,r2
 4003648:	8085883a 	add	r2,r16,r2
 400364c:	10800017 	ldw	r2,0(r2)
 4003650:	00800a0e 	bge	zero,r2,400367c <drop+0x4bc>
			draw5(X, Y, 0);
 4003654:	000d883a 	mov	r6,zero
 4003658:	e17ffd17 	ldw	r5,-12(fp)
 400365c:	e13ffc17 	ldw	r4,-16(fp)
 4003660:	4006bc80 	call	4006bc8 <draw5>
			draw5(X, Y, 2);
 4003664:	01800084 	movi	r6,2
 4003668:	e17ffd17 	ldw	r5,-12(fp)
 400366c:	e13ffc17 	ldw	r4,-16(fp)
 4003670:	4006bc80 	call	4006bc8 <draw5>
			return true;
 4003674:	00800044 	movi	r2,1
 4003678:	00037806 	br	400445c <drop+0x129c>
		}
		else{
			draw5(X, Y, 0);
 400367c:	000d883a 	mov	r6,zero
 4003680:	e17ffd17 	ldw	r5,-12(fp)
 4003684:	e13ffc17 	ldw	r4,-16(fp)
 4003688:	4006bc80 	call	4006bc8 <draw5>
			draw5(X, Y + 1, -2);
 400368c:	e0bffd17 	ldw	r2,-12(fp)
 4003690:	10800044 	addi	r2,r2,1
 4003694:	01bfff84 	movi	r6,-2
 4003698:	100b883a 	mov	r5,r2
 400369c:	e13ffc17 	ldw	r4,-16(fp)
 40036a0:	4006bc80 	call	4006bc8 <draw5>
			return false;
 40036a4:	0005883a 	mov	r2,zero
 40036a8:	00036c06 	br	400445c <drop+0x129c>
		}
	case 6:
		if(Y == 18 || gameBoard[Y + 2][X] > 0 || gameBoard[Y + 2][X + 1] > 0 || gameBoard[Y + 2][X + 2] > 0){
 40036ac:	e0bffd17 	ldw	r2,-12(fp)
 40036b0:	108004a0 	cmpeqi	r2,r2,18
 40036b4:	10002d1e 	bne	r2,zero,400376c <drop+0x5ac>
 40036b8:	e0bffd17 	ldw	r2,-12(fp)
 40036bc:	10800084 	addi	r2,r2,2
 40036c0:	040100b4 	movhi	r16,1026
 40036c4:	84080004 	addi	r16,r16,8192
 40036c8:	01400284 	movi	r5,10
 40036cc:	1009883a 	mov	r4,r2
 40036d0:	400dcd40 	call	400dcd4 <__mulsi3>
 40036d4:	1007883a 	mov	r3,r2
 40036d8:	e0bffc17 	ldw	r2,-16(fp)
 40036dc:	1885883a 	add	r2,r3,r2
 40036e0:	1085883a 	add	r2,r2,r2
 40036e4:	1085883a 	add	r2,r2,r2
 40036e8:	8085883a 	add	r2,r16,r2
 40036ec:	10800017 	ldw	r2,0(r2)
 40036f0:	00801e16 	blt	zero,r2,400376c <drop+0x5ac>
 40036f4:	e0bffd17 	ldw	r2,-12(fp)
 40036f8:	10c00084 	addi	r3,r2,2
 40036fc:	e0bffc17 	ldw	r2,-16(fp)
 4003700:	14400044 	addi	r17,r2,1
 4003704:	040100b4 	movhi	r16,1026
 4003708:	84080004 	addi	r16,r16,8192
 400370c:	01400284 	movi	r5,10
 4003710:	1809883a 	mov	r4,r3
 4003714:	400dcd40 	call	400dcd4 <__mulsi3>
 4003718:	1445883a 	add	r2,r2,r17
 400371c:	1085883a 	add	r2,r2,r2
 4003720:	1085883a 	add	r2,r2,r2
 4003724:	8085883a 	add	r2,r16,r2
 4003728:	10800017 	ldw	r2,0(r2)
 400372c:	00800f16 	blt	zero,r2,400376c <drop+0x5ac>
 4003730:	e0bffd17 	ldw	r2,-12(fp)
 4003734:	10c00084 	addi	r3,r2,2
 4003738:	e0bffc17 	ldw	r2,-16(fp)
 400373c:	14400084 	addi	r17,r2,2
 4003740:	040100b4 	movhi	r16,1026
 4003744:	84080004 	addi	r16,r16,8192
 4003748:	01400284 	movi	r5,10
 400374c:	1809883a 	mov	r4,r3
 4003750:	400dcd40 	call	400dcd4 <__mulsi3>
 4003754:	1445883a 	add	r2,r2,r17
 4003758:	1085883a 	add	r2,r2,r2
 400375c:	1085883a 	add	r2,r2,r2
 4003760:	8085883a 	add	r2,r16,r2
 4003764:	10800017 	ldw	r2,0(r2)
 4003768:	00800a0e 	bge	zero,r2,4003794 <drop+0x5d4>
			draw6(X, Y, 0);
 400376c:	000d883a 	mov	r6,zero
 4003770:	e17ffd17 	ldw	r5,-12(fp)
 4003774:	e13ffc17 	ldw	r4,-16(fp)
 4003778:	4006ca80 	call	4006ca8 <draw6>
			draw6(X, Y, 2);
 400377c:	01800084 	movi	r6,2
 4003780:	e17ffd17 	ldw	r5,-12(fp)
 4003784:	e13ffc17 	ldw	r4,-16(fp)
 4003788:	4006ca80 	call	4006ca8 <draw6>
			return true;
 400378c:	00800044 	movi	r2,1
 4003790:	00033206 	br	400445c <drop+0x129c>
		}
		else{
			draw6(X, Y, 0);
 4003794:	000d883a 	mov	r6,zero
 4003798:	e17ffd17 	ldw	r5,-12(fp)
 400379c:	e13ffc17 	ldw	r4,-16(fp)
 40037a0:	4006ca80 	call	4006ca8 <draw6>
			draw6(X, Y + 1, -2);
 40037a4:	e0bffd17 	ldw	r2,-12(fp)
 40037a8:	10800044 	addi	r2,r2,1
 40037ac:	01bfff84 	movi	r6,-2
 40037b0:	100b883a 	mov	r5,r2
 40037b4:	e13ffc17 	ldw	r4,-16(fp)
 40037b8:	4006ca80 	call	4006ca8 <draw6>
			return false;
 40037bc:	0005883a 	mov	r2,zero
 40037c0:	00032606 	br	400445c <drop+0x129c>
		}
	case 7:
		if(Y == 17 || gameBoard[Y + 1][X + 2] > 0 || gameBoard[Y + 3][X + 1] > 0){
 40037c4:	e0bffd17 	ldw	r2,-12(fp)
 40037c8:	10800460 	cmpeqi	r2,r2,17
 40037cc:	10001e1e 	bne	r2,zero,4003848 <drop+0x688>
 40037d0:	e0bffd17 	ldw	r2,-12(fp)
 40037d4:	10c00044 	addi	r3,r2,1
 40037d8:	e0bffc17 	ldw	r2,-16(fp)
 40037dc:	14400084 	addi	r17,r2,2
 40037e0:	040100b4 	movhi	r16,1026
 40037e4:	84080004 	addi	r16,r16,8192
 40037e8:	01400284 	movi	r5,10
 40037ec:	1809883a 	mov	r4,r3
 40037f0:	400dcd40 	call	400dcd4 <__mulsi3>
 40037f4:	1445883a 	add	r2,r2,r17
 40037f8:	1085883a 	add	r2,r2,r2
 40037fc:	1085883a 	add	r2,r2,r2
 4003800:	8085883a 	add	r2,r16,r2
 4003804:	10800017 	ldw	r2,0(r2)
 4003808:	00800f16 	blt	zero,r2,4003848 <drop+0x688>
 400380c:	e0bffd17 	ldw	r2,-12(fp)
 4003810:	10c000c4 	addi	r3,r2,3
 4003814:	e0bffc17 	ldw	r2,-16(fp)
 4003818:	14400044 	addi	r17,r2,1
 400381c:	040100b4 	movhi	r16,1026
 4003820:	84080004 	addi	r16,r16,8192
 4003824:	01400284 	movi	r5,10
 4003828:	1809883a 	mov	r4,r3
 400382c:	400dcd40 	call	400dcd4 <__mulsi3>
 4003830:	1445883a 	add	r2,r2,r17
 4003834:	1085883a 	add	r2,r2,r2
 4003838:	1085883a 	add	r2,r2,r2
 400383c:	8085883a 	add	r2,r16,r2
 4003840:	10800017 	ldw	r2,0(r2)
 4003844:	00800a0e 	bge	zero,r2,4003870 <drop+0x6b0>
			draw7(X, Y, 0);
 4003848:	000d883a 	mov	r6,zero
 400384c:	e17ffd17 	ldw	r5,-12(fp)
 4003850:	e13ffc17 	ldw	r4,-16(fp)
 4003854:	4006d800 	call	4006d80 <draw7>
			draw7(X, Y, 2);
 4003858:	01800084 	movi	r6,2
 400385c:	e17ffd17 	ldw	r5,-12(fp)
 4003860:	e13ffc17 	ldw	r4,-16(fp)
 4003864:	4006d800 	call	4006d80 <draw7>
			return true;
 4003868:	00800044 	movi	r2,1
 400386c:	0002fb06 	br	400445c <drop+0x129c>
		}
		else{
			draw7(X, Y, 0);
 4003870:	000d883a 	mov	r6,zero
 4003874:	e17ffd17 	ldw	r5,-12(fp)
 4003878:	e13ffc17 	ldw	r4,-16(fp)
 400387c:	4006d800 	call	4006d80 <draw7>
			draw7(X, Y + 1, -2);
 4003880:	e0bffd17 	ldw	r2,-12(fp)
 4003884:	10800044 	addi	r2,r2,1
 4003888:	01bfff84 	movi	r6,-2
 400388c:	100b883a 	mov	r5,r2
 4003890:	e13ffc17 	ldw	r4,-16(fp)
 4003894:	4006d800 	call	4006d80 <draw7>
			return false;
 4003898:	0005883a 	mov	r2,zero
 400389c:	0002ef06 	br	400445c <drop+0x129c>
		}
	case 8:
		if(Y == 17 || gameBoard[Y + 3][X] > 0 || gameBoard[Y + 2][X + 1] > 0 || gameBoard[Y + 2][X + 2] > 0){
 40038a0:	e0bffd17 	ldw	r2,-12(fp)
 40038a4:	10800460 	cmpeqi	r2,r2,17
 40038a8:	10002d1e 	bne	r2,zero,4003960 <drop+0x7a0>
 40038ac:	e0bffd17 	ldw	r2,-12(fp)
 40038b0:	108000c4 	addi	r2,r2,3
 40038b4:	040100b4 	movhi	r16,1026
 40038b8:	84080004 	addi	r16,r16,8192
 40038bc:	01400284 	movi	r5,10
 40038c0:	1009883a 	mov	r4,r2
 40038c4:	400dcd40 	call	400dcd4 <__mulsi3>
 40038c8:	1007883a 	mov	r3,r2
 40038cc:	e0bffc17 	ldw	r2,-16(fp)
 40038d0:	1885883a 	add	r2,r3,r2
 40038d4:	1085883a 	add	r2,r2,r2
 40038d8:	1085883a 	add	r2,r2,r2
 40038dc:	8085883a 	add	r2,r16,r2
 40038e0:	10800017 	ldw	r2,0(r2)
 40038e4:	00801e16 	blt	zero,r2,4003960 <drop+0x7a0>
 40038e8:	e0bffd17 	ldw	r2,-12(fp)
 40038ec:	10c00084 	addi	r3,r2,2
 40038f0:	e0bffc17 	ldw	r2,-16(fp)
 40038f4:	14400044 	addi	r17,r2,1
 40038f8:	040100b4 	movhi	r16,1026
 40038fc:	84080004 	addi	r16,r16,8192
 4003900:	01400284 	movi	r5,10
 4003904:	1809883a 	mov	r4,r3
 4003908:	400dcd40 	call	400dcd4 <__mulsi3>
 400390c:	1445883a 	add	r2,r2,r17
 4003910:	1085883a 	add	r2,r2,r2
 4003914:	1085883a 	add	r2,r2,r2
 4003918:	8085883a 	add	r2,r16,r2
 400391c:	10800017 	ldw	r2,0(r2)
 4003920:	00800f16 	blt	zero,r2,4003960 <drop+0x7a0>
 4003924:	e0bffd17 	ldw	r2,-12(fp)
 4003928:	10c00084 	addi	r3,r2,2
 400392c:	e0bffc17 	ldw	r2,-16(fp)
 4003930:	14400084 	addi	r17,r2,2
 4003934:	040100b4 	movhi	r16,1026
 4003938:	84080004 	addi	r16,r16,8192
 400393c:	01400284 	movi	r5,10
 4003940:	1809883a 	mov	r4,r3
 4003944:	400dcd40 	call	400dcd4 <__mulsi3>
 4003948:	1445883a 	add	r2,r2,r17
 400394c:	1085883a 	add	r2,r2,r2
 4003950:	1085883a 	add	r2,r2,r2
 4003954:	8085883a 	add	r2,r16,r2
 4003958:	10800017 	ldw	r2,0(r2)
 400395c:	00800a0e 	bge	zero,r2,4003988 <drop+0x7c8>
			draw8(X, Y, 0);
 4003960:	000d883a 	mov	r6,zero
 4003964:	e17ffd17 	ldw	r5,-12(fp)
 4003968:	e13ffc17 	ldw	r4,-16(fp)
 400396c:	4006e5c0 	call	4006e5c <draw8>
			draw8(X, Y, 3);
 4003970:	018000c4 	movi	r6,3
 4003974:	e17ffd17 	ldw	r5,-12(fp)
 4003978:	e13ffc17 	ldw	r4,-16(fp)
 400397c:	4006e5c0 	call	4006e5c <draw8>
			return true;
 4003980:	00800044 	movi	r2,1
 4003984:	0002b506 	br	400445c <drop+0x129c>
		}
		else{
			draw8(X, Y, 0);
 4003988:	000d883a 	mov	r6,zero
 400398c:	e17ffd17 	ldw	r5,-12(fp)
 4003990:	e13ffc17 	ldw	r4,-16(fp)
 4003994:	4006e5c0 	call	4006e5c <draw8>
			draw8(X, Y + 1, -3);
 4003998:	e0bffd17 	ldw	r2,-12(fp)
 400399c:	10800044 	addi	r2,r2,1
 40039a0:	01bfff44 	movi	r6,-3
 40039a4:	100b883a 	mov	r5,r2
 40039a8:	e13ffc17 	ldw	r4,-16(fp)
 40039ac:	4006e5c0 	call	4006e5c <draw8>
			return false;
 40039b0:	0005883a 	mov	r2,zero
 40039b4:	0002a906 	br	400445c <drop+0x129c>
		}
	case 9:
		if(Y == 17 || gameBoard[Y + 1][X] > 0 || gameBoard[Y + 3][X + 1] > 0){
 40039b8:	e0bffd17 	ldw	r2,-12(fp)
 40039bc:	10800460 	cmpeqi	r2,r2,17
 40039c0:	10001e1e 	bne	r2,zero,4003a3c <drop+0x87c>
 40039c4:	e0bffd17 	ldw	r2,-12(fp)
 40039c8:	10800044 	addi	r2,r2,1
 40039cc:	040100b4 	movhi	r16,1026
 40039d0:	84080004 	addi	r16,r16,8192
 40039d4:	01400284 	movi	r5,10
 40039d8:	1009883a 	mov	r4,r2
 40039dc:	400dcd40 	call	400dcd4 <__mulsi3>
 40039e0:	1007883a 	mov	r3,r2
 40039e4:	e0bffc17 	ldw	r2,-16(fp)
 40039e8:	1885883a 	add	r2,r3,r2
 40039ec:	1085883a 	add	r2,r2,r2
 40039f0:	1085883a 	add	r2,r2,r2
 40039f4:	8085883a 	add	r2,r16,r2
 40039f8:	10800017 	ldw	r2,0(r2)
 40039fc:	00800f16 	blt	zero,r2,4003a3c <drop+0x87c>
 4003a00:	e0bffd17 	ldw	r2,-12(fp)
 4003a04:	10c000c4 	addi	r3,r2,3
 4003a08:	e0bffc17 	ldw	r2,-16(fp)
 4003a0c:	14400044 	addi	r17,r2,1
 4003a10:	040100b4 	movhi	r16,1026
 4003a14:	84080004 	addi	r16,r16,8192
 4003a18:	01400284 	movi	r5,10
 4003a1c:	1809883a 	mov	r4,r3
 4003a20:	400dcd40 	call	400dcd4 <__mulsi3>
 4003a24:	1445883a 	add	r2,r2,r17
 4003a28:	1085883a 	add	r2,r2,r2
 4003a2c:	1085883a 	add	r2,r2,r2
 4003a30:	8085883a 	add	r2,r16,r2
 4003a34:	10800017 	ldw	r2,0(r2)
 4003a38:	00800a0e 	bge	zero,r2,4003a64 <drop+0x8a4>
			draw9(X, Y, 0);
 4003a3c:	000d883a 	mov	r6,zero
 4003a40:	e17ffd17 	ldw	r5,-12(fp)
 4003a44:	e13ffc17 	ldw	r4,-16(fp)
 4003a48:	4006f380 	call	4006f38 <draw9>
			draw9(X, Y, 3);
 4003a4c:	018000c4 	movi	r6,3
 4003a50:	e17ffd17 	ldw	r5,-12(fp)
 4003a54:	e13ffc17 	ldw	r4,-16(fp)
 4003a58:	4006f380 	call	4006f38 <draw9>
			return true;
 4003a5c:	00800044 	movi	r2,1
 4003a60:	00027e06 	br	400445c <drop+0x129c>
		}
		else{
			draw9(X, Y, 0);
 4003a64:	000d883a 	mov	r6,zero
 4003a68:	e17ffd17 	ldw	r5,-12(fp)
 4003a6c:	e13ffc17 	ldw	r4,-16(fp)
 4003a70:	4006f380 	call	4006f38 <draw9>
			draw9(X, Y + 1, -3);
 4003a74:	e0bffd17 	ldw	r2,-12(fp)
 4003a78:	10800044 	addi	r2,r2,1
 4003a7c:	01bfff44 	movi	r6,-3
 4003a80:	100b883a 	mov	r5,r2
 4003a84:	e13ffc17 	ldw	r4,-16(fp)
 4003a88:	4006f380 	call	4006f38 <draw9>
			return false;
 4003a8c:	0005883a 	mov	r2,zero
 4003a90:	00027206 	br	400445c <drop+0x129c>
		}
	case 10:
		if(Y == 18 || gameBoard[Y + 2][X] > 0 || gameBoard[Y + 2][X + 1] > 0 || gameBoard[Y + 2][X + 2] > 0){
 4003a94:	e0bffd17 	ldw	r2,-12(fp)
 4003a98:	108004a0 	cmpeqi	r2,r2,18
 4003a9c:	10002d1e 	bne	r2,zero,4003b54 <drop+0x994>
 4003aa0:	e0bffd17 	ldw	r2,-12(fp)
 4003aa4:	10800084 	addi	r2,r2,2
 4003aa8:	040100b4 	movhi	r16,1026
 4003aac:	84080004 	addi	r16,r16,8192
 4003ab0:	01400284 	movi	r5,10
 4003ab4:	1009883a 	mov	r4,r2
 4003ab8:	400dcd40 	call	400dcd4 <__mulsi3>
 4003abc:	1007883a 	mov	r3,r2
 4003ac0:	e0bffc17 	ldw	r2,-16(fp)
 4003ac4:	1885883a 	add	r2,r3,r2
 4003ac8:	1085883a 	add	r2,r2,r2
 4003acc:	1085883a 	add	r2,r2,r2
 4003ad0:	8085883a 	add	r2,r16,r2
 4003ad4:	10800017 	ldw	r2,0(r2)
 4003ad8:	00801e16 	blt	zero,r2,4003b54 <drop+0x994>
 4003adc:	e0bffd17 	ldw	r2,-12(fp)
 4003ae0:	10c00084 	addi	r3,r2,2
 4003ae4:	e0bffc17 	ldw	r2,-16(fp)
 4003ae8:	14400044 	addi	r17,r2,1
 4003aec:	040100b4 	movhi	r16,1026
 4003af0:	84080004 	addi	r16,r16,8192
 4003af4:	01400284 	movi	r5,10
 4003af8:	1809883a 	mov	r4,r3
 4003afc:	400dcd40 	call	400dcd4 <__mulsi3>
 4003b00:	1445883a 	add	r2,r2,r17
 4003b04:	1085883a 	add	r2,r2,r2
 4003b08:	1085883a 	add	r2,r2,r2
 4003b0c:	8085883a 	add	r2,r16,r2
 4003b10:	10800017 	ldw	r2,0(r2)
 4003b14:	00800f16 	blt	zero,r2,4003b54 <drop+0x994>
 4003b18:	e0bffd17 	ldw	r2,-12(fp)
 4003b1c:	10c00084 	addi	r3,r2,2
 4003b20:	e0bffc17 	ldw	r2,-16(fp)
 4003b24:	14400084 	addi	r17,r2,2
 4003b28:	040100b4 	movhi	r16,1026
 4003b2c:	84080004 	addi	r16,r16,8192
 4003b30:	01400284 	movi	r5,10
 4003b34:	1809883a 	mov	r4,r3
 4003b38:	400dcd40 	call	400dcd4 <__mulsi3>
 4003b3c:	1445883a 	add	r2,r2,r17
 4003b40:	1085883a 	add	r2,r2,r2
 4003b44:	1085883a 	add	r2,r2,r2
 4003b48:	8085883a 	add	r2,r16,r2
 4003b4c:	10800017 	ldw	r2,0(r2)
 4003b50:	00800a0e 	bge	zero,r2,4003b7c <drop+0x9bc>
			draw10(X, Y, 0);
 4003b54:	000d883a 	mov	r6,zero
 4003b58:	e17ffd17 	ldw	r5,-12(fp)
 4003b5c:	e13ffc17 	ldw	r4,-16(fp)
 4003b60:	40070140 	call	4007014 <draw10>
			draw10(X, Y, 3);
 4003b64:	018000c4 	movi	r6,3
 4003b68:	e17ffd17 	ldw	r5,-12(fp)
 4003b6c:	e13ffc17 	ldw	r4,-16(fp)
 4003b70:	40070140 	call	4007014 <draw10>
			return true;
 4003b74:	00800044 	movi	r2,1
 4003b78:	00023806 	br	400445c <drop+0x129c>
		}
		else{
			draw10(X, Y, 0);
 4003b7c:	000d883a 	mov	r6,zero
 4003b80:	e17ffd17 	ldw	r5,-12(fp)
 4003b84:	e13ffc17 	ldw	r4,-16(fp)
 4003b88:	40070140 	call	4007014 <draw10>
			draw10(X, Y + 1, -3);
 4003b8c:	e0bffd17 	ldw	r2,-12(fp)
 4003b90:	10800044 	addi	r2,r2,1
 4003b94:	01bfff44 	movi	r6,-3
 4003b98:	100b883a 	mov	r5,r2
 4003b9c:	e13ffc17 	ldw	r4,-16(fp)
 4003ba0:	40070140 	call	4007014 <draw10>
			return false;
 4003ba4:	0005883a 	mov	r2,zero
 4003ba8:	00022c06 	br	400445c <drop+0x129c>
		}
	case 11:
		if(Y == 17 || gameBoard[Y + 3][X + 1] > 0 || gameBoard[Y + 3][X + 2] > 0){
 4003bac:	e0bffd17 	ldw	r2,-12(fp)
 4003bb0:	10800460 	cmpeqi	r2,r2,17
 4003bb4:	10001e1e 	bne	r2,zero,4003c30 <drop+0xa70>
 4003bb8:	e0bffd17 	ldw	r2,-12(fp)
 4003bbc:	10c000c4 	addi	r3,r2,3
 4003bc0:	e0bffc17 	ldw	r2,-16(fp)
 4003bc4:	14400044 	addi	r17,r2,1
 4003bc8:	040100b4 	movhi	r16,1026
 4003bcc:	84080004 	addi	r16,r16,8192
 4003bd0:	01400284 	movi	r5,10
 4003bd4:	1809883a 	mov	r4,r3
 4003bd8:	400dcd40 	call	400dcd4 <__mulsi3>
 4003bdc:	1445883a 	add	r2,r2,r17
 4003be0:	1085883a 	add	r2,r2,r2
 4003be4:	1085883a 	add	r2,r2,r2
 4003be8:	8085883a 	add	r2,r16,r2
 4003bec:	10800017 	ldw	r2,0(r2)
 4003bf0:	00800f16 	blt	zero,r2,4003c30 <drop+0xa70>
 4003bf4:	e0bffd17 	ldw	r2,-12(fp)
 4003bf8:	10c000c4 	addi	r3,r2,3
 4003bfc:	e0bffc17 	ldw	r2,-16(fp)
 4003c00:	14400084 	addi	r17,r2,2
 4003c04:	040100b4 	movhi	r16,1026
 4003c08:	84080004 	addi	r16,r16,8192
 4003c0c:	01400284 	movi	r5,10
 4003c10:	1809883a 	mov	r4,r3
 4003c14:	400dcd40 	call	400dcd4 <__mulsi3>
 4003c18:	1445883a 	add	r2,r2,r17
 4003c1c:	1085883a 	add	r2,r2,r2
 4003c20:	1085883a 	add	r2,r2,r2
 4003c24:	8085883a 	add	r2,r16,r2
 4003c28:	10800017 	ldw	r2,0(r2)
 4003c2c:	00800a0e 	bge	zero,r2,4003c58 <drop+0xa98>
			draw11(X, Y, 0);
 4003c30:	000d883a 	mov	r6,zero
 4003c34:	e17ffd17 	ldw	r5,-12(fp)
 4003c38:	e13ffc17 	ldw	r4,-16(fp)
 4003c3c:	40070ec0 	call	40070ec <draw11>
			draw11(X, Y, 3);
 4003c40:	018000c4 	movi	r6,3
 4003c44:	e17ffd17 	ldw	r5,-12(fp)
 4003c48:	e13ffc17 	ldw	r4,-16(fp)
 4003c4c:	40070ec0 	call	40070ec <draw11>
			return true;
 4003c50:	00800044 	movi	r2,1
 4003c54:	00020106 	br	400445c <drop+0x129c>
		}
		else{
			draw11(X, Y, 0);
 4003c58:	000d883a 	mov	r6,zero
 4003c5c:	e17ffd17 	ldw	r5,-12(fp)
 4003c60:	e13ffc17 	ldw	r4,-16(fp)
 4003c64:	40070ec0 	call	40070ec <draw11>
			draw11(X, Y + 1, -3);
 4003c68:	e0bffd17 	ldw	r2,-12(fp)
 4003c6c:	10800044 	addi	r2,r2,1
 4003c70:	01bfff44 	movi	r6,-3
 4003c74:	100b883a 	mov	r5,r2
 4003c78:	e13ffc17 	ldw	r4,-16(fp)
 4003c7c:	40070ec0 	call	40070ec <draw11>
			return false;
 4003c80:	0005883a 	mov	r2,zero
 4003c84:	0001f506 	br	400445c <drop+0x129c>
		}
	case 12:
		if(Y == 17 || gameBoard[Y + 3][X] > 0 || gameBoard[Y + 3][X + 1] > 0 || gameBoard[Y + 2][X + 2] > 0){
 4003c88:	e0bffd17 	ldw	r2,-12(fp)
 4003c8c:	10800460 	cmpeqi	r2,r2,17
 4003c90:	10002d1e 	bne	r2,zero,4003d48 <drop+0xb88>
 4003c94:	e0bffd17 	ldw	r2,-12(fp)
 4003c98:	108000c4 	addi	r2,r2,3
 4003c9c:	040100b4 	movhi	r16,1026
 4003ca0:	84080004 	addi	r16,r16,8192
 4003ca4:	01400284 	movi	r5,10
 4003ca8:	1009883a 	mov	r4,r2
 4003cac:	400dcd40 	call	400dcd4 <__mulsi3>
 4003cb0:	1007883a 	mov	r3,r2
 4003cb4:	e0bffc17 	ldw	r2,-16(fp)
 4003cb8:	1885883a 	add	r2,r3,r2
 4003cbc:	1085883a 	add	r2,r2,r2
 4003cc0:	1085883a 	add	r2,r2,r2
 4003cc4:	8085883a 	add	r2,r16,r2
 4003cc8:	10800017 	ldw	r2,0(r2)
 4003ccc:	00801e16 	blt	zero,r2,4003d48 <drop+0xb88>
 4003cd0:	e0bffd17 	ldw	r2,-12(fp)
 4003cd4:	10c000c4 	addi	r3,r2,3
 4003cd8:	e0bffc17 	ldw	r2,-16(fp)
 4003cdc:	14400044 	addi	r17,r2,1
 4003ce0:	040100b4 	movhi	r16,1026
 4003ce4:	84080004 	addi	r16,r16,8192
 4003ce8:	01400284 	movi	r5,10
 4003cec:	1809883a 	mov	r4,r3
 4003cf0:	400dcd40 	call	400dcd4 <__mulsi3>
 4003cf4:	1445883a 	add	r2,r2,r17
 4003cf8:	1085883a 	add	r2,r2,r2
 4003cfc:	1085883a 	add	r2,r2,r2
 4003d00:	8085883a 	add	r2,r16,r2
 4003d04:	10800017 	ldw	r2,0(r2)
 4003d08:	00800f16 	blt	zero,r2,4003d48 <drop+0xb88>
 4003d0c:	e0bffd17 	ldw	r2,-12(fp)
 4003d10:	10c00084 	addi	r3,r2,2
 4003d14:	e0bffc17 	ldw	r2,-16(fp)
 4003d18:	14400084 	addi	r17,r2,2
 4003d1c:	040100b4 	movhi	r16,1026
 4003d20:	84080004 	addi	r16,r16,8192
 4003d24:	01400284 	movi	r5,10
 4003d28:	1809883a 	mov	r4,r3
 4003d2c:	400dcd40 	call	400dcd4 <__mulsi3>
 4003d30:	1445883a 	add	r2,r2,r17
 4003d34:	1085883a 	add	r2,r2,r2
 4003d38:	1085883a 	add	r2,r2,r2
 4003d3c:	8085883a 	add	r2,r16,r2
 4003d40:	10800017 	ldw	r2,0(r2)
 4003d44:	00800a0e 	bge	zero,r2,4003d70 <drop+0xbb0>
			draw12(X, Y, 0);
 4003d48:	000d883a 	mov	r6,zero
 4003d4c:	e17ffd17 	ldw	r5,-12(fp)
 4003d50:	e13ffc17 	ldw	r4,-16(fp)
 4003d54:	40071cc0 	call	40071cc <draw12>
			draw12(X, Y, 5);
 4003d58:	01800144 	movi	r6,5
 4003d5c:	e17ffd17 	ldw	r5,-12(fp)
 4003d60:	e13ffc17 	ldw	r4,-16(fp)
 4003d64:	40071cc0 	call	40071cc <draw12>
			return true;
 4003d68:	00800044 	movi	r2,1
 4003d6c:	0001bb06 	br	400445c <drop+0x129c>
		}
		else{
			draw12(X, Y, 0);
 4003d70:	000d883a 	mov	r6,zero
 4003d74:	e17ffd17 	ldw	r5,-12(fp)
 4003d78:	e13ffc17 	ldw	r4,-16(fp)
 4003d7c:	40071cc0 	call	40071cc <draw12>
			draw12(X, Y + 1, -5);
 4003d80:	e0bffd17 	ldw	r2,-12(fp)
 4003d84:	10800044 	addi	r2,r2,1
 4003d88:	01bffec4 	movi	r6,-5
 4003d8c:	100b883a 	mov	r5,r2
 4003d90:	e13ffc17 	ldw	r4,-16(fp)
 4003d94:	40071cc0 	call	40071cc <draw12>
			return false;
 4003d98:	0005883a 	mov	r2,zero
 4003d9c:	0001af06 	br	400445c <drop+0x129c>
		}
	case 13:
		if(Y == 17 || gameBoard[Y + 2][X + 1] > 0 || gameBoard[Y + 3][X + 2] > 0){
 4003da0:	e0bffd17 	ldw	r2,-12(fp)
 4003da4:	10800460 	cmpeqi	r2,r2,17
 4003da8:	10001e1e 	bne	r2,zero,4003e24 <drop+0xc64>
 4003dac:	e0bffd17 	ldw	r2,-12(fp)
 4003db0:	10c00084 	addi	r3,r2,2
 4003db4:	e0bffc17 	ldw	r2,-16(fp)
 4003db8:	14400044 	addi	r17,r2,1
 4003dbc:	040100b4 	movhi	r16,1026
 4003dc0:	84080004 	addi	r16,r16,8192
 4003dc4:	01400284 	movi	r5,10
 4003dc8:	1809883a 	mov	r4,r3
 4003dcc:	400dcd40 	call	400dcd4 <__mulsi3>
 4003dd0:	1445883a 	add	r2,r2,r17
 4003dd4:	1085883a 	add	r2,r2,r2
 4003dd8:	1085883a 	add	r2,r2,r2
 4003ddc:	8085883a 	add	r2,r16,r2
 4003de0:	10800017 	ldw	r2,0(r2)
 4003de4:	00800f16 	blt	zero,r2,4003e24 <drop+0xc64>
 4003de8:	e0bffd17 	ldw	r2,-12(fp)
 4003dec:	10c000c4 	addi	r3,r2,3
 4003df0:	e0bffc17 	ldw	r2,-16(fp)
 4003df4:	14400084 	addi	r17,r2,2
 4003df8:	040100b4 	movhi	r16,1026
 4003dfc:	84080004 	addi	r16,r16,8192
 4003e00:	01400284 	movi	r5,10
 4003e04:	1809883a 	mov	r4,r3
 4003e08:	400dcd40 	call	400dcd4 <__mulsi3>
 4003e0c:	1445883a 	add	r2,r2,r17
 4003e10:	1085883a 	add	r2,r2,r2
 4003e14:	1085883a 	add	r2,r2,r2
 4003e18:	8085883a 	add	r2,r16,r2
 4003e1c:	10800017 	ldw	r2,0(r2)
 4003e20:	00800a0e 	bge	zero,r2,4003e4c <drop+0xc8c>
			draw13(X, Y, 0);
 4003e24:	000d883a 	mov	r6,zero
 4003e28:	e17ffd17 	ldw	r5,-12(fp)
 4003e2c:	e13ffc17 	ldw	r4,-16(fp)
 4003e30:	40073000 	call	4007300 <draw13>
			draw13(X, Y, 5);
 4003e34:	01800144 	movi	r6,5
 4003e38:	e17ffd17 	ldw	r5,-12(fp)
 4003e3c:	e13ffc17 	ldw	r4,-16(fp)
 4003e40:	40073000 	call	4007300 <draw13>
			return true;
 4003e44:	00800044 	movi	r2,1
 4003e48:	00018406 	br	400445c <drop+0x129c>
		}
		else{
			draw13(X, Y, 0);
 4003e4c:	000d883a 	mov	r6,zero
 4003e50:	e17ffd17 	ldw	r5,-12(fp)
 4003e54:	e13ffc17 	ldw	r4,-16(fp)
 4003e58:	40073000 	call	4007300 <draw13>
			draw13(X, Y + 1, -5);
 4003e5c:	e0bffd17 	ldw	r2,-12(fp)
 4003e60:	10800044 	addi	r2,r2,1
 4003e64:	01bffec4 	movi	r6,-5
 4003e68:	100b883a 	mov	r5,r2
 4003e6c:	e13ffc17 	ldw	r4,-16(fp)
 4003e70:	40073000 	call	4007300 <draw13>
			return false;
 4003e74:	0005883a 	mov	r2,zero
 4003e78:	00017806 	br	400445c <drop+0x129c>
		}
	case 14:
		if(Y == 17 || gameBoard[Y + 2][X] > 0 || gameBoard[Y + 2][X + 2] > 0 || gameBoard[Y + 3][X + 1] > 0){
 4003e7c:	e0bffd17 	ldw	r2,-12(fp)
 4003e80:	10800460 	cmpeqi	r2,r2,17
 4003e84:	10002d1e 	bne	r2,zero,4003f3c <drop+0xd7c>
 4003e88:	e0bffd17 	ldw	r2,-12(fp)
 4003e8c:	10800084 	addi	r2,r2,2
 4003e90:	040100b4 	movhi	r16,1026
 4003e94:	84080004 	addi	r16,r16,8192
 4003e98:	01400284 	movi	r5,10
 4003e9c:	1009883a 	mov	r4,r2
 4003ea0:	400dcd40 	call	400dcd4 <__mulsi3>
 4003ea4:	1007883a 	mov	r3,r2
 4003ea8:	e0bffc17 	ldw	r2,-16(fp)
 4003eac:	1885883a 	add	r2,r3,r2
 4003eb0:	1085883a 	add	r2,r2,r2
 4003eb4:	1085883a 	add	r2,r2,r2
 4003eb8:	8085883a 	add	r2,r16,r2
 4003ebc:	10800017 	ldw	r2,0(r2)
 4003ec0:	00801e16 	blt	zero,r2,4003f3c <drop+0xd7c>
 4003ec4:	e0bffd17 	ldw	r2,-12(fp)
 4003ec8:	10c00084 	addi	r3,r2,2
 4003ecc:	e0bffc17 	ldw	r2,-16(fp)
 4003ed0:	14400084 	addi	r17,r2,2
 4003ed4:	040100b4 	movhi	r16,1026
 4003ed8:	84080004 	addi	r16,r16,8192
 4003edc:	01400284 	movi	r5,10
 4003ee0:	1809883a 	mov	r4,r3
 4003ee4:	400dcd40 	call	400dcd4 <__mulsi3>
 4003ee8:	1445883a 	add	r2,r2,r17
 4003eec:	1085883a 	add	r2,r2,r2
 4003ef0:	1085883a 	add	r2,r2,r2
 4003ef4:	8085883a 	add	r2,r16,r2
 4003ef8:	10800017 	ldw	r2,0(r2)
 4003efc:	00800f16 	blt	zero,r2,4003f3c <drop+0xd7c>
 4003f00:	e0bffd17 	ldw	r2,-12(fp)
 4003f04:	10c000c4 	addi	r3,r2,3
 4003f08:	e0bffc17 	ldw	r2,-16(fp)
 4003f0c:	14400044 	addi	r17,r2,1
 4003f10:	040100b4 	movhi	r16,1026
 4003f14:	84080004 	addi	r16,r16,8192
 4003f18:	01400284 	movi	r5,10
 4003f1c:	1809883a 	mov	r4,r3
 4003f20:	400dcd40 	call	400dcd4 <__mulsi3>
 4003f24:	1445883a 	add	r2,r2,r17
 4003f28:	1085883a 	add	r2,r2,r2
 4003f2c:	1085883a 	add	r2,r2,r2
 4003f30:	8085883a 	add	r2,r16,r2
 4003f34:	10800017 	ldw	r2,0(r2)
 4003f38:	00800a0e 	bge	zero,r2,4003f64 <drop+0xda4>
			draw14(X, Y, 0);
 4003f3c:	000d883a 	mov	r6,zero
 4003f40:	e17ffd17 	ldw	r5,-12(fp)
 4003f44:	e13ffc17 	ldw	r4,-16(fp)
 4003f48:	40074300 	call	4007430 <draw14>
			draw14(X, Y, 6);
 4003f4c:	01800184 	movi	r6,6
 4003f50:	e17ffd17 	ldw	r5,-12(fp)
 4003f54:	e13ffc17 	ldw	r4,-16(fp)
 4003f58:	40074300 	call	4007430 <draw14>
			return true;
 4003f5c:	00800044 	movi	r2,1
 4003f60:	00013e06 	br	400445c <drop+0x129c>
		}
		else{
			draw14(X, Y, 0);
 4003f64:	000d883a 	mov	r6,zero
 4003f68:	e17ffd17 	ldw	r5,-12(fp)
 4003f6c:	e13ffc17 	ldw	r4,-16(fp)
 4003f70:	40074300 	call	4007430 <draw14>
			draw14(X, Y + 1, -6);
 4003f74:	e0bffd17 	ldw	r2,-12(fp)
 4003f78:	10800044 	addi	r2,r2,1
 4003f7c:	01bffe84 	movi	r6,-6
 4003f80:	100b883a 	mov	r5,r2
 4003f84:	e13ffc17 	ldw	r4,-16(fp)
 4003f88:	40074300 	call	4007430 <draw14>
			return false;
 4003f8c:	0005883a 	mov	r2,zero
 4003f90:	00013206 	br	400445c <drop+0x129c>
		}
	case 15:
		if(Y == 17 || gameBoard[Y + 2][X] > 0 || gameBoard[Y + 3][X + 1] > 0){
 4003f94:	e0bffd17 	ldw	r2,-12(fp)
 4003f98:	10800460 	cmpeqi	r2,r2,17
 4003f9c:	10001e1e 	bne	r2,zero,4004018 <drop+0xe58>
 4003fa0:	e0bffd17 	ldw	r2,-12(fp)
 4003fa4:	10800084 	addi	r2,r2,2
 4003fa8:	040100b4 	movhi	r16,1026
 4003fac:	84080004 	addi	r16,r16,8192
 4003fb0:	01400284 	movi	r5,10
 4003fb4:	1009883a 	mov	r4,r2
 4003fb8:	400dcd40 	call	400dcd4 <__mulsi3>
 4003fbc:	1007883a 	mov	r3,r2
 4003fc0:	e0bffc17 	ldw	r2,-16(fp)
 4003fc4:	1885883a 	add	r2,r3,r2
 4003fc8:	1085883a 	add	r2,r2,r2
 4003fcc:	1085883a 	add	r2,r2,r2
 4003fd0:	8085883a 	add	r2,r16,r2
 4003fd4:	10800017 	ldw	r2,0(r2)
 4003fd8:	00800f16 	blt	zero,r2,4004018 <drop+0xe58>
 4003fdc:	e0bffd17 	ldw	r2,-12(fp)
 4003fe0:	10c000c4 	addi	r3,r2,3
 4003fe4:	e0bffc17 	ldw	r2,-16(fp)
 4003fe8:	14400044 	addi	r17,r2,1
 4003fec:	040100b4 	movhi	r16,1026
 4003ff0:	84080004 	addi	r16,r16,8192
 4003ff4:	01400284 	movi	r5,10
 4003ff8:	1809883a 	mov	r4,r3
 4003ffc:	400dcd40 	call	400dcd4 <__mulsi3>
 4004000:	1445883a 	add	r2,r2,r17
 4004004:	1085883a 	add	r2,r2,r2
 4004008:	1085883a 	add	r2,r2,r2
 400400c:	8085883a 	add	r2,r16,r2
 4004010:	10800017 	ldw	r2,0(r2)
 4004014:	00800a0e 	bge	zero,r2,4004040 <drop+0xe80>
			draw15(X, Y, 0);
 4004018:	000d883a 	mov	r6,zero
 400401c:	e17ffd17 	ldw	r5,-12(fp)
 4004020:	e13ffc17 	ldw	r4,-16(fp)
 4004024:	400750c0 	call	400750c <draw15>
			draw15(X, Y, 6);
 4004028:	01800184 	movi	r6,6
 400402c:	e17ffd17 	ldw	r5,-12(fp)
 4004030:	e13ffc17 	ldw	r4,-16(fp)
 4004034:	400750c0 	call	400750c <draw15>
			return true;
 4004038:	00800044 	movi	r2,1
 400403c:	00010706 	br	400445c <drop+0x129c>
		}
		else{
			draw15(X, Y, 0);
 4004040:	000d883a 	mov	r6,zero
 4004044:	e17ffd17 	ldw	r5,-12(fp)
 4004048:	e13ffc17 	ldw	r4,-16(fp)
 400404c:	400750c0 	call	400750c <draw15>
			draw15(X, Y + 1, -6);
 4004050:	e0bffd17 	ldw	r2,-12(fp)
 4004054:	10800044 	addi	r2,r2,1
 4004058:	01bffe84 	movi	r6,-6
 400405c:	100b883a 	mov	r5,r2
 4004060:	e13ffc17 	ldw	r4,-16(fp)
 4004064:	400750c0 	call	400750c <draw15>
			return false;
 4004068:	0005883a 	mov	r2,zero
 400406c:	0000fb06 	br	400445c <drop+0x129c>
		}
	case 16:
		if(Y == 18 || gameBoard[Y + 2][X] > 0 || gameBoard[Y + 2][X + 1] > 0 || gameBoard[Y + 2][X + 2] > 0){
 4004070:	e0bffd17 	ldw	r2,-12(fp)
 4004074:	108004a0 	cmpeqi	r2,r2,18
 4004078:	10002d1e 	bne	r2,zero,4004130 <drop+0xf70>
 400407c:	e0bffd17 	ldw	r2,-12(fp)
 4004080:	10800084 	addi	r2,r2,2
 4004084:	040100b4 	movhi	r16,1026
 4004088:	84080004 	addi	r16,r16,8192
 400408c:	01400284 	movi	r5,10
 4004090:	1009883a 	mov	r4,r2
 4004094:	400dcd40 	call	400dcd4 <__mulsi3>
 4004098:	1007883a 	mov	r3,r2
 400409c:	e0bffc17 	ldw	r2,-16(fp)
 40040a0:	1885883a 	add	r2,r3,r2
 40040a4:	1085883a 	add	r2,r2,r2
 40040a8:	1085883a 	add	r2,r2,r2
 40040ac:	8085883a 	add	r2,r16,r2
 40040b0:	10800017 	ldw	r2,0(r2)
 40040b4:	00801e16 	blt	zero,r2,4004130 <drop+0xf70>
 40040b8:	e0bffd17 	ldw	r2,-12(fp)
 40040bc:	10c00084 	addi	r3,r2,2
 40040c0:	e0bffc17 	ldw	r2,-16(fp)
 40040c4:	14400044 	addi	r17,r2,1
 40040c8:	040100b4 	movhi	r16,1026
 40040cc:	84080004 	addi	r16,r16,8192
 40040d0:	01400284 	movi	r5,10
 40040d4:	1809883a 	mov	r4,r3
 40040d8:	400dcd40 	call	400dcd4 <__mulsi3>
 40040dc:	1445883a 	add	r2,r2,r17
 40040e0:	1085883a 	add	r2,r2,r2
 40040e4:	1085883a 	add	r2,r2,r2
 40040e8:	8085883a 	add	r2,r16,r2
 40040ec:	10800017 	ldw	r2,0(r2)
 40040f0:	00800f16 	blt	zero,r2,4004130 <drop+0xf70>
 40040f4:	e0bffd17 	ldw	r2,-12(fp)
 40040f8:	10c00084 	addi	r3,r2,2
 40040fc:	e0bffc17 	ldw	r2,-16(fp)
 4004100:	14400084 	addi	r17,r2,2
 4004104:	040100b4 	movhi	r16,1026
 4004108:	84080004 	addi	r16,r16,8192
 400410c:	01400284 	movi	r5,10
 4004110:	1809883a 	mov	r4,r3
 4004114:	400dcd40 	call	400dcd4 <__mulsi3>
 4004118:	1445883a 	add	r2,r2,r17
 400411c:	1085883a 	add	r2,r2,r2
 4004120:	1085883a 	add	r2,r2,r2
 4004124:	8085883a 	add	r2,r16,r2
 4004128:	10800017 	ldw	r2,0(r2)
 400412c:	00800a0e 	bge	zero,r2,4004158 <drop+0xf98>
			draw16(X, Y, 0);
 4004130:	000d883a 	mov	r6,zero
 4004134:	e17ffd17 	ldw	r5,-12(fp)
 4004138:	e13ffc17 	ldw	r4,-16(fp)
 400413c:	40075ec0 	call	40075ec <draw16>
			draw16(X, Y, 6);
 4004140:	01800184 	movi	r6,6
 4004144:	e17ffd17 	ldw	r5,-12(fp)
 4004148:	e13ffc17 	ldw	r4,-16(fp)
 400414c:	40075ec0 	call	40075ec <draw16>
			return true;
 4004150:	00800044 	movi	r2,1
 4004154:	0000c106 	br	400445c <drop+0x129c>
		}
		else{
			draw16(X, Y, 0);
 4004158:	000d883a 	mov	r6,zero
 400415c:	e17ffd17 	ldw	r5,-12(fp)
 4004160:	e13ffc17 	ldw	r4,-16(fp)
 4004164:	40075ec0 	call	40075ec <draw16>
			draw16(X, Y + 1, -6);
 4004168:	e0bffd17 	ldw	r2,-12(fp)
 400416c:	10800044 	addi	r2,r2,1
 4004170:	01bffe84 	movi	r6,-6
 4004174:	100b883a 	mov	r5,r2
 4004178:	e13ffc17 	ldw	r4,-16(fp)
 400417c:	40075ec0 	call	40075ec <draw16>
			return false;
 4004180:	0005883a 	mov	r2,zero
 4004184:	0000b506 	br	400445c <drop+0x129c>
		}
	case 17:
		if(Y == 17 || gameBoard[Y + 3][X + 1] > 0 || gameBoard[Y + 2][X + 2] > 0){
 4004188:	e0bffd17 	ldw	r2,-12(fp)
 400418c:	10800460 	cmpeqi	r2,r2,17
 4004190:	10001e1e 	bne	r2,zero,400420c <drop+0x104c>
 4004194:	e0bffd17 	ldw	r2,-12(fp)
 4004198:	10c000c4 	addi	r3,r2,3
 400419c:	e0bffc17 	ldw	r2,-16(fp)
 40041a0:	14400044 	addi	r17,r2,1
 40041a4:	040100b4 	movhi	r16,1026
 40041a8:	84080004 	addi	r16,r16,8192
 40041ac:	01400284 	movi	r5,10
 40041b0:	1809883a 	mov	r4,r3
 40041b4:	400dcd40 	call	400dcd4 <__mulsi3>
 40041b8:	1445883a 	add	r2,r2,r17
 40041bc:	1085883a 	add	r2,r2,r2
 40041c0:	1085883a 	add	r2,r2,r2
 40041c4:	8085883a 	add	r2,r16,r2
 40041c8:	10800017 	ldw	r2,0(r2)
 40041cc:	00800f16 	blt	zero,r2,400420c <drop+0x104c>
 40041d0:	e0bffd17 	ldw	r2,-12(fp)
 40041d4:	10c00084 	addi	r3,r2,2
 40041d8:	e0bffc17 	ldw	r2,-16(fp)
 40041dc:	14400084 	addi	r17,r2,2
 40041e0:	040100b4 	movhi	r16,1026
 40041e4:	84080004 	addi	r16,r16,8192
 40041e8:	01400284 	movi	r5,10
 40041ec:	1809883a 	mov	r4,r3
 40041f0:	400dcd40 	call	400dcd4 <__mulsi3>
 40041f4:	1445883a 	add	r2,r2,r17
 40041f8:	1085883a 	add	r2,r2,r2
 40041fc:	1085883a 	add	r2,r2,r2
 4004200:	8085883a 	add	r2,r16,r2
 4004204:	10800017 	ldw	r2,0(r2)
 4004208:	00800a0e 	bge	zero,r2,4004234 <drop+0x1074>
			draw17(X, Y, 0);
 400420c:	000d883a 	mov	r6,zero
 4004210:	e17ffd17 	ldw	r5,-12(fp)
 4004214:	e13ffc17 	ldw	r4,-16(fp)
 4004218:	40076c40 	call	40076c4 <draw17>
			draw17(X, Y, 6);
 400421c:	01800184 	movi	r6,6
 4004220:	e17ffd17 	ldw	r5,-12(fp)
 4004224:	e13ffc17 	ldw	r4,-16(fp)
 4004228:	40076c40 	call	40076c4 <draw17>
			return true;
 400422c:	00800044 	movi	r2,1
 4004230:	00008a06 	br	400445c <drop+0x129c>
		}
		else{
			draw17(X, Y, 0);
 4004234:	000d883a 	mov	r6,zero
 4004238:	e17ffd17 	ldw	r5,-12(fp)
 400423c:	e13ffc17 	ldw	r4,-16(fp)
 4004240:	40076c40 	call	40076c4 <draw17>
			draw17(X, Y + 1, -6);
 4004244:	e0bffd17 	ldw	r2,-12(fp)
 4004248:	10800044 	addi	r2,r2,1
 400424c:	01bffe84 	movi	r6,-6
 4004250:	100b883a 	mov	r5,r2
 4004254:	e13ffc17 	ldw	r4,-16(fp)
 4004258:	40076c40 	call	40076c4 <draw17>
			return false;
 400425c:	0005883a 	mov	r2,zero
 4004260:	00007e06 	br	400445c <drop+0x129c>
		}
	case 18:
		if(Y == 17 || gameBoard[Y + 2][X] > 0 || gameBoard[Y + 3][X + 1] > 0 || gameBoard[Y + 3][ X + 2] > 0){
 4004264:	e0bffd17 	ldw	r2,-12(fp)
 4004268:	10800460 	cmpeqi	r2,r2,17
 400426c:	10002d1e 	bne	r2,zero,4004324 <drop+0x1164>
 4004270:	e0bffd17 	ldw	r2,-12(fp)
 4004274:	10800084 	addi	r2,r2,2
 4004278:	040100b4 	movhi	r16,1026
 400427c:	84080004 	addi	r16,r16,8192
 4004280:	01400284 	movi	r5,10
 4004284:	1009883a 	mov	r4,r2
 4004288:	400dcd40 	call	400dcd4 <__mulsi3>
 400428c:	1007883a 	mov	r3,r2
 4004290:	e0bffc17 	ldw	r2,-16(fp)
 4004294:	1885883a 	add	r2,r3,r2
 4004298:	1085883a 	add	r2,r2,r2
 400429c:	1085883a 	add	r2,r2,r2
 40042a0:	8085883a 	add	r2,r16,r2
 40042a4:	10800017 	ldw	r2,0(r2)
 40042a8:	00801e16 	blt	zero,r2,4004324 <drop+0x1164>
 40042ac:	e0bffd17 	ldw	r2,-12(fp)
 40042b0:	10c000c4 	addi	r3,r2,3
 40042b4:	e0bffc17 	ldw	r2,-16(fp)
 40042b8:	14400044 	addi	r17,r2,1
 40042bc:	040100b4 	movhi	r16,1026
 40042c0:	84080004 	addi	r16,r16,8192
 40042c4:	01400284 	movi	r5,10
 40042c8:	1809883a 	mov	r4,r3
 40042cc:	400dcd40 	call	400dcd4 <__mulsi3>
 40042d0:	1445883a 	add	r2,r2,r17
 40042d4:	1085883a 	add	r2,r2,r2
 40042d8:	1085883a 	add	r2,r2,r2
 40042dc:	8085883a 	add	r2,r16,r2
 40042e0:	10800017 	ldw	r2,0(r2)
 40042e4:	00800f16 	blt	zero,r2,4004324 <drop+0x1164>
 40042e8:	e0bffd17 	ldw	r2,-12(fp)
 40042ec:	10c000c4 	addi	r3,r2,3
 40042f0:	e0bffc17 	ldw	r2,-16(fp)
 40042f4:	14400084 	addi	r17,r2,2
 40042f8:	040100b4 	movhi	r16,1026
 40042fc:	84080004 	addi	r16,r16,8192
 4004300:	01400284 	movi	r5,10
 4004304:	1809883a 	mov	r4,r3
 4004308:	400dcd40 	call	400dcd4 <__mulsi3>
 400430c:	1445883a 	add	r2,r2,r17
 4004310:	1085883a 	add	r2,r2,r2
 4004314:	1085883a 	add	r2,r2,r2
 4004318:	8085883a 	add	r2,r16,r2
 400431c:	10800017 	ldw	r2,0(r2)
 4004320:	00800a0e 	bge	zero,r2,400434c <drop+0x118c>
			draw18(X, Y, 0);
 4004324:	000d883a 	mov	r6,zero
 4004328:	e17ffd17 	ldw	r5,-12(fp)
 400432c:	e13ffc17 	ldw	r4,-16(fp)
 4004330:	40077a40 	call	40077a4 <draw18>
			draw18(X, Y, 7);
 4004334:	018001c4 	movi	r6,7
 4004338:	e17ffd17 	ldw	r5,-12(fp)
 400433c:	e13ffc17 	ldw	r4,-16(fp)
 4004340:	40077a40 	call	40077a4 <draw18>
			return true;
 4004344:	00800044 	movi	r2,1
 4004348:	00004406 	br	400445c <drop+0x129c>
		}
		else{
			draw18(X, Y, 0);
 400434c:	000d883a 	mov	r6,zero
 4004350:	e17ffd17 	ldw	r5,-12(fp)
 4004354:	e13ffc17 	ldw	r4,-16(fp)
 4004358:	40077a40 	call	40077a4 <draw18>
			draw18(X, Y + 1, -7);
 400435c:	e0bffd17 	ldw	r2,-12(fp)
 4004360:	10800044 	addi	r2,r2,1
 4004364:	01bffe44 	movi	r6,-7
 4004368:	100b883a 	mov	r5,r2
 400436c:	e13ffc17 	ldw	r4,-16(fp)
 4004370:	40077a40 	call	40077a4 <draw18>
			return false;
 4004374:	0005883a 	mov	r2,zero
 4004378:	00003806 	br	400445c <drop+0x129c>
		}
	case 19:
		if(Y == 17 || gameBoard[Y + 2][X + 2] > 0 || gameBoard[Y + 3][X + 1] > 0){
 400437c:	e0bffd17 	ldw	r2,-12(fp)
 4004380:	10800460 	cmpeqi	r2,r2,17
 4004384:	10001e1e 	bne	r2,zero,4004400 <drop+0x1240>
 4004388:	e0bffd17 	ldw	r2,-12(fp)
 400438c:	10c00084 	addi	r3,r2,2
 4004390:	e0bffc17 	ldw	r2,-16(fp)
 4004394:	14400084 	addi	r17,r2,2
 4004398:	040100b4 	movhi	r16,1026
 400439c:	84080004 	addi	r16,r16,8192
 40043a0:	01400284 	movi	r5,10
 40043a4:	1809883a 	mov	r4,r3
 40043a8:	400dcd40 	call	400dcd4 <__mulsi3>
 40043ac:	1445883a 	add	r2,r2,r17
 40043b0:	1085883a 	add	r2,r2,r2
 40043b4:	1085883a 	add	r2,r2,r2
 40043b8:	8085883a 	add	r2,r16,r2
 40043bc:	10800017 	ldw	r2,0(r2)
 40043c0:	00800f16 	blt	zero,r2,4004400 <drop+0x1240>
 40043c4:	e0bffd17 	ldw	r2,-12(fp)
 40043c8:	10c000c4 	addi	r3,r2,3
 40043cc:	e0bffc17 	ldw	r2,-16(fp)
 40043d0:	14400044 	addi	r17,r2,1
 40043d4:	040100b4 	movhi	r16,1026
 40043d8:	84080004 	addi	r16,r16,8192
 40043dc:	01400284 	movi	r5,10
 40043e0:	1809883a 	mov	r4,r3
 40043e4:	400dcd40 	call	400dcd4 <__mulsi3>
 40043e8:	1445883a 	add	r2,r2,r17
 40043ec:	1085883a 	add	r2,r2,r2
 40043f0:	1085883a 	add	r2,r2,r2
 40043f4:	8085883a 	add	r2,r16,r2
 40043f8:	10800017 	ldw	r2,0(r2)
 40043fc:	00800a0e 	bge	zero,r2,4004428 <drop+0x1268>
			draw19(X, Y, 0);
 4004400:	000d883a 	mov	r6,zero
 4004404:	e17ffd17 	ldw	r5,-12(fp)
 4004408:	e13ffc17 	ldw	r4,-16(fp)
 400440c:	40078d80 	call	40078d8 <draw19>
			draw19(X, Y, 7);
 4004410:	018001c4 	movi	r6,7
 4004414:	e17ffd17 	ldw	r5,-12(fp)
 4004418:	e13ffc17 	ldw	r4,-16(fp)
 400441c:	40078d80 	call	40078d8 <draw19>
			return true;
 4004420:	00800044 	movi	r2,1
 4004424:	00000d06 	br	400445c <drop+0x129c>
		}
		else{
			draw19(X, Y, 0);
 4004428:	000d883a 	mov	r6,zero
 400442c:	e17ffd17 	ldw	r5,-12(fp)
 4004430:	e13ffc17 	ldw	r4,-16(fp)
 4004434:	40078d80 	call	40078d8 <draw19>
			draw19(X, Y + 1, -7);
 4004438:	e0bffd17 	ldw	r2,-12(fp)
 400443c:	10800044 	addi	r2,r2,1
 4004440:	01bffe44 	movi	r6,-7
 4004444:	100b883a 	mov	r5,r2
 4004448:	e13ffc17 	ldw	r4,-16(fp)
 400444c:	40078d80 	call	40078d8 <draw19>
			return false;
 4004450:	0005883a 	mov	r2,zero
 4004454:	00000106 	br	400445c <drop+0x129c>
		}
	default:
		return false;
 4004458:	0005883a 	mov	r2,zero
	}
}
 400445c:	e6fffe04 	addi	sp,fp,-8
 4004460:	dfc00317 	ldw	ra,12(sp)
 4004464:	df000217 	ldw	fp,8(sp)
 4004468:	dc400117 	ldw	r17,4(sp)
 400446c:	dc000017 	ldw	r16,0(sp)
 4004470:	dec00404 	addi	sp,sp,16
 4004474:	f800283a 	ret

04004478 <lineClear>:

int lineClear(int Y){
 4004478:	deffed04 	addi	sp,sp,-76
 400447c:	dfc01215 	stw	ra,72(sp)
 4004480:	df001115 	stw	fp,68(sp)
 4004484:	dc401015 	stw	r17,64(sp)
 4004488:	dc000f15 	stw	r16,60(sp)
 400448c:	df001104 	addi	fp,sp,68
 4004490:	e13ffd15 	stw	r4,-12(fp)
	int clears = 0; //line clear counter
 4004494:	e03fef15 	stw	zero,-68(fp)
	int clearLines[4] = {0}; //line clear indexes
 4004498:	e03ff915 	stw	zero,-28(fp)
 400449c:	e03ffa15 	stw	zero,-24(fp)
 40044a0:	e03ffb15 	stw	zero,-20(fp)
 40044a4:	e03ffc15 	stw	zero,-16(fp)
	for(int i = 0; i < 4; i++){ //for all possible lines to clear, find full lines and add them to clearLines array
 40044a8:	e03ff015 	stw	zero,-64(fp)
 40044ac:	00002d06 	br	4004564 <lineClear+0xec>
		for(int j = 0; j < 10; j++){
 40044b0:	e03ff115 	stw	zero,-60(fp)
 40044b4:	00002306 	br	4004544 <lineClear+0xcc>
			if(gameBoard[Y + i][j] <= 0){
 40044b8:	e0fffd17 	ldw	r3,-12(fp)
 40044bc:	e0bff017 	ldw	r2,-64(fp)
 40044c0:	1885883a 	add	r2,r3,r2
 40044c4:	040100b4 	movhi	r16,1026
 40044c8:	84080004 	addi	r16,r16,8192
 40044cc:	01400284 	movi	r5,10
 40044d0:	1009883a 	mov	r4,r2
 40044d4:	400dcd40 	call	400dcd4 <__mulsi3>
 40044d8:	1007883a 	mov	r3,r2
 40044dc:	e0bff117 	ldw	r2,-60(fp)
 40044e0:	1885883a 	add	r2,r3,r2
 40044e4:	1085883a 	add	r2,r2,r2
 40044e8:	1085883a 	add	r2,r2,r2
 40044ec:	8085883a 	add	r2,r16,r2
 40044f0:	10800017 	ldw	r2,0(r2)
 40044f4:	0080170e 	bge	zero,r2,4004554 <lineClear+0xdc>
				break;
			}
			if(j == 9){
 40044f8:	e0bff117 	ldw	r2,-60(fp)
 40044fc:	10800258 	cmpnei	r2,r2,9
 4004500:	10000d1e 	bne	r2,zero,4004538 <lineClear+0xc0>
				clearLines[clears] = Y + i;
 4004504:	e0fffd17 	ldw	r3,-12(fp)
 4004508:	e0bff017 	ldw	r2,-64(fp)
 400450c:	1887883a 	add	r3,r3,r2
 4004510:	e0bfef17 	ldw	r2,-68(fp)
 4004514:	1085883a 	add	r2,r2,r2
 4004518:	1085883a 	add	r2,r2,r2
 400451c:	e13fef04 	addi	r4,fp,-68
 4004520:	2085883a 	add	r2,r4,r2
 4004524:	10800a04 	addi	r2,r2,40
 4004528:	10c00015 	stw	r3,0(r2)
				clears++;
 400452c:	e0bfef17 	ldw	r2,-68(fp)
 4004530:	10800044 	addi	r2,r2,1
 4004534:	e0bfef15 	stw	r2,-68(fp)

int lineClear(int Y){
	int clears = 0; //line clear counter
	int clearLines[4] = {0}; //line clear indexes
	for(int i = 0; i < 4; i++){ //for all possible lines to clear, find full lines and add them to clearLines array
		for(int j = 0; j < 10; j++){
 4004538:	e0bff117 	ldw	r2,-60(fp)
 400453c:	10800044 	addi	r2,r2,1
 4004540:	e0bff115 	stw	r2,-60(fp)
 4004544:	e0bff117 	ldw	r2,-60(fp)
 4004548:	10800290 	cmplti	r2,r2,10
 400454c:	103fda1e 	bne	r2,zero,40044b8 <__alt_mem_onchip_memory2_0+0xfbfff2f8>
 4004550:	00000106 	br	4004558 <lineClear+0xe0>
			if(gameBoard[Y + i][j] <= 0){
				break;
 4004554:	0001883a 	nop
}

int lineClear(int Y){
	int clears = 0; //line clear counter
	int clearLines[4] = {0}; //line clear indexes
	for(int i = 0; i < 4; i++){ //for all possible lines to clear, find full lines and add them to clearLines array
 4004558:	e0bff017 	ldw	r2,-64(fp)
 400455c:	10800044 	addi	r2,r2,1
 4004560:	e0bff015 	stw	r2,-64(fp)
 4004564:	e0bff017 	ldw	r2,-64(fp)
 4004568:	10800110 	cmplti	r2,r2,4
 400456c:	103fd01e 	bne	r2,zero,40044b0 <__alt_mem_onchip_memory2_0+0xfbfff2f0>
				clearLines[clears] = Y + i;
				clears++;
			}
		}
	}
	if(clears == 0) {return false;}
 4004570:	e0bfef17 	ldw	r2,-68(fp)
 4004574:	1000021e 	bne	r2,zero,4004580 <lineClear+0x108>
 4004578:	0005883a 	mov	r2,zero
 400457c:	0000d606 	br	40048d8 <lineClear+0x460>
	for(int i = 0; i < 5; i++){ //line clearing animation
 4004580:	e03ff215 	stw	zero,-56(fp)
 4004584:	00009706 	br	40047e4 <lineClear+0x36c>
		for(int j = 0; j < clears; j++){
 4004588:	e03ff315 	stw	zero,-52(fp)
 400458c:	00008d06 	br	40047c4 <lineClear+0x34c>
			vga_ctrl->VRAM[(215 + (4 - i) + 40 * clearLines[j]) * 2] = 0x0;
 4004590:	d4200117 	ldw	r16,-32764(gp)
 4004594:	00c036c4 	movi	r3,219
 4004598:	e0bff217 	ldw	r2,-56(fp)
 400459c:	18a3c83a 	sub	r17,r3,r2
 40045a0:	e0bff317 	ldw	r2,-52(fp)
 40045a4:	1085883a 	add	r2,r2,r2
 40045a8:	1085883a 	add	r2,r2,r2
 40045ac:	e0ffef04 	addi	r3,fp,-68
 40045b0:	1885883a 	add	r2,r3,r2
 40045b4:	10800a04 	addi	r2,r2,40
 40045b8:	10800017 	ldw	r2,0(r2)
 40045bc:	01400a04 	movi	r5,40
 40045c0:	1009883a 	mov	r4,r2
 40045c4:	400dcd40 	call	400dcd4 <__mulsi3>
 40045c8:	8885883a 	add	r2,r17,r2
 40045cc:	1085883a 	add	r2,r2,r2
 40045d0:	8085883a 	add	r2,r16,r2
 40045d4:	10000005 	stb	zero,0(r2)
			vga_ctrl->VRAM[(215 + (4 - i) + 40 * clearLines[j]) * 2 + 1] = 0x0;
 40045d8:	d4200117 	ldw	r16,-32764(gp)
 40045dc:	00c036c4 	movi	r3,219
 40045e0:	e0bff217 	ldw	r2,-56(fp)
 40045e4:	18a3c83a 	sub	r17,r3,r2
 40045e8:	e0bff317 	ldw	r2,-52(fp)
 40045ec:	1085883a 	add	r2,r2,r2
 40045f0:	1085883a 	add	r2,r2,r2
 40045f4:	e13fef04 	addi	r4,fp,-68
 40045f8:	2085883a 	add	r2,r4,r2
 40045fc:	10800a04 	addi	r2,r2,40
 4004600:	10800017 	ldw	r2,0(r2)
 4004604:	01400a04 	movi	r5,40
 4004608:	1009883a 	mov	r4,r2
 400460c:	400dcd40 	call	400dcd4 <__mulsi3>
 4004610:	8885883a 	add	r2,r17,r2
 4004614:	1085883a 	add	r2,r2,r2
 4004618:	10800044 	addi	r2,r2,1
 400461c:	8085883a 	add	r2,r16,r2
 4004620:	10000005 	stb	zero,0(r2)
			vga_ctrl->VRAM[(215 + (5 + i) + 40 * clearLines[j]) * 2] = 0x0;
 4004624:	d4200117 	ldw	r16,-32764(gp)
 4004628:	e0bff217 	ldw	r2,-56(fp)
 400462c:	14403704 	addi	r17,r2,220
 4004630:	e0bff317 	ldw	r2,-52(fp)
 4004634:	1085883a 	add	r2,r2,r2
 4004638:	1085883a 	add	r2,r2,r2
 400463c:	e0ffef04 	addi	r3,fp,-68
 4004640:	1885883a 	add	r2,r3,r2
 4004644:	10800a04 	addi	r2,r2,40
 4004648:	10800017 	ldw	r2,0(r2)
 400464c:	01400a04 	movi	r5,40
 4004650:	1009883a 	mov	r4,r2
 4004654:	400dcd40 	call	400dcd4 <__mulsi3>
 4004658:	8885883a 	add	r2,r17,r2
 400465c:	1085883a 	add	r2,r2,r2
 4004660:	8085883a 	add	r2,r16,r2
 4004664:	10000005 	stb	zero,0(r2)
			vga_ctrl->VRAM[(215 + (5 + i) + 40 * clearLines[j]) * 2 + 1] = 0x0;
 4004668:	d4200117 	ldw	r16,-32764(gp)
 400466c:	e0bff217 	ldw	r2,-56(fp)
 4004670:	14403704 	addi	r17,r2,220
 4004674:	e0bff317 	ldw	r2,-52(fp)
 4004678:	1085883a 	add	r2,r2,r2
 400467c:	1085883a 	add	r2,r2,r2
 4004680:	e13fef04 	addi	r4,fp,-68
 4004684:	2085883a 	add	r2,r4,r2
 4004688:	10800a04 	addi	r2,r2,40
 400468c:	10800017 	ldw	r2,0(r2)
 4004690:	01400a04 	movi	r5,40
 4004694:	1009883a 	mov	r4,r2
 4004698:	400dcd40 	call	400dcd4 <__mulsi3>
 400469c:	8885883a 	add	r2,r17,r2
 40046a0:	1085883a 	add	r2,r2,r2
 40046a4:	10800044 	addi	r2,r2,1
 40046a8:	8085883a 	add	r2,r16,r2
 40046ac:	10000005 	stb	zero,0(r2)
			if(clears == 4){ //flashing animation for 4 clears
 40046b0:	e0bfef17 	ldw	r2,-68(fp)
 40046b4:	10800118 	cmpnei	r2,r2,4
 40046b8:	10003f1e 	bne	r2,zero,40047b8 <lineClear+0x340>
				if(i % 2 == 1){
 40046bc:	e0fff217 	ldw	r3,-56(fp)
 40046c0:	00a00034 	movhi	r2,32768
 40046c4:	10800044 	addi	r2,r2,1
 40046c8:	1884703a 	and	r2,r3,r2
 40046cc:	1000040e 	bge	r2,zero,40046e0 <lineClear+0x268>
 40046d0:	10bfffc4 	addi	r2,r2,-1
 40046d4:	00ffff84 	movi	r3,-2
 40046d8:	10c4b03a 	or	r2,r2,r3
 40046dc:	10800044 	addi	r2,r2,1
 40046e0:	10800058 	cmpnei	r2,r2,1
 40046e4:	10001b1e 	bne	r2,zero,4004754 <lineClear+0x2dc>
					for(int k = 0; k < 10; k++){
 40046e8:	e03ff415 	stw	zero,-48(fp)
 40046ec:	00001506 	br	4004744 <lineClear+0x2cc>
						vga_ctrl->VRAM[(215 + k + 40 * clearLines[j]) * 2] = 15 << 4 | 15;
 40046f0:	d4200117 	ldw	r16,-32764(gp)
 40046f4:	e0bff417 	ldw	r2,-48(fp)
 40046f8:	144035c4 	addi	r17,r2,215
 40046fc:	e0bff317 	ldw	r2,-52(fp)
 4004700:	1085883a 	add	r2,r2,r2
 4004704:	1085883a 	add	r2,r2,r2
 4004708:	e0ffef04 	addi	r3,fp,-68
 400470c:	1885883a 	add	r2,r3,r2
 4004710:	10800a04 	addi	r2,r2,40
 4004714:	10800017 	ldw	r2,0(r2)
 4004718:	01400a04 	movi	r5,40
 400471c:	1009883a 	mov	r4,r2
 4004720:	400dcd40 	call	400dcd4 <__mulsi3>
 4004724:	8885883a 	add	r2,r17,r2
 4004728:	1085883a 	add	r2,r2,r2
 400472c:	8085883a 	add	r2,r16,r2
 4004730:	00ffffc4 	movi	r3,-1
 4004734:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(215 + (4 - i) + 40 * clearLines[j]) * 2 + 1] = 0x0;
			vga_ctrl->VRAM[(215 + (5 + i) + 40 * clearLines[j]) * 2] = 0x0;
			vga_ctrl->VRAM[(215 + (5 + i) + 40 * clearLines[j]) * 2 + 1] = 0x0;
			if(clears == 4){ //flashing animation for 4 clears
				if(i % 2 == 1){
					for(int k = 0; k < 10; k++){
 4004738:	e0bff417 	ldw	r2,-48(fp)
 400473c:	10800044 	addi	r2,r2,1
 4004740:	e0bff415 	stw	r2,-48(fp)
 4004744:	e0bff417 	ldw	r2,-48(fp)
 4004748:	10800290 	cmplti	r2,r2,10
 400474c:	103fe81e 	bne	r2,zero,40046f0 <__alt_mem_onchip_memory2_0+0xfbfff530>
 4004750:	00001906 	br	40047b8 <lineClear+0x340>
						vga_ctrl->VRAM[(215 + k + 40 * clearLines[j]) * 2] = 15 << 4 | 15;
					}
				}
				else{
					for(int k = 0; k < 10; k++){
 4004754:	e03ff515 	stw	zero,-44(fp)
 4004758:	00001406 	br	40047ac <lineClear+0x334>
						vga_ctrl->VRAM[(215 + k + 40 * clearLines[j]) * 2] = 0 << 4 | 0;
 400475c:	d4200117 	ldw	r16,-32764(gp)
 4004760:	e0bff517 	ldw	r2,-44(fp)
 4004764:	144035c4 	addi	r17,r2,215
 4004768:	e0bff317 	ldw	r2,-52(fp)
 400476c:	1085883a 	add	r2,r2,r2
 4004770:	1085883a 	add	r2,r2,r2
 4004774:	e13fef04 	addi	r4,fp,-68
 4004778:	2085883a 	add	r2,r4,r2
 400477c:	10800a04 	addi	r2,r2,40
 4004780:	10800017 	ldw	r2,0(r2)
 4004784:	01400a04 	movi	r5,40
 4004788:	1009883a 	mov	r4,r2
 400478c:	400dcd40 	call	400dcd4 <__mulsi3>
 4004790:	8885883a 	add	r2,r17,r2
 4004794:	1085883a 	add	r2,r2,r2
 4004798:	8085883a 	add	r2,r16,r2
 400479c:	10000005 	stb	zero,0(r2)
					for(int k = 0; k < 10; k++){
						vga_ctrl->VRAM[(215 + k + 40 * clearLines[j]) * 2] = 15 << 4 | 15;
					}
				}
				else{
					for(int k = 0; k < 10; k++){
 40047a0:	e0bff517 	ldw	r2,-44(fp)
 40047a4:	10800044 	addi	r2,r2,1
 40047a8:	e0bff515 	stw	r2,-44(fp)
 40047ac:	e0bff517 	ldw	r2,-44(fp)
 40047b0:	10800290 	cmplti	r2,r2,10
 40047b4:	103fe91e 	bne	r2,zero,400475c <__alt_mem_onchip_memory2_0+0xfbfff59c>
			}
		}
	}
	if(clears == 0) {return false;}
	for(int i = 0; i < 5; i++){ //line clearing animation
		for(int j = 0; j < clears; j++){
 40047b8:	e0bff317 	ldw	r2,-52(fp)
 40047bc:	10800044 	addi	r2,r2,1
 40047c0:	e0bff315 	stw	r2,-52(fp)
 40047c4:	e0fff317 	ldw	r3,-52(fp)
 40047c8:	e0bfef17 	ldw	r2,-68(fp)
 40047cc:	18bf7016 	blt	r3,r2,4004590 <__alt_mem_onchip_memory2_0+0xfbfff3d0>
						vga_ctrl->VRAM[(215 + k + 40 * clearLines[j]) * 2] = 0 << 4 | 0;
					}
				}
			}
		}
		usleep(10000);
 40047d0:	0109c404 	movi	r4,10000
 40047d4:	401b98c0 	call	401b98c <usleep>
				clears++;
			}
		}
	}
	if(clears == 0) {return false;}
	for(int i = 0; i < 5; i++){ //line clearing animation
 40047d8:	e0bff217 	ldw	r2,-56(fp)
 40047dc:	10800044 	addi	r2,r2,1
 40047e0:	e0bff215 	stw	r2,-56(fp)
 40047e4:	e0bff217 	ldw	r2,-56(fp)
 40047e8:	10800150 	cmplti	r2,r2,5
 40047ec:	103f661e 	bne	r2,zero,4004588 <__alt_mem_onchip_memory2_0+0xfbfff3c8>
				}
			}
		}
		usleep(10000);
	}
	for(int i = 0; i < clears; i++){ //for all marked lines, move all lines above down by 1
 40047f0:	e03ff615 	stw	zero,-40(fp)
 40047f4:	00003406 	br	40048c8 <lineClear+0x450>
		for(int j = clearLines[i]; j > 0; j--){
 40047f8:	e0bff617 	ldw	r2,-40(fp)
 40047fc:	1085883a 	add	r2,r2,r2
 4004800:	1085883a 	add	r2,r2,r2
 4004804:	e0ffef04 	addi	r3,fp,-68
 4004808:	1885883a 	add	r2,r3,r2
 400480c:	10800a04 	addi	r2,r2,40
 4004810:	10800017 	ldw	r2,0(r2)
 4004814:	e0bff715 	stw	r2,-36(fp)
 4004818:	00002606 	br	40048b4 <lineClear+0x43c>
			for(int k = 0; k < 10; k++){
 400481c:	e03ff815 	stw	zero,-32(fp)
 4004820:	00001e06 	br	400489c <lineClear+0x424>
				gameBoard[j][k] = gameBoard[j-1][k];
 4004824:	e0bff717 	ldw	r2,-36(fp)
 4004828:	10bfffc4 	addi	r2,r2,-1
 400482c:	040100b4 	movhi	r16,1026
 4004830:	84080004 	addi	r16,r16,8192
 4004834:	01400284 	movi	r5,10
 4004838:	1009883a 	mov	r4,r2
 400483c:	400dcd40 	call	400dcd4 <__mulsi3>
 4004840:	1007883a 	mov	r3,r2
 4004844:	e0bff817 	ldw	r2,-32(fp)
 4004848:	1885883a 	add	r2,r3,r2
 400484c:	1085883a 	add	r2,r2,r2
 4004850:	1085883a 	add	r2,r2,r2
 4004854:	8085883a 	add	r2,r16,r2
 4004858:	14400017 	ldw	r17,0(r2)
 400485c:	040100b4 	movhi	r16,1026
 4004860:	84080004 	addi	r16,r16,8192
 4004864:	e0bff717 	ldw	r2,-36(fp)
 4004868:	01400284 	movi	r5,10
 400486c:	1009883a 	mov	r4,r2
 4004870:	400dcd40 	call	400dcd4 <__mulsi3>
 4004874:	1007883a 	mov	r3,r2
 4004878:	e0bff817 	ldw	r2,-32(fp)
 400487c:	1885883a 	add	r2,r3,r2
 4004880:	1085883a 	add	r2,r2,r2
 4004884:	1085883a 	add	r2,r2,r2
 4004888:	8085883a 	add	r2,r16,r2
 400488c:	14400015 	stw	r17,0(r2)
		}
		usleep(10000);
	}
	for(int i = 0; i < clears; i++){ //for all marked lines, move all lines above down by 1
		for(int j = clearLines[i]; j > 0; j--){
			for(int k = 0; k < 10; k++){
 4004890:	e0bff817 	ldw	r2,-32(fp)
 4004894:	10800044 	addi	r2,r2,1
 4004898:	e0bff815 	stw	r2,-32(fp)
 400489c:	e0bff817 	ldw	r2,-32(fp)
 40048a0:	10800290 	cmplti	r2,r2,10
 40048a4:	103fdf1e 	bne	r2,zero,4004824 <__alt_mem_onchip_memory2_0+0xfbfff664>
			}
		}
		usleep(10000);
	}
	for(int i = 0; i < clears; i++){ //for all marked lines, move all lines above down by 1
		for(int j = clearLines[i]; j > 0; j--){
 40048a8:	e0bff717 	ldw	r2,-36(fp)
 40048ac:	10bfffc4 	addi	r2,r2,-1
 40048b0:	e0bff715 	stw	r2,-36(fp)
 40048b4:	e0bff717 	ldw	r2,-36(fp)
 40048b8:	00bfd816 	blt	zero,r2,400481c <__alt_mem_onchip_memory2_0+0xfbfff65c>
				}
			}
		}
		usleep(10000);
	}
	for(int i = 0; i < clears; i++){ //for all marked lines, move all lines above down by 1
 40048bc:	e0bff617 	ldw	r2,-40(fp)
 40048c0:	10800044 	addi	r2,r2,1
 40048c4:	e0bff615 	stw	r2,-40(fp)
 40048c8:	e0fff617 	ldw	r3,-40(fp)
 40048cc:	e0bfef17 	ldw	r2,-68(fp)
 40048d0:	18bfc916 	blt	r3,r2,40047f8 <__alt_mem_onchip_memory2_0+0xfbfff638>
			for(int k = 0; k < 10; k++){
				gameBoard[j][k] = gameBoard[j-1][k];
			}
		}
	}
	return clears;
 40048d4:	e0bfef17 	ldw	r2,-68(fp)
}
 40048d8:	e6fffe04 	addi	sp,fp,-8
 40048dc:	dfc00317 	ldw	ra,12(sp)
 40048e0:	df000217 	ldw	fp,8(sp)
 40048e4:	dc400117 	ldw	r17,4(sp)
 40048e8:	dc000017 	ldw	r16,0(sp)
 40048ec:	dec00404 	addi	sp,sp,16
 40048f0:	f800283a 	ret

040048f4 <gameOver>:

bool gameOver(){
 40048f4:	defffe04 	addi	sp,sp,-8
 40048f8:	df000115 	stw	fp,4(sp)
 40048fc:	df000104 	addi	fp,sp,4
	for(int i = 0; i < 10; i++){
 4004900:	e03fff15 	stw	zero,-4(fp)
 4004904:	00000d06 	br	400493c <gameOver+0x48>
		if(gameBoard[0][i] != 0){
 4004908:	008100b4 	movhi	r2,1026
 400490c:	10880004 	addi	r2,r2,8192
 4004910:	e0ffff17 	ldw	r3,-4(fp)
 4004914:	18c7883a 	add	r3,r3,r3
 4004918:	18c7883a 	add	r3,r3,r3
 400491c:	10c5883a 	add	r2,r2,r3
 4004920:	10800017 	ldw	r2,0(r2)
 4004924:	10000226 	beq	r2,zero,4004930 <gameOver+0x3c>
			return true;
 4004928:	00800044 	movi	r2,1
 400492c:	00000706 	br	400494c <gameOver+0x58>
	}
	return clears;
}

bool gameOver(){
	for(int i = 0; i < 10; i++){
 4004930:	e0bfff17 	ldw	r2,-4(fp)
 4004934:	10800044 	addi	r2,r2,1
 4004938:	e0bfff15 	stw	r2,-4(fp)
 400493c:	e0bfff17 	ldw	r2,-4(fp)
 4004940:	10800290 	cmplti	r2,r2,10
 4004944:	103ff01e 	bne	r2,zero,4004908 <__alt_mem_onchip_memory2_0+0xfbfff748>
		if(gameBoard[0][i] != 0){
			return true;
		}
	}
	return false;
 4004948:	0005883a 	mov	r2,zero
}
 400494c:	e037883a 	mov	sp,fp
 4004950:	df000017 	ldw	fp,0(sp)
 4004954:	dec00104 	addi	sp,sp,4
 4004958:	f800283a 	ret

0400495c <rotateLeft>:

int rotateLeft(int blockState, int X, int Y){
 400495c:	defff804 	addi	sp,sp,-32
 4004960:	dfc00715 	stw	ra,28(sp)
 4004964:	df000615 	stw	fp,24(sp)
 4004968:	dc400515 	stw	r17,20(sp)
 400496c:	dc000415 	stw	r16,16(sp)
 4004970:	df000604 	addi	fp,sp,24
 4004974:	e13ffb15 	stw	r4,-20(fp)
 4004978:	e17ffc15 	stw	r5,-16(fp)
 400497c:	e1bffd15 	stw	r6,-12(fp)
	int newState = blockState;
 4004980:	e0bffb17 	ldw	r2,-20(fp)
 4004984:	e0bffa15 	stw	r2,-24(fp)
	switch(blockState){
 4004988:	e0bffb17 	ldw	r2,-20(fp)
 400498c:	10800528 	cmpgeui	r2,r2,20
 4004990:	1003a81e 	bne	r2,zero,4005834 <rotateLeft+0xed8>
 4004994:	e0bffb17 	ldw	r2,-20(fp)
 4004998:	100690ba 	slli	r3,r2,2
 400499c:	00810034 	movhi	r2,1024
 40049a0:	10926c04 	addi	r2,r2,18864
 40049a4:	1885883a 	add	r2,r3,r2
 40049a8:	10800017 	ldw	r2,0(r2)
 40049ac:	1000683a 	jmp	r2
 40049b0:	04005834 	movhi	r16,352
 40049b4:	04004a00 	call	4004a0 <__reset-0x3bffb60>
 40049b8:	04004af0 	cmpltui	r16,zero,299
 40049bc:	04004be4 	muli	r16,zero,303
 40049c0:	04004bf0 	cmpltui	r16,zero,303
 40049c4:	04004cdc 	xori	r16,zero,307
 40049c8:	04004dd0 	cmplti	r16,zero,311
 40049cc:	04004ec0 	call	4004ec <__reset-0x3bffb14>
 40049d0:	04004fb0 	cmpltui	r16,zero,318
 40049d4:	040050a0 	cmpeqi	r16,zero,322
 40049d8:	04005194 	movui	r16,326
 40049dc:	04005280 	call	400528 <__reset-0x3bffad8>
 40049e0:	04005370 	cmpltui	r16,zero,333
 40049e4:	04005424 	muli	r16,zero,336
 40049e8:	040054dc 	xori	r16,zero,339
 40049ec:	04005554 	movui	r16,341
 40049f0:	040055d0 	cmplti	r16,zero,343
 40049f4:	0400564c 	andi	r16,zero,345
 40049f8:	040056c8 	cmpgei	r16,zero,347
 40049fc:	0400577c 	xorhi	r16,zero,349
	case 1:
		if(X >= 0  && X < 7){
 4004a00:	e0bffc17 	ldw	r2,-16(fp)
 4004a04:	10038e16 	blt	r2,zero,4005840 <rotateLeft+0xee4>
 4004a08:	e0bffc17 	ldw	r2,-16(fp)
 4004a0c:	108001c8 	cmpgei	r2,r2,7
 4004a10:	10038b1e 	bne	r2,zero,4005840 <rotateLeft+0xee4>
			if(gameBoard[Y][X + 2] == 0 && gameBoard[Y  + 1][X + 2] == 0 && gameBoard[Y + 3][X + 2] == 0){
 4004a14:	e0bffc17 	ldw	r2,-16(fp)
 4004a18:	14400084 	addi	r17,r2,2
 4004a1c:	040100b4 	movhi	r16,1026
 4004a20:	84080004 	addi	r16,r16,8192
 4004a24:	e0bffd17 	ldw	r2,-12(fp)
 4004a28:	01400284 	movi	r5,10
 4004a2c:	1009883a 	mov	r4,r2
 4004a30:	400dcd40 	call	400dcd4 <__mulsi3>
 4004a34:	1445883a 	add	r2,r2,r17
 4004a38:	1085883a 	add	r2,r2,r2
 4004a3c:	1085883a 	add	r2,r2,r2
 4004a40:	8085883a 	add	r2,r16,r2
 4004a44:	10800017 	ldw	r2,0(r2)
 4004a48:	10037d1e 	bne	r2,zero,4005840 <rotateLeft+0xee4>
 4004a4c:	e0bffd17 	ldw	r2,-12(fp)
 4004a50:	10c00044 	addi	r3,r2,1
 4004a54:	e0bffc17 	ldw	r2,-16(fp)
 4004a58:	14400084 	addi	r17,r2,2
 4004a5c:	040100b4 	movhi	r16,1026
 4004a60:	84080004 	addi	r16,r16,8192
 4004a64:	01400284 	movi	r5,10
 4004a68:	1809883a 	mov	r4,r3
 4004a6c:	400dcd40 	call	400dcd4 <__mulsi3>
 4004a70:	1445883a 	add	r2,r2,r17
 4004a74:	1085883a 	add	r2,r2,r2
 4004a78:	1085883a 	add	r2,r2,r2
 4004a7c:	8085883a 	add	r2,r16,r2
 4004a80:	10800017 	ldw	r2,0(r2)
 4004a84:	10036e1e 	bne	r2,zero,4005840 <rotateLeft+0xee4>
 4004a88:	e0bffd17 	ldw	r2,-12(fp)
 4004a8c:	10c000c4 	addi	r3,r2,3
 4004a90:	e0bffc17 	ldw	r2,-16(fp)
 4004a94:	14400084 	addi	r17,r2,2
 4004a98:	040100b4 	movhi	r16,1026
 4004a9c:	84080004 	addi	r16,r16,8192
 4004aa0:	01400284 	movi	r5,10
 4004aa4:	1809883a 	mov	r4,r3
 4004aa8:	400dcd40 	call	400dcd4 <__mulsi3>
 4004aac:	1445883a 	add	r2,r2,r17
 4004ab0:	1085883a 	add	r2,r2,r2
 4004ab4:	1085883a 	add	r2,r2,r2
 4004ab8:	8085883a 	add	r2,r16,r2
 4004abc:	10800017 	ldw	r2,0(r2)
 4004ac0:	10035f1e 	bne	r2,zero,4005840 <rotateLeft+0xee4>
				newState = 2;
 4004ac4:	00800084 	movi	r2,2
 4004ac8:	e0bffa15 	stw	r2,-24(fp)
				draw1(X, Y, 0);
 4004acc:	000d883a 	mov	r6,zero
 4004ad0:	e17ffd17 	ldw	r5,-12(fp)
 4004ad4:	e13ffc17 	ldw	r4,-16(fp)
 4004ad8:	400687c0 	call	400687c <draw1>
				draw2(X, Y, -1);
 4004adc:	01bfffc4 	movi	r6,-1
 4004ae0:	e17ffd17 	ldw	r5,-12(fp)
 4004ae4:	e13ffc17 	ldw	r4,-16(fp)
 4004ae8:	400691c0 	call	400691c <draw2>
			}
		}
		break;
 4004aec:	00035406 	br	4005840 <rotateLeft+0xee4>
	case 2:
		if(X >= 0 && X < 7){
 4004af0:	e0bffc17 	ldw	r2,-16(fp)
 4004af4:	10035416 	blt	r2,zero,4005848 <rotateLeft+0xeec>
 4004af8:	e0bffc17 	ldw	r2,-16(fp)
 4004afc:	108001c8 	cmpgei	r2,r2,7
 4004b00:	1003511e 	bne	r2,zero,4005848 <rotateLeft+0xeec>
			if(gameBoard[Y + 2][X] == 0 && gameBoard[Y + 2][X + 1] == 0 && gameBoard[Y + 2][X + 3] == 0){
 4004b04:	e0bffd17 	ldw	r2,-12(fp)
 4004b08:	10800084 	addi	r2,r2,2
 4004b0c:	040100b4 	movhi	r16,1026
 4004b10:	84080004 	addi	r16,r16,8192
 4004b14:	01400284 	movi	r5,10
 4004b18:	1009883a 	mov	r4,r2
 4004b1c:	400dcd40 	call	400dcd4 <__mulsi3>
 4004b20:	1007883a 	mov	r3,r2
 4004b24:	e0bffc17 	ldw	r2,-16(fp)
 4004b28:	1885883a 	add	r2,r3,r2
 4004b2c:	1085883a 	add	r2,r2,r2
 4004b30:	1085883a 	add	r2,r2,r2
 4004b34:	8085883a 	add	r2,r16,r2
 4004b38:	10800017 	ldw	r2,0(r2)
 4004b3c:	1003421e 	bne	r2,zero,4005848 <rotateLeft+0xeec>
 4004b40:	e0bffd17 	ldw	r2,-12(fp)
 4004b44:	10c00084 	addi	r3,r2,2
 4004b48:	e0bffc17 	ldw	r2,-16(fp)
 4004b4c:	14400044 	addi	r17,r2,1
 4004b50:	040100b4 	movhi	r16,1026
 4004b54:	84080004 	addi	r16,r16,8192
 4004b58:	01400284 	movi	r5,10
 4004b5c:	1809883a 	mov	r4,r3
 4004b60:	400dcd40 	call	400dcd4 <__mulsi3>
 4004b64:	1445883a 	add	r2,r2,r17
 4004b68:	1085883a 	add	r2,r2,r2
 4004b6c:	1085883a 	add	r2,r2,r2
 4004b70:	8085883a 	add	r2,r16,r2
 4004b74:	10800017 	ldw	r2,0(r2)
 4004b78:	1003331e 	bne	r2,zero,4005848 <rotateLeft+0xeec>
 4004b7c:	e0bffd17 	ldw	r2,-12(fp)
 4004b80:	10c00084 	addi	r3,r2,2
 4004b84:	e0bffc17 	ldw	r2,-16(fp)
 4004b88:	144000c4 	addi	r17,r2,3
 4004b8c:	040100b4 	movhi	r16,1026
 4004b90:	84080004 	addi	r16,r16,8192
 4004b94:	01400284 	movi	r5,10
 4004b98:	1809883a 	mov	r4,r3
 4004b9c:	400dcd40 	call	400dcd4 <__mulsi3>
 4004ba0:	1445883a 	add	r2,r2,r17
 4004ba4:	1085883a 	add	r2,r2,r2
 4004ba8:	1085883a 	add	r2,r2,r2
 4004bac:	8085883a 	add	r2,r16,r2
 4004bb0:	10800017 	ldw	r2,0(r2)
 4004bb4:	1003241e 	bne	r2,zero,4005848 <rotateLeft+0xeec>
				newState = 1;
 4004bb8:	00800044 	movi	r2,1
 4004bbc:	e0bffa15 	stw	r2,-24(fp)
				draw2(X, Y, 0);
 4004bc0:	000d883a 	mov	r6,zero
 4004bc4:	e17ffd17 	ldw	r5,-12(fp)
 4004bc8:	e13ffc17 	ldw	r4,-16(fp)
 4004bcc:	400691c0 	call	400691c <draw2>
				draw1(X, Y, -1);
 4004bd0:	01bfffc4 	movi	r6,-1
 4004bd4:	e17ffd17 	ldw	r5,-12(fp)
 4004bd8:	e13ffc17 	ldw	r4,-16(fp)
 4004bdc:	400687c0 	call	400687c <draw1>
			}
		}
		break;
 4004be0:	00031906 	br	4005848 <rotateLeft+0xeec>
	case 3:
		newState = blockState;
 4004be4:	e0bffb17 	ldw	r2,-20(fp)
 4004be8:	e0bffa15 	stw	r2,-24(fp)
		break;
 4004bec:	00033706 	br	40058cc <rotateLeft+0xf70>
	case 4:
		if(X >= 0 && X < 8){
 4004bf0:	e0bffc17 	ldw	r2,-16(fp)
 4004bf4:	10031616 	blt	r2,zero,4005850 <rotateLeft+0xef4>
 4004bf8:	e0bffc17 	ldw	r2,-16(fp)
 4004bfc:	10800208 	cmpgei	r2,r2,8
 4004c00:	1003131e 	bne	r2,zero,4005850 <rotateLeft+0xef4>
			if(gameBoard[Y][X + 1] == 0 && gameBoard[Y][X + 2] == 0 && gameBoard[Y + 2][X + 1] == 0){
 4004c04:	e0bffc17 	ldw	r2,-16(fp)
 4004c08:	14400044 	addi	r17,r2,1
 4004c0c:	040100b4 	movhi	r16,1026
 4004c10:	84080004 	addi	r16,r16,8192
 4004c14:	e0bffd17 	ldw	r2,-12(fp)
 4004c18:	01400284 	movi	r5,10
 4004c1c:	1009883a 	mov	r4,r2
 4004c20:	400dcd40 	call	400dcd4 <__mulsi3>
 4004c24:	1445883a 	add	r2,r2,r17
 4004c28:	1085883a 	add	r2,r2,r2
 4004c2c:	1085883a 	add	r2,r2,r2
 4004c30:	8085883a 	add	r2,r16,r2
 4004c34:	10800017 	ldw	r2,0(r2)
 4004c38:	1003051e 	bne	r2,zero,4005850 <rotateLeft+0xef4>
 4004c3c:	e0bffc17 	ldw	r2,-16(fp)
 4004c40:	14400084 	addi	r17,r2,2
 4004c44:	040100b4 	movhi	r16,1026
 4004c48:	84080004 	addi	r16,r16,8192
 4004c4c:	e0bffd17 	ldw	r2,-12(fp)
 4004c50:	01400284 	movi	r5,10
 4004c54:	1009883a 	mov	r4,r2
 4004c58:	400dcd40 	call	400dcd4 <__mulsi3>
 4004c5c:	1445883a 	add	r2,r2,r17
 4004c60:	1085883a 	add	r2,r2,r2
 4004c64:	1085883a 	add	r2,r2,r2
 4004c68:	8085883a 	add	r2,r16,r2
 4004c6c:	10800017 	ldw	r2,0(r2)
 4004c70:	1002f71e 	bne	r2,zero,4005850 <rotateLeft+0xef4>
 4004c74:	e0bffd17 	ldw	r2,-12(fp)
 4004c78:	10c00084 	addi	r3,r2,2
 4004c7c:	e0bffc17 	ldw	r2,-16(fp)
 4004c80:	14400044 	addi	r17,r2,1
 4004c84:	040100b4 	movhi	r16,1026
 4004c88:	84080004 	addi	r16,r16,8192
 4004c8c:	01400284 	movi	r5,10
 4004c90:	1809883a 	mov	r4,r3
 4004c94:	400dcd40 	call	400dcd4 <__mulsi3>
 4004c98:	1445883a 	add	r2,r2,r17
 4004c9c:	1085883a 	add	r2,r2,r2
 4004ca0:	1085883a 	add	r2,r2,r2
 4004ca4:	8085883a 	add	r2,r16,r2
 4004ca8:	10800017 	ldw	r2,0(r2)
 4004cac:	1002e81e 	bne	r2,zero,4005850 <rotateLeft+0xef4>
				newState = 7;
 4004cb0:	008001c4 	movi	r2,7
 4004cb4:	e0bffa15 	stw	r2,-24(fp)
				draw4(X, Y, 0);
 4004cb8:	000d883a 	mov	r6,zero
 4004cbc:	e17ffd17 	ldw	r5,-12(fp)
 4004cc0:	e13ffc17 	ldw	r4,-16(fp)
 4004cc4:	4006aec0 	call	4006aec <draw4>
				draw7(X, Y, -2);
 4004cc8:	01bfff84 	movi	r6,-2
 4004ccc:	e17ffd17 	ldw	r5,-12(fp)
 4004cd0:	e13ffc17 	ldw	r4,-16(fp)
 4004cd4:	4006d800 	call	4006d80 <draw7>
			}
		}
		break;
 4004cd8:	0002dd06 	br	4005850 <rotateLeft+0xef4>
	case 5:
		if(X >= 0 && X < 8){
 4004cdc:	e0bffc17 	ldw	r2,-16(fp)
 4004ce0:	1002dd16 	blt	r2,zero,4005858 <rotateLeft+0xefc>
 4004ce4:	e0bffc17 	ldw	r2,-16(fp)
 4004ce8:	10800208 	cmpgei	r2,r2,8
 4004cec:	1002da1e 	bne	r2,zero,4005858 <rotateLeft+0xefc>
			if(gameBoard[Y + 1][X] == 0 && gameBoard[Y + 1][X + 2] == 0 && gameBoard[Y + 2][X + 2] == 0){
 4004cf0:	e0bffd17 	ldw	r2,-12(fp)
 4004cf4:	10800044 	addi	r2,r2,1
 4004cf8:	040100b4 	movhi	r16,1026
 4004cfc:	84080004 	addi	r16,r16,8192
 4004d00:	01400284 	movi	r5,10
 4004d04:	1009883a 	mov	r4,r2
 4004d08:	400dcd40 	call	400dcd4 <__mulsi3>
 4004d0c:	1007883a 	mov	r3,r2
 4004d10:	e0bffc17 	ldw	r2,-16(fp)
 4004d14:	1885883a 	add	r2,r3,r2
 4004d18:	1085883a 	add	r2,r2,r2
 4004d1c:	1085883a 	add	r2,r2,r2
 4004d20:	8085883a 	add	r2,r16,r2
 4004d24:	10800017 	ldw	r2,0(r2)
 4004d28:	1002cb1e 	bne	r2,zero,4005858 <rotateLeft+0xefc>
 4004d2c:	e0bffd17 	ldw	r2,-12(fp)
 4004d30:	10c00044 	addi	r3,r2,1
 4004d34:	e0bffc17 	ldw	r2,-16(fp)
 4004d38:	14400084 	addi	r17,r2,2
 4004d3c:	040100b4 	movhi	r16,1026
 4004d40:	84080004 	addi	r16,r16,8192
 4004d44:	01400284 	movi	r5,10
 4004d48:	1809883a 	mov	r4,r3
 4004d4c:	400dcd40 	call	400dcd4 <__mulsi3>
 4004d50:	1445883a 	add	r2,r2,r17
 4004d54:	1085883a 	add	r2,r2,r2
 4004d58:	1085883a 	add	r2,r2,r2
 4004d5c:	8085883a 	add	r2,r16,r2
 4004d60:	10800017 	ldw	r2,0(r2)
 4004d64:	1002bc1e 	bne	r2,zero,4005858 <rotateLeft+0xefc>
 4004d68:	e0bffd17 	ldw	r2,-12(fp)
 4004d6c:	10c00084 	addi	r3,r2,2
 4004d70:	e0bffc17 	ldw	r2,-16(fp)
 4004d74:	14400084 	addi	r17,r2,2
 4004d78:	040100b4 	movhi	r16,1026
 4004d7c:	84080004 	addi	r16,r16,8192
 4004d80:	01400284 	movi	r5,10
 4004d84:	1809883a 	mov	r4,r3
 4004d88:	400dcd40 	call	400dcd4 <__mulsi3>
 4004d8c:	1445883a 	add	r2,r2,r17
 4004d90:	1085883a 	add	r2,r2,r2
 4004d94:	1085883a 	add	r2,r2,r2
 4004d98:	8085883a 	add	r2,r16,r2
 4004d9c:	10800017 	ldw	r2,0(r2)
 4004da0:	1002ad1e 	bne	r2,zero,4005858 <rotateLeft+0xefc>
				newState = 4;
 4004da4:	00800104 	movi	r2,4
 4004da8:	e0bffa15 	stw	r2,-24(fp)
				draw5(X, Y, 0);
 4004dac:	000d883a 	mov	r6,zero
 4004db0:	e17ffd17 	ldw	r5,-12(fp)
 4004db4:	e13ffc17 	ldw	r4,-16(fp)
 4004db8:	4006bc80 	call	4006bc8 <draw5>
				draw4(X, Y, -2);
 4004dbc:	01bfff84 	movi	r6,-2
 4004dc0:	e17ffd17 	ldw	r5,-12(fp)
 4004dc4:	e13ffc17 	ldw	r4,-16(fp)
 4004dc8:	4006aec0 	call	4006aec <draw4>
			}
		}
		break;
 4004dcc:	0002a206 	br	4005858 <rotateLeft+0xefc>
	case 6:
		if(X >= 0 && X < 8){
 4004dd0:	e0bffc17 	ldw	r2,-16(fp)
 4004dd4:	1002a216 	blt	r2,zero,4005860 <rotateLeft+0xf04>
 4004dd8:	e0bffc17 	ldw	r2,-16(fp)
 4004ddc:	10800208 	cmpgei	r2,r2,8
 4004de0:	10029f1e 	bne	r2,zero,4005860 <rotateLeft+0xf04>
			if(gameBoard[Y][X + 1] == 0 && gameBoard[Y + 2][X] == 0 && gameBoard[Y + 2][X + 1] == 0){
 4004de4:	e0bffc17 	ldw	r2,-16(fp)
 4004de8:	14400044 	addi	r17,r2,1
 4004dec:	040100b4 	movhi	r16,1026
 4004df0:	84080004 	addi	r16,r16,8192
 4004df4:	e0bffd17 	ldw	r2,-12(fp)
 4004df8:	01400284 	movi	r5,10
 4004dfc:	1009883a 	mov	r4,r2
 4004e00:	400dcd40 	call	400dcd4 <__mulsi3>
 4004e04:	1445883a 	add	r2,r2,r17
 4004e08:	1085883a 	add	r2,r2,r2
 4004e0c:	1085883a 	add	r2,r2,r2
 4004e10:	8085883a 	add	r2,r16,r2
 4004e14:	10800017 	ldw	r2,0(r2)
 4004e18:	1002911e 	bne	r2,zero,4005860 <rotateLeft+0xf04>
 4004e1c:	e0bffd17 	ldw	r2,-12(fp)
 4004e20:	10800084 	addi	r2,r2,2
 4004e24:	040100b4 	movhi	r16,1026
 4004e28:	84080004 	addi	r16,r16,8192
 4004e2c:	01400284 	movi	r5,10
 4004e30:	1009883a 	mov	r4,r2
 4004e34:	400dcd40 	call	400dcd4 <__mulsi3>
 4004e38:	1007883a 	mov	r3,r2
 4004e3c:	e0bffc17 	ldw	r2,-16(fp)
 4004e40:	1885883a 	add	r2,r3,r2
 4004e44:	1085883a 	add	r2,r2,r2
 4004e48:	1085883a 	add	r2,r2,r2
 4004e4c:	8085883a 	add	r2,r16,r2
 4004e50:	10800017 	ldw	r2,0(r2)
 4004e54:	1002821e 	bne	r2,zero,4005860 <rotateLeft+0xf04>
 4004e58:	e0bffd17 	ldw	r2,-12(fp)
 4004e5c:	10c00084 	addi	r3,r2,2
 4004e60:	e0bffc17 	ldw	r2,-16(fp)
 4004e64:	14400044 	addi	r17,r2,1
 4004e68:	040100b4 	movhi	r16,1026
 4004e6c:	84080004 	addi	r16,r16,8192
 4004e70:	01400284 	movi	r5,10
 4004e74:	1809883a 	mov	r4,r3
 4004e78:	400dcd40 	call	400dcd4 <__mulsi3>
 4004e7c:	1445883a 	add	r2,r2,r17
 4004e80:	1085883a 	add	r2,r2,r2
 4004e84:	1085883a 	add	r2,r2,r2
 4004e88:	8085883a 	add	r2,r16,r2
 4004e8c:	10800017 	ldw	r2,0(r2)
 4004e90:	1002731e 	bne	r2,zero,4005860 <rotateLeft+0xf04>
				newState = 5;
 4004e94:	00800144 	movi	r2,5
 4004e98:	e0bffa15 	stw	r2,-24(fp)
				draw6(X, Y, 0);
 4004e9c:	000d883a 	mov	r6,zero
 4004ea0:	e17ffd17 	ldw	r5,-12(fp)
 4004ea4:	e13ffc17 	ldw	r4,-16(fp)
 4004ea8:	4006ca80 	call	4006ca8 <draw6>
				draw5(X, Y, -2);
 4004eac:	01bfff84 	movi	r6,-2
 4004eb0:	e17ffd17 	ldw	r5,-12(fp)
 4004eb4:	e13ffc17 	ldw	r4,-16(fp)
 4004eb8:	4006bc80 	call	4006bc8 <draw5>
			}
		}
		break;
 4004ebc:	00026806 	br	4005860 <rotateLeft+0xf04>
	case 7:
		if(X >= 0 && X < 8){
 4004ec0:	e0bffc17 	ldw	r2,-16(fp)
 4004ec4:	10026816 	blt	r2,zero,4005868 <rotateLeft+0xf0c>
 4004ec8:	e0bffc17 	ldw	r2,-16(fp)
 4004ecc:	10800208 	cmpgei	r2,r2,8
 4004ed0:	1002651e 	bne	r2,zero,4005868 <rotateLeft+0xf0c>
			if(gameBoard[Y][X] == 0 && gameBoard[Y + 1][X] == 0 && gameBoard[Y + 1][X + 2] == 0){
 4004ed4:	040100b4 	movhi	r16,1026
 4004ed8:	84080004 	addi	r16,r16,8192
 4004edc:	e0bffd17 	ldw	r2,-12(fp)
 4004ee0:	01400284 	movi	r5,10
 4004ee4:	1009883a 	mov	r4,r2
 4004ee8:	400dcd40 	call	400dcd4 <__mulsi3>
 4004eec:	1007883a 	mov	r3,r2
 4004ef0:	e0bffc17 	ldw	r2,-16(fp)
 4004ef4:	1885883a 	add	r2,r3,r2
 4004ef8:	1085883a 	add	r2,r2,r2
 4004efc:	1085883a 	add	r2,r2,r2
 4004f00:	8085883a 	add	r2,r16,r2
 4004f04:	10800017 	ldw	r2,0(r2)
 4004f08:	1002571e 	bne	r2,zero,4005868 <rotateLeft+0xf0c>
 4004f0c:	e0bffd17 	ldw	r2,-12(fp)
 4004f10:	10800044 	addi	r2,r2,1
 4004f14:	040100b4 	movhi	r16,1026
 4004f18:	84080004 	addi	r16,r16,8192
 4004f1c:	01400284 	movi	r5,10
 4004f20:	1009883a 	mov	r4,r2
 4004f24:	400dcd40 	call	400dcd4 <__mulsi3>
 4004f28:	1007883a 	mov	r3,r2
 4004f2c:	e0bffc17 	ldw	r2,-16(fp)
 4004f30:	1885883a 	add	r2,r3,r2
 4004f34:	1085883a 	add	r2,r2,r2
 4004f38:	1085883a 	add	r2,r2,r2
 4004f3c:	8085883a 	add	r2,r16,r2
 4004f40:	10800017 	ldw	r2,0(r2)
 4004f44:	1002481e 	bne	r2,zero,4005868 <rotateLeft+0xf0c>
 4004f48:	e0bffd17 	ldw	r2,-12(fp)
 4004f4c:	10c00044 	addi	r3,r2,1
 4004f50:	e0bffc17 	ldw	r2,-16(fp)
 4004f54:	14400084 	addi	r17,r2,2
 4004f58:	040100b4 	movhi	r16,1026
 4004f5c:	84080004 	addi	r16,r16,8192
 4004f60:	01400284 	movi	r5,10
 4004f64:	1809883a 	mov	r4,r3
 4004f68:	400dcd40 	call	400dcd4 <__mulsi3>
 4004f6c:	1445883a 	add	r2,r2,r17
 4004f70:	1085883a 	add	r2,r2,r2
 4004f74:	1085883a 	add	r2,r2,r2
 4004f78:	8085883a 	add	r2,r16,r2
 4004f7c:	10800017 	ldw	r2,0(r2)
 4004f80:	1002391e 	bne	r2,zero,4005868 <rotateLeft+0xf0c>
				newState = 6;
 4004f84:	00800184 	movi	r2,6
 4004f88:	e0bffa15 	stw	r2,-24(fp)
				draw7(X, Y, 0);
 4004f8c:	000d883a 	mov	r6,zero
 4004f90:	e17ffd17 	ldw	r5,-12(fp)
 4004f94:	e13ffc17 	ldw	r4,-16(fp)
 4004f98:	4006d800 	call	4006d80 <draw7>
				draw6(X, Y, -2);
 4004f9c:	01bfff84 	movi	r6,-2
 4004fa0:	e17ffd17 	ldw	r5,-12(fp)
 4004fa4:	e13ffc17 	ldw	r4,-16(fp)
 4004fa8:	4006ca80 	call	4006ca8 <draw6>
			}
		}
		break;
 4004fac:	00022e06 	br	4005868 <rotateLeft+0xf0c>
	case 8:
		if(X >= 0 && X < 8){
 4004fb0:	e0bffc17 	ldw	r2,-16(fp)
 4004fb4:	10022e16 	blt	r2,zero,4005870 <rotateLeft+0xf14>
 4004fb8:	e0bffc17 	ldw	r2,-16(fp)
 4004fbc:	10800208 	cmpgei	r2,r2,8
 4004fc0:	10022b1e 	bne	r2,zero,4005870 <rotateLeft+0xf14>
			if(gameBoard[Y][X + 1] == 0 && gameBoard[Y + 2][X + 1] == 0 && gameBoard[Y + 2][X + 2] == 0){
 4004fc4:	e0bffc17 	ldw	r2,-16(fp)
 4004fc8:	14400044 	addi	r17,r2,1
 4004fcc:	040100b4 	movhi	r16,1026
 4004fd0:	84080004 	addi	r16,r16,8192
 4004fd4:	e0bffd17 	ldw	r2,-12(fp)
 4004fd8:	01400284 	movi	r5,10
 4004fdc:	1009883a 	mov	r4,r2
 4004fe0:	400dcd40 	call	400dcd4 <__mulsi3>
 4004fe4:	1445883a 	add	r2,r2,r17
 4004fe8:	1085883a 	add	r2,r2,r2
 4004fec:	1085883a 	add	r2,r2,r2
 4004ff0:	8085883a 	add	r2,r16,r2
 4004ff4:	10800017 	ldw	r2,0(r2)
 4004ff8:	10021d1e 	bne	r2,zero,4005870 <rotateLeft+0xf14>
 4004ffc:	e0bffd17 	ldw	r2,-12(fp)
 4005000:	10c00084 	addi	r3,r2,2
 4005004:	e0bffc17 	ldw	r2,-16(fp)
 4005008:	14400044 	addi	r17,r2,1
 400500c:	040100b4 	movhi	r16,1026
 4005010:	84080004 	addi	r16,r16,8192
 4005014:	01400284 	movi	r5,10
 4005018:	1809883a 	mov	r4,r3
 400501c:	400dcd40 	call	400dcd4 <__mulsi3>
 4005020:	1445883a 	add	r2,r2,r17
 4005024:	1085883a 	add	r2,r2,r2
 4005028:	1085883a 	add	r2,r2,r2
 400502c:	8085883a 	add	r2,r16,r2
 4005030:	10800017 	ldw	r2,0(r2)
 4005034:	10020e1e 	bne	r2,zero,4005870 <rotateLeft+0xf14>
 4005038:	e0bffd17 	ldw	r2,-12(fp)
 400503c:	10c00084 	addi	r3,r2,2
 4005040:	e0bffc17 	ldw	r2,-16(fp)
 4005044:	14400084 	addi	r17,r2,2
 4005048:	040100b4 	movhi	r16,1026
 400504c:	84080004 	addi	r16,r16,8192
 4005050:	01400284 	movi	r5,10
 4005054:	1809883a 	mov	r4,r3
 4005058:	400dcd40 	call	400dcd4 <__mulsi3>
 400505c:	1445883a 	add	r2,r2,r17
 4005060:	1085883a 	add	r2,r2,r2
 4005064:	1085883a 	add	r2,r2,r2
 4005068:	8085883a 	add	r2,r16,r2
 400506c:	10800017 	ldw	r2,0(r2)
 4005070:	1001ff1e 	bne	r2,zero,4005870 <rotateLeft+0xf14>
				newState = 11;
 4005074:	008002c4 	movi	r2,11
 4005078:	e0bffa15 	stw	r2,-24(fp)
				draw8(X, Y, 0);
 400507c:	000d883a 	mov	r6,zero
 4005080:	e17ffd17 	ldw	r5,-12(fp)
 4005084:	e13ffc17 	ldw	r4,-16(fp)
 4005088:	4006e5c0 	call	4006e5c <draw8>
				draw11(X, Y, -3);
 400508c:	01bfff44 	movi	r6,-3
 4005090:	e17ffd17 	ldw	r5,-12(fp)
 4005094:	e13ffc17 	ldw	r4,-16(fp)
 4005098:	40070ec0 	call	40070ec <draw11>
			}
		}
		break;
 400509c:	0001f406 	br	4005870 <rotateLeft+0xf14>
	case 9:
		if(X >= 0 && X < 8){
 40050a0:	e0bffc17 	ldw	r2,-16(fp)
 40050a4:	1001f416 	blt	r2,zero,4005878 <rotateLeft+0xf1c>
 40050a8:	e0bffc17 	ldw	r2,-16(fp)
 40050ac:	10800208 	cmpgei	r2,r2,8
 40050b0:	1001f11e 	bne	r2,zero,4005878 <rotateLeft+0xf1c>
			if(gameBoard[Y + 1][X] == 0 && gameBoard[Y + 1][X + 2] == 0 && gameBoard[Y + 2][X] == 0){
 40050b4:	e0bffd17 	ldw	r2,-12(fp)
 40050b8:	10800044 	addi	r2,r2,1
 40050bc:	040100b4 	movhi	r16,1026
 40050c0:	84080004 	addi	r16,r16,8192
 40050c4:	01400284 	movi	r5,10
 40050c8:	1009883a 	mov	r4,r2
 40050cc:	400dcd40 	call	400dcd4 <__mulsi3>
 40050d0:	1007883a 	mov	r3,r2
 40050d4:	e0bffc17 	ldw	r2,-16(fp)
 40050d8:	1885883a 	add	r2,r3,r2
 40050dc:	1085883a 	add	r2,r2,r2
 40050e0:	1085883a 	add	r2,r2,r2
 40050e4:	8085883a 	add	r2,r16,r2
 40050e8:	10800017 	ldw	r2,0(r2)
 40050ec:	1001e21e 	bne	r2,zero,4005878 <rotateLeft+0xf1c>
 40050f0:	e0bffd17 	ldw	r2,-12(fp)
 40050f4:	10c00044 	addi	r3,r2,1
 40050f8:	e0bffc17 	ldw	r2,-16(fp)
 40050fc:	14400084 	addi	r17,r2,2
 4005100:	040100b4 	movhi	r16,1026
 4005104:	84080004 	addi	r16,r16,8192
 4005108:	01400284 	movi	r5,10
 400510c:	1809883a 	mov	r4,r3
 4005110:	400dcd40 	call	400dcd4 <__mulsi3>
 4005114:	1445883a 	add	r2,r2,r17
 4005118:	1085883a 	add	r2,r2,r2
 400511c:	1085883a 	add	r2,r2,r2
 4005120:	8085883a 	add	r2,r16,r2
 4005124:	10800017 	ldw	r2,0(r2)
 4005128:	1001d31e 	bne	r2,zero,4005878 <rotateLeft+0xf1c>
 400512c:	e0bffd17 	ldw	r2,-12(fp)
 4005130:	10800084 	addi	r2,r2,2
 4005134:	040100b4 	movhi	r16,1026
 4005138:	84080004 	addi	r16,r16,8192
 400513c:	01400284 	movi	r5,10
 4005140:	1009883a 	mov	r4,r2
 4005144:	400dcd40 	call	400dcd4 <__mulsi3>
 4005148:	1007883a 	mov	r3,r2
 400514c:	e0bffc17 	ldw	r2,-16(fp)
 4005150:	1885883a 	add	r2,r3,r2
 4005154:	1085883a 	add	r2,r2,r2
 4005158:	1085883a 	add	r2,r2,r2
 400515c:	8085883a 	add	r2,r16,r2
 4005160:	10800017 	ldw	r2,0(r2)
 4005164:	1001c41e 	bne	r2,zero,4005878 <rotateLeft+0xf1c>
				newState = 8;
 4005168:	00800204 	movi	r2,8
 400516c:	e0bffa15 	stw	r2,-24(fp)
				draw9(X, Y, 0);
 4005170:	000d883a 	mov	r6,zero
 4005174:	e17ffd17 	ldw	r5,-12(fp)
 4005178:	e13ffc17 	ldw	r4,-16(fp)
 400517c:	4006f380 	call	4006f38 <draw9>
				draw8(X, Y, -3);
 4005180:	01bfff44 	movi	r6,-3
 4005184:	e17ffd17 	ldw	r5,-12(fp)
 4005188:	e13ffc17 	ldw	r4,-16(fp)
 400518c:	4006e5c0 	call	4006e5c <draw8>
			}
		}
		break;
 4005190:	0001b906 	br	4005878 <rotateLeft+0xf1c>
	case 10:
		if(X >= 0 && X < 8){
 4005194:	e0bffc17 	ldw	r2,-16(fp)
 4005198:	1001b916 	blt	r2,zero,4005880 <rotateLeft+0xf24>
 400519c:	e0bffc17 	ldw	r2,-16(fp)
 40051a0:	10800208 	cmpgei	r2,r2,8
 40051a4:	1001b61e 	bne	r2,zero,4005880 <rotateLeft+0xf24>
			if(gameBoard[Y][X] == 0 && gameBoard[Y][X + 1] == 0 && gameBoard[Y + 2][X + 1] == 0){
 40051a8:	040100b4 	movhi	r16,1026
 40051ac:	84080004 	addi	r16,r16,8192
 40051b0:	e0bffd17 	ldw	r2,-12(fp)
 40051b4:	01400284 	movi	r5,10
 40051b8:	1009883a 	mov	r4,r2
 40051bc:	400dcd40 	call	400dcd4 <__mulsi3>
 40051c0:	1007883a 	mov	r3,r2
 40051c4:	e0bffc17 	ldw	r2,-16(fp)
 40051c8:	1885883a 	add	r2,r3,r2
 40051cc:	1085883a 	add	r2,r2,r2
 40051d0:	1085883a 	add	r2,r2,r2
 40051d4:	8085883a 	add	r2,r16,r2
 40051d8:	10800017 	ldw	r2,0(r2)
 40051dc:	1001a81e 	bne	r2,zero,4005880 <rotateLeft+0xf24>
 40051e0:	e0bffc17 	ldw	r2,-16(fp)
 40051e4:	14400044 	addi	r17,r2,1
 40051e8:	040100b4 	movhi	r16,1026
 40051ec:	84080004 	addi	r16,r16,8192
 40051f0:	e0bffd17 	ldw	r2,-12(fp)
 40051f4:	01400284 	movi	r5,10
 40051f8:	1009883a 	mov	r4,r2
 40051fc:	400dcd40 	call	400dcd4 <__mulsi3>
 4005200:	1445883a 	add	r2,r2,r17
 4005204:	1085883a 	add	r2,r2,r2
 4005208:	1085883a 	add	r2,r2,r2
 400520c:	8085883a 	add	r2,r16,r2
 4005210:	10800017 	ldw	r2,0(r2)
 4005214:	10019a1e 	bne	r2,zero,4005880 <rotateLeft+0xf24>
 4005218:	e0bffd17 	ldw	r2,-12(fp)
 400521c:	10c00084 	addi	r3,r2,2
 4005220:	e0bffc17 	ldw	r2,-16(fp)
 4005224:	14400044 	addi	r17,r2,1
 4005228:	040100b4 	movhi	r16,1026
 400522c:	84080004 	addi	r16,r16,8192
 4005230:	01400284 	movi	r5,10
 4005234:	1809883a 	mov	r4,r3
 4005238:	400dcd40 	call	400dcd4 <__mulsi3>
 400523c:	1445883a 	add	r2,r2,r17
 4005240:	1085883a 	add	r2,r2,r2
 4005244:	1085883a 	add	r2,r2,r2
 4005248:	8085883a 	add	r2,r16,r2
 400524c:	10800017 	ldw	r2,0(r2)
 4005250:	10018b1e 	bne	r2,zero,4005880 <rotateLeft+0xf24>
				newState = 9;
 4005254:	00800244 	movi	r2,9
 4005258:	e0bffa15 	stw	r2,-24(fp)
				draw10(X, Y, 0);
 400525c:	000d883a 	mov	r6,zero
 4005260:	e17ffd17 	ldw	r5,-12(fp)
 4005264:	e13ffc17 	ldw	r4,-16(fp)
 4005268:	40070140 	call	4007014 <draw10>
				draw9(X, Y, -3);
 400526c:	01bfff44 	movi	r6,-3
 4005270:	e17ffd17 	ldw	r5,-12(fp)
 4005274:	e13ffc17 	ldw	r4,-16(fp)
 4005278:	4006f380 	call	4006f38 <draw9>
			}
		}
		break;
 400527c:	00018006 	br	4005880 <rotateLeft+0xf24>
	case 11:
		if(X >= 0 && X < 8){
 4005280:	e0bffc17 	ldw	r2,-16(fp)
 4005284:	10018016 	blt	r2,zero,4005888 <rotateLeft+0xf2c>
 4005288:	e0bffc17 	ldw	r2,-16(fp)
 400528c:	10800208 	cmpgei	r2,r2,8
 4005290:	10017d1e 	bne	r2,zero,4005888 <rotateLeft+0xf2c>
			if(gameBoard[Y][X + 2] == 0 && gameBoard[Y + 1][X] == 0 && gameBoard[Y + 1][X + 2] == 0){
 4005294:	e0bffc17 	ldw	r2,-16(fp)
 4005298:	14400084 	addi	r17,r2,2
 400529c:	040100b4 	movhi	r16,1026
 40052a0:	84080004 	addi	r16,r16,8192
 40052a4:	e0bffd17 	ldw	r2,-12(fp)
 40052a8:	01400284 	movi	r5,10
 40052ac:	1009883a 	mov	r4,r2
 40052b0:	400dcd40 	call	400dcd4 <__mulsi3>
 40052b4:	1445883a 	add	r2,r2,r17
 40052b8:	1085883a 	add	r2,r2,r2
 40052bc:	1085883a 	add	r2,r2,r2
 40052c0:	8085883a 	add	r2,r16,r2
 40052c4:	10800017 	ldw	r2,0(r2)
 40052c8:	10016f1e 	bne	r2,zero,4005888 <rotateLeft+0xf2c>
 40052cc:	e0bffd17 	ldw	r2,-12(fp)
 40052d0:	10800044 	addi	r2,r2,1
 40052d4:	040100b4 	movhi	r16,1026
 40052d8:	84080004 	addi	r16,r16,8192
 40052dc:	01400284 	movi	r5,10
 40052e0:	1009883a 	mov	r4,r2
 40052e4:	400dcd40 	call	400dcd4 <__mulsi3>
 40052e8:	1007883a 	mov	r3,r2
 40052ec:	e0bffc17 	ldw	r2,-16(fp)
 40052f0:	1885883a 	add	r2,r3,r2
 40052f4:	1085883a 	add	r2,r2,r2
 40052f8:	1085883a 	add	r2,r2,r2
 40052fc:	8085883a 	add	r2,r16,r2
 4005300:	10800017 	ldw	r2,0(r2)
 4005304:	1001601e 	bne	r2,zero,4005888 <rotateLeft+0xf2c>
 4005308:	e0bffd17 	ldw	r2,-12(fp)
 400530c:	10c00044 	addi	r3,r2,1
 4005310:	e0bffc17 	ldw	r2,-16(fp)
 4005314:	14400084 	addi	r17,r2,2
 4005318:	040100b4 	movhi	r16,1026
 400531c:	84080004 	addi	r16,r16,8192
 4005320:	01400284 	movi	r5,10
 4005324:	1809883a 	mov	r4,r3
 4005328:	400dcd40 	call	400dcd4 <__mulsi3>
 400532c:	1445883a 	add	r2,r2,r17
 4005330:	1085883a 	add	r2,r2,r2
 4005334:	1085883a 	add	r2,r2,r2
 4005338:	8085883a 	add	r2,r16,r2
 400533c:	10800017 	ldw	r2,0(r2)
 4005340:	1001511e 	bne	r2,zero,4005888 <rotateLeft+0xf2c>
				newState = 10;
 4005344:	00800284 	movi	r2,10
 4005348:	e0bffa15 	stw	r2,-24(fp)
				draw11(X, Y, 0);
 400534c:	000d883a 	mov	r6,zero
 4005350:	e17ffd17 	ldw	r5,-12(fp)
 4005354:	e13ffc17 	ldw	r4,-16(fp)
 4005358:	40070ec0 	call	40070ec <draw11>
				draw10(X, Y, -3);
 400535c:	01bfff44 	movi	r6,-3
 4005360:	e17ffd17 	ldw	r5,-12(fp)
 4005364:	e13ffc17 	ldw	r4,-16(fp)
 4005368:	40070140 	call	4007014 <draw10>
			}
		}
		break;
 400536c:	00014606 	br	4005888 <rotateLeft+0xf2c>
	case 12:
		if(X >= 0 && X < 8){
 4005370:	e0bffc17 	ldw	r2,-16(fp)
 4005374:	10014616 	blt	r2,zero,4005890 <rotateLeft+0xf34>
 4005378:	e0bffc17 	ldw	r2,-16(fp)
 400537c:	10800208 	cmpgei	r2,r2,8
 4005380:	1001431e 	bne	r2,zero,4005890 <rotateLeft+0xf34>
			if(gameBoard[Y][X + 1] == 0 && gameBoard[Y + 2][X + 2] == 0){
 4005384:	e0bffc17 	ldw	r2,-16(fp)
 4005388:	14400044 	addi	r17,r2,1
 400538c:	040100b4 	movhi	r16,1026
 4005390:	84080004 	addi	r16,r16,8192
 4005394:	e0bffd17 	ldw	r2,-12(fp)
 4005398:	01400284 	movi	r5,10
 400539c:	1009883a 	mov	r4,r2
 40053a0:	400dcd40 	call	400dcd4 <__mulsi3>
 40053a4:	1445883a 	add	r2,r2,r17
 40053a8:	1085883a 	add	r2,r2,r2
 40053ac:	1085883a 	add	r2,r2,r2
 40053b0:	8085883a 	add	r2,r16,r2
 40053b4:	10800017 	ldw	r2,0(r2)
 40053b8:	1001351e 	bne	r2,zero,4005890 <rotateLeft+0xf34>
 40053bc:	e0bffd17 	ldw	r2,-12(fp)
 40053c0:	10c00084 	addi	r3,r2,2
 40053c4:	e0bffc17 	ldw	r2,-16(fp)
 40053c8:	14400084 	addi	r17,r2,2
 40053cc:	040100b4 	movhi	r16,1026
 40053d0:	84080004 	addi	r16,r16,8192
 40053d4:	01400284 	movi	r5,10
 40053d8:	1809883a 	mov	r4,r3
 40053dc:	400dcd40 	call	400dcd4 <__mulsi3>
 40053e0:	1445883a 	add	r2,r2,r17
 40053e4:	1085883a 	add	r2,r2,r2
 40053e8:	1085883a 	add	r2,r2,r2
 40053ec:	8085883a 	add	r2,r16,r2
 40053f0:	10800017 	ldw	r2,0(r2)
 40053f4:	1001261e 	bne	r2,zero,4005890 <rotateLeft+0xf34>
				newState = 13;
 40053f8:	00800344 	movi	r2,13
 40053fc:	e0bffa15 	stw	r2,-24(fp)
				draw12(X, Y, 0);
 4005400:	000d883a 	mov	r6,zero
 4005404:	e17ffd17 	ldw	r5,-12(fp)
 4005408:	e13ffc17 	ldw	r4,-16(fp)
 400540c:	40071cc0 	call	40071cc <draw12>
				draw13(X, Y, -5);
 4005410:	01bffec4 	movi	r6,-5
 4005414:	e17ffd17 	ldw	r5,-12(fp)
 4005418:	e13ffc17 	ldw	r4,-16(fp)
 400541c:	40073000 	call	4007300 <draw13>
			}
		}
		break;
 4005420:	00011b06 	br	4005890 <rotateLeft+0xf34>
	case 13:
		if(X >= 0 && X < 8){
 4005424:	e0bffc17 	ldw	r2,-16(fp)
 4005428:	10011b16 	blt	r2,zero,4005898 <rotateLeft+0xf3c>
 400542c:	e0bffc17 	ldw	r2,-16(fp)
 4005430:	10800208 	cmpgei	r2,r2,8
 4005434:	1001181e 	bne	r2,zero,4005898 <rotateLeft+0xf3c>
			if(gameBoard[Y + 2][X] == 0 && gameBoard[Y + 2][X + 1] == 0){
 4005438:	e0bffd17 	ldw	r2,-12(fp)
 400543c:	10800084 	addi	r2,r2,2
 4005440:	040100b4 	movhi	r16,1026
 4005444:	84080004 	addi	r16,r16,8192
 4005448:	01400284 	movi	r5,10
 400544c:	1009883a 	mov	r4,r2
 4005450:	400dcd40 	call	400dcd4 <__mulsi3>
 4005454:	1007883a 	mov	r3,r2
 4005458:	e0bffc17 	ldw	r2,-16(fp)
 400545c:	1885883a 	add	r2,r3,r2
 4005460:	1085883a 	add	r2,r2,r2
 4005464:	1085883a 	add	r2,r2,r2
 4005468:	8085883a 	add	r2,r16,r2
 400546c:	10800017 	ldw	r2,0(r2)
 4005470:	1001091e 	bne	r2,zero,4005898 <rotateLeft+0xf3c>
 4005474:	e0bffd17 	ldw	r2,-12(fp)
 4005478:	10c00084 	addi	r3,r2,2
 400547c:	e0bffc17 	ldw	r2,-16(fp)
 4005480:	14400044 	addi	r17,r2,1
 4005484:	040100b4 	movhi	r16,1026
 4005488:	84080004 	addi	r16,r16,8192
 400548c:	01400284 	movi	r5,10
 4005490:	1809883a 	mov	r4,r3
 4005494:	400dcd40 	call	400dcd4 <__mulsi3>
 4005498:	1445883a 	add	r2,r2,r17
 400549c:	1085883a 	add	r2,r2,r2
 40054a0:	1085883a 	add	r2,r2,r2
 40054a4:	8085883a 	add	r2,r16,r2
 40054a8:	10800017 	ldw	r2,0(r2)
 40054ac:	1000fa1e 	bne	r2,zero,4005898 <rotateLeft+0xf3c>
				newState = 12;
 40054b0:	00800304 	movi	r2,12
 40054b4:	e0bffa15 	stw	r2,-24(fp)
				draw13(X, Y, 0);
 40054b8:	000d883a 	mov	r6,zero
 40054bc:	e17ffd17 	ldw	r5,-12(fp)
 40054c0:	e13ffc17 	ldw	r4,-16(fp)
 40054c4:	40073000 	call	4007300 <draw13>
				draw12(X, Y, -5);
 40054c8:	01bffec4 	movi	r6,-5
 40054cc:	e17ffd17 	ldw	r5,-12(fp)
 40054d0:	e13ffc17 	ldw	r4,-16(fp)
 40054d4:	40071cc0 	call	40071cc <draw12>
			}
		}
		break;
 40054d8:	0000ef06 	br	4005898 <rotateLeft+0xf3c>
	case 14:
		if(X >= 0 && X < 8){
 40054dc:	e0bffc17 	ldw	r2,-16(fp)
 40054e0:	1000ef16 	blt	r2,zero,40058a0 <rotateLeft+0xf44>
 40054e4:	e0bffc17 	ldw	r2,-16(fp)
 40054e8:	10800208 	cmpgei	r2,r2,8
 40054ec:	1000ec1e 	bne	r2,zero,40058a0 <rotateLeft+0xf44>
			if(gameBoard[Y][X + 1] == 0){
 40054f0:	e0bffc17 	ldw	r2,-16(fp)
 40054f4:	14400044 	addi	r17,r2,1
 40054f8:	040100b4 	movhi	r16,1026
 40054fc:	84080004 	addi	r16,r16,8192
 4005500:	e0bffd17 	ldw	r2,-12(fp)
 4005504:	01400284 	movi	r5,10
 4005508:	1009883a 	mov	r4,r2
 400550c:	400dcd40 	call	400dcd4 <__mulsi3>
 4005510:	1445883a 	add	r2,r2,r17
 4005514:	1085883a 	add	r2,r2,r2
 4005518:	1085883a 	add	r2,r2,r2
 400551c:	8085883a 	add	r2,r16,r2
 4005520:	10800017 	ldw	r2,0(r2)
 4005524:	1000de1e 	bne	r2,zero,40058a0 <rotateLeft+0xf44>
				newState = 17;
 4005528:	00800444 	movi	r2,17
 400552c:	e0bffa15 	stw	r2,-24(fp)
				draw14(X, Y, 0);
 4005530:	000d883a 	mov	r6,zero
 4005534:	e17ffd17 	ldw	r5,-12(fp)
 4005538:	e13ffc17 	ldw	r4,-16(fp)
 400553c:	40074300 	call	4007430 <draw14>
				draw17(X, Y, -6);
 4005540:	01bffe84 	movi	r6,-6
 4005544:	e17ffd17 	ldw	r5,-12(fp)
 4005548:	e13ffc17 	ldw	r4,-16(fp)
 400554c:	40076c40 	call	40076c4 <draw17>
			}
		}
		break;
 4005550:	0000d306 	br	40058a0 <rotateLeft+0xf44>
	case 15:
		if(X >= 0 && X < 8){
 4005554:	e0bffc17 	ldw	r2,-16(fp)
 4005558:	1000d316 	blt	r2,zero,40058a8 <rotateLeft+0xf4c>
 400555c:	e0bffc17 	ldw	r2,-16(fp)
 4005560:	10800208 	cmpgei	r2,r2,8
 4005564:	1000d01e 	bne	r2,zero,40058a8 <rotateLeft+0xf4c>
			if(gameBoard[Y + 1][X + 2] == 0){
 4005568:	e0bffd17 	ldw	r2,-12(fp)
 400556c:	10c00044 	addi	r3,r2,1
 4005570:	e0bffc17 	ldw	r2,-16(fp)
 4005574:	14400084 	addi	r17,r2,2
 4005578:	040100b4 	movhi	r16,1026
 400557c:	84080004 	addi	r16,r16,8192
 4005580:	01400284 	movi	r5,10
 4005584:	1809883a 	mov	r4,r3
 4005588:	400dcd40 	call	400dcd4 <__mulsi3>
 400558c:	1445883a 	add	r2,r2,r17
 4005590:	1085883a 	add	r2,r2,r2
 4005594:	1085883a 	add	r2,r2,r2
 4005598:	8085883a 	add	r2,r16,r2
 400559c:	10800017 	ldw	r2,0(r2)
 40055a0:	1000c11e 	bne	r2,zero,40058a8 <rotateLeft+0xf4c>
				newState = 14;
 40055a4:	00800384 	movi	r2,14
 40055a8:	e0bffa15 	stw	r2,-24(fp)
				draw15(X, Y, 0);
 40055ac:	000d883a 	mov	r6,zero
 40055b0:	e17ffd17 	ldw	r5,-12(fp)
 40055b4:	e13ffc17 	ldw	r4,-16(fp)
 40055b8:	400750c0 	call	400750c <draw15>
				draw14(X, Y, -6);
 40055bc:	01bffe84 	movi	r6,-6
 40055c0:	e17ffd17 	ldw	r5,-12(fp)
 40055c4:	e13ffc17 	ldw	r4,-16(fp)
 40055c8:	40074300 	call	4007430 <draw14>
			}
		}
		break;
 40055cc:	0000b606 	br	40058a8 <rotateLeft+0xf4c>
	case 16:
		if(X >= 0 && X < 8){
 40055d0:	e0bffc17 	ldw	r2,-16(fp)
 40055d4:	1000b616 	blt	r2,zero,40058b0 <rotateLeft+0xf54>
 40055d8:	e0bffc17 	ldw	r2,-16(fp)
 40055dc:	10800208 	cmpgei	r2,r2,8
 40055e0:	1000b31e 	bne	r2,zero,40058b0 <rotateLeft+0xf54>
			if(gameBoard[Y + 2][X + 1] == 0){
 40055e4:	e0bffd17 	ldw	r2,-12(fp)
 40055e8:	10c00084 	addi	r3,r2,2
 40055ec:	e0bffc17 	ldw	r2,-16(fp)
 40055f0:	14400044 	addi	r17,r2,1
 40055f4:	040100b4 	movhi	r16,1026
 40055f8:	84080004 	addi	r16,r16,8192
 40055fc:	01400284 	movi	r5,10
 4005600:	1809883a 	mov	r4,r3
 4005604:	400dcd40 	call	400dcd4 <__mulsi3>
 4005608:	1445883a 	add	r2,r2,r17
 400560c:	1085883a 	add	r2,r2,r2
 4005610:	1085883a 	add	r2,r2,r2
 4005614:	8085883a 	add	r2,r16,r2
 4005618:	10800017 	ldw	r2,0(r2)
 400561c:	1000a41e 	bne	r2,zero,40058b0 <rotateLeft+0xf54>
				newState = 15;
 4005620:	008003c4 	movi	r2,15
 4005624:	e0bffa15 	stw	r2,-24(fp)
				draw16(X, Y, 0);
 4005628:	000d883a 	mov	r6,zero
 400562c:	e17ffd17 	ldw	r5,-12(fp)
 4005630:	e13ffc17 	ldw	r4,-16(fp)
 4005634:	40075ec0 	call	40075ec <draw16>
				draw15(X, Y, -6);
 4005638:	01bffe84 	movi	r6,-6
 400563c:	e17ffd17 	ldw	r5,-12(fp)
 4005640:	e13ffc17 	ldw	r4,-16(fp)
 4005644:	400750c0 	call	400750c <draw15>
			}
		}
		break;
 4005648:	00009906 	br	40058b0 <rotateLeft+0xf54>
	case 17:
		if(X >= 0 && X < 8){
 400564c:	e0bffc17 	ldw	r2,-16(fp)
 4005650:	10009916 	blt	r2,zero,40058b8 <rotateLeft+0xf5c>
 4005654:	e0bffc17 	ldw	r2,-16(fp)
 4005658:	10800208 	cmpgei	r2,r2,8
 400565c:	1000961e 	bne	r2,zero,40058b8 <rotateLeft+0xf5c>
			if(gameBoard[Y + 1][X] == 0){
 4005660:	e0bffd17 	ldw	r2,-12(fp)
 4005664:	10800044 	addi	r2,r2,1
 4005668:	040100b4 	movhi	r16,1026
 400566c:	84080004 	addi	r16,r16,8192
 4005670:	01400284 	movi	r5,10
 4005674:	1009883a 	mov	r4,r2
 4005678:	400dcd40 	call	400dcd4 <__mulsi3>
 400567c:	1007883a 	mov	r3,r2
 4005680:	e0bffc17 	ldw	r2,-16(fp)
 4005684:	1885883a 	add	r2,r3,r2
 4005688:	1085883a 	add	r2,r2,r2
 400568c:	1085883a 	add	r2,r2,r2
 4005690:	8085883a 	add	r2,r16,r2
 4005694:	10800017 	ldw	r2,0(r2)
 4005698:	1000871e 	bne	r2,zero,40058b8 <rotateLeft+0xf5c>
				newState = 16;
 400569c:	00800404 	movi	r2,16
 40056a0:	e0bffa15 	stw	r2,-24(fp)
				draw17(X, Y, 0);
 40056a4:	000d883a 	mov	r6,zero
 40056a8:	e17ffd17 	ldw	r5,-12(fp)
 40056ac:	e13ffc17 	ldw	r4,-16(fp)
 40056b0:	40076c40 	call	40076c4 <draw17>
				draw16(X, Y, -6);
 40056b4:	01bffe84 	movi	r6,-6
 40056b8:	e17ffd17 	ldw	r5,-12(fp)
 40056bc:	e13ffc17 	ldw	r4,-16(fp)
 40056c0:	40075ec0 	call	40075ec <draw16>
			}
		}
		break;
 40056c4:	00007c06 	br	40058b8 <rotateLeft+0xf5c>
	case 18:
		if(X >= 0 && X < 8){
 40056c8:	e0bffc17 	ldw	r2,-16(fp)
 40056cc:	10007c16 	blt	r2,zero,40058c0 <rotateLeft+0xf64>
 40056d0:	e0bffc17 	ldw	r2,-16(fp)
 40056d4:	10800208 	cmpgei	r2,r2,8
 40056d8:	1000791e 	bne	r2,zero,40058c0 <rotateLeft+0xf64>
			if(gameBoard[Y][X + 2] == 0 && gameBoard[Y + 1][Y + 2] == 0){
 40056dc:	e0bffc17 	ldw	r2,-16(fp)
 40056e0:	14400084 	addi	r17,r2,2
 40056e4:	040100b4 	movhi	r16,1026
 40056e8:	84080004 	addi	r16,r16,8192
 40056ec:	e0bffd17 	ldw	r2,-12(fp)
 40056f0:	01400284 	movi	r5,10
 40056f4:	1009883a 	mov	r4,r2
 40056f8:	400dcd40 	call	400dcd4 <__mulsi3>
 40056fc:	1445883a 	add	r2,r2,r17
 4005700:	1085883a 	add	r2,r2,r2
 4005704:	1085883a 	add	r2,r2,r2
 4005708:	8085883a 	add	r2,r16,r2
 400570c:	10800017 	ldw	r2,0(r2)
 4005710:	10006b1e 	bne	r2,zero,40058c0 <rotateLeft+0xf64>
 4005714:	e0bffd17 	ldw	r2,-12(fp)
 4005718:	10c00044 	addi	r3,r2,1
 400571c:	e0bffd17 	ldw	r2,-12(fp)
 4005720:	14400084 	addi	r17,r2,2
 4005724:	040100b4 	movhi	r16,1026
 4005728:	84080004 	addi	r16,r16,8192
 400572c:	01400284 	movi	r5,10
 4005730:	1809883a 	mov	r4,r3
 4005734:	400dcd40 	call	400dcd4 <__mulsi3>
 4005738:	1445883a 	add	r2,r2,r17
 400573c:	1085883a 	add	r2,r2,r2
 4005740:	1085883a 	add	r2,r2,r2
 4005744:	8085883a 	add	r2,r16,r2
 4005748:	10800017 	ldw	r2,0(r2)
 400574c:	10005c1e 	bne	r2,zero,40058c0 <rotateLeft+0xf64>
				newState = 19;
 4005750:	008004c4 	movi	r2,19
 4005754:	e0bffa15 	stw	r2,-24(fp)
				draw18(X, Y, 0);
 4005758:	000d883a 	mov	r6,zero
 400575c:	e17ffd17 	ldw	r5,-12(fp)
 4005760:	e13ffc17 	ldw	r4,-16(fp)
 4005764:	40077a40 	call	40077a4 <draw18>
				draw19(X, Y, -7);
 4005768:	01bffe44 	movi	r6,-7
 400576c:	e17ffd17 	ldw	r5,-12(fp)
 4005770:	e13ffc17 	ldw	r4,-16(fp)
 4005774:	40078d80 	call	40078d8 <draw19>
			}
		}
		break;
 4005778:	00005106 	br	40058c0 <rotateLeft+0xf64>
	case 19:
		if(X >= 0 && X < 8){
 400577c:	e0bffc17 	ldw	r2,-16(fp)
 4005780:	10005116 	blt	r2,zero,40058c8 <rotateLeft+0xf6c>
 4005784:	e0bffc17 	ldw	r2,-16(fp)
 4005788:	10800208 	cmpgei	r2,r2,8
 400578c:	10004e1e 	bne	r2,zero,40058c8 <rotateLeft+0xf6c>
			if(gameBoard[Y + 1][X] == 0 && gameBoard[Y + 2][X + 2] == 0){
 4005790:	e0bffd17 	ldw	r2,-12(fp)
 4005794:	10800044 	addi	r2,r2,1
 4005798:	040100b4 	movhi	r16,1026
 400579c:	84080004 	addi	r16,r16,8192
 40057a0:	01400284 	movi	r5,10
 40057a4:	1009883a 	mov	r4,r2
 40057a8:	400dcd40 	call	400dcd4 <__mulsi3>
 40057ac:	1007883a 	mov	r3,r2
 40057b0:	e0bffc17 	ldw	r2,-16(fp)
 40057b4:	1885883a 	add	r2,r3,r2
 40057b8:	1085883a 	add	r2,r2,r2
 40057bc:	1085883a 	add	r2,r2,r2
 40057c0:	8085883a 	add	r2,r16,r2
 40057c4:	10800017 	ldw	r2,0(r2)
 40057c8:	10003f1e 	bne	r2,zero,40058c8 <rotateLeft+0xf6c>
 40057cc:	e0bffd17 	ldw	r2,-12(fp)
 40057d0:	10c00084 	addi	r3,r2,2
 40057d4:	e0bffc17 	ldw	r2,-16(fp)
 40057d8:	14400084 	addi	r17,r2,2
 40057dc:	040100b4 	movhi	r16,1026
 40057e0:	84080004 	addi	r16,r16,8192
 40057e4:	01400284 	movi	r5,10
 40057e8:	1809883a 	mov	r4,r3
 40057ec:	400dcd40 	call	400dcd4 <__mulsi3>
 40057f0:	1445883a 	add	r2,r2,r17
 40057f4:	1085883a 	add	r2,r2,r2
 40057f8:	1085883a 	add	r2,r2,r2
 40057fc:	8085883a 	add	r2,r16,r2
 4005800:	10800017 	ldw	r2,0(r2)
 4005804:	1000301e 	bne	r2,zero,40058c8 <rotateLeft+0xf6c>
				newState = 18;
 4005808:	00800484 	movi	r2,18
 400580c:	e0bffa15 	stw	r2,-24(fp)
				draw19(X, Y, 0);
 4005810:	000d883a 	mov	r6,zero
 4005814:	e17ffd17 	ldw	r5,-12(fp)
 4005818:	e13ffc17 	ldw	r4,-16(fp)
 400581c:	40078d80 	call	40078d8 <draw19>
				draw18(X, Y, -7);
 4005820:	01bffe44 	movi	r6,-7
 4005824:	e17ffd17 	ldw	r5,-12(fp)
 4005828:	e13ffc17 	ldw	r4,-16(fp)
 400582c:	40077a40 	call	40077a4 <draw18>
			}
		}
		break;
 4005830:	00002506 	br	40058c8 <rotateLeft+0xf6c>
	default:
		newState = blockState;
 4005834:	e0bffb17 	ldw	r2,-20(fp)
 4005838:	e0bffa15 	stw	r2,-24(fp)
		break;
 400583c:	00002306 	br	40058cc <rotateLeft+0xf70>
				newState = 2;
				draw1(X, Y, 0);
				draw2(X, Y, -1);
			}
		}
		break;
 4005840:	0001883a 	nop
 4005844:	00002106 	br	40058cc <rotateLeft+0xf70>
				newState = 1;
				draw2(X, Y, 0);
				draw1(X, Y, -1);
			}
		}
		break;
 4005848:	0001883a 	nop
 400584c:	00001f06 	br	40058cc <rotateLeft+0xf70>
				newState = 7;
				draw4(X, Y, 0);
				draw7(X, Y, -2);
			}
		}
		break;
 4005850:	0001883a 	nop
 4005854:	00001d06 	br	40058cc <rotateLeft+0xf70>
				newState = 4;
				draw5(X, Y, 0);
				draw4(X, Y, -2);
			}
		}
		break;
 4005858:	0001883a 	nop
 400585c:	00001b06 	br	40058cc <rotateLeft+0xf70>
				newState = 5;
				draw6(X, Y, 0);
				draw5(X, Y, -2);
			}
		}
		break;
 4005860:	0001883a 	nop
 4005864:	00001906 	br	40058cc <rotateLeft+0xf70>
				newState = 6;
				draw7(X, Y, 0);
				draw6(X, Y, -2);
			}
		}
		break;
 4005868:	0001883a 	nop
 400586c:	00001706 	br	40058cc <rotateLeft+0xf70>
				newState = 11;
				draw8(X, Y, 0);
				draw11(X, Y, -3);
			}
		}
		break;
 4005870:	0001883a 	nop
 4005874:	00001506 	br	40058cc <rotateLeft+0xf70>
				newState = 8;
				draw9(X, Y, 0);
				draw8(X, Y, -3);
			}
		}
		break;
 4005878:	0001883a 	nop
 400587c:	00001306 	br	40058cc <rotateLeft+0xf70>
				newState = 9;
				draw10(X, Y, 0);
				draw9(X, Y, -3);
			}
		}
		break;
 4005880:	0001883a 	nop
 4005884:	00001106 	br	40058cc <rotateLeft+0xf70>
				newState = 10;
				draw11(X, Y, 0);
				draw10(X, Y, -3);
			}
		}
		break;
 4005888:	0001883a 	nop
 400588c:	00000f06 	br	40058cc <rotateLeft+0xf70>
				newState = 13;
				draw12(X, Y, 0);
				draw13(X, Y, -5);
			}
		}
		break;
 4005890:	0001883a 	nop
 4005894:	00000d06 	br	40058cc <rotateLeft+0xf70>
				newState = 12;
				draw13(X, Y, 0);
				draw12(X, Y, -5);
			}
		}
		break;
 4005898:	0001883a 	nop
 400589c:	00000b06 	br	40058cc <rotateLeft+0xf70>
				newState = 17;
				draw14(X, Y, 0);
				draw17(X, Y, -6);
			}
		}
		break;
 40058a0:	0001883a 	nop
 40058a4:	00000906 	br	40058cc <rotateLeft+0xf70>
				newState = 14;
				draw15(X, Y, 0);
				draw14(X, Y, -6);
			}
		}
		break;
 40058a8:	0001883a 	nop
 40058ac:	00000706 	br	40058cc <rotateLeft+0xf70>
				newState = 15;
				draw16(X, Y, 0);
				draw15(X, Y, -6);
			}
		}
		break;
 40058b0:	0001883a 	nop
 40058b4:	00000506 	br	40058cc <rotateLeft+0xf70>
				newState = 16;
				draw17(X, Y, 0);
				draw16(X, Y, -6);
			}
		}
		break;
 40058b8:	0001883a 	nop
 40058bc:	00000306 	br	40058cc <rotateLeft+0xf70>
				newState = 19;
				draw18(X, Y, 0);
				draw19(X, Y, -7);
			}
		}
		break;
 40058c0:	0001883a 	nop
 40058c4:	00000106 	br	40058cc <rotateLeft+0xf70>
				newState = 18;
				draw19(X, Y, 0);
				draw18(X, Y, -7);
			}
		}
		break;
 40058c8:	0001883a 	nop
	default:
		newState = blockState;
		break;
	}
	return newState;
 40058cc:	e0bffa17 	ldw	r2,-24(fp)
}
 40058d0:	e6fffe04 	addi	sp,fp,-8
 40058d4:	dfc00317 	ldw	ra,12(sp)
 40058d8:	df000217 	ldw	fp,8(sp)
 40058dc:	dc400117 	ldw	r17,4(sp)
 40058e0:	dc000017 	ldw	r16,0(sp)
 40058e4:	dec00404 	addi	sp,sp,16
 40058e8:	f800283a 	ret

040058ec <rotateRight>:

int rotateRight(int blockState, int X, int Y){
 40058ec:	defff804 	addi	sp,sp,-32
 40058f0:	dfc00715 	stw	ra,28(sp)
 40058f4:	df000615 	stw	fp,24(sp)
 40058f8:	dc400515 	stw	r17,20(sp)
 40058fc:	dc000415 	stw	r16,16(sp)
 4005900:	df000604 	addi	fp,sp,24
 4005904:	e13ffb15 	stw	r4,-20(fp)
 4005908:	e17ffc15 	stw	r5,-16(fp)
 400590c:	e1bffd15 	stw	r6,-12(fp)
	int newState = blockState;
 4005910:	e0bffb17 	ldw	r2,-20(fp)
 4005914:	e0bffa15 	stw	r2,-24(fp)
	switch(blockState){
 4005918:	e0bffb17 	ldw	r2,-20(fp)
 400591c:	10800528 	cmpgeui	r2,r2,20
 4005920:	1003a81e 	bne	r2,zero,40067c4 <rotateRight+0xed8>
 4005924:	e0bffb17 	ldw	r2,-20(fp)
 4005928:	100690ba 	slli	r3,r2,2
 400592c:	00810034 	movhi	r2,1024
 4005930:	10965004 	addi	r2,r2,22848
 4005934:	1885883a 	add	r2,r3,r2
 4005938:	10800017 	ldw	r2,0(r2)
 400593c:	1000683a 	jmp	r2
 4005940:	040067c4 	movi	r16,415
 4005944:	04005990 	cmplti	r16,zero,358
 4005948:	04005a80 	call	4005a8 <__reset-0x3bffa58>
 400594c:	04005b74 	movhi	r16,365
 4005950:	04005b80 	call	4005b8 <__reset-0x3bffa48>
 4005954:	04005c70 	cmpltui	r16,zero,369
 4005958:	04005d60 	cmpeqi	r16,zero,373
 400595c:	04005e4c 	andi	r16,zero,377
 4005960:	04005f40 	call	4005f4 <__reset-0x3bffa0c>
 4005964:	0400602c 	andhi	r16,zero,384
 4005968:	0400611c 	xori	r16,zero,388
 400596c:	0400620c 	andi	r16,zero,392
 4005970:	04006300 	call	400630 <__reset-0x3bff9d0>
 4005974:	040063b4 	movhi	r16,398
 4005978:	0400646c 	andhi	r16,zero,401
 400597c:	040064e4 	muli	r16,zero,403
 4005980:	04006560 	cmpeqi	r16,zero,405
 4005984:	040065dc 	xori	r16,zero,407
 4005988:	04006658 	cmpnei	r16,zero,409
 400598c:	0400670c 	andi	r16,zero,412
	case 1:
		if(X >= 0  && X < 7){
 4005990:	e0bffc17 	ldw	r2,-16(fp)
 4005994:	10038e16 	blt	r2,zero,40067d0 <rotateRight+0xee4>
 4005998:	e0bffc17 	ldw	r2,-16(fp)
 400599c:	108001c8 	cmpgei	r2,r2,7
 40059a0:	10038b1e 	bne	r2,zero,40067d0 <rotateRight+0xee4>
			if(gameBoard[Y][X + 2] == 0 && gameBoard[Y + 1][X + 2] == 0 && gameBoard[Y + 3][X + 2] == 0){
 40059a4:	e0bffc17 	ldw	r2,-16(fp)
 40059a8:	14400084 	addi	r17,r2,2
 40059ac:	040100b4 	movhi	r16,1026
 40059b0:	84080004 	addi	r16,r16,8192
 40059b4:	e0bffd17 	ldw	r2,-12(fp)
 40059b8:	01400284 	movi	r5,10
 40059bc:	1009883a 	mov	r4,r2
 40059c0:	400dcd40 	call	400dcd4 <__mulsi3>
 40059c4:	1445883a 	add	r2,r2,r17
 40059c8:	1085883a 	add	r2,r2,r2
 40059cc:	1085883a 	add	r2,r2,r2
 40059d0:	8085883a 	add	r2,r16,r2
 40059d4:	10800017 	ldw	r2,0(r2)
 40059d8:	10037d1e 	bne	r2,zero,40067d0 <rotateRight+0xee4>
 40059dc:	e0bffd17 	ldw	r2,-12(fp)
 40059e0:	10c00044 	addi	r3,r2,1
 40059e4:	e0bffc17 	ldw	r2,-16(fp)
 40059e8:	14400084 	addi	r17,r2,2
 40059ec:	040100b4 	movhi	r16,1026
 40059f0:	84080004 	addi	r16,r16,8192
 40059f4:	01400284 	movi	r5,10
 40059f8:	1809883a 	mov	r4,r3
 40059fc:	400dcd40 	call	400dcd4 <__mulsi3>
 4005a00:	1445883a 	add	r2,r2,r17
 4005a04:	1085883a 	add	r2,r2,r2
 4005a08:	1085883a 	add	r2,r2,r2
 4005a0c:	8085883a 	add	r2,r16,r2
 4005a10:	10800017 	ldw	r2,0(r2)
 4005a14:	10036e1e 	bne	r2,zero,40067d0 <rotateRight+0xee4>
 4005a18:	e0bffd17 	ldw	r2,-12(fp)
 4005a1c:	10c000c4 	addi	r3,r2,3
 4005a20:	e0bffc17 	ldw	r2,-16(fp)
 4005a24:	14400084 	addi	r17,r2,2
 4005a28:	040100b4 	movhi	r16,1026
 4005a2c:	84080004 	addi	r16,r16,8192
 4005a30:	01400284 	movi	r5,10
 4005a34:	1809883a 	mov	r4,r3
 4005a38:	400dcd40 	call	400dcd4 <__mulsi3>
 4005a3c:	1445883a 	add	r2,r2,r17
 4005a40:	1085883a 	add	r2,r2,r2
 4005a44:	1085883a 	add	r2,r2,r2
 4005a48:	8085883a 	add	r2,r16,r2
 4005a4c:	10800017 	ldw	r2,0(r2)
 4005a50:	10035f1e 	bne	r2,zero,40067d0 <rotateRight+0xee4>
				newState = 2;
 4005a54:	00800084 	movi	r2,2
 4005a58:	e0bffa15 	stw	r2,-24(fp)
				draw1(X, Y, 0);
 4005a5c:	000d883a 	mov	r6,zero
 4005a60:	e17ffd17 	ldw	r5,-12(fp)
 4005a64:	e13ffc17 	ldw	r4,-16(fp)
 4005a68:	400687c0 	call	400687c <draw1>
				draw2(X, Y, -1);
 4005a6c:	01bfffc4 	movi	r6,-1
 4005a70:	e17ffd17 	ldw	r5,-12(fp)
 4005a74:	e13ffc17 	ldw	r4,-16(fp)
 4005a78:	400691c0 	call	400691c <draw2>
			}
		}
		break;
 4005a7c:	00035406 	br	40067d0 <rotateRight+0xee4>
	case 2:
		if(X >= 0  && X < 7){
 4005a80:	e0bffc17 	ldw	r2,-16(fp)
 4005a84:	10035416 	blt	r2,zero,40067d8 <rotateRight+0xeec>
 4005a88:	e0bffc17 	ldw	r2,-16(fp)
 4005a8c:	108001c8 	cmpgei	r2,r2,7
 4005a90:	1003511e 	bne	r2,zero,40067d8 <rotateRight+0xeec>
			if(gameBoard[Y + 2][X] == 0 && gameBoard[Y + 2][X + 1] == 0 && gameBoard[Y + 2][X + 3] == 0){
 4005a94:	e0bffd17 	ldw	r2,-12(fp)
 4005a98:	10800084 	addi	r2,r2,2
 4005a9c:	040100b4 	movhi	r16,1026
 4005aa0:	84080004 	addi	r16,r16,8192
 4005aa4:	01400284 	movi	r5,10
 4005aa8:	1009883a 	mov	r4,r2
 4005aac:	400dcd40 	call	400dcd4 <__mulsi3>
 4005ab0:	1007883a 	mov	r3,r2
 4005ab4:	e0bffc17 	ldw	r2,-16(fp)
 4005ab8:	1885883a 	add	r2,r3,r2
 4005abc:	1085883a 	add	r2,r2,r2
 4005ac0:	1085883a 	add	r2,r2,r2
 4005ac4:	8085883a 	add	r2,r16,r2
 4005ac8:	10800017 	ldw	r2,0(r2)
 4005acc:	1003421e 	bne	r2,zero,40067d8 <rotateRight+0xeec>
 4005ad0:	e0bffd17 	ldw	r2,-12(fp)
 4005ad4:	10c00084 	addi	r3,r2,2
 4005ad8:	e0bffc17 	ldw	r2,-16(fp)
 4005adc:	14400044 	addi	r17,r2,1
 4005ae0:	040100b4 	movhi	r16,1026
 4005ae4:	84080004 	addi	r16,r16,8192
 4005ae8:	01400284 	movi	r5,10
 4005aec:	1809883a 	mov	r4,r3
 4005af0:	400dcd40 	call	400dcd4 <__mulsi3>
 4005af4:	1445883a 	add	r2,r2,r17
 4005af8:	1085883a 	add	r2,r2,r2
 4005afc:	1085883a 	add	r2,r2,r2
 4005b00:	8085883a 	add	r2,r16,r2
 4005b04:	10800017 	ldw	r2,0(r2)
 4005b08:	1003331e 	bne	r2,zero,40067d8 <rotateRight+0xeec>
 4005b0c:	e0bffd17 	ldw	r2,-12(fp)
 4005b10:	10c00084 	addi	r3,r2,2
 4005b14:	e0bffc17 	ldw	r2,-16(fp)
 4005b18:	144000c4 	addi	r17,r2,3
 4005b1c:	040100b4 	movhi	r16,1026
 4005b20:	84080004 	addi	r16,r16,8192
 4005b24:	01400284 	movi	r5,10
 4005b28:	1809883a 	mov	r4,r3
 4005b2c:	400dcd40 	call	400dcd4 <__mulsi3>
 4005b30:	1445883a 	add	r2,r2,r17
 4005b34:	1085883a 	add	r2,r2,r2
 4005b38:	1085883a 	add	r2,r2,r2
 4005b3c:	8085883a 	add	r2,r16,r2
 4005b40:	10800017 	ldw	r2,0(r2)
 4005b44:	1003241e 	bne	r2,zero,40067d8 <rotateRight+0xeec>
				newState = 1;
 4005b48:	00800044 	movi	r2,1
 4005b4c:	e0bffa15 	stw	r2,-24(fp)
				draw2(X, Y, 0);
 4005b50:	000d883a 	mov	r6,zero
 4005b54:	e17ffd17 	ldw	r5,-12(fp)
 4005b58:	e13ffc17 	ldw	r4,-16(fp)
 4005b5c:	400691c0 	call	400691c <draw2>
				draw1(X, Y, -1);
 4005b60:	01bfffc4 	movi	r6,-1
 4005b64:	e17ffd17 	ldw	r5,-12(fp)
 4005b68:	e13ffc17 	ldw	r4,-16(fp)
 4005b6c:	400687c0 	call	400687c <draw1>
			}
		}
		break;
 4005b70:	00031906 	br	40067d8 <rotateRight+0xeec>
	case 3:
		newState = blockState;
 4005b74:	e0bffb17 	ldw	r2,-20(fp)
 4005b78:	e0bffa15 	stw	r2,-24(fp)
		break;
 4005b7c:	00033706 	br	400685c <rotateRight+0xf70>
	case 4:
		if(X >= 0 && X < 8){
 4005b80:	e0bffc17 	ldw	r2,-16(fp)
 4005b84:	10031616 	blt	r2,zero,40067e0 <rotateRight+0xef4>
 4005b88:	e0bffc17 	ldw	r2,-16(fp)
 4005b8c:	10800208 	cmpgei	r2,r2,8
 4005b90:	1003131e 	bne	r2,zero,40067e0 <rotateRight+0xef4>
			if(gameBoard[Y][X + 1] == 0 && gameBoard[Y + 2][X] == 0 && gameBoard[Y + 2][X + 1] == 0){
 4005b94:	e0bffc17 	ldw	r2,-16(fp)
 4005b98:	14400044 	addi	r17,r2,1
 4005b9c:	040100b4 	movhi	r16,1026
 4005ba0:	84080004 	addi	r16,r16,8192
 4005ba4:	e0bffd17 	ldw	r2,-12(fp)
 4005ba8:	01400284 	movi	r5,10
 4005bac:	1009883a 	mov	r4,r2
 4005bb0:	400dcd40 	call	400dcd4 <__mulsi3>
 4005bb4:	1445883a 	add	r2,r2,r17
 4005bb8:	1085883a 	add	r2,r2,r2
 4005bbc:	1085883a 	add	r2,r2,r2
 4005bc0:	8085883a 	add	r2,r16,r2
 4005bc4:	10800017 	ldw	r2,0(r2)
 4005bc8:	1003051e 	bne	r2,zero,40067e0 <rotateRight+0xef4>
 4005bcc:	e0bffd17 	ldw	r2,-12(fp)
 4005bd0:	10800084 	addi	r2,r2,2
 4005bd4:	040100b4 	movhi	r16,1026
 4005bd8:	84080004 	addi	r16,r16,8192
 4005bdc:	01400284 	movi	r5,10
 4005be0:	1009883a 	mov	r4,r2
 4005be4:	400dcd40 	call	400dcd4 <__mulsi3>
 4005be8:	1007883a 	mov	r3,r2
 4005bec:	e0bffc17 	ldw	r2,-16(fp)
 4005bf0:	1885883a 	add	r2,r3,r2
 4005bf4:	1085883a 	add	r2,r2,r2
 4005bf8:	1085883a 	add	r2,r2,r2
 4005bfc:	8085883a 	add	r2,r16,r2
 4005c00:	10800017 	ldw	r2,0(r2)
 4005c04:	1002f61e 	bne	r2,zero,40067e0 <rotateRight+0xef4>
 4005c08:	e0bffd17 	ldw	r2,-12(fp)
 4005c0c:	10c00084 	addi	r3,r2,2
 4005c10:	e0bffc17 	ldw	r2,-16(fp)
 4005c14:	14400044 	addi	r17,r2,1
 4005c18:	040100b4 	movhi	r16,1026
 4005c1c:	84080004 	addi	r16,r16,8192
 4005c20:	01400284 	movi	r5,10
 4005c24:	1809883a 	mov	r4,r3
 4005c28:	400dcd40 	call	400dcd4 <__mulsi3>
 4005c2c:	1445883a 	add	r2,r2,r17
 4005c30:	1085883a 	add	r2,r2,r2
 4005c34:	1085883a 	add	r2,r2,r2
 4005c38:	8085883a 	add	r2,r16,r2
 4005c3c:	10800017 	ldw	r2,0(r2)
 4005c40:	1002e71e 	bne	r2,zero,40067e0 <rotateRight+0xef4>
				newState = 5;
 4005c44:	00800144 	movi	r2,5
 4005c48:	e0bffa15 	stw	r2,-24(fp)
				draw4(X, Y, 0);
 4005c4c:	000d883a 	mov	r6,zero
 4005c50:	e17ffd17 	ldw	r5,-12(fp)
 4005c54:	e13ffc17 	ldw	r4,-16(fp)
 4005c58:	4006aec0 	call	4006aec <draw4>
				draw5(X, Y, -2);
 4005c5c:	01bfff84 	movi	r6,-2
 4005c60:	e17ffd17 	ldw	r5,-12(fp)
 4005c64:	e13ffc17 	ldw	r4,-16(fp)
 4005c68:	4006bc80 	call	4006bc8 <draw5>
			}
		}
		break;
 4005c6c:	0002dc06 	br	40067e0 <rotateRight+0xef4>
	case 5:
		if(X >= 0 && X < 8){
 4005c70:	e0bffc17 	ldw	r2,-16(fp)
 4005c74:	1002dc16 	blt	r2,zero,40067e8 <rotateRight+0xefc>
 4005c78:	e0bffc17 	ldw	r2,-16(fp)
 4005c7c:	10800208 	cmpgei	r2,r2,8
 4005c80:	1002d91e 	bne	r2,zero,40067e8 <rotateRight+0xefc>
			if(gameBoard[Y][X] == 0 && gameBoard[Y + 1][X] == 0 && gameBoard[Y + 1][X + 2] == 0){
 4005c84:	040100b4 	movhi	r16,1026
 4005c88:	84080004 	addi	r16,r16,8192
 4005c8c:	e0bffd17 	ldw	r2,-12(fp)
 4005c90:	01400284 	movi	r5,10
 4005c94:	1009883a 	mov	r4,r2
 4005c98:	400dcd40 	call	400dcd4 <__mulsi3>
 4005c9c:	1007883a 	mov	r3,r2
 4005ca0:	e0bffc17 	ldw	r2,-16(fp)
 4005ca4:	1885883a 	add	r2,r3,r2
 4005ca8:	1085883a 	add	r2,r2,r2
 4005cac:	1085883a 	add	r2,r2,r2
 4005cb0:	8085883a 	add	r2,r16,r2
 4005cb4:	10800017 	ldw	r2,0(r2)
 4005cb8:	1002cb1e 	bne	r2,zero,40067e8 <rotateRight+0xefc>
 4005cbc:	e0bffd17 	ldw	r2,-12(fp)
 4005cc0:	10800044 	addi	r2,r2,1
 4005cc4:	040100b4 	movhi	r16,1026
 4005cc8:	84080004 	addi	r16,r16,8192
 4005ccc:	01400284 	movi	r5,10
 4005cd0:	1009883a 	mov	r4,r2
 4005cd4:	400dcd40 	call	400dcd4 <__mulsi3>
 4005cd8:	1007883a 	mov	r3,r2
 4005cdc:	e0bffc17 	ldw	r2,-16(fp)
 4005ce0:	1885883a 	add	r2,r3,r2
 4005ce4:	1085883a 	add	r2,r2,r2
 4005ce8:	1085883a 	add	r2,r2,r2
 4005cec:	8085883a 	add	r2,r16,r2
 4005cf0:	10800017 	ldw	r2,0(r2)
 4005cf4:	1002bc1e 	bne	r2,zero,40067e8 <rotateRight+0xefc>
 4005cf8:	e0bffd17 	ldw	r2,-12(fp)
 4005cfc:	10c00044 	addi	r3,r2,1
 4005d00:	e0bffc17 	ldw	r2,-16(fp)
 4005d04:	14400084 	addi	r17,r2,2
 4005d08:	040100b4 	movhi	r16,1026
 4005d0c:	84080004 	addi	r16,r16,8192
 4005d10:	01400284 	movi	r5,10
 4005d14:	1809883a 	mov	r4,r3
 4005d18:	400dcd40 	call	400dcd4 <__mulsi3>
 4005d1c:	1445883a 	add	r2,r2,r17
 4005d20:	1085883a 	add	r2,r2,r2
 4005d24:	1085883a 	add	r2,r2,r2
 4005d28:	8085883a 	add	r2,r16,r2
 4005d2c:	10800017 	ldw	r2,0(r2)
 4005d30:	1002ad1e 	bne	r2,zero,40067e8 <rotateRight+0xefc>
				newState = 6;
 4005d34:	00800184 	movi	r2,6
 4005d38:	e0bffa15 	stw	r2,-24(fp)
				draw5(X, Y, 0);
 4005d3c:	000d883a 	mov	r6,zero
 4005d40:	e17ffd17 	ldw	r5,-12(fp)
 4005d44:	e13ffc17 	ldw	r4,-16(fp)
 4005d48:	4006bc80 	call	4006bc8 <draw5>
				draw6(X, Y, -2);
 4005d4c:	01bfff84 	movi	r6,-2
 4005d50:	e17ffd17 	ldw	r5,-12(fp)
 4005d54:	e13ffc17 	ldw	r4,-16(fp)
 4005d58:	4006ca80 	call	4006ca8 <draw6>
			}
		}
		break;
 4005d5c:	0002a206 	br	40067e8 <rotateRight+0xefc>
	case 6:
		if(X >= 0 && X < 8){
 4005d60:	e0bffc17 	ldw	r2,-16(fp)
 4005d64:	1002a216 	blt	r2,zero,40067f0 <rotateRight+0xf04>
 4005d68:	e0bffc17 	ldw	r2,-16(fp)
 4005d6c:	10800208 	cmpgei	r2,r2,8
 4005d70:	10029f1e 	bne	r2,zero,40067f0 <rotateRight+0xf04>
			if(gameBoard[Y][X + 1] == 0 && gameBoard[Y][X + 2] == 0 && gameBoard[Y + 2][X + 1] == 0){
 4005d74:	e0bffc17 	ldw	r2,-16(fp)
 4005d78:	14400044 	addi	r17,r2,1
 4005d7c:	040100b4 	movhi	r16,1026
 4005d80:	84080004 	addi	r16,r16,8192
 4005d84:	e0bffd17 	ldw	r2,-12(fp)
 4005d88:	01400284 	movi	r5,10
 4005d8c:	1009883a 	mov	r4,r2
 4005d90:	400dcd40 	call	400dcd4 <__mulsi3>
 4005d94:	1445883a 	add	r2,r2,r17
 4005d98:	1085883a 	add	r2,r2,r2
 4005d9c:	1085883a 	add	r2,r2,r2
 4005da0:	8085883a 	add	r2,r16,r2
 4005da4:	10800017 	ldw	r2,0(r2)
 4005da8:	1002911e 	bne	r2,zero,40067f0 <rotateRight+0xf04>
 4005dac:	e0bffc17 	ldw	r2,-16(fp)
 4005db0:	14400084 	addi	r17,r2,2
 4005db4:	040100b4 	movhi	r16,1026
 4005db8:	84080004 	addi	r16,r16,8192
 4005dbc:	e0bffd17 	ldw	r2,-12(fp)
 4005dc0:	01400284 	movi	r5,10
 4005dc4:	1009883a 	mov	r4,r2
 4005dc8:	400dcd40 	call	400dcd4 <__mulsi3>
 4005dcc:	1445883a 	add	r2,r2,r17
 4005dd0:	1085883a 	add	r2,r2,r2
 4005dd4:	1085883a 	add	r2,r2,r2
 4005dd8:	8085883a 	add	r2,r16,r2
 4005ddc:	10800017 	ldw	r2,0(r2)
 4005de0:	1002831e 	bne	r2,zero,40067f0 <rotateRight+0xf04>
 4005de4:	e0bffd17 	ldw	r2,-12(fp)
 4005de8:	10c00084 	addi	r3,r2,2
 4005dec:	e0bffc17 	ldw	r2,-16(fp)
 4005df0:	14400044 	addi	r17,r2,1
 4005df4:	040100b4 	movhi	r16,1026
 4005df8:	84080004 	addi	r16,r16,8192
 4005dfc:	01400284 	movi	r5,10
 4005e00:	1809883a 	mov	r4,r3
 4005e04:	400dcd40 	call	400dcd4 <__mulsi3>
 4005e08:	1445883a 	add	r2,r2,r17
 4005e0c:	1085883a 	add	r2,r2,r2
 4005e10:	1085883a 	add	r2,r2,r2
 4005e14:	8085883a 	add	r2,r16,r2
 4005e18:	10800017 	ldw	r2,0(r2)
 4005e1c:	1002741e 	bne	r2,zero,40067f0 <rotateRight+0xf04>
				newState = 7;
 4005e20:	008001c4 	movi	r2,7
 4005e24:	e0bffa15 	stw	r2,-24(fp)
				draw6(X, Y, 0);
 4005e28:	000d883a 	mov	r6,zero
 4005e2c:	e17ffd17 	ldw	r5,-12(fp)
 4005e30:	e13ffc17 	ldw	r4,-16(fp)
 4005e34:	4006ca80 	call	4006ca8 <draw6>
				draw7(X, Y, -2);
 4005e38:	01bfff84 	movi	r6,-2
 4005e3c:	e17ffd17 	ldw	r5,-12(fp)
 4005e40:	e13ffc17 	ldw	r4,-16(fp)
 4005e44:	4006d800 	call	4006d80 <draw7>
			}
		}
		break;
 4005e48:	00026906 	br	40067f0 <rotateRight+0xf04>
	case 7:
		if(X >= 0 && X < 8){
 4005e4c:	e0bffc17 	ldw	r2,-16(fp)
 4005e50:	10026916 	blt	r2,zero,40067f8 <rotateRight+0xf0c>
 4005e54:	e0bffc17 	ldw	r2,-16(fp)
 4005e58:	10800208 	cmpgei	r2,r2,8
 4005e5c:	1002661e 	bne	r2,zero,40067f8 <rotateRight+0xf0c>
			if(gameBoard[Y + 1][X] == 0 && gameBoard[Y + 1][X + 2] == 0 && gameBoard[Y + 2][X + 2] == 0){
 4005e60:	e0bffd17 	ldw	r2,-12(fp)
 4005e64:	10800044 	addi	r2,r2,1
 4005e68:	040100b4 	movhi	r16,1026
 4005e6c:	84080004 	addi	r16,r16,8192
 4005e70:	01400284 	movi	r5,10
 4005e74:	1009883a 	mov	r4,r2
 4005e78:	400dcd40 	call	400dcd4 <__mulsi3>
 4005e7c:	1007883a 	mov	r3,r2
 4005e80:	e0bffc17 	ldw	r2,-16(fp)
 4005e84:	1885883a 	add	r2,r3,r2
 4005e88:	1085883a 	add	r2,r2,r2
 4005e8c:	1085883a 	add	r2,r2,r2
 4005e90:	8085883a 	add	r2,r16,r2
 4005e94:	10800017 	ldw	r2,0(r2)
 4005e98:	1002571e 	bne	r2,zero,40067f8 <rotateRight+0xf0c>
 4005e9c:	e0bffd17 	ldw	r2,-12(fp)
 4005ea0:	10c00044 	addi	r3,r2,1
 4005ea4:	e0bffc17 	ldw	r2,-16(fp)
 4005ea8:	14400084 	addi	r17,r2,2
 4005eac:	040100b4 	movhi	r16,1026
 4005eb0:	84080004 	addi	r16,r16,8192
 4005eb4:	01400284 	movi	r5,10
 4005eb8:	1809883a 	mov	r4,r3
 4005ebc:	400dcd40 	call	400dcd4 <__mulsi3>
 4005ec0:	1445883a 	add	r2,r2,r17
 4005ec4:	1085883a 	add	r2,r2,r2
 4005ec8:	1085883a 	add	r2,r2,r2
 4005ecc:	8085883a 	add	r2,r16,r2
 4005ed0:	10800017 	ldw	r2,0(r2)
 4005ed4:	1002481e 	bne	r2,zero,40067f8 <rotateRight+0xf0c>
 4005ed8:	e0bffd17 	ldw	r2,-12(fp)
 4005edc:	10c00084 	addi	r3,r2,2
 4005ee0:	e0bffc17 	ldw	r2,-16(fp)
 4005ee4:	14400084 	addi	r17,r2,2
 4005ee8:	040100b4 	movhi	r16,1026
 4005eec:	84080004 	addi	r16,r16,8192
 4005ef0:	01400284 	movi	r5,10
 4005ef4:	1809883a 	mov	r4,r3
 4005ef8:	400dcd40 	call	400dcd4 <__mulsi3>
 4005efc:	1445883a 	add	r2,r2,r17
 4005f00:	1085883a 	add	r2,r2,r2
 4005f04:	1085883a 	add	r2,r2,r2
 4005f08:	8085883a 	add	r2,r16,r2
 4005f0c:	10800017 	ldw	r2,0(r2)
 4005f10:	1002391e 	bne	r2,zero,40067f8 <rotateRight+0xf0c>
				newState = 4;
 4005f14:	00800104 	movi	r2,4
 4005f18:	e0bffa15 	stw	r2,-24(fp)
				draw7(X, Y, 0);
 4005f1c:	000d883a 	mov	r6,zero
 4005f20:	e17ffd17 	ldw	r5,-12(fp)
 4005f24:	e13ffc17 	ldw	r4,-16(fp)
 4005f28:	4006d800 	call	4006d80 <draw7>
				draw4(X, Y, -2);
 4005f2c:	01bfff84 	movi	r6,-2
 4005f30:	e17ffd17 	ldw	r5,-12(fp)
 4005f34:	e13ffc17 	ldw	r4,-16(fp)
 4005f38:	4006aec0 	call	4006aec <draw4>
			}
		}
		break;
 4005f3c:	00022e06 	br	40067f8 <rotateRight+0xf0c>
	case 8:
		if(X >= 0 && X < 8){
 4005f40:	e0bffc17 	ldw	r2,-16(fp)
 4005f44:	10022e16 	blt	r2,zero,4006800 <rotateRight+0xf14>
 4005f48:	e0bffc17 	ldw	r2,-16(fp)
 4005f4c:	10800208 	cmpgei	r2,r2,8
 4005f50:	10022b1e 	bne	r2,zero,4006800 <rotateRight+0xf14>
			if(gameBoard[Y][X] == 0 && gameBoard[Y][X + 1] == 0 && gameBoard[Y + 2][X + 1] == 0){
 4005f54:	040100b4 	movhi	r16,1026
 4005f58:	84080004 	addi	r16,r16,8192
 4005f5c:	e0bffd17 	ldw	r2,-12(fp)
 4005f60:	01400284 	movi	r5,10
 4005f64:	1009883a 	mov	r4,r2
 4005f68:	400dcd40 	call	400dcd4 <__mulsi3>
 4005f6c:	1007883a 	mov	r3,r2
 4005f70:	e0bffc17 	ldw	r2,-16(fp)
 4005f74:	1885883a 	add	r2,r3,r2
 4005f78:	1085883a 	add	r2,r2,r2
 4005f7c:	1085883a 	add	r2,r2,r2
 4005f80:	8085883a 	add	r2,r16,r2
 4005f84:	10800017 	ldw	r2,0(r2)
 4005f88:	10021d1e 	bne	r2,zero,4006800 <rotateRight+0xf14>
 4005f8c:	e0bffc17 	ldw	r2,-16(fp)
 4005f90:	14400044 	addi	r17,r2,1
 4005f94:	040100b4 	movhi	r16,1026
 4005f98:	84080004 	addi	r16,r16,8192
 4005f9c:	e0bffd17 	ldw	r2,-12(fp)
 4005fa0:	01400284 	movi	r5,10
 4005fa4:	1009883a 	mov	r4,r2
 4005fa8:	400dcd40 	call	400dcd4 <__mulsi3>
 4005fac:	1445883a 	add	r2,r2,r17
 4005fb0:	1085883a 	add	r2,r2,r2
 4005fb4:	1085883a 	add	r2,r2,r2
 4005fb8:	8085883a 	add	r2,r16,r2
 4005fbc:	10800017 	ldw	r2,0(r2)
 4005fc0:	10020f1e 	bne	r2,zero,4006800 <rotateRight+0xf14>
 4005fc4:	e0bffd17 	ldw	r2,-12(fp)
 4005fc8:	10c00084 	addi	r3,r2,2
 4005fcc:	e0bffc17 	ldw	r2,-16(fp)
 4005fd0:	14400044 	addi	r17,r2,1
 4005fd4:	040100b4 	movhi	r16,1026
 4005fd8:	84080004 	addi	r16,r16,8192
 4005fdc:	01400284 	movi	r5,10
 4005fe0:	1809883a 	mov	r4,r3
 4005fe4:	400dcd40 	call	400dcd4 <__mulsi3>
 4005fe8:	1445883a 	add	r2,r2,r17
 4005fec:	1085883a 	add	r2,r2,r2
 4005ff0:	1085883a 	add	r2,r2,r2
 4005ff4:	8085883a 	add	r2,r16,r2
 4005ff8:	10800017 	ldw	r2,0(r2)
 4005ffc:	1002001e 	bne	r2,zero,4006800 <rotateRight+0xf14>
				newState = 9;
 4006000:	00800244 	movi	r2,9
 4006004:	e0bffa15 	stw	r2,-24(fp)
				draw8(X, Y, 0);
 4006008:	000d883a 	mov	r6,zero
 400600c:	e17ffd17 	ldw	r5,-12(fp)
 4006010:	e13ffc17 	ldw	r4,-16(fp)
 4006014:	4006e5c0 	call	4006e5c <draw8>
				draw9(X, Y, -3);
 4006018:	01bfff44 	movi	r6,-3
 400601c:	e17ffd17 	ldw	r5,-12(fp)
 4006020:	e13ffc17 	ldw	r4,-16(fp)
 4006024:	4006f380 	call	4006f38 <draw9>
			}
		}
		break;
 4006028:	0001f506 	br	4006800 <rotateRight+0xf14>
	case 9:
		if(X >= 0 && X < 8){
 400602c:	e0bffc17 	ldw	r2,-16(fp)
 4006030:	1001f516 	blt	r2,zero,4006808 <rotateRight+0xf1c>
 4006034:	e0bffc17 	ldw	r2,-16(fp)
 4006038:	10800208 	cmpgei	r2,r2,8
 400603c:	1001f21e 	bne	r2,zero,4006808 <rotateRight+0xf1c>
			if(gameBoard[Y][X + 2] == 0 && gameBoard[Y + 1][X] == 0 && gameBoard[Y + 1][X + 2] == 0){
 4006040:	e0bffc17 	ldw	r2,-16(fp)
 4006044:	14400084 	addi	r17,r2,2
 4006048:	040100b4 	movhi	r16,1026
 400604c:	84080004 	addi	r16,r16,8192
 4006050:	e0bffd17 	ldw	r2,-12(fp)
 4006054:	01400284 	movi	r5,10
 4006058:	1009883a 	mov	r4,r2
 400605c:	400dcd40 	call	400dcd4 <__mulsi3>
 4006060:	1445883a 	add	r2,r2,r17
 4006064:	1085883a 	add	r2,r2,r2
 4006068:	1085883a 	add	r2,r2,r2
 400606c:	8085883a 	add	r2,r16,r2
 4006070:	10800017 	ldw	r2,0(r2)
 4006074:	1001e41e 	bne	r2,zero,4006808 <rotateRight+0xf1c>
 4006078:	e0bffd17 	ldw	r2,-12(fp)
 400607c:	10800044 	addi	r2,r2,1
 4006080:	040100b4 	movhi	r16,1026
 4006084:	84080004 	addi	r16,r16,8192
 4006088:	01400284 	movi	r5,10
 400608c:	1009883a 	mov	r4,r2
 4006090:	400dcd40 	call	400dcd4 <__mulsi3>
 4006094:	1007883a 	mov	r3,r2
 4006098:	e0bffc17 	ldw	r2,-16(fp)
 400609c:	1885883a 	add	r2,r3,r2
 40060a0:	1085883a 	add	r2,r2,r2
 40060a4:	1085883a 	add	r2,r2,r2
 40060a8:	8085883a 	add	r2,r16,r2
 40060ac:	10800017 	ldw	r2,0(r2)
 40060b0:	1001d51e 	bne	r2,zero,4006808 <rotateRight+0xf1c>
 40060b4:	e0bffd17 	ldw	r2,-12(fp)
 40060b8:	10c00044 	addi	r3,r2,1
 40060bc:	e0bffc17 	ldw	r2,-16(fp)
 40060c0:	14400084 	addi	r17,r2,2
 40060c4:	040100b4 	movhi	r16,1026
 40060c8:	84080004 	addi	r16,r16,8192
 40060cc:	01400284 	movi	r5,10
 40060d0:	1809883a 	mov	r4,r3
 40060d4:	400dcd40 	call	400dcd4 <__mulsi3>
 40060d8:	1445883a 	add	r2,r2,r17
 40060dc:	1085883a 	add	r2,r2,r2
 40060e0:	1085883a 	add	r2,r2,r2
 40060e4:	8085883a 	add	r2,r16,r2
 40060e8:	10800017 	ldw	r2,0(r2)
 40060ec:	1001c61e 	bne	r2,zero,4006808 <rotateRight+0xf1c>
				newState = 10;
 40060f0:	00800284 	movi	r2,10
 40060f4:	e0bffa15 	stw	r2,-24(fp)
				draw9(X, Y, 0);
 40060f8:	000d883a 	mov	r6,zero
 40060fc:	e17ffd17 	ldw	r5,-12(fp)
 4006100:	e13ffc17 	ldw	r4,-16(fp)
 4006104:	4006f380 	call	4006f38 <draw9>
				draw10(X, Y, -3);
 4006108:	01bfff44 	movi	r6,-3
 400610c:	e17ffd17 	ldw	r5,-12(fp)
 4006110:	e13ffc17 	ldw	r4,-16(fp)
 4006114:	40070140 	call	4007014 <draw10>
			}
		}
		break;
 4006118:	0001bb06 	br	4006808 <rotateRight+0xf1c>
	case 10:
		if(X >= 0 && X < 8){
 400611c:	e0bffc17 	ldw	r2,-16(fp)
 4006120:	1001bb16 	blt	r2,zero,4006810 <rotateRight+0xf24>
 4006124:	e0bffc17 	ldw	r2,-16(fp)
 4006128:	10800208 	cmpgei	r2,r2,8
 400612c:	1001b81e 	bne	r2,zero,4006810 <rotateRight+0xf24>
			if(gameBoard[Y][X + 1] == 0 && gameBoard[Y + 2][X + 1] == 0 && gameBoard[Y + 2][X + 2] == 0){
 4006130:	e0bffc17 	ldw	r2,-16(fp)
 4006134:	14400044 	addi	r17,r2,1
 4006138:	040100b4 	movhi	r16,1026
 400613c:	84080004 	addi	r16,r16,8192
 4006140:	e0bffd17 	ldw	r2,-12(fp)
 4006144:	01400284 	movi	r5,10
 4006148:	1009883a 	mov	r4,r2
 400614c:	400dcd40 	call	400dcd4 <__mulsi3>
 4006150:	1445883a 	add	r2,r2,r17
 4006154:	1085883a 	add	r2,r2,r2
 4006158:	1085883a 	add	r2,r2,r2
 400615c:	8085883a 	add	r2,r16,r2
 4006160:	10800017 	ldw	r2,0(r2)
 4006164:	1001aa1e 	bne	r2,zero,4006810 <rotateRight+0xf24>
 4006168:	e0bffd17 	ldw	r2,-12(fp)
 400616c:	10c00084 	addi	r3,r2,2
 4006170:	e0bffc17 	ldw	r2,-16(fp)
 4006174:	14400044 	addi	r17,r2,1
 4006178:	040100b4 	movhi	r16,1026
 400617c:	84080004 	addi	r16,r16,8192
 4006180:	01400284 	movi	r5,10
 4006184:	1809883a 	mov	r4,r3
 4006188:	400dcd40 	call	400dcd4 <__mulsi3>
 400618c:	1445883a 	add	r2,r2,r17
 4006190:	1085883a 	add	r2,r2,r2
 4006194:	1085883a 	add	r2,r2,r2
 4006198:	8085883a 	add	r2,r16,r2
 400619c:	10800017 	ldw	r2,0(r2)
 40061a0:	10019b1e 	bne	r2,zero,4006810 <rotateRight+0xf24>
 40061a4:	e0bffd17 	ldw	r2,-12(fp)
 40061a8:	10c00084 	addi	r3,r2,2
 40061ac:	e0bffc17 	ldw	r2,-16(fp)
 40061b0:	14400084 	addi	r17,r2,2
 40061b4:	040100b4 	movhi	r16,1026
 40061b8:	84080004 	addi	r16,r16,8192
 40061bc:	01400284 	movi	r5,10
 40061c0:	1809883a 	mov	r4,r3
 40061c4:	400dcd40 	call	400dcd4 <__mulsi3>
 40061c8:	1445883a 	add	r2,r2,r17
 40061cc:	1085883a 	add	r2,r2,r2
 40061d0:	1085883a 	add	r2,r2,r2
 40061d4:	8085883a 	add	r2,r16,r2
 40061d8:	10800017 	ldw	r2,0(r2)
 40061dc:	10018c1e 	bne	r2,zero,4006810 <rotateRight+0xf24>
				newState = 11;
 40061e0:	008002c4 	movi	r2,11
 40061e4:	e0bffa15 	stw	r2,-24(fp)
				draw10(X, Y, 0);
 40061e8:	000d883a 	mov	r6,zero
 40061ec:	e17ffd17 	ldw	r5,-12(fp)
 40061f0:	e13ffc17 	ldw	r4,-16(fp)
 40061f4:	40070140 	call	4007014 <draw10>
				draw11(X, Y, -3);
 40061f8:	01bfff44 	movi	r6,-3
 40061fc:	e17ffd17 	ldw	r5,-12(fp)
 4006200:	e13ffc17 	ldw	r4,-16(fp)
 4006204:	40070ec0 	call	40070ec <draw11>
			}
		}
		break;
 4006208:	00018106 	br	4006810 <rotateRight+0xf24>
	case 11:
		if(X >= 0 && X < 8){
 400620c:	e0bffc17 	ldw	r2,-16(fp)
 4006210:	10018116 	blt	r2,zero,4006818 <rotateRight+0xf2c>
 4006214:	e0bffc17 	ldw	r2,-16(fp)
 4006218:	10800208 	cmpgei	r2,r2,8
 400621c:	10017e1e 	bne	r2,zero,4006818 <rotateRight+0xf2c>
			if(gameBoard[Y + 1][X] == 0 && gameBoard[Y + 1][X + 2] == 0 && gameBoard[Y + 2][X] == 0){
 4006220:	e0bffd17 	ldw	r2,-12(fp)
 4006224:	10800044 	addi	r2,r2,1
 4006228:	040100b4 	movhi	r16,1026
 400622c:	84080004 	addi	r16,r16,8192
 4006230:	01400284 	movi	r5,10
 4006234:	1009883a 	mov	r4,r2
 4006238:	400dcd40 	call	400dcd4 <__mulsi3>
 400623c:	1007883a 	mov	r3,r2
 4006240:	e0bffc17 	ldw	r2,-16(fp)
 4006244:	1885883a 	add	r2,r3,r2
 4006248:	1085883a 	add	r2,r2,r2
 400624c:	1085883a 	add	r2,r2,r2
 4006250:	8085883a 	add	r2,r16,r2
 4006254:	10800017 	ldw	r2,0(r2)
 4006258:	10016f1e 	bne	r2,zero,4006818 <rotateRight+0xf2c>
 400625c:	e0bffd17 	ldw	r2,-12(fp)
 4006260:	10c00044 	addi	r3,r2,1
 4006264:	e0bffc17 	ldw	r2,-16(fp)
 4006268:	14400084 	addi	r17,r2,2
 400626c:	040100b4 	movhi	r16,1026
 4006270:	84080004 	addi	r16,r16,8192
 4006274:	01400284 	movi	r5,10
 4006278:	1809883a 	mov	r4,r3
 400627c:	400dcd40 	call	400dcd4 <__mulsi3>
 4006280:	1445883a 	add	r2,r2,r17
 4006284:	1085883a 	add	r2,r2,r2
 4006288:	1085883a 	add	r2,r2,r2
 400628c:	8085883a 	add	r2,r16,r2
 4006290:	10800017 	ldw	r2,0(r2)
 4006294:	1001601e 	bne	r2,zero,4006818 <rotateRight+0xf2c>
 4006298:	e0bffd17 	ldw	r2,-12(fp)
 400629c:	10800084 	addi	r2,r2,2
 40062a0:	040100b4 	movhi	r16,1026
 40062a4:	84080004 	addi	r16,r16,8192
 40062a8:	01400284 	movi	r5,10
 40062ac:	1009883a 	mov	r4,r2
 40062b0:	400dcd40 	call	400dcd4 <__mulsi3>
 40062b4:	1007883a 	mov	r3,r2
 40062b8:	e0bffc17 	ldw	r2,-16(fp)
 40062bc:	1885883a 	add	r2,r3,r2
 40062c0:	1085883a 	add	r2,r2,r2
 40062c4:	1085883a 	add	r2,r2,r2
 40062c8:	8085883a 	add	r2,r16,r2
 40062cc:	10800017 	ldw	r2,0(r2)
 40062d0:	1001511e 	bne	r2,zero,4006818 <rotateRight+0xf2c>
				newState = 8;
 40062d4:	00800204 	movi	r2,8
 40062d8:	e0bffa15 	stw	r2,-24(fp)
				draw11(X, Y, 0);
 40062dc:	000d883a 	mov	r6,zero
 40062e0:	e17ffd17 	ldw	r5,-12(fp)
 40062e4:	e13ffc17 	ldw	r4,-16(fp)
 40062e8:	40070ec0 	call	40070ec <draw11>
				draw8(X, Y, -3);
 40062ec:	01bfff44 	movi	r6,-3
 40062f0:	e17ffd17 	ldw	r5,-12(fp)
 40062f4:	e13ffc17 	ldw	r4,-16(fp)
 40062f8:	4006e5c0 	call	4006e5c <draw8>
			}
		}
		break;
 40062fc:	00014606 	br	4006818 <rotateRight+0xf2c>
	case 12:
		if(X >= 0 && X < 8){
 4006300:	e0bffc17 	ldw	r2,-16(fp)
 4006304:	10014616 	blt	r2,zero,4006820 <rotateRight+0xf34>
 4006308:	e0bffc17 	ldw	r2,-16(fp)
 400630c:	10800208 	cmpgei	r2,r2,8
 4006310:	1001431e 	bne	r2,zero,4006820 <rotateRight+0xf34>
			if(gameBoard[Y][X + 1] == 0 && gameBoard[Y + 2][X + 2] == 0){
 4006314:	e0bffc17 	ldw	r2,-16(fp)
 4006318:	14400044 	addi	r17,r2,1
 400631c:	040100b4 	movhi	r16,1026
 4006320:	84080004 	addi	r16,r16,8192
 4006324:	e0bffd17 	ldw	r2,-12(fp)
 4006328:	01400284 	movi	r5,10
 400632c:	1009883a 	mov	r4,r2
 4006330:	400dcd40 	call	400dcd4 <__mulsi3>
 4006334:	1445883a 	add	r2,r2,r17
 4006338:	1085883a 	add	r2,r2,r2
 400633c:	1085883a 	add	r2,r2,r2
 4006340:	8085883a 	add	r2,r16,r2
 4006344:	10800017 	ldw	r2,0(r2)
 4006348:	1001351e 	bne	r2,zero,4006820 <rotateRight+0xf34>
 400634c:	e0bffd17 	ldw	r2,-12(fp)
 4006350:	10c00084 	addi	r3,r2,2
 4006354:	e0bffc17 	ldw	r2,-16(fp)
 4006358:	14400084 	addi	r17,r2,2
 400635c:	040100b4 	movhi	r16,1026
 4006360:	84080004 	addi	r16,r16,8192
 4006364:	01400284 	movi	r5,10
 4006368:	1809883a 	mov	r4,r3
 400636c:	400dcd40 	call	400dcd4 <__mulsi3>
 4006370:	1445883a 	add	r2,r2,r17
 4006374:	1085883a 	add	r2,r2,r2
 4006378:	1085883a 	add	r2,r2,r2
 400637c:	8085883a 	add	r2,r16,r2
 4006380:	10800017 	ldw	r2,0(r2)
 4006384:	1001261e 	bne	r2,zero,4006820 <rotateRight+0xf34>
				newState = 13;
 4006388:	00800344 	movi	r2,13
 400638c:	e0bffa15 	stw	r2,-24(fp)
				draw12(X, Y, 0);
 4006390:	000d883a 	mov	r6,zero
 4006394:	e17ffd17 	ldw	r5,-12(fp)
 4006398:	e13ffc17 	ldw	r4,-16(fp)
 400639c:	40071cc0 	call	40071cc <draw12>
				draw13(X, Y, -5);
 40063a0:	01bffec4 	movi	r6,-5
 40063a4:	e17ffd17 	ldw	r5,-12(fp)
 40063a8:	e13ffc17 	ldw	r4,-16(fp)
 40063ac:	40073000 	call	4007300 <draw13>
			}
		}
		break;
 40063b0:	00011b06 	br	4006820 <rotateRight+0xf34>
	case 13:
		if(X >= 0 && X < 8){
 40063b4:	e0bffc17 	ldw	r2,-16(fp)
 40063b8:	10011b16 	blt	r2,zero,4006828 <rotateRight+0xf3c>
 40063bc:	e0bffc17 	ldw	r2,-16(fp)
 40063c0:	10800208 	cmpgei	r2,r2,8
 40063c4:	1001181e 	bne	r2,zero,4006828 <rotateRight+0xf3c>
			if(gameBoard[Y + 2][X] == 0 && gameBoard[Y + 2][X + 1] == 0){
 40063c8:	e0bffd17 	ldw	r2,-12(fp)
 40063cc:	10800084 	addi	r2,r2,2
 40063d0:	040100b4 	movhi	r16,1026
 40063d4:	84080004 	addi	r16,r16,8192
 40063d8:	01400284 	movi	r5,10
 40063dc:	1009883a 	mov	r4,r2
 40063e0:	400dcd40 	call	400dcd4 <__mulsi3>
 40063e4:	1007883a 	mov	r3,r2
 40063e8:	e0bffc17 	ldw	r2,-16(fp)
 40063ec:	1885883a 	add	r2,r3,r2
 40063f0:	1085883a 	add	r2,r2,r2
 40063f4:	1085883a 	add	r2,r2,r2
 40063f8:	8085883a 	add	r2,r16,r2
 40063fc:	10800017 	ldw	r2,0(r2)
 4006400:	1001091e 	bne	r2,zero,4006828 <rotateRight+0xf3c>
 4006404:	e0bffd17 	ldw	r2,-12(fp)
 4006408:	10c00084 	addi	r3,r2,2
 400640c:	e0bffc17 	ldw	r2,-16(fp)
 4006410:	14400044 	addi	r17,r2,1
 4006414:	040100b4 	movhi	r16,1026
 4006418:	84080004 	addi	r16,r16,8192
 400641c:	01400284 	movi	r5,10
 4006420:	1809883a 	mov	r4,r3
 4006424:	400dcd40 	call	400dcd4 <__mulsi3>
 4006428:	1445883a 	add	r2,r2,r17
 400642c:	1085883a 	add	r2,r2,r2
 4006430:	1085883a 	add	r2,r2,r2
 4006434:	8085883a 	add	r2,r16,r2
 4006438:	10800017 	ldw	r2,0(r2)
 400643c:	1000fa1e 	bne	r2,zero,4006828 <rotateRight+0xf3c>
				newState = 12;
 4006440:	00800304 	movi	r2,12
 4006444:	e0bffa15 	stw	r2,-24(fp)
				draw13(X, Y, 0);
 4006448:	000d883a 	mov	r6,zero
 400644c:	e17ffd17 	ldw	r5,-12(fp)
 4006450:	e13ffc17 	ldw	r4,-16(fp)
 4006454:	40073000 	call	4007300 <draw13>
				draw12(X, Y, -5);
 4006458:	01bffec4 	movi	r6,-5
 400645c:	e17ffd17 	ldw	r5,-12(fp)
 4006460:	e13ffc17 	ldw	r4,-16(fp)
 4006464:	40071cc0 	call	40071cc <draw12>
			}
		}
		break;
 4006468:	0000ef06 	br	4006828 <rotateRight+0xf3c>
	case 14:
		if(X >= 0 && X < 8){
 400646c:	e0bffc17 	ldw	r2,-16(fp)
 4006470:	1000ef16 	blt	r2,zero,4006830 <rotateRight+0xf44>
 4006474:	e0bffc17 	ldw	r2,-16(fp)
 4006478:	10800208 	cmpgei	r2,r2,8
 400647c:	1000ec1e 	bne	r2,zero,4006830 <rotateRight+0xf44>
			if(gameBoard[Y][X + 1] == 0){
 4006480:	e0bffc17 	ldw	r2,-16(fp)
 4006484:	14400044 	addi	r17,r2,1
 4006488:	040100b4 	movhi	r16,1026
 400648c:	84080004 	addi	r16,r16,8192
 4006490:	e0bffd17 	ldw	r2,-12(fp)
 4006494:	01400284 	movi	r5,10
 4006498:	1009883a 	mov	r4,r2
 400649c:	400dcd40 	call	400dcd4 <__mulsi3>
 40064a0:	1445883a 	add	r2,r2,r17
 40064a4:	1085883a 	add	r2,r2,r2
 40064a8:	1085883a 	add	r2,r2,r2
 40064ac:	8085883a 	add	r2,r16,r2
 40064b0:	10800017 	ldw	r2,0(r2)
 40064b4:	1000de1e 	bne	r2,zero,4006830 <rotateRight+0xf44>
				newState = 15;
 40064b8:	008003c4 	movi	r2,15
 40064bc:	e0bffa15 	stw	r2,-24(fp)
				draw14(X, Y, 0);
 40064c0:	000d883a 	mov	r6,zero
 40064c4:	e17ffd17 	ldw	r5,-12(fp)
 40064c8:	e13ffc17 	ldw	r4,-16(fp)
 40064cc:	40074300 	call	4007430 <draw14>
				draw15(X, Y, -6);
 40064d0:	01bffe84 	movi	r6,-6
 40064d4:	e17ffd17 	ldw	r5,-12(fp)
 40064d8:	e13ffc17 	ldw	r4,-16(fp)
 40064dc:	400750c0 	call	400750c <draw15>
			}
		}
		break;
 40064e0:	0000d306 	br	4006830 <rotateRight+0xf44>
	case 15:
		if(X >= 0 && X < 8){
 40064e4:	e0bffc17 	ldw	r2,-16(fp)
 40064e8:	1000d316 	blt	r2,zero,4006838 <rotateRight+0xf4c>
 40064ec:	e0bffc17 	ldw	r2,-16(fp)
 40064f0:	10800208 	cmpgei	r2,r2,8
 40064f4:	1000d01e 	bne	r2,zero,4006838 <rotateRight+0xf4c>
			if(gameBoard[Y + 1][X + 2] == 0){
 40064f8:	e0bffd17 	ldw	r2,-12(fp)
 40064fc:	10c00044 	addi	r3,r2,1
 4006500:	e0bffc17 	ldw	r2,-16(fp)
 4006504:	14400084 	addi	r17,r2,2
 4006508:	040100b4 	movhi	r16,1026
 400650c:	84080004 	addi	r16,r16,8192
 4006510:	01400284 	movi	r5,10
 4006514:	1809883a 	mov	r4,r3
 4006518:	400dcd40 	call	400dcd4 <__mulsi3>
 400651c:	1445883a 	add	r2,r2,r17
 4006520:	1085883a 	add	r2,r2,r2
 4006524:	1085883a 	add	r2,r2,r2
 4006528:	8085883a 	add	r2,r16,r2
 400652c:	10800017 	ldw	r2,0(r2)
 4006530:	1000c11e 	bne	r2,zero,4006838 <rotateRight+0xf4c>
				newState = 16;
 4006534:	00800404 	movi	r2,16
 4006538:	e0bffa15 	stw	r2,-24(fp)
				draw15(X, Y, 0);
 400653c:	000d883a 	mov	r6,zero
 4006540:	e17ffd17 	ldw	r5,-12(fp)
 4006544:	e13ffc17 	ldw	r4,-16(fp)
 4006548:	400750c0 	call	400750c <draw15>
				draw16(X, Y, -6);
 400654c:	01bffe84 	movi	r6,-6
 4006550:	e17ffd17 	ldw	r5,-12(fp)
 4006554:	e13ffc17 	ldw	r4,-16(fp)
 4006558:	40075ec0 	call	40075ec <draw16>
			}
		}
		break;
 400655c:	0000b606 	br	4006838 <rotateRight+0xf4c>
	case 16:
		if(X >= 0 && X < 8){
 4006560:	e0bffc17 	ldw	r2,-16(fp)
 4006564:	1000b616 	blt	r2,zero,4006840 <rotateRight+0xf54>
 4006568:	e0bffc17 	ldw	r2,-16(fp)
 400656c:	10800208 	cmpgei	r2,r2,8
 4006570:	1000b31e 	bne	r2,zero,4006840 <rotateRight+0xf54>
			if(gameBoard[Y + 2][X + 1] == 0){
 4006574:	e0bffd17 	ldw	r2,-12(fp)
 4006578:	10c00084 	addi	r3,r2,2
 400657c:	e0bffc17 	ldw	r2,-16(fp)
 4006580:	14400044 	addi	r17,r2,1
 4006584:	040100b4 	movhi	r16,1026
 4006588:	84080004 	addi	r16,r16,8192
 400658c:	01400284 	movi	r5,10
 4006590:	1809883a 	mov	r4,r3
 4006594:	400dcd40 	call	400dcd4 <__mulsi3>
 4006598:	1445883a 	add	r2,r2,r17
 400659c:	1085883a 	add	r2,r2,r2
 40065a0:	1085883a 	add	r2,r2,r2
 40065a4:	8085883a 	add	r2,r16,r2
 40065a8:	10800017 	ldw	r2,0(r2)
 40065ac:	1000a41e 	bne	r2,zero,4006840 <rotateRight+0xf54>
				newState = 17;
 40065b0:	00800444 	movi	r2,17
 40065b4:	e0bffa15 	stw	r2,-24(fp)
				draw16(X, Y, 0);
 40065b8:	000d883a 	mov	r6,zero
 40065bc:	e17ffd17 	ldw	r5,-12(fp)
 40065c0:	e13ffc17 	ldw	r4,-16(fp)
 40065c4:	40075ec0 	call	40075ec <draw16>
				draw17(X, Y, -6);
 40065c8:	01bffe84 	movi	r6,-6
 40065cc:	e17ffd17 	ldw	r5,-12(fp)
 40065d0:	e13ffc17 	ldw	r4,-16(fp)
 40065d4:	40076c40 	call	40076c4 <draw17>
			}
		}
		break;
 40065d8:	00009906 	br	4006840 <rotateRight+0xf54>
	case 17:
		if(X >= 0 && X < 8){
 40065dc:	e0bffc17 	ldw	r2,-16(fp)
 40065e0:	10009916 	blt	r2,zero,4006848 <rotateRight+0xf5c>
 40065e4:	e0bffc17 	ldw	r2,-16(fp)
 40065e8:	10800208 	cmpgei	r2,r2,8
 40065ec:	1000961e 	bne	r2,zero,4006848 <rotateRight+0xf5c>
			if(gameBoard[Y + 1][X] == 0){
 40065f0:	e0bffd17 	ldw	r2,-12(fp)
 40065f4:	10800044 	addi	r2,r2,1
 40065f8:	040100b4 	movhi	r16,1026
 40065fc:	84080004 	addi	r16,r16,8192
 4006600:	01400284 	movi	r5,10
 4006604:	1009883a 	mov	r4,r2
 4006608:	400dcd40 	call	400dcd4 <__mulsi3>
 400660c:	1007883a 	mov	r3,r2
 4006610:	e0bffc17 	ldw	r2,-16(fp)
 4006614:	1885883a 	add	r2,r3,r2
 4006618:	1085883a 	add	r2,r2,r2
 400661c:	1085883a 	add	r2,r2,r2
 4006620:	8085883a 	add	r2,r16,r2
 4006624:	10800017 	ldw	r2,0(r2)
 4006628:	1000871e 	bne	r2,zero,4006848 <rotateRight+0xf5c>
				newState = 14;
 400662c:	00800384 	movi	r2,14
 4006630:	e0bffa15 	stw	r2,-24(fp)
				draw17(X, Y, 0);
 4006634:	000d883a 	mov	r6,zero
 4006638:	e17ffd17 	ldw	r5,-12(fp)
 400663c:	e13ffc17 	ldw	r4,-16(fp)
 4006640:	40076c40 	call	40076c4 <draw17>
				draw14(X, Y, -6);
 4006644:	01bffe84 	movi	r6,-6
 4006648:	e17ffd17 	ldw	r5,-12(fp)
 400664c:	e13ffc17 	ldw	r4,-16(fp)
 4006650:	40074300 	call	4007430 <draw14>
			}
		}
		break;
 4006654:	00007c06 	br	4006848 <rotateRight+0xf5c>
	case 18:
		if(X >= 0 && X < 8){
 4006658:	e0bffc17 	ldw	r2,-16(fp)
 400665c:	10007c16 	blt	r2,zero,4006850 <rotateRight+0xf64>
 4006660:	e0bffc17 	ldw	r2,-16(fp)
 4006664:	10800208 	cmpgei	r2,r2,8
 4006668:	1000791e 	bne	r2,zero,4006850 <rotateRight+0xf64>
			if(gameBoard[Y][X + 2] == 0 && gameBoard[Y + 1][Y + 2] == 0){
 400666c:	e0bffc17 	ldw	r2,-16(fp)
 4006670:	14400084 	addi	r17,r2,2
 4006674:	040100b4 	movhi	r16,1026
 4006678:	84080004 	addi	r16,r16,8192
 400667c:	e0bffd17 	ldw	r2,-12(fp)
 4006680:	01400284 	movi	r5,10
 4006684:	1009883a 	mov	r4,r2
 4006688:	400dcd40 	call	400dcd4 <__mulsi3>
 400668c:	1445883a 	add	r2,r2,r17
 4006690:	1085883a 	add	r2,r2,r2
 4006694:	1085883a 	add	r2,r2,r2
 4006698:	8085883a 	add	r2,r16,r2
 400669c:	10800017 	ldw	r2,0(r2)
 40066a0:	10006b1e 	bne	r2,zero,4006850 <rotateRight+0xf64>
 40066a4:	e0bffd17 	ldw	r2,-12(fp)
 40066a8:	10c00044 	addi	r3,r2,1
 40066ac:	e0bffd17 	ldw	r2,-12(fp)
 40066b0:	14400084 	addi	r17,r2,2
 40066b4:	040100b4 	movhi	r16,1026
 40066b8:	84080004 	addi	r16,r16,8192
 40066bc:	01400284 	movi	r5,10
 40066c0:	1809883a 	mov	r4,r3
 40066c4:	400dcd40 	call	400dcd4 <__mulsi3>
 40066c8:	1445883a 	add	r2,r2,r17
 40066cc:	1085883a 	add	r2,r2,r2
 40066d0:	1085883a 	add	r2,r2,r2
 40066d4:	8085883a 	add	r2,r16,r2
 40066d8:	10800017 	ldw	r2,0(r2)
 40066dc:	10005c1e 	bne	r2,zero,4006850 <rotateRight+0xf64>
				newState = 19;
 40066e0:	008004c4 	movi	r2,19
 40066e4:	e0bffa15 	stw	r2,-24(fp)
				draw18(X, Y, 0);
 40066e8:	000d883a 	mov	r6,zero
 40066ec:	e17ffd17 	ldw	r5,-12(fp)
 40066f0:	e13ffc17 	ldw	r4,-16(fp)
 40066f4:	40077a40 	call	40077a4 <draw18>
				draw19(X, Y, -7);
 40066f8:	01bffe44 	movi	r6,-7
 40066fc:	e17ffd17 	ldw	r5,-12(fp)
 4006700:	e13ffc17 	ldw	r4,-16(fp)
 4006704:	40078d80 	call	40078d8 <draw19>
			}
		}
		break;
 4006708:	00005106 	br	4006850 <rotateRight+0xf64>
	case 19:
		if(X >= 0 && X < 8){
 400670c:	e0bffc17 	ldw	r2,-16(fp)
 4006710:	10005116 	blt	r2,zero,4006858 <rotateRight+0xf6c>
 4006714:	e0bffc17 	ldw	r2,-16(fp)
 4006718:	10800208 	cmpgei	r2,r2,8
 400671c:	10004e1e 	bne	r2,zero,4006858 <rotateRight+0xf6c>
			if(gameBoard[Y + 1][X] == 0 && gameBoard[Y + 2][X + 2] == 0){
 4006720:	e0bffd17 	ldw	r2,-12(fp)
 4006724:	10800044 	addi	r2,r2,1
 4006728:	040100b4 	movhi	r16,1026
 400672c:	84080004 	addi	r16,r16,8192
 4006730:	01400284 	movi	r5,10
 4006734:	1009883a 	mov	r4,r2
 4006738:	400dcd40 	call	400dcd4 <__mulsi3>
 400673c:	1007883a 	mov	r3,r2
 4006740:	e0bffc17 	ldw	r2,-16(fp)
 4006744:	1885883a 	add	r2,r3,r2
 4006748:	1085883a 	add	r2,r2,r2
 400674c:	1085883a 	add	r2,r2,r2
 4006750:	8085883a 	add	r2,r16,r2
 4006754:	10800017 	ldw	r2,0(r2)
 4006758:	10003f1e 	bne	r2,zero,4006858 <rotateRight+0xf6c>
 400675c:	e0bffd17 	ldw	r2,-12(fp)
 4006760:	10c00084 	addi	r3,r2,2
 4006764:	e0bffc17 	ldw	r2,-16(fp)
 4006768:	14400084 	addi	r17,r2,2
 400676c:	040100b4 	movhi	r16,1026
 4006770:	84080004 	addi	r16,r16,8192
 4006774:	01400284 	movi	r5,10
 4006778:	1809883a 	mov	r4,r3
 400677c:	400dcd40 	call	400dcd4 <__mulsi3>
 4006780:	1445883a 	add	r2,r2,r17
 4006784:	1085883a 	add	r2,r2,r2
 4006788:	1085883a 	add	r2,r2,r2
 400678c:	8085883a 	add	r2,r16,r2
 4006790:	10800017 	ldw	r2,0(r2)
 4006794:	1000301e 	bne	r2,zero,4006858 <rotateRight+0xf6c>
				newState = 18;
 4006798:	00800484 	movi	r2,18
 400679c:	e0bffa15 	stw	r2,-24(fp)
				draw19(X, Y, 0);
 40067a0:	000d883a 	mov	r6,zero
 40067a4:	e17ffd17 	ldw	r5,-12(fp)
 40067a8:	e13ffc17 	ldw	r4,-16(fp)
 40067ac:	40078d80 	call	40078d8 <draw19>
				draw18(X, Y, -7);
 40067b0:	01bffe44 	movi	r6,-7
 40067b4:	e17ffd17 	ldw	r5,-12(fp)
 40067b8:	e13ffc17 	ldw	r4,-16(fp)
 40067bc:	40077a40 	call	40077a4 <draw18>
			}
		}
		break;
 40067c0:	00002506 	br	4006858 <rotateRight+0xf6c>
	default:
		newState = blockState;
 40067c4:	e0bffb17 	ldw	r2,-20(fp)
 40067c8:	e0bffa15 	stw	r2,-24(fp)
		break;
 40067cc:	00002306 	br	400685c <rotateRight+0xf70>
				newState = 2;
				draw1(X, Y, 0);
				draw2(X, Y, -1);
			}
		}
		break;
 40067d0:	0001883a 	nop
 40067d4:	00002106 	br	400685c <rotateRight+0xf70>
				newState = 1;
				draw2(X, Y, 0);
				draw1(X, Y, -1);
			}
		}
		break;
 40067d8:	0001883a 	nop
 40067dc:	00001f06 	br	400685c <rotateRight+0xf70>
				newState = 5;
				draw4(X, Y, 0);
				draw5(X, Y, -2);
			}
		}
		break;
 40067e0:	0001883a 	nop
 40067e4:	00001d06 	br	400685c <rotateRight+0xf70>
				newState = 6;
				draw5(X, Y, 0);
				draw6(X, Y, -2);
			}
		}
		break;
 40067e8:	0001883a 	nop
 40067ec:	00001b06 	br	400685c <rotateRight+0xf70>
				newState = 7;
				draw6(X, Y, 0);
				draw7(X, Y, -2);
			}
		}
		break;
 40067f0:	0001883a 	nop
 40067f4:	00001906 	br	400685c <rotateRight+0xf70>
				newState = 4;
				draw7(X, Y, 0);
				draw4(X, Y, -2);
			}
		}
		break;
 40067f8:	0001883a 	nop
 40067fc:	00001706 	br	400685c <rotateRight+0xf70>
				newState = 9;
				draw8(X, Y, 0);
				draw9(X, Y, -3);
			}
		}
		break;
 4006800:	0001883a 	nop
 4006804:	00001506 	br	400685c <rotateRight+0xf70>
				newState = 10;
				draw9(X, Y, 0);
				draw10(X, Y, -3);
			}
		}
		break;
 4006808:	0001883a 	nop
 400680c:	00001306 	br	400685c <rotateRight+0xf70>
				newState = 11;
				draw10(X, Y, 0);
				draw11(X, Y, -3);
			}
		}
		break;
 4006810:	0001883a 	nop
 4006814:	00001106 	br	400685c <rotateRight+0xf70>
				newState = 8;
				draw11(X, Y, 0);
				draw8(X, Y, -3);
			}
		}
		break;
 4006818:	0001883a 	nop
 400681c:	00000f06 	br	400685c <rotateRight+0xf70>
				newState = 13;
				draw12(X, Y, 0);
				draw13(X, Y, -5);
			}
		}
		break;
 4006820:	0001883a 	nop
 4006824:	00000d06 	br	400685c <rotateRight+0xf70>
				newState = 12;
				draw13(X, Y, 0);
				draw12(X, Y, -5);
			}
		}
		break;
 4006828:	0001883a 	nop
 400682c:	00000b06 	br	400685c <rotateRight+0xf70>
				newState = 15;
				draw14(X, Y, 0);
				draw15(X, Y, -6);
			}
		}
		break;
 4006830:	0001883a 	nop
 4006834:	00000906 	br	400685c <rotateRight+0xf70>
				newState = 16;
				draw15(X, Y, 0);
				draw16(X, Y, -6);
			}
		}
		break;
 4006838:	0001883a 	nop
 400683c:	00000706 	br	400685c <rotateRight+0xf70>
				newState = 17;
				draw16(X, Y, 0);
				draw17(X, Y, -6);
			}
		}
		break;
 4006840:	0001883a 	nop
 4006844:	00000506 	br	400685c <rotateRight+0xf70>
				newState = 14;
				draw17(X, Y, 0);
				draw14(X, Y, -6);
			}
		}
		break;
 4006848:	0001883a 	nop
 400684c:	00000306 	br	400685c <rotateRight+0xf70>
				newState = 19;
				draw18(X, Y, 0);
				draw19(X, Y, -7);
			}
		}
		break;
 4006850:	0001883a 	nop
 4006854:	00000106 	br	400685c <rotateRight+0xf70>
				newState = 18;
				draw19(X, Y, 0);
				draw18(X, Y, -7);
			}
		}
		break;
 4006858:	0001883a 	nop
	default:
		newState = blockState;
		break;
	}
	return newState;
 400685c:	e0bffa17 	ldw	r2,-24(fp)
}
 4006860:	e6fffe04 	addi	sp,fp,-8
 4006864:	dfc00317 	ldw	ra,12(sp)
 4006868:	df000217 	ldw	fp,8(sp)
 400686c:	dc400117 	ldw	r17,4(sp)
 4006870:	dc000017 	ldw	r16,0(sp)
 4006874:	dec00404 	addi	sp,sp,16
 4006878:	f800283a 	ret

0400687c <draw1>:

void draw1(int X, int Y, int val) {
 400687c:	defff804 	addi	sp,sp,-32
 4006880:	dfc00715 	stw	ra,28(sp)
 4006884:	df000615 	stw	fp,24(sp)
 4006888:	dc400515 	stw	r17,20(sp)
 400688c:	dc000415 	stw	r16,16(sp)
 4006890:	df000604 	addi	fp,sp,24
 4006894:	e13ffb15 	stw	r4,-20(fp)
 4006898:	e17ffc15 	stw	r5,-16(fp)
 400689c:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 4; i++){
 40068a0:	e03ffa15 	stw	zero,-24(fp)
 40068a4:	00001206 	br	40068f0 <draw1+0x74>
		gameBoard[Y + 2][X + i] = val;
 40068a8:	e0bffc17 	ldw	r2,-16(fp)
 40068ac:	11000084 	addi	r4,r2,2
 40068b0:	e0fffb17 	ldw	r3,-20(fp)
 40068b4:	e0bffa17 	ldw	r2,-24(fp)
 40068b8:	18a3883a 	add	r17,r3,r2
 40068bc:	040100b4 	movhi	r16,1026
 40068c0:	84080004 	addi	r16,r16,8192
 40068c4:	01400284 	movi	r5,10
 40068c8:	400dcd40 	call	400dcd4 <__mulsi3>
 40068cc:	1445883a 	add	r2,r2,r17
 40068d0:	1085883a 	add	r2,r2,r2
 40068d4:	1085883a 	add	r2,r2,r2
 40068d8:	8085883a 	add	r2,r16,r2
 40068dc:	e0fffd17 	ldw	r3,-12(fp)
 40068e0:	10c00015 	stw	r3,0(r2)
	}
	return newState;
}

void draw1(int X, int Y, int val) {
	for(int i = 0; i < 4; i++){
 40068e4:	e0bffa17 	ldw	r2,-24(fp)
 40068e8:	10800044 	addi	r2,r2,1
 40068ec:	e0bffa15 	stw	r2,-24(fp)
 40068f0:	e0bffa17 	ldw	r2,-24(fp)
 40068f4:	10800110 	cmplti	r2,r2,4
 40068f8:	103feb1e 	bne	r2,zero,40068a8 <__alt_mem_onchip_memory2_0+0xfc0016e8>
		gameBoard[Y + 2][X + i] = val;
	}
}
 40068fc:	0001883a 	nop
 4006900:	e6fffe04 	addi	sp,fp,-8
 4006904:	dfc00317 	ldw	ra,12(sp)
 4006908:	df000217 	ldw	fp,8(sp)
 400690c:	dc400117 	ldw	r17,4(sp)
 4006910:	dc000017 	ldw	r16,0(sp)
 4006914:	dec00404 	addi	sp,sp,16
 4006918:	f800283a 	ret

0400691c <draw2>:

void draw2(int X, int Y, int val) {
 400691c:	defff804 	addi	sp,sp,-32
 4006920:	dfc00715 	stw	ra,28(sp)
 4006924:	df000615 	stw	fp,24(sp)
 4006928:	dc400515 	stw	r17,20(sp)
 400692c:	dc000415 	stw	r16,16(sp)
 4006930:	df000604 	addi	fp,sp,24
 4006934:	e13ffb15 	stw	r4,-20(fp)
 4006938:	e17ffc15 	stw	r5,-16(fp)
 400693c:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 4; i++){
 4006940:	e03ffa15 	stw	zero,-24(fp)
 4006944:	00001306 	br	4006994 <draw2+0x78>
		gameBoard[Y + i][X + 2] = val;
 4006948:	e0fffc17 	ldw	r3,-16(fp)
 400694c:	e0bffa17 	ldw	r2,-24(fp)
 4006950:	1887883a 	add	r3,r3,r2
 4006954:	e0bffb17 	ldw	r2,-20(fp)
 4006958:	14400084 	addi	r17,r2,2
 400695c:	040100b4 	movhi	r16,1026
 4006960:	84080004 	addi	r16,r16,8192
 4006964:	01400284 	movi	r5,10
 4006968:	1809883a 	mov	r4,r3
 400696c:	400dcd40 	call	400dcd4 <__mulsi3>
 4006970:	1445883a 	add	r2,r2,r17
 4006974:	1085883a 	add	r2,r2,r2
 4006978:	1085883a 	add	r2,r2,r2
 400697c:	8085883a 	add	r2,r16,r2
 4006980:	e0fffd17 	ldw	r3,-12(fp)
 4006984:	10c00015 	stw	r3,0(r2)
		gameBoard[Y + 2][X + i] = val;
	}
}

void draw2(int X, int Y, int val) {
	for(int i = 0; i < 4; i++){
 4006988:	e0bffa17 	ldw	r2,-24(fp)
 400698c:	10800044 	addi	r2,r2,1
 4006990:	e0bffa15 	stw	r2,-24(fp)
 4006994:	e0bffa17 	ldw	r2,-24(fp)
 4006998:	10800110 	cmplti	r2,r2,4
 400699c:	103fea1e 	bne	r2,zero,4006948 <__alt_mem_onchip_memory2_0+0xfc001788>
		gameBoard[Y + i][X + 2] = val;
	}
}
 40069a0:	0001883a 	nop
 40069a4:	e6fffe04 	addi	sp,fp,-8
 40069a8:	dfc00317 	ldw	ra,12(sp)
 40069ac:	df000217 	ldw	fp,8(sp)
 40069b0:	dc400117 	ldw	r17,4(sp)
 40069b4:	dc000017 	ldw	r16,0(sp)
 40069b8:	dec00404 	addi	sp,sp,16
 40069bc:	f800283a 	ret

040069c0 <draw3>:

void draw3(int X, int Y, int val) {
 40069c0:	defff904 	addi	sp,sp,-28
 40069c4:	dfc00615 	stw	ra,24(sp)
 40069c8:	df000515 	stw	fp,20(sp)
 40069cc:	dc400415 	stw	r17,16(sp)
 40069d0:	dc000315 	stw	r16,12(sp)
 40069d4:	df000504 	addi	fp,sp,20
 40069d8:	e13ffb15 	stw	r4,-20(fp)
 40069dc:	e17ffc15 	stw	r5,-16(fp)
 40069e0:	e1bffd15 	stw	r6,-12(fp)
	gameBoard[Y][X] = val;
 40069e4:	040100b4 	movhi	r16,1026
 40069e8:	84080004 	addi	r16,r16,8192
 40069ec:	e0bffc17 	ldw	r2,-16(fp)
 40069f0:	01400284 	movi	r5,10
 40069f4:	1009883a 	mov	r4,r2
 40069f8:	400dcd40 	call	400dcd4 <__mulsi3>
 40069fc:	1007883a 	mov	r3,r2
 4006a00:	e0bffb17 	ldw	r2,-20(fp)
 4006a04:	1885883a 	add	r2,r3,r2
 4006a08:	1085883a 	add	r2,r2,r2
 4006a0c:	1085883a 	add	r2,r2,r2
 4006a10:	8085883a 	add	r2,r16,r2
 4006a14:	e0fffd17 	ldw	r3,-12(fp)
 4006a18:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 1][X] = val;
 4006a1c:	e0bffc17 	ldw	r2,-16(fp)
 4006a20:	10800044 	addi	r2,r2,1
 4006a24:	040100b4 	movhi	r16,1026
 4006a28:	84080004 	addi	r16,r16,8192
 4006a2c:	01400284 	movi	r5,10
 4006a30:	1009883a 	mov	r4,r2
 4006a34:	400dcd40 	call	400dcd4 <__mulsi3>
 4006a38:	1007883a 	mov	r3,r2
 4006a3c:	e0bffb17 	ldw	r2,-20(fp)
 4006a40:	1885883a 	add	r2,r3,r2
 4006a44:	1085883a 	add	r2,r2,r2
 4006a48:	1085883a 	add	r2,r2,r2
 4006a4c:	8085883a 	add	r2,r16,r2
 4006a50:	e0fffd17 	ldw	r3,-12(fp)
 4006a54:	10c00015 	stw	r3,0(r2)
    gameBoard[Y][X + 1] = val;
 4006a58:	e0bffb17 	ldw	r2,-20(fp)
 4006a5c:	14400044 	addi	r17,r2,1
 4006a60:	040100b4 	movhi	r16,1026
 4006a64:	84080004 	addi	r16,r16,8192
 4006a68:	e0bffc17 	ldw	r2,-16(fp)
 4006a6c:	01400284 	movi	r5,10
 4006a70:	1009883a 	mov	r4,r2
 4006a74:	400dcd40 	call	400dcd4 <__mulsi3>
 4006a78:	1445883a 	add	r2,r2,r17
 4006a7c:	1085883a 	add	r2,r2,r2
 4006a80:	1085883a 	add	r2,r2,r2
 4006a84:	8085883a 	add	r2,r16,r2
 4006a88:	e0fffd17 	ldw	r3,-12(fp)
 4006a8c:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 1][X + 1] = val;
 4006a90:	e0bffc17 	ldw	r2,-16(fp)
 4006a94:	10c00044 	addi	r3,r2,1
 4006a98:	e0bffb17 	ldw	r2,-20(fp)
 4006a9c:	14400044 	addi	r17,r2,1
 4006aa0:	040100b4 	movhi	r16,1026
 4006aa4:	84080004 	addi	r16,r16,8192
 4006aa8:	01400284 	movi	r5,10
 4006aac:	1809883a 	mov	r4,r3
 4006ab0:	400dcd40 	call	400dcd4 <__mulsi3>
 4006ab4:	1445883a 	add	r2,r2,r17
 4006ab8:	1085883a 	add	r2,r2,r2
 4006abc:	1085883a 	add	r2,r2,r2
 4006ac0:	8085883a 	add	r2,r16,r2
 4006ac4:	e0fffd17 	ldw	r3,-12(fp)
 4006ac8:	10c00015 	stw	r3,0(r2)
}
 4006acc:	0001883a 	nop
 4006ad0:	e6fffe04 	addi	sp,fp,-8
 4006ad4:	dfc00317 	ldw	ra,12(sp)
 4006ad8:	df000217 	ldw	fp,8(sp)
 4006adc:	dc400117 	ldw	r17,4(sp)
 4006ae0:	dc000017 	ldw	r16,0(sp)
 4006ae4:	dec00404 	addi	sp,sp,16
 4006ae8:	f800283a 	ret

04006aec <draw4>:

void draw4(int X, int Y, int val) {
 4006aec:	defff804 	addi	sp,sp,-32
 4006af0:	dfc00715 	stw	ra,28(sp)
 4006af4:	df000615 	stw	fp,24(sp)
 4006af8:	dc400515 	stw	r17,20(sp)
 4006afc:	dc000415 	stw	r16,16(sp)
 4006b00:	df000604 	addi	fp,sp,24
 4006b04:	e13ffb15 	stw	r4,-20(fp)
 4006b08:	e17ffc15 	stw	r5,-16(fp)
 4006b0c:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 3; i++){
 4006b10:	e03ffa15 	stw	zero,-24(fp)
 4006b14:	00001206 	br	4006b60 <draw4+0x74>
		gameBoard[Y + 1][X + i] = val;
 4006b18:	e0bffc17 	ldw	r2,-16(fp)
 4006b1c:	11000044 	addi	r4,r2,1
 4006b20:	e0fffb17 	ldw	r3,-20(fp)
 4006b24:	e0bffa17 	ldw	r2,-24(fp)
 4006b28:	18a3883a 	add	r17,r3,r2
 4006b2c:	040100b4 	movhi	r16,1026
 4006b30:	84080004 	addi	r16,r16,8192
 4006b34:	01400284 	movi	r5,10
 4006b38:	400dcd40 	call	400dcd4 <__mulsi3>
 4006b3c:	1445883a 	add	r2,r2,r17
 4006b40:	1085883a 	add	r2,r2,r2
 4006b44:	1085883a 	add	r2,r2,r2
 4006b48:	8085883a 	add	r2,r16,r2
 4006b4c:	e0fffd17 	ldw	r3,-12(fp)
 4006b50:	10c00015 	stw	r3,0(r2)
    gameBoard[Y][X + 1] = val;
    gameBoard[Y + 1][X + 1] = val;
}

void draw4(int X, int Y, int val) {
	for(int i = 0; i < 3; i++){
 4006b54:	e0bffa17 	ldw	r2,-24(fp)
 4006b58:	10800044 	addi	r2,r2,1
 4006b5c:	e0bffa15 	stw	r2,-24(fp)
 4006b60:	e0bffa17 	ldw	r2,-24(fp)
 4006b64:	108000d0 	cmplti	r2,r2,3
 4006b68:	103feb1e 	bne	r2,zero,4006b18 <__alt_mem_onchip_memory2_0+0xfc001958>
		gameBoard[Y + 1][X + i] = val;
	}
    gameBoard[Y + 2][X + 2] = val;
 4006b6c:	e0bffc17 	ldw	r2,-16(fp)
 4006b70:	10c00084 	addi	r3,r2,2
 4006b74:	e0bffb17 	ldw	r2,-20(fp)
 4006b78:	14400084 	addi	r17,r2,2
 4006b7c:	040100b4 	movhi	r16,1026
 4006b80:	84080004 	addi	r16,r16,8192
 4006b84:	01400284 	movi	r5,10
 4006b88:	1809883a 	mov	r4,r3
 4006b8c:	400dcd40 	call	400dcd4 <__mulsi3>
 4006b90:	1445883a 	add	r2,r2,r17
 4006b94:	1085883a 	add	r2,r2,r2
 4006b98:	1085883a 	add	r2,r2,r2
 4006b9c:	8085883a 	add	r2,r16,r2
 4006ba0:	e0fffd17 	ldw	r3,-12(fp)
 4006ba4:	10c00015 	stw	r3,0(r2)
}
 4006ba8:	0001883a 	nop
 4006bac:	e6fffe04 	addi	sp,fp,-8
 4006bb0:	dfc00317 	ldw	ra,12(sp)
 4006bb4:	df000217 	ldw	fp,8(sp)
 4006bb8:	dc400117 	ldw	r17,4(sp)
 4006bbc:	dc000017 	ldw	r16,0(sp)
 4006bc0:	dec00404 	addi	sp,sp,16
 4006bc4:	f800283a 	ret

04006bc8 <draw5>:

void draw5(int X, int Y, int val) {
 4006bc8:	defff804 	addi	sp,sp,-32
 4006bcc:	dfc00715 	stw	ra,28(sp)
 4006bd0:	df000615 	stw	fp,24(sp)
 4006bd4:	dc400515 	stw	r17,20(sp)
 4006bd8:	dc000415 	stw	r16,16(sp)
 4006bdc:	df000604 	addi	fp,sp,24
 4006be0:	e13ffb15 	stw	r4,-20(fp)
 4006be4:	e17ffc15 	stw	r5,-16(fp)
 4006be8:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 3; i++){
 4006bec:	e03ffa15 	stw	zero,-24(fp)
 4006bf0:	00001306 	br	4006c40 <draw5+0x78>
		gameBoard[Y + i][X + 1] = val;
 4006bf4:	e0fffc17 	ldw	r3,-16(fp)
 4006bf8:	e0bffa17 	ldw	r2,-24(fp)
 4006bfc:	1887883a 	add	r3,r3,r2
 4006c00:	e0bffb17 	ldw	r2,-20(fp)
 4006c04:	14400044 	addi	r17,r2,1
 4006c08:	040100b4 	movhi	r16,1026
 4006c0c:	84080004 	addi	r16,r16,8192
 4006c10:	01400284 	movi	r5,10
 4006c14:	1809883a 	mov	r4,r3
 4006c18:	400dcd40 	call	400dcd4 <__mulsi3>
 4006c1c:	1445883a 	add	r2,r2,r17
 4006c20:	1085883a 	add	r2,r2,r2
 4006c24:	1085883a 	add	r2,r2,r2
 4006c28:	8085883a 	add	r2,r16,r2
 4006c2c:	e0fffd17 	ldw	r3,-12(fp)
 4006c30:	10c00015 	stw	r3,0(r2)
	}
    gameBoard[Y + 2][X + 2] = val;
}

void draw5(int X, int Y, int val) {
	for(int i = 0; i < 3; i++){
 4006c34:	e0bffa17 	ldw	r2,-24(fp)
 4006c38:	10800044 	addi	r2,r2,1
 4006c3c:	e0bffa15 	stw	r2,-24(fp)
 4006c40:	e0bffa17 	ldw	r2,-24(fp)
 4006c44:	108000d0 	cmplti	r2,r2,3
 4006c48:	103fea1e 	bne	r2,zero,4006bf4 <__alt_mem_onchip_memory2_0+0xfc001a34>
		gameBoard[Y + i][X + 1] = val;
	}
	gameBoard[Y + 2][X] = val;
 4006c4c:	e0bffc17 	ldw	r2,-16(fp)
 4006c50:	10800084 	addi	r2,r2,2
 4006c54:	040100b4 	movhi	r16,1026
 4006c58:	84080004 	addi	r16,r16,8192
 4006c5c:	01400284 	movi	r5,10
 4006c60:	1009883a 	mov	r4,r2
 4006c64:	400dcd40 	call	400dcd4 <__mulsi3>
 4006c68:	1007883a 	mov	r3,r2
 4006c6c:	e0bffb17 	ldw	r2,-20(fp)
 4006c70:	1885883a 	add	r2,r3,r2
 4006c74:	1085883a 	add	r2,r2,r2
 4006c78:	1085883a 	add	r2,r2,r2
 4006c7c:	8085883a 	add	r2,r16,r2
 4006c80:	e0fffd17 	ldw	r3,-12(fp)
 4006c84:	10c00015 	stw	r3,0(r2)
}
 4006c88:	0001883a 	nop
 4006c8c:	e6fffe04 	addi	sp,fp,-8
 4006c90:	dfc00317 	ldw	ra,12(sp)
 4006c94:	df000217 	ldw	fp,8(sp)
 4006c98:	dc400117 	ldw	r17,4(sp)
 4006c9c:	dc000017 	ldw	r16,0(sp)
 4006ca0:	dec00404 	addi	sp,sp,16
 4006ca4:	f800283a 	ret

04006ca8 <draw6>:

void draw6(int X, int Y, int val) {
 4006ca8:	defff804 	addi	sp,sp,-32
 4006cac:	dfc00715 	stw	ra,28(sp)
 4006cb0:	df000615 	stw	fp,24(sp)
 4006cb4:	dc400515 	stw	r17,20(sp)
 4006cb8:	dc000415 	stw	r16,16(sp)
 4006cbc:	df000604 	addi	fp,sp,24
 4006cc0:	e13ffb15 	stw	r4,-20(fp)
 4006cc4:	e17ffc15 	stw	r5,-16(fp)
 4006cc8:	e1bffd15 	stw	r6,-12(fp)
	gameBoard[Y][X] = val;
 4006ccc:	040100b4 	movhi	r16,1026
 4006cd0:	84080004 	addi	r16,r16,8192
 4006cd4:	e0bffc17 	ldw	r2,-16(fp)
 4006cd8:	01400284 	movi	r5,10
 4006cdc:	1009883a 	mov	r4,r2
 4006ce0:	400dcd40 	call	400dcd4 <__mulsi3>
 4006ce4:	1007883a 	mov	r3,r2
 4006ce8:	e0bffb17 	ldw	r2,-20(fp)
 4006cec:	1885883a 	add	r2,r3,r2
 4006cf0:	1085883a 	add	r2,r2,r2
 4006cf4:	1085883a 	add	r2,r2,r2
 4006cf8:	8085883a 	add	r2,r16,r2
 4006cfc:	e0fffd17 	ldw	r3,-12(fp)
 4006d00:	10c00015 	stw	r3,0(r2)
	for(int i = 0; i < 3; i++){
 4006d04:	e03ffa15 	stw	zero,-24(fp)
 4006d08:	00001206 	br	4006d54 <draw6+0xac>
		gameBoard[Y + 1][X + i] = val;
 4006d0c:	e0bffc17 	ldw	r2,-16(fp)
 4006d10:	11000044 	addi	r4,r2,1
 4006d14:	e0fffb17 	ldw	r3,-20(fp)
 4006d18:	e0bffa17 	ldw	r2,-24(fp)
 4006d1c:	18a3883a 	add	r17,r3,r2
 4006d20:	040100b4 	movhi	r16,1026
 4006d24:	84080004 	addi	r16,r16,8192
 4006d28:	01400284 	movi	r5,10
 4006d2c:	400dcd40 	call	400dcd4 <__mulsi3>
 4006d30:	1445883a 	add	r2,r2,r17
 4006d34:	1085883a 	add	r2,r2,r2
 4006d38:	1085883a 	add	r2,r2,r2
 4006d3c:	8085883a 	add	r2,r16,r2
 4006d40:	e0fffd17 	ldw	r3,-12(fp)
 4006d44:	10c00015 	stw	r3,0(r2)
	gameBoard[Y + 2][X] = val;
}

void draw6(int X, int Y, int val) {
	gameBoard[Y][X] = val;
	for(int i = 0; i < 3; i++){
 4006d48:	e0bffa17 	ldw	r2,-24(fp)
 4006d4c:	10800044 	addi	r2,r2,1
 4006d50:	e0bffa15 	stw	r2,-24(fp)
 4006d54:	e0bffa17 	ldw	r2,-24(fp)
 4006d58:	108000d0 	cmplti	r2,r2,3
 4006d5c:	103feb1e 	bne	r2,zero,4006d0c <__alt_mem_onchip_memory2_0+0xfc001b4c>
		gameBoard[Y + 1][X + i] = val;
	}
}
 4006d60:	0001883a 	nop
 4006d64:	e6fffe04 	addi	sp,fp,-8
 4006d68:	dfc00317 	ldw	ra,12(sp)
 4006d6c:	df000217 	ldw	fp,8(sp)
 4006d70:	dc400117 	ldw	r17,4(sp)
 4006d74:	dc000017 	ldw	r16,0(sp)
 4006d78:	dec00404 	addi	sp,sp,16
 4006d7c:	f800283a 	ret

04006d80 <draw7>:

void draw7(int X, int Y, int val) {
 4006d80:	defff804 	addi	sp,sp,-32
 4006d84:	dfc00715 	stw	ra,28(sp)
 4006d88:	df000615 	stw	fp,24(sp)
 4006d8c:	dc400515 	stw	r17,20(sp)
 4006d90:	dc000415 	stw	r16,16(sp)
 4006d94:	df000604 	addi	fp,sp,24
 4006d98:	e13ffb15 	stw	r4,-20(fp)
 4006d9c:	e17ffc15 	stw	r5,-16(fp)
 4006da0:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 3; i++){
 4006da4:	e03ffa15 	stw	zero,-24(fp)
 4006da8:	00001306 	br	4006df8 <draw7+0x78>
		gameBoard[Y + i][X + 1] = val;
 4006dac:	e0fffc17 	ldw	r3,-16(fp)
 4006db0:	e0bffa17 	ldw	r2,-24(fp)
 4006db4:	1887883a 	add	r3,r3,r2
 4006db8:	e0bffb17 	ldw	r2,-20(fp)
 4006dbc:	14400044 	addi	r17,r2,1
 4006dc0:	040100b4 	movhi	r16,1026
 4006dc4:	84080004 	addi	r16,r16,8192
 4006dc8:	01400284 	movi	r5,10
 4006dcc:	1809883a 	mov	r4,r3
 4006dd0:	400dcd40 	call	400dcd4 <__mulsi3>
 4006dd4:	1445883a 	add	r2,r2,r17
 4006dd8:	1085883a 	add	r2,r2,r2
 4006ddc:	1085883a 	add	r2,r2,r2
 4006de0:	8085883a 	add	r2,r16,r2
 4006de4:	e0fffd17 	ldw	r3,-12(fp)
 4006de8:	10c00015 	stw	r3,0(r2)
		gameBoard[Y + 1][X + i] = val;
	}
}

void draw7(int X, int Y, int val) {
	for(int i = 0; i < 3; i++){
 4006dec:	e0bffa17 	ldw	r2,-24(fp)
 4006df0:	10800044 	addi	r2,r2,1
 4006df4:	e0bffa15 	stw	r2,-24(fp)
 4006df8:	e0bffa17 	ldw	r2,-24(fp)
 4006dfc:	108000d0 	cmplti	r2,r2,3
 4006e00:	103fea1e 	bne	r2,zero,4006dac <__alt_mem_onchip_memory2_0+0xfc001bec>
		gameBoard[Y + i][X + 1] = val;
	}
	gameBoard[Y][X + 2] = val;
 4006e04:	e0bffb17 	ldw	r2,-20(fp)
 4006e08:	14400084 	addi	r17,r2,2
 4006e0c:	040100b4 	movhi	r16,1026
 4006e10:	84080004 	addi	r16,r16,8192
 4006e14:	e0bffc17 	ldw	r2,-16(fp)
 4006e18:	01400284 	movi	r5,10
 4006e1c:	1009883a 	mov	r4,r2
 4006e20:	400dcd40 	call	400dcd4 <__mulsi3>
 4006e24:	1445883a 	add	r2,r2,r17
 4006e28:	1085883a 	add	r2,r2,r2
 4006e2c:	1085883a 	add	r2,r2,r2
 4006e30:	8085883a 	add	r2,r16,r2
 4006e34:	e0fffd17 	ldw	r3,-12(fp)
 4006e38:	10c00015 	stw	r3,0(r2)
}
 4006e3c:	0001883a 	nop
 4006e40:	e6fffe04 	addi	sp,fp,-8
 4006e44:	dfc00317 	ldw	ra,12(sp)
 4006e48:	df000217 	ldw	fp,8(sp)
 4006e4c:	dc400117 	ldw	r17,4(sp)
 4006e50:	dc000017 	ldw	r16,0(sp)
 4006e54:	dec00404 	addi	sp,sp,16
 4006e58:	f800283a 	ret

04006e5c <draw8>:

void draw8(int X, int Y, int val) {
 4006e5c:	defff804 	addi	sp,sp,-32
 4006e60:	dfc00715 	stw	ra,28(sp)
 4006e64:	df000615 	stw	fp,24(sp)
 4006e68:	dc400515 	stw	r17,20(sp)
 4006e6c:	dc000415 	stw	r16,16(sp)
 4006e70:	df000604 	addi	fp,sp,24
 4006e74:	e13ffb15 	stw	r4,-20(fp)
 4006e78:	e17ffc15 	stw	r5,-16(fp)
 4006e7c:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 3; i++){
 4006e80:	e03ffa15 	stw	zero,-24(fp)
 4006e84:	00001206 	br	4006ed0 <draw8+0x74>
		gameBoard[Y + 1][X + i] = val;
 4006e88:	e0bffc17 	ldw	r2,-16(fp)
 4006e8c:	11000044 	addi	r4,r2,1
 4006e90:	e0fffb17 	ldw	r3,-20(fp)
 4006e94:	e0bffa17 	ldw	r2,-24(fp)
 4006e98:	18a3883a 	add	r17,r3,r2
 4006e9c:	040100b4 	movhi	r16,1026
 4006ea0:	84080004 	addi	r16,r16,8192
 4006ea4:	01400284 	movi	r5,10
 4006ea8:	400dcd40 	call	400dcd4 <__mulsi3>
 4006eac:	1445883a 	add	r2,r2,r17
 4006eb0:	1085883a 	add	r2,r2,r2
 4006eb4:	1085883a 	add	r2,r2,r2
 4006eb8:	8085883a 	add	r2,r16,r2
 4006ebc:	e0fffd17 	ldw	r3,-12(fp)
 4006ec0:	10c00015 	stw	r3,0(r2)
	}
	gameBoard[Y][X + 2] = val;
}

void draw8(int X, int Y, int val) {
	for(int i = 0; i < 3; i++){
 4006ec4:	e0bffa17 	ldw	r2,-24(fp)
 4006ec8:	10800044 	addi	r2,r2,1
 4006ecc:	e0bffa15 	stw	r2,-24(fp)
 4006ed0:	e0bffa17 	ldw	r2,-24(fp)
 4006ed4:	108000d0 	cmplti	r2,r2,3
 4006ed8:	103feb1e 	bne	r2,zero,4006e88 <__alt_mem_onchip_memory2_0+0xfc001cc8>
		gameBoard[Y + 1][X + i] = val;
	}
	gameBoard[Y + 2][X] = val;
 4006edc:	e0bffc17 	ldw	r2,-16(fp)
 4006ee0:	10800084 	addi	r2,r2,2
 4006ee4:	040100b4 	movhi	r16,1026
 4006ee8:	84080004 	addi	r16,r16,8192
 4006eec:	01400284 	movi	r5,10
 4006ef0:	1009883a 	mov	r4,r2
 4006ef4:	400dcd40 	call	400dcd4 <__mulsi3>
 4006ef8:	1007883a 	mov	r3,r2
 4006efc:	e0bffb17 	ldw	r2,-20(fp)
 4006f00:	1885883a 	add	r2,r3,r2
 4006f04:	1085883a 	add	r2,r2,r2
 4006f08:	1085883a 	add	r2,r2,r2
 4006f0c:	8085883a 	add	r2,r16,r2
 4006f10:	e0fffd17 	ldw	r3,-12(fp)
 4006f14:	10c00015 	stw	r3,0(r2)
}
 4006f18:	0001883a 	nop
 4006f1c:	e6fffe04 	addi	sp,fp,-8
 4006f20:	dfc00317 	ldw	ra,12(sp)
 4006f24:	df000217 	ldw	fp,8(sp)
 4006f28:	dc400117 	ldw	r17,4(sp)
 4006f2c:	dc000017 	ldw	r16,0(sp)
 4006f30:	dec00404 	addi	sp,sp,16
 4006f34:	f800283a 	ret

04006f38 <draw9>:

void draw9(int X, int Y, int val) {
 4006f38:	defff804 	addi	sp,sp,-32
 4006f3c:	dfc00715 	stw	ra,28(sp)
 4006f40:	df000615 	stw	fp,24(sp)
 4006f44:	dc400515 	stw	r17,20(sp)
 4006f48:	dc000415 	stw	r16,16(sp)
 4006f4c:	df000604 	addi	fp,sp,24
 4006f50:	e13ffb15 	stw	r4,-20(fp)
 4006f54:	e17ffc15 	stw	r5,-16(fp)
 4006f58:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 3; i++){
 4006f5c:	e03ffa15 	stw	zero,-24(fp)
 4006f60:	00001306 	br	4006fb0 <draw9+0x78>
		gameBoard[Y + i][X + 1] = val;
 4006f64:	e0fffc17 	ldw	r3,-16(fp)
 4006f68:	e0bffa17 	ldw	r2,-24(fp)
 4006f6c:	1887883a 	add	r3,r3,r2
 4006f70:	e0bffb17 	ldw	r2,-20(fp)
 4006f74:	14400044 	addi	r17,r2,1
 4006f78:	040100b4 	movhi	r16,1026
 4006f7c:	84080004 	addi	r16,r16,8192
 4006f80:	01400284 	movi	r5,10
 4006f84:	1809883a 	mov	r4,r3
 4006f88:	400dcd40 	call	400dcd4 <__mulsi3>
 4006f8c:	1445883a 	add	r2,r2,r17
 4006f90:	1085883a 	add	r2,r2,r2
 4006f94:	1085883a 	add	r2,r2,r2
 4006f98:	8085883a 	add	r2,r16,r2
 4006f9c:	e0fffd17 	ldw	r3,-12(fp)
 4006fa0:	10c00015 	stw	r3,0(r2)
	}
	gameBoard[Y + 2][X] = val;
}

void draw9(int X, int Y, int val) {
	for(int i = 0; i < 3; i++){
 4006fa4:	e0bffa17 	ldw	r2,-24(fp)
 4006fa8:	10800044 	addi	r2,r2,1
 4006fac:	e0bffa15 	stw	r2,-24(fp)
 4006fb0:	e0bffa17 	ldw	r2,-24(fp)
 4006fb4:	108000d0 	cmplti	r2,r2,3
 4006fb8:	103fea1e 	bne	r2,zero,4006f64 <__alt_mem_onchip_memory2_0+0xfc001da4>
		gameBoard[Y + i][X + 1] = val;
	}
	gameBoard[Y][X] = val;
 4006fbc:	040100b4 	movhi	r16,1026
 4006fc0:	84080004 	addi	r16,r16,8192
 4006fc4:	e0bffc17 	ldw	r2,-16(fp)
 4006fc8:	01400284 	movi	r5,10
 4006fcc:	1009883a 	mov	r4,r2
 4006fd0:	400dcd40 	call	400dcd4 <__mulsi3>
 4006fd4:	1007883a 	mov	r3,r2
 4006fd8:	e0bffb17 	ldw	r2,-20(fp)
 4006fdc:	1885883a 	add	r2,r3,r2
 4006fe0:	1085883a 	add	r2,r2,r2
 4006fe4:	1085883a 	add	r2,r2,r2
 4006fe8:	8085883a 	add	r2,r16,r2
 4006fec:	e0fffd17 	ldw	r3,-12(fp)
 4006ff0:	10c00015 	stw	r3,0(r2)
}
 4006ff4:	0001883a 	nop
 4006ff8:	e6fffe04 	addi	sp,fp,-8
 4006ffc:	dfc00317 	ldw	ra,12(sp)
 4007000:	df000217 	ldw	fp,8(sp)
 4007004:	dc400117 	ldw	r17,4(sp)
 4007008:	dc000017 	ldw	r16,0(sp)
 400700c:	dec00404 	addi	sp,sp,16
 4007010:	f800283a 	ret

04007014 <draw10>:

void draw10(int X, int Y, int val) {
 4007014:	defff804 	addi	sp,sp,-32
 4007018:	dfc00715 	stw	ra,28(sp)
 400701c:	df000615 	stw	fp,24(sp)
 4007020:	dc400515 	stw	r17,20(sp)
 4007024:	dc000415 	stw	r16,16(sp)
 4007028:	df000604 	addi	fp,sp,24
 400702c:	e13ffb15 	stw	r4,-20(fp)
 4007030:	e17ffc15 	stw	r5,-16(fp)
 4007034:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 3; i++){
 4007038:	e03ffa15 	stw	zero,-24(fp)
 400703c:	00001206 	br	4007088 <draw10+0x74>
		gameBoard[Y + 1][X + i] = val;
 4007040:	e0bffc17 	ldw	r2,-16(fp)
 4007044:	11000044 	addi	r4,r2,1
 4007048:	e0fffb17 	ldw	r3,-20(fp)
 400704c:	e0bffa17 	ldw	r2,-24(fp)
 4007050:	18a3883a 	add	r17,r3,r2
 4007054:	040100b4 	movhi	r16,1026
 4007058:	84080004 	addi	r16,r16,8192
 400705c:	01400284 	movi	r5,10
 4007060:	400dcd40 	call	400dcd4 <__mulsi3>
 4007064:	1445883a 	add	r2,r2,r17
 4007068:	1085883a 	add	r2,r2,r2
 400706c:	1085883a 	add	r2,r2,r2
 4007070:	8085883a 	add	r2,r16,r2
 4007074:	e0fffd17 	ldw	r3,-12(fp)
 4007078:	10c00015 	stw	r3,0(r2)
	}
	gameBoard[Y][X] = val;
}

void draw10(int X, int Y, int val) {
	for(int i = 0; i < 3; i++){
 400707c:	e0bffa17 	ldw	r2,-24(fp)
 4007080:	10800044 	addi	r2,r2,1
 4007084:	e0bffa15 	stw	r2,-24(fp)
 4007088:	e0bffa17 	ldw	r2,-24(fp)
 400708c:	108000d0 	cmplti	r2,r2,3
 4007090:	103feb1e 	bne	r2,zero,4007040 <__alt_mem_onchip_memory2_0+0xfc001e80>
		gameBoard[Y + 1][X + i] = val;
	}
	gameBoard[Y][X + 2] = val;
 4007094:	e0bffb17 	ldw	r2,-20(fp)
 4007098:	14400084 	addi	r17,r2,2
 400709c:	040100b4 	movhi	r16,1026
 40070a0:	84080004 	addi	r16,r16,8192
 40070a4:	e0bffc17 	ldw	r2,-16(fp)
 40070a8:	01400284 	movi	r5,10
 40070ac:	1009883a 	mov	r4,r2
 40070b0:	400dcd40 	call	400dcd4 <__mulsi3>
 40070b4:	1445883a 	add	r2,r2,r17
 40070b8:	1085883a 	add	r2,r2,r2
 40070bc:	1085883a 	add	r2,r2,r2
 40070c0:	8085883a 	add	r2,r16,r2
 40070c4:	e0fffd17 	ldw	r3,-12(fp)
 40070c8:	10c00015 	stw	r3,0(r2)
}
 40070cc:	0001883a 	nop
 40070d0:	e6fffe04 	addi	sp,fp,-8
 40070d4:	dfc00317 	ldw	ra,12(sp)
 40070d8:	df000217 	ldw	fp,8(sp)
 40070dc:	dc400117 	ldw	r17,4(sp)
 40070e0:	dc000017 	ldw	r16,0(sp)
 40070e4:	dec00404 	addi	sp,sp,16
 40070e8:	f800283a 	ret

040070ec <draw11>:

void draw11(int X, int Y, int val) {
 40070ec:	defff804 	addi	sp,sp,-32
 40070f0:	dfc00715 	stw	ra,28(sp)
 40070f4:	df000615 	stw	fp,24(sp)
 40070f8:	dc400515 	stw	r17,20(sp)
 40070fc:	dc000415 	stw	r16,16(sp)
 4007100:	df000604 	addi	fp,sp,24
 4007104:	e13ffb15 	stw	r4,-20(fp)
 4007108:	e17ffc15 	stw	r5,-16(fp)
 400710c:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 3; i++){
 4007110:	e03ffa15 	stw	zero,-24(fp)
 4007114:	00001306 	br	4007164 <draw11+0x78>
		gameBoard[Y + i][X + 1] = val;
 4007118:	e0fffc17 	ldw	r3,-16(fp)
 400711c:	e0bffa17 	ldw	r2,-24(fp)
 4007120:	1887883a 	add	r3,r3,r2
 4007124:	e0bffb17 	ldw	r2,-20(fp)
 4007128:	14400044 	addi	r17,r2,1
 400712c:	040100b4 	movhi	r16,1026
 4007130:	84080004 	addi	r16,r16,8192
 4007134:	01400284 	movi	r5,10
 4007138:	1809883a 	mov	r4,r3
 400713c:	400dcd40 	call	400dcd4 <__mulsi3>
 4007140:	1445883a 	add	r2,r2,r17
 4007144:	1085883a 	add	r2,r2,r2
 4007148:	1085883a 	add	r2,r2,r2
 400714c:	8085883a 	add	r2,r16,r2
 4007150:	e0fffd17 	ldw	r3,-12(fp)
 4007154:	10c00015 	stw	r3,0(r2)
	}
	gameBoard[Y][X + 2] = val;
}

void draw11(int X, int Y, int val) {
	for(int i = 0; i < 3; i++){
 4007158:	e0bffa17 	ldw	r2,-24(fp)
 400715c:	10800044 	addi	r2,r2,1
 4007160:	e0bffa15 	stw	r2,-24(fp)
 4007164:	e0bffa17 	ldw	r2,-24(fp)
 4007168:	108000d0 	cmplti	r2,r2,3
 400716c:	103fea1e 	bne	r2,zero,4007118 <__alt_mem_onchip_memory2_0+0xfc001f58>
		gameBoard[Y + i][X + 1] = val;
	}
	gameBoard[Y + 2][X + 2] = val;
 4007170:	e0bffc17 	ldw	r2,-16(fp)
 4007174:	10c00084 	addi	r3,r2,2
 4007178:	e0bffb17 	ldw	r2,-20(fp)
 400717c:	14400084 	addi	r17,r2,2
 4007180:	040100b4 	movhi	r16,1026
 4007184:	84080004 	addi	r16,r16,8192
 4007188:	01400284 	movi	r5,10
 400718c:	1809883a 	mov	r4,r3
 4007190:	400dcd40 	call	400dcd4 <__mulsi3>
 4007194:	1445883a 	add	r2,r2,r17
 4007198:	1085883a 	add	r2,r2,r2
 400719c:	1085883a 	add	r2,r2,r2
 40071a0:	8085883a 	add	r2,r16,r2
 40071a4:	e0fffd17 	ldw	r3,-12(fp)
 40071a8:	10c00015 	stw	r3,0(r2)
}
 40071ac:	0001883a 	nop
 40071b0:	e6fffe04 	addi	sp,fp,-8
 40071b4:	dfc00317 	ldw	ra,12(sp)
 40071b8:	df000217 	ldw	fp,8(sp)
 40071bc:	dc400117 	ldw	r17,4(sp)
 40071c0:	dc000017 	ldw	r16,0(sp)
 40071c4:	dec00404 	addi	sp,sp,16
 40071c8:	f800283a 	ret

040071cc <draw12>:

void draw12(int X, int Y, int val) {
 40071cc:	defff904 	addi	sp,sp,-28
 40071d0:	dfc00615 	stw	ra,24(sp)
 40071d4:	df000515 	stw	fp,20(sp)
 40071d8:	dc400415 	stw	r17,16(sp)
 40071dc:	dc000315 	stw	r16,12(sp)
 40071e0:	df000504 	addi	fp,sp,20
 40071e4:	e13ffb15 	stw	r4,-20(fp)
 40071e8:	e17ffc15 	stw	r5,-16(fp)
 40071ec:	e1bffd15 	stw	r6,-12(fp)
	gameBoard[Y + 1][X + 1] = val;
 40071f0:	e0bffc17 	ldw	r2,-16(fp)
 40071f4:	10c00044 	addi	r3,r2,1
 40071f8:	e0bffb17 	ldw	r2,-20(fp)
 40071fc:	14400044 	addi	r17,r2,1
 4007200:	040100b4 	movhi	r16,1026
 4007204:	84080004 	addi	r16,r16,8192
 4007208:	01400284 	movi	r5,10
 400720c:	1809883a 	mov	r4,r3
 4007210:	400dcd40 	call	400dcd4 <__mulsi3>
 4007214:	1445883a 	add	r2,r2,r17
 4007218:	1085883a 	add	r2,r2,r2
 400721c:	1085883a 	add	r2,r2,r2
 4007220:	8085883a 	add	r2,r16,r2
 4007224:	e0fffd17 	ldw	r3,-12(fp)
 4007228:	10c00015 	stw	r3,0(r2)
	gameBoard[Y + 1][X + 2] = val;
 400722c:	e0bffc17 	ldw	r2,-16(fp)
 4007230:	10c00044 	addi	r3,r2,1
 4007234:	e0bffb17 	ldw	r2,-20(fp)
 4007238:	14400084 	addi	r17,r2,2
 400723c:	040100b4 	movhi	r16,1026
 4007240:	84080004 	addi	r16,r16,8192
 4007244:	01400284 	movi	r5,10
 4007248:	1809883a 	mov	r4,r3
 400724c:	400dcd40 	call	400dcd4 <__mulsi3>
 4007250:	1445883a 	add	r2,r2,r17
 4007254:	1085883a 	add	r2,r2,r2
 4007258:	1085883a 	add	r2,r2,r2
 400725c:	8085883a 	add	r2,r16,r2
 4007260:	e0fffd17 	ldw	r3,-12(fp)
 4007264:	10c00015 	stw	r3,0(r2)
	gameBoard[Y + 2][X] = val;
 4007268:	e0bffc17 	ldw	r2,-16(fp)
 400726c:	10800084 	addi	r2,r2,2
 4007270:	040100b4 	movhi	r16,1026
 4007274:	84080004 	addi	r16,r16,8192
 4007278:	01400284 	movi	r5,10
 400727c:	1009883a 	mov	r4,r2
 4007280:	400dcd40 	call	400dcd4 <__mulsi3>
 4007284:	1007883a 	mov	r3,r2
 4007288:	e0bffb17 	ldw	r2,-20(fp)
 400728c:	1885883a 	add	r2,r3,r2
 4007290:	1085883a 	add	r2,r2,r2
 4007294:	1085883a 	add	r2,r2,r2
 4007298:	8085883a 	add	r2,r16,r2
 400729c:	e0fffd17 	ldw	r3,-12(fp)
 40072a0:	10c00015 	stw	r3,0(r2)
	gameBoard[Y + 2][X + 1] = val;
 40072a4:	e0bffc17 	ldw	r2,-16(fp)
 40072a8:	10c00084 	addi	r3,r2,2
 40072ac:	e0bffb17 	ldw	r2,-20(fp)
 40072b0:	14400044 	addi	r17,r2,1
 40072b4:	040100b4 	movhi	r16,1026
 40072b8:	84080004 	addi	r16,r16,8192
 40072bc:	01400284 	movi	r5,10
 40072c0:	1809883a 	mov	r4,r3
 40072c4:	400dcd40 	call	400dcd4 <__mulsi3>
 40072c8:	1445883a 	add	r2,r2,r17
 40072cc:	1085883a 	add	r2,r2,r2
 40072d0:	1085883a 	add	r2,r2,r2
 40072d4:	8085883a 	add	r2,r16,r2
 40072d8:	e0fffd17 	ldw	r3,-12(fp)
 40072dc:	10c00015 	stw	r3,0(r2)
}
 40072e0:	0001883a 	nop
 40072e4:	e6fffe04 	addi	sp,fp,-8
 40072e8:	dfc00317 	ldw	ra,12(sp)
 40072ec:	df000217 	ldw	fp,8(sp)
 40072f0:	dc400117 	ldw	r17,4(sp)
 40072f4:	dc000017 	ldw	r16,0(sp)
 40072f8:	dec00404 	addi	sp,sp,16
 40072fc:	f800283a 	ret

04007300 <draw13>:

void draw13(int X, int Y, int val) {
 4007300:	defff904 	addi	sp,sp,-28
 4007304:	dfc00615 	stw	ra,24(sp)
 4007308:	df000515 	stw	fp,20(sp)
 400730c:	dc400415 	stw	r17,16(sp)
 4007310:	dc000315 	stw	r16,12(sp)
 4007314:	df000504 	addi	fp,sp,20
 4007318:	e13ffb15 	stw	r4,-20(fp)
 400731c:	e17ffc15 	stw	r5,-16(fp)
 4007320:	e1bffd15 	stw	r6,-12(fp)
	gameBoard[Y][X + 1] = val;
 4007324:	e0bffb17 	ldw	r2,-20(fp)
 4007328:	14400044 	addi	r17,r2,1
 400732c:	040100b4 	movhi	r16,1026
 4007330:	84080004 	addi	r16,r16,8192
 4007334:	e0bffc17 	ldw	r2,-16(fp)
 4007338:	01400284 	movi	r5,10
 400733c:	1009883a 	mov	r4,r2
 4007340:	400dcd40 	call	400dcd4 <__mulsi3>
 4007344:	1445883a 	add	r2,r2,r17
 4007348:	1085883a 	add	r2,r2,r2
 400734c:	1085883a 	add	r2,r2,r2
 4007350:	8085883a 	add	r2,r16,r2
 4007354:	e0fffd17 	ldw	r3,-12(fp)
 4007358:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 1][X + 1] = val;
 400735c:	e0bffc17 	ldw	r2,-16(fp)
 4007360:	10c00044 	addi	r3,r2,1
 4007364:	e0bffb17 	ldw	r2,-20(fp)
 4007368:	14400044 	addi	r17,r2,1
 400736c:	040100b4 	movhi	r16,1026
 4007370:	84080004 	addi	r16,r16,8192
 4007374:	01400284 	movi	r5,10
 4007378:	1809883a 	mov	r4,r3
 400737c:	400dcd40 	call	400dcd4 <__mulsi3>
 4007380:	1445883a 	add	r2,r2,r17
 4007384:	1085883a 	add	r2,r2,r2
 4007388:	1085883a 	add	r2,r2,r2
 400738c:	8085883a 	add	r2,r16,r2
 4007390:	e0fffd17 	ldw	r3,-12(fp)
 4007394:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 1][X + 2] = val;
 4007398:	e0bffc17 	ldw	r2,-16(fp)
 400739c:	10c00044 	addi	r3,r2,1
 40073a0:	e0bffb17 	ldw	r2,-20(fp)
 40073a4:	14400084 	addi	r17,r2,2
 40073a8:	040100b4 	movhi	r16,1026
 40073ac:	84080004 	addi	r16,r16,8192
 40073b0:	01400284 	movi	r5,10
 40073b4:	1809883a 	mov	r4,r3
 40073b8:	400dcd40 	call	400dcd4 <__mulsi3>
 40073bc:	1445883a 	add	r2,r2,r17
 40073c0:	1085883a 	add	r2,r2,r2
 40073c4:	1085883a 	add	r2,r2,r2
 40073c8:	8085883a 	add	r2,r16,r2
 40073cc:	e0fffd17 	ldw	r3,-12(fp)
 40073d0:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 2][X + 2] = val;
 40073d4:	e0bffc17 	ldw	r2,-16(fp)
 40073d8:	10c00084 	addi	r3,r2,2
 40073dc:	e0bffb17 	ldw	r2,-20(fp)
 40073e0:	14400084 	addi	r17,r2,2
 40073e4:	040100b4 	movhi	r16,1026
 40073e8:	84080004 	addi	r16,r16,8192
 40073ec:	01400284 	movi	r5,10
 40073f0:	1809883a 	mov	r4,r3
 40073f4:	400dcd40 	call	400dcd4 <__mulsi3>
 40073f8:	1445883a 	add	r2,r2,r17
 40073fc:	1085883a 	add	r2,r2,r2
 4007400:	1085883a 	add	r2,r2,r2
 4007404:	8085883a 	add	r2,r16,r2
 4007408:	e0fffd17 	ldw	r3,-12(fp)
 400740c:	10c00015 	stw	r3,0(r2)
}
 4007410:	0001883a 	nop
 4007414:	e6fffe04 	addi	sp,fp,-8
 4007418:	dfc00317 	ldw	ra,12(sp)
 400741c:	df000217 	ldw	fp,8(sp)
 4007420:	dc400117 	ldw	r17,4(sp)
 4007424:	dc000017 	ldw	r16,0(sp)
 4007428:	dec00404 	addi	sp,sp,16
 400742c:	f800283a 	ret

04007430 <draw14>:

void draw14(int X, int Y, int val) {
 4007430:	defff804 	addi	sp,sp,-32
 4007434:	dfc00715 	stw	ra,28(sp)
 4007438:	df000615 	stw	fp,24(sp)
 400743c:	dc400515 	stw	r17,20(sp)
 4007440:	dc000415 	stw	r16,16(sp)
 4007444:	df000604 	addi	fp,sp,24
 4007448:	e13ffb15 	stw	r4,-20(fp)
 400744c:	e17ffc15 	stw	r5,-16(fp)
 4007450:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 3; i++){
 4007454:	e03ffa15 	stw	zero,-24(fp)
 4007458:	00001206 	br	40074a4 <draw14+0x74>
		gameBoard[Y + 1][X + i] = val;
 400745c:	e0bffc17 	ldw	r2,-16(fp)
 4007460:	11000044 	addi	r4,r2,1
 4007464:	e0fffb17 	ldw	r3,-20(fp)
 4007468:	e0bffa17 	ldw	r2,-24(fp)
 400746c:	18a3883a 	add	r17,r3,r2
 4007470:	040100b4 	movhi	r16,1026
 4007474:	84080004 	addi	r16,r16,8192
 4007478:	01400284 	movi	r5,10
 400747c:	400dcd40 	call	400dcd4 <__mulsi3>
 4007480:	1445883a 	add	r2,r2,r17
 4007484:	1085883a 	add	r2,r2,r2
 4007488:	1085883a 	add	r2,r2,r2
 400748c:	8085883a 	add	r2,r16,r2
 4007490:	e0fffd17 	ldw	r3,-12(fp)
 4007494:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 1][X + 2] = val;
    gameBoard[Y + 2][X + 2] = val;
}

void draw14(int X, int Y, int val) {
	for(int i = 0; i < 3; i++){
 4007498:	e0bffa17 	ldw	r2,-24(fp)
 400749c:	10800044 	addi	r2,r2,1
 40074a0:	e0bffa15 	stw	r2,-24(fp)
 40074a4:	e0bffa17 	ldw	r2,-24(fp)
 40074a8:	108000d0 	cmplti	r2,r2,3
 40074ac:	103feb1e 	bne	r2,zero,400745c <__alt_mem_onchip_memory2_0+0xfc00229c>
		gameBoard[Y + 1][X + i] = val;
	}
	gameBoard[Y + 2][X + 1] = val;
 40074b0:	e0bffc17 	ldw	r2,-16(fp)
 40074b4:	10c00084 	addi	r3,r2,2
 40074b8:	e0bffb17 	ldw	r2,-20(fp)
 40074bc:	14400044 	addi	r17,r2,1
 40074c0:	040100b4 	movhi	r16,1026
 40074c4:	84080004 	addi	r16,r16,8192
 40074c8:	01400284 	movi	r5,10
 40074cc:	1809883a 	mov	r4,r3
 40074d0:	400dcd40 	call	400dcd4 <__mulsi3>
 40074d4:	1445883a 	add	r2,r2,r17
 40074d8:	1085883a 	add	r2,r2,r2
 40074dc:	1085883a 	add	r2,r2,r2
 40074e0:	8085883a 	add	r2,r16,r2
 40074e4:	e0fffd17 	ldw	r3,-12(fp)
 40074e8:	10c00015 	stw	r3,0(r2)
}
 40074ec:	0001883a 	nop
 40074f0:	e6fffe04 	addi	sp,fp,-8
 40074f4:	dfc00317 	ldw	ra,12(sp)
 40074f8:	df000217 	ldw	fp,8(sp)
 40074fc:	dc400117 	ldw	r17,4(sp)
 4007500:	dc000017 	ldw	r16,0(sp)
 4007504:	dec00404 	addi	sp,sp,16
 4007508:	f800283a 	ret

0400750c <draw15>:

void draw15(int X, int Y, int val) {
 400750c:	defff804 	addi	sp,sp,-32
 4007510:	dfc00715 	stw	ra,28(sp)
 4007514:	df000615 	stw	fp,24(sp)
 4007518:	dc400515 	stw	r17,20(sp)
 400751c:	dc000415 	stw	r16,16(sp)
 4007520:	df000604 	addi	fp,sp,24
 4007524:	e13ffb15 	stw	r4,-20(fp)
 4007528:	e17ffc15 	stw	r5,-16(fp)
 400752c:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 3; i++){
 4007530:	e03ffa15 	stw	zero,-24(fp)
 4007534:	00001306 	br	4007584 <draw15+0x78>
		gameBoard[Y + i][X + 1] = val;
 4007538:	e0fffc17 	ldw	r3,-16(fp)
 400753c:	e0bffa17 	ldw	r2,-24(fp)
 4007540:	1887883a 	add	r3,r3,r2
 4007544:	e0bffb17 	ldw	r2,-20(fp)
 4007548:	14400044 	addi	r17,r2,1
 400754c:	040100b4 	movhi	r16,1026
 4007550:	84080004 	addi	r16,r16,8192
 4007554:	01400284 	movi	r5,10
 4007558:	1809883a 	mov	r4,r3
 400755c:	400dcd40 	call	400dcd4 <__mulsi3>
 4007560:	1445883a 	add	r2,r2,r17
 4007564:	1085883a 	add	r2,r2,r2
 4007568:	1085883a 	add	r2,r2,r2
 400756c:	8085883a 	add	r2,r16,r2
 4007570:	e0fffd17 	ldw	r3,-12(fp)
 4007574:	10c00015 	stw	r3,0(r2)
	}
	gameBoard[Y + 2][X + 1] = val;
}

void draw15(int X, int Y, int val) {
	for(int i = 0; i < 3; i++){
 4007578:	e0bffa17 	ldw	r2,-24(fp)
 400757c:	10800044 	addi	r2,r2,1
 4007580:	e0bffa15 	stw	r2,-24(fp)
 4007584:	e0bffa17 	ldw	r2,-24(fp)
 4007588:	108000d0 	cmplti	r2,r2,3
 400758c:	103fea1e 	bne	r2,zero,4007538 <__alt_mem_onchip_memory2_0+0xfc002378>
		gameBoard[Y + i][X + 1] = val;
	}
    gameBoard[Y + 1][X] = val;
 4007590:	e0bffc17 	ldw	r2,-16(fp)
 4007594:	10800044 	addi	r2,r2,1
 4007598:	040100b4 	movhi	r16,1026
 400759c:	84080004 	addi	r16,r16,8192
 40075a0:	01400284 	movi	r5,10
 40075a4:	1009883a 	mov	r4,r2
 40075a8:	400dcd40 	call	400dcd4 <__mulsi3>
 40075ac:	1007883a 	mov	r3,r2
 40075b0:	e0bffb17 	ldw	r2,-20(fp)
 40075b4:	1885883a 	add	r2,r3,r2
 40075b8:	1085883a 	add	r2,r2,r2
 40075bc:	1085883a 	add	r2,r2,r2
 40075c0:	8085883a 	add	r2,r16,r2
 40075c4:	e0fffd17 	ldw	r3,-12(fp)
 40075c8:	10c00015 	stw	r3,0(r2)
}
 40075cc:	0001883a 	nop
 40075d0:	e6fffe04 	addi	sp,fp,-8
 40075d4:	dfc00317 	ldw	ra,12(sp)
 40075d8:	df000217 	ldw	fp,8(sp)
 40075dc:	dc400117 	ldw	r17,4(sp)
 40075e0:	dc000017 	ldw	r16,0(sp)
 40075e4:	dec00404 	addi	sp,sp,16
 40075e8:	f800283a 	ret

040075ec <draw16>:

void draw16(int X, int Y, int val) {
 40075ec:	defff804 	addi	sp,sp,-32
 40075f0:	dfc00715 	stw	ra,28(sp)
 40075f4:	df000615 	stw	fp,24(sp)
 40075f8:	dc400515 	stw	r17,20(sp)
 40075fc:	dc000415 	stw	r16,16(sp)
 4007600:	df000604 	addi	fp,sp,24
 4007604:	e13ffb15 	stw	r4,-20(fp)
 4007608:	e17ffc15 	stw	r5,-16(fp)
 400760c:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 3; i++){
 4007610:	e03ffa15 	stw	zero,-24(fp)
 4007614:	00001206 	br	4007660 <draw16+0x74>
		gameBoard[Y + 1][X + i] = val;
 4007618:	e0bffc17 	ldw	r2,-16(fp)
 400761c:	11000044 	addi	r4,r2,1
 4007620:	e0fffb17 	ldw	r3,-20(fp)
 4007624:	e0bffa17 	ldw	r2,-24(fp)
 4007628:	18a3883a 	add	r17,r3,r2
 400762c:	040100b4 	movhi	r16,1026
 4007630:	84080004 	addi	r16,r16,8192
 4007634:	01400284 	movi	r5,10
 4007638:	400dcd40 	call	400dcd4 <__mulsi3>
 400763c:	1445883a 	add	r2,r2,r17
 4007640:	1085883a 	add	r2,r2,r2
 4007644:	1085883a 	add	r2,r2,r2
 4007648:	8085883a 	add	r2,r16,r2
 400764c:	e0fffd17 	ldw	r3,-12(fp)
 4007650:	10c00015 	stw	r3,0(r2)
	}
    gameBoard[Y + 1][X] = val;
}

void draw16(int X, int Y, int val) {
	for(int i = 0; i < 3; i++){
 4007654:	e0bffa17 	ldw	r2,-24(fp)
 4007658:	10800044 	addi	r2,r2,1
 400765c:	e0bffa15 	stw	r2,-24(fp)
 4007660:	e0bffa17 	ldw	r2,-24(fp)
 4007664:	108000d0 	cmplti	r2,r2,3
 4007668:	103feb1e 	bne	r2,zero,4007618 <__alt_mem_onchip_memory2_0+0xfc002458>
		gameBoard[Y + 1][X + i] = val;
	}
    gameBoard[Y][X + 1] = val;
 400766c:	e0bffb17 	ldw	r2,-20(fp)
 4007670:	14400044 	addi	r17,r2,1
 4007674:	040100b4 	movhi	r16,1026
 4007678:	84080004 	addi	r16,r16,8192
 400767c:	e0bffc17 	ldw	r2,-16(fp)
 4007680:	01400284 	movi	r5,10
 4007684:	1009883a 	mov	r4,r2
 4007688:	400dcd40 	call	400dcd4 <__mulsi3>
 400768c:	1445883a 	add	r2,r2,r17
 4007690:	1085883a 	add	r2,r2,r2
 4007694:	1085883a 	add	r2,r2,r2
 4007698:	8085883a 	add	r2,r16,r2
 400769c:	e0fffd17 	ldw	r3,-12(fp)
 40076a0:	10c00015 	stw	r3,0(r2)
}
 40076a4:	0001883a 	nop
 40076a8:	e6fffe04 	addi	sp,fp,-8
 40076ac:	dfc00317 	ldw	ra,12(sp)
 40076b0:	df000217 	ldw	fp,8(sp)
 40076b4:	dc400117 	ldw	r17,4(sp)
 40076b8:	dc000017 	ldw	r16,0(sp)
 40076bc:	dec00404 	addi	sp,sp,16
 40076c0:	f800283a 	ret

040076c4 <draw17>:

void draw17(int X, int Y, int val) {
 40076c4:	defff804 	addi	sp,sp,-32
 40076c8:	dfc00715 	stw	ra,28(sp)
 40076cc:	df000615 	stw	fp,24(sp)
 40076d0:	dc400515 	stw	r17,20(sp)
 40076d4:	dc000415 	stw	r16,16(sp)
 40076d8:	df000604 	addi	fp,sp,24
 40076dc:	e13ffb15 	stw	r4,-20(fp)
 40076e0:	e17ffc15 	stw	r5,-16(fp)
 40076e4:	e1bffd15 	stw	r6,-12(fp)
	for(int i = 0; i < 3; i++){
 40076e8:	e03ffa15 	stw	zero,-24(fp)
 40076ec:	00001306 	br	400773c <draw17+0x78>
		gameBoard[Y + i][X + 1] = val;
 40076f0:	e0fffc17 	ldw	r3,-16(fp)
 40076f4:	e0bffa17 	ldw	r2,-24(fp)
 40076f8:	1887883a 	add	r3,r3,r2
 40076fc:	e0bffb17 	ldw	r2,-20(fp)
 4007700:	14400044 	addi	r17,r2,1
 4007704:	040100b4 	movhi	r16,1026
 4007708:	84080004 	addi	r16,r16,8192
 400770c:	01400284 	movi	r5,10
 4007710:	1809883a 	mov	r4,r3
 4007714:	400dcd40 	call	400dcd4 <__mulsi3>
 4007718:	1445883a 	add	r2,r2,r17
 400771c:	1085883a 	add	r2,r2,r2
 4007720:	1085883a 	add	r2,r2,r2
 4007724:	8085883a 	add	r2,r16,r2
 4007728:	e0fffd17 	ldw	r3,-12(fp)
 400772c:	10c00015 	stw	r3,0(r2)
	}
    gameBoard[Y][X + 1] = val;
}

void draw17(int X, int Y, int val) {
	for(int i = 0; i < 3; i++){
 4007730:	e0bffa17 	ldw	r2,-24(fp)
 4007734:	10800044 	addi	r2,r2,1
 4007738:	e0bffa15 	stw	r2,-24(fp)
 400773c:	e0bffa17 	ldw	r2,-24(fp)
 4007740:	108000d0 	cmplti	r2,r2,3
 4007744:	103fea1e 	bne	r2,zero,40076f0 <__alt_mem_onchip_memory2_0+0xfc002530>
		gameBoard[Y + i][X + 1] = val;
	}
    gameBoard[Y + 1][X + 2] = val;
 4007748:	e0bffc17 	ldw	r2,-16(fp)
 400774c:	10c00044 	addi	r3,r2,1
 4007750:	e0bffb17 	ldw	r2,-20(fp)
 4007754:	14400084 	addi	r17,r2,2
 4007758:	040100b4 	movhi	r16,1026
 400775c:	84080004 	addi	r16,r16,8192
 4007760:	01400284 	movi	r5,10
 4007764:	1809883a 	mov	r4,r3
 4007768:	400dcd40 	call	400dcd4 <__mulsi3>
 400776c:	1445883a 	add	r2,r2,r17
 4007770:	1085883a 	add	r2,r2,r2
 4007774:	1085883a 	add	r2,r2,r2
 4007778:	8085883a 	add	r2,r16,r2
 400777c:	e0fffd17 	ldw	r3,-12(fp)
 4007780:	10c00015 	stw	r3,0(r2)
}
 4007784:	0001883a 	nop
 4007788:	e6fffe04 	addi	sp,fp,-8
 400778c:	dfc00317 	ldw	ra,12(sp)
 4007790:	df000217 	ldw	fp,8(sp)
 4007794:	dc400117 	ldw	r17,4(sp)
 4007798:	dc000017 	ldw	r16,0(sp)
 400779c:	dec00404 	addi	sp,sp,16
 40077a0:	f800283a 	ret

040077a4 <draw18>:

void draw18(int X, int Y, int val) {
 40077a4:	defff904 	addi	sp,sp,-28
 40077a8:	dfc00615 	stw	ra,24(sp)
 40077ac:	df000515 	stw	fp,20(sp)
 40077b0:	dc400415 	stw	r17,16(sp)
 40077b4:	dc000315 	stw	r16,12(sp)
 40077b8:	df000504 	addi	fp,sp,20
 40077bc:	e13ffb15 	stw	r4,-20(fp)
 40077c0:	e17ffc15 	stw	r5,-16(fp)
 40077c4:	e1bffd15 	stw	r6,-12(fp)
	gameBoard[Y + 1][X] = val;
 40077c8:	e0bffc17 	ldw	r2,-16(fp)
 40077cc:	10800044 	addi	r2,r2,1
 40077d0:	040100b4 	movhi	r16,1026
 40077d4:	84080004 	addi	r16,r16,8192
 40077d8:	01400284 	movi	r5,10
 40077dc:	1009883a 	mov	r4,r2
 40077e0:	400dcd40 	call	400dcd4 <__mulsi3>
 40077e4:	1007883a 	mov	r3,r2
 40077e8:	e0bffb17 	ldw	r2,-20(fp)
 40077ec:	1885883a 	add	r2,r3,r2
 40077f0:	1085883a 	add	r2,r2,r2
 40077f4:	1085883a 	add	r2,r2,r2
 40077f8:	8085883a 	add	r2,r16,r2
 40077fc:	e0fffd17 	ldw	r3,-12(fp)
 4007800:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 1][X + 1] = val;
 4007804:	e0bffc17 	ldw	r2,-16(fp)
 4007808:	10c00044 	addi	r3,r2,1
 400780c:	e0bffb17 	ldw	r2,-20(fp)
 4007810:	14400044 	addi	r17,r2,1
 4007814:	040100b4 	movhi	r16,1026
 4007818:	84080004 	addi	r16,r16,8192
 400781c:	01400284 	movi	r5,10
 4007820:	1809883a 	mov	r4,r3
 4007824:	400dcd40 	call	400dcd4 <__mulsi3>
 4007828:	1445883a 	add	r2,r2,r17
 400782c:	1085883a 	add	r2,r2,r2
 4007830:	1085883a 	add	r2,r2,r2
 4007834:	8085883a 	add	r2,r16,r2
 4007838:	e0fffd17 	ldw	r3,-12(fp)
 400783c:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 2][X + 2] = val;
 4007840:	e0bffc17 	ldw	r2,-16(fp)
 4007844:	10c00084 	addi	r3,r2,2
 4007848:	e0bffb17 	ldw	r2,-20(fp)
 400784c:	14400084 	addi	r17,r2,2
 4007850:	040100b4 	movhi	r16,1026
 4007854:	84080004 	addi	r16,r16,8192
 4007858:	01400284 	movi	r5,10
 400785c:	1809883a 	mov	r4,r3
 4007860:	400dcd40 	call	400dcd4 <__mulsi3>
 4007864:	1445883a 	add	r2,r2,r17
 4007868:	1085883a 	add	r2,r2,r2
 400786c:	1085883a 	add	r2,r2,r2
 4007870:	8085883a 	add	r2,r16,r2
 4007874:	e0fffd17 	ldw	r3,-12(fp)
 4007878:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 2][X + 1] = val;
 400787c:	e0bffc17 	ldw	r2,-16(fp)
 4007880:	10c00084 	addi	r3,r2,2
 4007884:	e0bffb17 	ldw	r2,-20(fp)
 4007888:	14400044 	addi	r17,r2,1
 400788c:	040100b4 	movhi	r16,1026
 4007890:	84080004 	addi	r16,r16,8192
 4007894:	01400284 	movi	r5,10
 4007898:	1809883a 	mov	r4,r3
 400789c:	400dcd40 	call	400dcd4 <__mulsi3>
 40078a0:	1445883a 	add	r2,r2,r17
 40078a4:	1085883a 	add	r2,r2,r2
 40078a8:	1085883a 	add	r2,r2,r2
 40078ac:	8085883a 	add	r2,r16,r2
 40078b0:	e0fffd17 	ldw	r3,-12(fp)
 40078b4:	10c00015 	stw	r3,0(r2)
}
 40078b8:	0001883a 	nop
 40078bc:	e6fffe04 	addi	sp,fp,-8
 40078c0:	dfc00317 	ldw	ra,12(sp)
 40078c4:	df000217 	ldw	fp,8(sp)
 40078c8:	dc400117 	ldw	r17,4(sp)
 40078cc:	dc000017 	ldw	r16,0(sp)
 40078d0:	dec00404 	addi	sp,sp,16
 40078d4:	f800283a 	ret

040078d8 <draw19>:

void draw19(int X, int Y, int val) {
 40078d8:	defff904 	addi	sp,sp,-28
 40078dc:	dfc00615 	stw	ra,24(sp)
 40078e0:	df000515 	stw	fp,20(sp)
 40078e4:	dc400415 	stw	r17,16(sp)
 40078e8:	dc000315 	stw	r16,12(sp)
 40078ec:	df000504 	addi	fp,sp,20
 40078f0:	e13ffb15 	stw	r4,-20(fp)
 40078f4:	e17ffc15 	stw	r5,-16(fp)
 40078f8:	e1bffd15 	stw	r6,-12(fp)
	gameBoard[Y][X + 2] = val;
 40078fc:	e0bffb17 	ldw	r2,-20(fp)
 4007900:	14400084 	addi	r17,r2,2
 4007904:	040100b4 	movhi	r16,1026
 4007908:	84080004 	addi	r16,r16,8192
 400790c:	e0bffc17 	ldw	r2,-16(fp)
 4007910:	01400284 	movi	r5,10
 4007914:	1009883a 	mov	r4,r2
 4007918:	400dcd40 	call	400dcd4 <__mulsi3>
 400791c:	1445883a 	add	r2,r2,r17
 4007920:	1085883a 	add	r2,r2,r2
 4007924:	1085883a 	add	r2,r2,r2
 4007928:	8085883a 	add	r2,r16,r2
 400792c:	e0fffd17 	ldw	r3,-12(fp)
 4007930:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 1][X + 1] = val;
 4007934:	e0bffc17 	ldw	r2,-16(fp)
 4007938:	10c00044 	addi	r3,r2,1
 400793c:	e0bffb17 	ldw	r2,-20(fp)
 4007940:	14400044 	addi	r17,r2,1
 4007944:	040100b4 	movhi	r16,1026
 4007948:	84080004 	addi	r16,r16,8192
 400794c:	01400284 	movi	r5,10
 4007950:	1809883a 	mov	r4,r3
 4007954:	400dcd40 	call	400dcd4 <__mulsi3>
 4007958:	1445883a 	add	r2,r2,r17
 400795c:	1085883a 	add	r2,r2,r2
 4007960:	1085883a 	add	r2,r2,r2
 4007964:	8085883a 	add	r2,r16,r2
 4007968:	e0fffd17 	ldw	r3,-12(fp)
 400796c:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 1][X + 2] = val;
 4007970:	e0bffc17 	ldw	r2,-16(fp)
 4007974:	10c00044 	addi	r3,r2,1
 4007978:	e0bffb17 	ldw	r2,-20(fp)
 400797c:	14400084 	addi	r17,r2,2
 4007980:	040100b4 	movhi	r16,1026
 4007984:	84080004 	addi	r16,r16,8192
 4007988:	01400284 	movi	r5,10
 400798c:	1809883a 	mov	r4,r3
 4007990:	400dcd40 	call	400dcd4 <__mulsi3>
 4007994:	1445883a 	add	r2,r2,r17
 4007998:	1085883a 	add	r2,r2,r2
 400799c:	1085883a 	add	r2,r2,r2
 40079a0:	8085883a 	add	r2,r16,r2
 40079a4:	e0fffd17 	ldw	r3,-12(fp)
 40079a8:	10c00015 	stw	r3,0(r2)
    gameBoard[Y + 2][X + 1] = val;
 40079ac:	e0bffc17 	ldw	r2,-16(fp)
 40079b0:	10c00084 	addi	r3,r2,2
 40079b4:	e0bffb17 	ldw	r2,-20(fp)
 40079b8:	14400044 	addi	r17,r2,1
 40079bc:	040100b4 	movhi	r16,1026
 40079c0:	84080004 	addi	r16,r16,8192
 40079c4:	01400284 	movi	r5,10
 40079c8:	1809883a 	mov	r4,r3
 40079cc:	400dcd40 	call	400dcd4 <__mulsi3>
 40079d0:	1445883a 	add	r2,r2,r17
 40079d4:	1085883a 	add	r2,r2,r2
 40079d8:	1085883a 	add	r2,r2,r2
 40079dc:	8085883a 	add	r2,r16,r2
 40079e0:	e0fffd17 	ldw	r3,-12(fp)
 40079e4:	10c00015 	stw	r3,0(r2)
}
 40079e8:	0001883a 	nop
 40079ec:	e6fffe04 	addi	sp,fp,-8
 40079f0:	dfc00317 	ldw	ra,12(sp)
 40079f4:	df000217 	ldw	fp,8(sp)
 40079f8:	dc400117 	ldw	r17,4(sp)
 40079fc:	dc000017 	ldw	r16,0(sp)
 4007a00:	dec00404 	addi	sp,sp,16
 4007a04:	f800283a 	ret

04007a08 <drawGrid>:
#include <alt_types.h>
#include "text_mode_vga.h"
#include "tetris.h"
#include <time.h>

void drawGrid(alt_u8 foreground, alt_u8 background, alt_u8 text){
 4007a08:	deffe404 	addi	sp,sp,-112
 4007a0c:	dfc01b15 	stw	ra,108(sp)
 4007a10:	df001a15 	stw	fp,104(sp)
 4007a14:	dc001915 	stw	r16,100(sp)
 4007a18:	df001a04 	addi	fp,sp,104
 4007a1c:	2807883a 	mov	r3,r5
 4007a20:	3005883a 	mov	r2,r6
 4007a24:	e13ffc05 	stb	r4,-16(fp)
 4007a28:	e0fffd05 	stb	r3,-12(fp)
 4007a2c:	e0bffe05 	stb	r2,-8(fp)
	//draw game grid
	//draw top left corner
	vga_ctrl->VRAM[174 * 2] = foreground << 4 | background;
 4007a30:	d0a00217 	ldw	r2,-32760(gp)
 4007a34:	e0fffc03 	ldbu	r3,-16(fp)
 4007a38:	1806913a 	slli	r3,r3,4
 4007a3c:	1809883a 	mov	r4,r3
 4007a40:	e0fffd03 	ldbu	r3,-12(fp)
 4007a44:	20c6b03a 	or	r3,r4,r3
 4007a48:	10c05705 	stb	r3,348(r2)
	vga_ctrl->VRAM[174 * 2 + 1] = 0x03;
 4007a4c:	d0a00217 	ldw	r2,-32760(gp)
 4007a50:	00c000c4 	movi	r3,3
 4007a54:	10c05745 	stb	r3,349(r2)
	//draw top wall
	for(int i = 0; i < 10; i++){
 4007a58:	e03fe615 	stw	zero,-104(fp)
 4007a5c:	00001806 	br	4007ac0 <drawGrid+0xb8>
		vga_ctrl->VRAM[(175 + i) * 2] = foreground << 4 | background;
 4007a60:	d0e00217 	ldw	r3,-32760(gp)
 4007a64:	e0bfe617 	ldw	r2,-104(fp)
 4007a68:	10802bc4 	addi	r2,r2,175
 4007a6c:	1085883a 	add	r2,r2,r2
 4007a70:	100b883a 	mov	r5,r2
 4007a74:	e0bffc03 	ldbu	r2,-16(fp)
 4007a78:	1004913a 	slli	r2,r2,4
 4007a7c:	1009883a 	mov	r4,r2
 4007a80:	e0bffd03 	ldbu	r2,-12(fp)
 4007a84:	2084b03a 	or	r2,r4,r2
 4007a88:	1009883a 	mov	r4,r2
 4007a8c:	1945883a 	add	r2,r3,r5
 4007a90:	11000005 	stb	r4,0(r2)
		vga_ctrl->VRAM[(175 + i) * 2 + 1] = 0x04;
 4007a94:	d0e00217 	ldw	r3,-32760(gp)
 4007a98:	e0bfe617 	ldw	r2,-104(fp)
 4007a9c:	10802bc4 	addi	r2,r2,175
 4007aa0:	1085883a 	add	r2,r2,r2
 4007aa4:	10800044 	addi	r2,r2,1
 4007aa8:	1885883a 	add	r2,r3,r2
 4007aac:	00c00104 	movi	r3,4
 4007ab0:	10c00005 	stb	r3,0(r2)
	//draw game grid
	//draw top left corner
	vga_ctrl->VRAM[174 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[174 * 2 + 1] = 0x03;
	//draw top wall
	for(int i = 0; i < 10; i++){
 4007ab4:	e0bfe617 	ldw	r2,-104(fp)
 4007ab8:	10800044 	addi	r2,r2,1
 4007abc:	e0bfe615 	stw	r2,-104(fp)
 4007ac0:	e0bfe617 	ldw	r2,-104(fp)
 4007ac4:	10800290 	cmplti	r2,r2,10
 4007ac8:	103fe51e 	bne	r2,zero,4007a60 <__alt_mem_onchip_memory2_0+0xfc0028a0>
		vga_ctrl->VRAM[(175 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(175 + i) * 2 + 1] = 0x04;
	}
	//draw top right corner
	vga_ctrl->VRAM[185 * 2] = foreground << 4 | background;
 4007acc:	d0a00217 	ldw	r2,-32760(gp)
 4007ad0:	e0fffc03 	ldbu	r3,-16(fp)
 4007ad4:	1806913a 	slli	r3,r3,4
 4007ad8:	1809883a 	mov	r4,r3
 4007adc:	e0fffd03 	ldbu	r3,-12(fp)
 4007ae0:	20c6b03a 	or	r3,r4,r3
 4007ae4:	10c05c85 	stb	r3,370(r2)
	vga_ctrl->VRAM[185 * 2 + 1] = 0x05;
 4007ae8:	d0a00217 	ldw	r2,-32760(gp)
 4007aec:	00c00144 	movi	r3,5
 4007af0:	10c05cc5 	stb	r3,371(r2)
	//draw right wall
	for(int i = 0; i < 20; i++){
 4007af4:	e03fe715 	stw	zero,-100(fp)
 4007af8:	00001706 	br	4007b58 <drawGrid+0x150>
		vga_ctrl->VRAM[(225 + i * 40) * 2] = foreground << 4 | background;
 4007afc:	d4200217 	ldw	r16,-32760(gp)
 4007b00:	01401404 	movi	r5,80
 4007b04:	e13fe717 	ldw	r4,-100(fp)
 4007b08:	400dcd40 	call	400dcd4 <__mulsi3>
 4007b0c:	10807084 	addi	r2,r2,450
 4007b10:	e0fffc03 	ldbu	r3,-16(fp)
 4007b14:	1806913a 	slli	r3,r3,4
 4007b18:	1809883a 	mov	r4,r3
 4007b1c:	e0fffd03 	ldbu	r3,-12(fp)
 4007b20:	20c6b03a 	or	r3,r4,r3
 4007b24:	8085883a 	add	r2,r16,r2
 4007b28:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(225 + i * 40) * 2 + 1] = 0x06;
 4007b2c:	d4200217 	ldw	r16,-32760(gp)
 4007b30:	01401404 	movi	r5,80
 4007b34:	e13fe717 	ldw	r4,-100(fp)
 4007b38:	400dcd40 	call	400dcd4 <__mulsi3>
 4007b3c:	108070c4 	addi	r2,r2,451
 4007b40:	8085883a 	add	r2,r16,r2
 4007b44:	00c00184 	movi	r3,6
 4007b48:	10c00005 	stb	r3,0(r2)
	}
	//draw top right corner
	vga_ctrl->VRAM[185 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[185 * 2 + 1] = 0x05;
	//draw right wall
	for(int i = 0; i < 20; i++){
 4007b4c:	e0bfe717 	ldw	r2,-100(fp)
 4007b50:	10800044 	addi	r2,r2,1
 4007b54:	e0bfe715 	stw	r2,-100(fp)
 4007b58:	e0bfe717 	ldw	r2,-100(fp)
 4007b5c:	10800510 	cmplti	r2,r2,20
 4007b60:	103fe61e 	bne	r2,zero,4007afc <__alt_mem_onchip_memory2_0+0xfc00293c>
		vga_ctrl->VRAM[(225 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(225 + i * 40) * 2 + 1] = 0x06;
	}
	//draw bottom right corner
	vga_ctrl->VRAM[1025 * 2] = foreground << 4 | background;
 4007b64:	d0a00217 	ldw	r2,-32760(gp)
 4007b68:	e0fffc03 	ldbu	r3,-16(fp)
 4007b6c:	1806913a 	slli	r3,r3,4
 4007b70:	1809883a 	mov	r4,r3
 4007b74:	e0fffd03 	ldbu	r3,-12(fp)
 4007b78:	20c6b03a 	or	r3,r4,r3
 4007b7c:	10c20085 	stb	r3,2050(r2)
	vga_ctrl->VRAM[1025 * 2 + 1] = 0x07;
 4007b80:	d0a00217 	ldw	r2,-32760(gp)
 4007b84:	00c001c4 	movi	r3,7
 4007b88:	10c200c5 	stb	r3,2051(r2)
	//draw bottom wall
	for(int i = 0; i < 10; i++){
 4007b8c:	e03fe815 	stw	zero,-96(fp)
 4007b90:	00001806 	br	4007bf4 <drawGrid+0x1ec>
		vga_ctrl->VRAM[(1015 + i) * 2] = foreground << 4 | background;
 4007b94:	d0e00217 	ldw	r3,-32760(gp)
 4007b98:	e0bfe817 	ldw	r2,-96(fp)
 4007b9c:	1080fdc4 	addi	r2,r2,1015
 4007ba0:	1085883a 	add	r2,r2,r2
 4007ba4:	100b883a 	mov	r5,r2
 4007ba8:	e0bffc03 	ldbu	r2,-16(fp)
 4007bac:	1004913a 	slli	r2,r2,4
 4007bb0:	1009883a 	mov	r4,r2
 4007bb4:	e0bffd03 	ldbu	r2,-12(fp)
 4007bb8:	2084b03a 	or	r2,r4,r2
 4007bbc:	1009883a 	mov	r4,r2
 4007bc0:	1945883a 	add	r2,r3,r5
 4007bc4:	11000005 	stb	r4,0(r2)
		vga_ctrl->VRAM[(1015 + i) * 2 + 1] = 0x08;
 4007bc8:	d0e00217 	ldw	r3,-32760(gp)
 4007bcc:	e0bfe817 	ldw	r2,-96(fp)
 4007bd0:	1080fdc4 	addi	r2,r2,1015
 4007bd4:	1085883a 	add	r2,r2,r2
 4007bd8:	10800044 	addi	r2,r2,1
 4007bdc:	1885883a 	add	r2,r3,r2
 4007be0:	00c00204 	movi	r3,8
 4007be4:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom right corner
	vga_ctrl->VRAM[1025 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[1025 * 2 + 1] = 0x07;
	//draw bottom wall
	for(int i = 0; i < 10; i++){
 4007be8:	e0bfe817 	ldw	r2,-96(fp)
 4007bec:	10800044 	addi	r2,r2,1
 4007bf0:	e0bfe815 	stw	r2,-96(fp)
 4007bf4:	e0bfe817 	ldw	r2,-96(fp)
 4007bf8:	10800290 	cmplti	r2,r2,10
 4007bfc:	103fe51e 	bne	r2,zero,4007b94 <__alt_mem_onchip_memory2_0+0xfc0029d4>
		vga_ctrl->VRAM[(1015 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(1015 + i) * 2 + 1] = 0x08;
	}
	//draw bottom left corner
	vga_ctrl->VRAM[1014 * 2] = foreground << 4 | background;
 4007c00:	d0a00217 	ldw	r2,-32760(gp)
 4007c04:	e0fffc03 	ldbu	r3,-16(fp)
 4007c08:	1806913a 	slli	r3,r3,4
 4007c0c:	1809883a 	mov	r4,r3
 4007c10:	e0fffd03 	ldbu	r3,-12(fp)
 4007c14:	20c6b03a 	or	r3,r4,r3
 4007c18:	10c1fb05 	stb	r3,2028(r2)
	vga_ctrl->VRAM[1014 * 2 + 1] = 0x09;
 4007c1c:	d0a00217 	ldw	r2,-32760(gp)
 4007c20:	00c00244 	movi	r3,9
 4007c24:	10c1fb45 	stb	r3,2029(r2)
	//draw left wall
	for(int i = 0; i < 20; i++){
 4007c28:	e03fe915 	stw	zero,-92(fp)
 4007c2c:	00001706 	br	4007c8c <drawGrid+0x284>
		vga_ctrl->VRAM[(214 + i * 40) * 2] = foreground << 4 | background;
 4007c30:	d4200217 	ldw	r16,-32760(gp)
 4007c34:	01401404 	movi	r5,80
 4007c38:	e13fe917 	ldw	r4,-92(fp)
 4007c3c:	400dcd40 	call	400dcd4 <__mulsi3>
 4007c40:	10806b04 	addi	r2,r2,428
 4007c44:	e0fffc03 	ldbu	r3,-16(fp)
 4007c48:	1806913a 	slli	r3,r3,4
 4007c4c:	1809883a 	mov	r4,r3
 4007c50:	e0fffd03 	ldbu	r3,-12(fp)
 4007c54:	20c6b03a 	or	r3,r4,r3
 4007c58:	8085883a 	add	r2,r16,r2
 4007c5c:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(214 + i * 40) * 2 + 1] = 0x0a;
 4007c60:	d4200217 	ldw	r16,-32760(gp)
 4007c64:	01401404 	movi	r5,80
 4007c68:	e13fe917 	ldw	r4,-92(fp)
 4007c6c:	400dcd40 	call	400dcd4 <__mulsi3>
 4007c70:	10806b44 	addi	r2,r2,429
 4007c74:	8085883a 	add	r2,r16,r2
 4007c78:	00c00284 	movi	r3,10
 4007c7c:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom left corner
	vga_ctrl->VRAM[1014 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[1014 * 2 + 1] = 0x09;
	//draw left wall
	for(int i = 0; i < 20; i++){
 4007c80:	e0bfe917 	ldw	r2,-92(fp)
 4007c84:	10800044 	addi	r2,r2,1
 4007c88:	e0bfe915 	stw	r2,-92(fp)
 4007c8c:	e0bfe917 	ldw	r2,-92(fp)
 4007c90:	10800510 	cmplti	r2,r2,20
 4007c94:	103fe61e 	bne	r2,zero,4007c30 <__alt_mem_onchip_memory2_0+0xfc002a70>
		vga_ctrl->VRAM[(214 + i * 40) * 2 + 1] = 0x0a;
	}

	//draw next grid & words
	//draw top left corner
	vga_ctrl->VRAM[426 * 2] = foreground << 4 | background;
 4007c98:	d0a00217 	ldw	r2,-32760(gp)
 4007c9c:	e0fffc03 	ldbu	r3,-16(fp)
 4007ca0:	1806913a 	slli	r3,r3,4
 4007ca4:	1809883a 	mov	r4,r3
 4007ca8:	e0fffd03 	ldbu	r3,-12(fp)
 4007cac:	20c6b03a 	or	r3,r4,r3
 4007cb0:	10c0d505 	stb	r3,852(r2)
	vga_ctrl->VRAM[426 * 2 + 1] = 0x0b;
 4007cb4:	d0a00217 	ldw	r2,-32760(gp)
 4007cb8:	00c002c4 	movi	r3,11
 4007cbc:	10c0d545 	stb	r3,853(r2)
	//draw top wall
	for(int i = 0; i < 4; i++){
 4007cc0:	e03fea15 	stw	zero,-88(fp)
 4007cc4:	00001806 	br	4007d28 <drawGrid+0x320>
		vga_ctrl->VRAM[(427 + i) * 2] = foreground << 4 | background;
 4007cc8:	d0e00217 	ldw	r3,-32760(gp)
 4007ccc:	e0bfea17 	ldw	r2,-88(fp)
 4007cd0:	10806ac4 	addi	r2,r2,427
 4007cd4:	1085883a 	add	r2,r2,r2
 4007cd8:	100b883a 	mov	r5,r2
 4007cdc:	e0bffc03 	ldbu	r2,-16(fp)
 4007ce0:	1004913a 	slli	r2,r2,4
 4007ce4:	1009883a 	mov	r4,r2
 4007ce8:	e0bffd03 	ldbu	r2,-12(fp)
 4007cec:	2084b03a 	or	r2,r4,r2
 4007cf0:	1009883a 	mov	r4,r2
 4007cf4:	1945883a 	add	r2,r3,r5
 4007cf8:	11000005 	stb	r4,0(r2)
		vga_ctrl->VRAM[(427 + i) * 2 + 1] = 0x0c;
 4007cfc:	d0e00217 	ldw	r3,-32760(gp)
 4007d00:	e0bfea17 	ldw	r2,-88(fp)
 4007d04:	10806ac4 	addi	r2,r2,427
 4007d08:	1085883a 	add	r2,r2,r2
 4007d0c:	10800044 	addi	r2,r2,1
 4007d10:	1885883a 	add	r2,r3,r2
 4007d14:	00c00304 	movi	r3,12
 4007d18:	10c00005 	stb	r3,0(r2)
	//draw next grid & words
	//draw top left corner
	vga_ctrl->VRAM[426 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[426 * 2 + 1] = 0x0b;
	//draw top wall
	for(int i = 0; i < 4; i++){
 4007d1c:	e0bfea17 	ldw	r2,-88(fp)
 4007d20:	10800044 	addi	r2,r2,1
 4007d24:	e0bfea15 	stw	r2,-88(fp)
 4007d28:	e0bfea17 	ldw	r2,-88(fp)
 4007d2c:	10800110 	cmplti	r2,r2,4
 4007d30:	103fe51e 	bne	r2,zero,4007cc8 <__alt_mem_onchip_memory2_0+0xfc002b08>
		vga_ctrl->VRAM[(427 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(427 + i) * 2 + 1] = 0x0c;
	}
	//draw top right corner
	vga_ctrl->VRAM[431 * 2] = foreground << 4 | background;
 4007d34:	d0a00217 	ldw	r2,-32760(gp)
 4007d38:	e0fffc03 	ldbu	r3,-16(fp)
 4007d3c:	1806913a 	slli	r3,r3,4
 4007d40:	1809883a 	mov	r4,r3
 4007d44:	e0fffd03 	ldbu	r3,-12(fp)
 4007d48:	20c6b03a 	or	r3,r4,r3
 4007d4c:	10c0d785 	stb	r3,862(r2)
	vga_ctrl->VRAM[431 * 2 + 1] = 0x0d;
 4007d50:	d0a00217 	ldw	r2,-32760(gp)
 4007d54:	00c00344 	movi	r3,13
 4007d58:	10c0d7c5 	stb	r3,863(r2)
	//draw right wall
	for(int i = 0; i < 7; i++){
 4007d5c:	e03feb15 	stw	zero,-84(fp)
 4007d60:	00001706 	br	4007dc0 <drawGrid+0x3b8>
		vga_ctrl->VRAM[(471 + i * 40) * 2] = foreground << 4 | background;
 4007d64:	d4200217 	ldw	r16,-32760(gp)
 4007d68:	01401404 	movi	r5,80
 4007d6c:	e13feb17 	ldw	r4,-84(fp)
 4007d70:	400dcd40 	call	400dcd4 <__mulsi3>
 4007d74:	1080eb84 	addi	r2,r2,942
 4007d78:	e0fffc03 	ldbu	r3,-16(fp)
 4007d7c:	1806913a 	slli	r3,r3,4
 4007d80:	1809883a 	mov	r4,r3
 4007d84:	e0fffd03 	ldbu	r3,-12(fp)
 4007d88:	20c6b03a 	or	r3,r4,r3
 4007d8c:	8085883a 	add	r2,r16,r2
 4007d90:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(471 + i * 40) * 2 + 1] = 0x0e;
 4007d94:	d4200217 	ldw	r16,-32760(gp)
 4007d98:	01401404 	movi	r5,80
 4007d9c:	e13feb17 	ldw	r4,-84(fp)
 4007da0:	400dcd40 	call	400dcd4 <__mulsi3>
 4007da4:	1080ebc4 	addi	r2,r2,943
 4007da8:	8085883a 	add	r2,r16,r2
 4007dac:	00c00384 	movi	r3,14
 4007db0:	10c00005 	stb	r3,0(r2)
	}
	//draw top right corner
	vga_ctrl->VRAM[431 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[431 * 2 + 1] = 0x0d;
	//draw right wall
	for(int i = 0; i < 7; i++){
 4007db4:	e0bfeb17 	ldw	r2,-84(fp)
 4007db8:	10800044 	addi	r2,r2,1
 4007dbc:	e0bfeb15 	stw	r2,-84(fp)
 4007dc0:	e0bfeb17 	ldw	r2,-84(fp)
 4007dc4:	108001d0 	cmplti	r2,r2,7
 4007dc8:	103fe61e 	bne	r2,zero,4007d64 <__alt_mem_onchip_memory2_0+0xfc002ba4>
		vga_ctrl->VRAM[(471 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(471 + i * 40) * 2 + 1] = 0x0e;
	}
	//draw bottom right corner
	vga_ctrl->VRAM[751 * 2] = foreground << 4 | background;
 4007dcc:	d0a00217 	ldw	r2,-32760(gp)
 4007dd0:	e0fffc03 	ldbu	r3,-16(fp)
 4007dd4:	1806913a 	slli	r3,r3,4
 4007dd8:	1809883a 	mov	r4,r3
 4007ddc:	e0fffd03 	ldbu	r3,-12(fp)
 4007de0:	20c6b03a 	or	r3,r4,r3
 4007de4:	10c17785 	stb	r3,1502(r2)
	vga_ctrl->VRAM[751 * 2 + 1] = 0x0f;
 4007de8:	d0a00217 	ldw	r2,-32760(gp)
 4007dec:	00c003c4 	movi	r3,15
 4007df0:	10c177c5 	stb	r3,1503(r2)
	//draw bottom wall
	for(int i = 0; i < 4; i++){
 4007df4:	e03fec15 	stw	zero,-80(fp)
 4007df8:	00001806 	br	4007e5c <drawGrid+0x454>
		vga_ctrl->VRAM[(747 + i) * 2] = foreground << 4 | background;
 4007dfc:	d0e00217 	ldw	r3,-32760(gp)
 4007e00:	e0bfec17 	ldw	r2,-80(fp)
 4007e04:	1080bac4 	addi	r2,r2,747
 4007e08:	1085883a 	add	r2,r2,r2
 4007e0c:	100b883a 	mov	r5,r2
 4007e10:	e0bffc03 	ldbu	r2,-16(fp)
 4007e14:	1004913a 	slli	r2,r2,4
 4007e18:	1009883a 	mov	r4,r2
 4007e1c:	e0bffd03 	ldbu	r2,-12(fp)
 4007e20:	2084b03a 	or	r2,r4,r2
 4007e24:	1009883a 	mov	r4,r2
 4007e28:	1945883a 	add	r2,r3,r5
 4007e2c:	11000005 	stb	r4,0(r2)
		vga_ctrl->VRAM[(747 + i) * 2 + 1] = 0x10;
 4007e30:	d0e00217 	ldw	r3,-32760(gp)
 4007e34:	e0bfec17 	ldw	r2,-80(fp)
 4007e38:	1080bac4 	addi	r2,r2,747
 4007e3c:	1085883a 	add	r2,r2,r2
 4007e40:	10800044 	addi	r2,r2,1
 4007e44:	1885883a 	add	r2,r3,r2
 4007e48:	00c00404 	movi	r3,16
 4007e4c:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom right corner
	vga_ctrl->VRAM[751 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[751 * 2 + 1] = 0x0f;
	//draw bottom wall
	for(int i = 0; i < 4; i++){
 4007e50:	e0bfec17 	ldw	r2,-80(fp)
 4007e54:	10800044 	addi	r2,r2,1
 4007e58:	e0bfec15 	stw	r2,-80(fp)
 4007e5c:	e0bfec17 	ldw	r2,-80(fp)
 4007e60:	10800110 	cmplti	r2,r2,4
 4007e64:	103fe51e 	bne	r2,zero,4007dfc <__alt_mem_onchip_memory2_0+0xfc002c3c>
		vga_ctrl->VRAM[(747 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(747 + i) * 2 + 1] = 0x10;
	}
	//draw bottom left corner
	vga_ctrl->VRAM[746 * 2] = foreground << 4 | background;
 4007e68:	d0a00217 	ldw	r2,-32760(gp)
 4007e6c:	e0fffc03 	ldbu	r3,-16(fp)
 4007e70:	1806913a 	slli	r3,r3,4
 4007e74:	1809883a 	mov	r4,r3
 4007e78:	e0fffd03 	ldbu	r3,-12(fp)
 4007e7c:	20c6b03a 	or	r3,r4,r3
 4007e80:	10c17505 	stb	r3,1492(r2)
	vga_ctrl->VRAM[746 * 2 + 1] = 0x11;
 4007e84:	d0a00217 	ldw	r2,-32760(gp)
 4007e88:	00c00444 	movi	r3,17
 4007e8c:	10c17545 	stb	r3,1493(r2)
	//draw left wall
	for(int i = 0; i < 7; i++){
 4007e90:	e03fed15 	stw	zero,-76(fp)
 4007e94:	00001706 	br	4007ef4 <drawGrid+0x4ec>
		vga_ctrl->VRAM[(466 + i * 40) * 2] = foreground << 4 | background;
 4007e98:	d4200217 	ldw	r16,-32760(gp)
 4007e9c:	01401404 	movi	r5,80
 4007ea0:	e13fed17 	ldw	r4,-76(fp)
 4007ea4:	400dcd40 	call	400dcd4 <__mulsi3>
 4007ea8:	1080e904 	addi	r2,r2,932
 4007eac:	e0fffc03 	ldbu	r3,-16(fp)
 4007eb0:	1806913a 	slli	r3,r3,4
 4007eb4:	1809883a 	mov	r4,r3
 4007eb8:	e0fffd03 	ldbu	r3,-12(fp)
 4007ebc:	20c6b03a 	or	r3,r4,r3
 4007ec0:	8085883a 	add	r2,r16,r2
 4007ec4:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(466 + i * 40) * 2 + 1] = 0x12;
 4007ec8:	d4200217 	ldw	r16,-32760(gp)
 4007ecc:	01401404 	movi	r5,80
 4007ed0:	e13fed17 	ldw	r4,-76(fp)
 4007ed4:	400dcd40 	call	400dcd4 <__mulsi3>
 4007ed8:	1080e944 	addi	r2,r2,933
 4007edc:	8085883a 	add	r2,r16,r2
 4007ee0:	00c00484 	movi	r3,18
 4007ee4:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom left corner
	vga_ctrl->VRAM[746 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[746 * 2 + 1] = 0x11;
	//draw left wall
	for(int i = 0; i < 7; i++){
 4007ee8:	e0bfed17 	ldw	r2,-76(fp)
 4007eec:	10800044 	addi	r2,r2,1
 4007ef0:	e0bfed15 	stw	r2,-76(fp)
 4007ef4:	e0bfed17 	ldw	r2,-76(fp)
 4007ef8:	108001d0 	cmplti	r2,r2,7
 4007efc:	103fe61e 	bne	r2,zero,4007e98 <__alt_mem_onchip_memory2_0+0xfc002cd8>
		vga_ctrl->VRAM[(466 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(466 + i * 40) * 2 + 1] = 0x12;
	}
	//N
	vga_ctrl->VRAM[467 * 2] = text << 4 | background;
 4007f00:	d0a00217 	ldw	r2,-32760(gp)
 4007f04:	e0fffe03 	ldbu	r3,-8(fp)
 4007f08:	1806913a 	slli	r3,r3,4
 4007f0c:	1809883a 	mov	r4,r3
 4007f10:	e0fffd03 	ldbu	r3,-12(fp)
 4007f14:	20c6b03a 	or	r3,r4,r3
 4007f18:	10c0e985 	stb	r3,934(r2)
	vga_ctrl->VRAM[467 * 2 + 1] = 0x2d;
 4007f1c:	d0a00217 	ldw	r2,-32760(gp)
 4007f20:	00c00b44 	movi	r3,45
 4007f24:	10c0e9c5 	stb	r3,935(r2)
	//E
	vga_ctrl->VRAM[468 * 2] = text << 4 | background;
 4007f28:	d0a00217 	ldw	r2,-32760(gp)
 4007f2c:	e0fffe03 	ldbu	r3,-8(fp)
 4007f30:	1806913a 	slli	r3,r3,4
 4007f34:	1809883a 	mov	r4,r3
 4007f38:	e0fffd03 	ldbu	r3,-12(fp)
 4007f3c:	20c6b03a 	or	r3,r4,r3
 4007f40:	10c0ea05 	stb	r3,936(r2)
	vga_ctrl->VRAM[468 * 2 + 1] = 0x24;
 4007f44:	d0a00217 	ldw	r2,-32760(gp)
 4007f48:	00c00904 	movi	r3,36
 4007f4c:	10c0ea45 	stb	r3,937(r2)
	//X
	vga_ctrl->VRAM[469 * 2] = text << 4 | background;
 4007f50:	d0a00217 	ldw	r2,-32760(gp)
 4007f54:	e0fffe03 	ldbu	r3,-8(fp)
 4007f58:	1806913a 	slli	r3,r3,4
 4007f5c:	1809883a 	mov	r4,r3
 4007f60:	e0fffd03 	ldbu	r3,-12(fp)
 4007f64:	20c6b03a 	or	r3,r4,r3
 4007f68:	10c0ea85 	stb	r3,938(r2)
	vga_ctrl->VRAM[469 * 2 + 1] = 0x37;
 4007f6c:	d0a00217 	ldw	r2,-32760(gp)
 4007f70:	00c00dc4 	movi	r3,55
 4007f74:	10c0eac5 	stb	r3,939(r2)
	//T
	vga_ctrl->VRAM[470 * 2] = text << 4 | background;
 4007f78:	d0a00217 	ldw	r2,-32760(gp)
 4007f7c:	e0fffe03 	ldbu	r3,-8(fp)
 4007f80:	1806913a 	slli	r3,r3,4
 4007f84:	1809883a 	mov	r4,r3
 4007f88:	e0fffd03 	ldbu	r3,-12(fp)
 4007f8c:	20c6b03a 	or	r3,r4,r3
 4007f90:	10c0eb05 	stb	r3,940(r2)
	vga_ctrl->VRAM[470 * 2 + 1] = 0x33;
 4007f94:	d0a00217 	ldw	r2,-32760(gp)
 4007f98:	00c00cc4 	movi	r3,51
 4007f9c:	10c0eb45 	stb	r3,941(r2)

	//draw stats grid & words
	//draw top left corner
	vga_ctrl->VRAM[41 * 2] = foreground << 4 | background;
 4007fa0:	d0a00217 	ldw	r2,-32760(gp)
 4007fa4:	e0fffc03 	ldbu	r3,-16(fp)
 4007fa8:	1806913a 	slli	r3,r3,4
 4007fac:	1809883a 	mov	r4,r3
 4007fb0:	e0fffd03 	ldbu	r3,-12(fp)
 4007fb4:	20c6b03a 	or	r3,r4,r3
 4007fb8:	10c01485 	stb	r3,82(r2)
	vga_ctrl->VRAM[41 * 2 + 1] = 0x0b;
 4007fbc:	d0a00217 	ldw	r2,-32760(gp)
 4007fc0:	00c002c4 	movi	r3,11
 4007fc4:	10c014c5 	stb	r3,83(r2)
	//draw top wall
	for(int i = 0; i < 11; i++){
 4007fc8:	e03fee15 	stw	zero,-72(fp)
 4007fcc:	00001806 	br	4008030 <drawGrid+0x628>
		vga_ctrl->VRAM[(42 + i) * 2] = foreground << 4 | background;
 4007fd0:	d0e00217 	ldw	r3,-32760(gp)
 4007fd4:	e0bfee17 	ldw	r2,-72(fp)
 4007fd8:	10800a84 	addi	r2,r2,42
 4007fdc:	1085883a 	add	r2,r2,r2
 4007fe0:	100b883a 	mov	r5,r2
 4007fe4:	e0bffc03 	ldbu	r2,-16(fp)
 4007fe8:	1004913a 	slli	r2,r2,4
 4007fec:	1009883a 	mov	r4,r2
 4007ff0:	e0bffd03 	ldbu	r2,-12(fp)
 4007ff4:	2084b03a 	or	r2,r4,r2
 4007ff8:	1009883a 	mov	r4,r2
 4007ffc:	1945883a 	add	r2,r3,r5
 4008000:	11000005 	stb	r4,0(r2)
		vga_ctrl->VRAM[(42 + i) * 2 + 1] = 0x0c;
 4008004:	d0e00217 	ldw	r3,-32760(gp)
 4008008:	e0bfee17 	ldw	r2,-72(fp)
 400800c:	10800a84 	addi	r2,r2,42
 4008010:	1085883a 	add	r2,r2,r2
 4008014:	10800044 	addi	r2,r2,1
 4008018:	1885883a 	add	r2,r3,r2
 400801c:	00c00304 	movi	r3,12
 4008020:	10c00005 	stb	r3,0(r2)
	//draw stats grid & words
	//draw top left corner
	vga_ctrl->VRAM[41 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[41 * 2 + 1] = 0x0b;
	//draw top wall
	for(int i = 0; i < 11; i++){
 4008024:	e0bfee17 	ldw	r2,-72(fp)
 4008028:	10800044 	addi	r2,r2,1
 400802c:	e0bfee15 	stw	r2,-72(fp)
 4008030:	e0bfee17 	ldw	r2,-72(fp)
 4008034:	108002d0 	cmplti	r2,r2,11
 4008038:	103fe51e 	bne	r2,zero,4007fd0 <__alt_mem_onchip_memory2_0+0xfc002e10>
		vga_ctrl->VRAM[(42 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(42 + i) * 2 + 1] = 0x0c;
	}
	//draw top right corner
	vga_ctrl->VRAM[53 * 2] = foreground << 4 | background;
 400803c:	d0a00217 	ldw	r2,-32760(gp)
 4008040:	e0fffc03 	ldbu	r3,-16(fp)
 4008044:	1806913a 	slli	r3,r3,4
 4008048:	1809883a 	mov	r4,r3
 400804c:	e0fffd03 	ldbu	r3,-12(fp)
 4008050:	20c6b03a 	or	r3,r4,r3
 4008054:	10c01a85 	stb	r3,106(r2)
	vga_ctrl->VRAM[53 * 2 + 1] = 0x0d;
 4008058:	d0a00217 	ldw	r2,-32760(gp)
 400805c:	00c00344 	movi	r3,13
 4008060:	10c01ac5 	stb	r3,107(r2)
	//draw right wall
	for(int i = 0; i < 24; i++){
 4008064:	e03fef15 	stw	zero,-68(fp)
 4008068:	00001706 	br	40080c8 <drawGrid+0x6c0>
		vga_ctrl->VRAM[(93 + i * 40) * 2] = foreground << 4 | background;
 400806c:	d4200217 	ldw	r16,-32760(gp)
 4008070:	01401404 	movi	r5,80
 4008074:	e13fef17 	ldw	r4,-68(fp)
 4008078:	400dcd40 	call	400dcd4 <__mulsi3>
 400807c:	10802e84 	addi	r2,r2,186
 4008080:	e0fffc03 	ldbu	r3,-16(fp)
 4008084:	1806913a 	slli	r3,r3,4
 4008088:	1809883a 	mov	r4,r3
 400808c:	e0fffd03 	ldbu	r3,-12(fp)
 4008090:	20c6b03a 	or	r3,r4,r3
 4008094:	8085883a 	add	r2,r16,r2
 4008098:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(93 + i * 40) * 2 + 1] = 0x0e;
 400809c:	d4200217 	ldw	r16,-32760(gp)
 40080a0:	01401404 	movi	r5,80
 40080a4:	e13fef17 	ldw	r4,-68(fp)
 40080a8:	400dcd40 	call	400dcd4 <__mulsi3>
 40080ac:	10802ec4 	addi	r2,r2,187
 40080b0:	8085883a 	add	r2,r16,r2
 40080b4:	00c00384 	movi	r3,14
 40080b8:	10c00005 	stb	r3,0(r2)
	}
	//draw top right corner
	vga_ctrl->VRAM[53 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[53 * 2 + 1] = 0x0d;
	//draw right wall
	for(int i = 0; i < 24; i++){
 40080bc:	e0bfef17 	ldw	r2,-68(fp)
 40080c0:	10800044 	addi	r2,r2,1
 40080c4:	e0bfef15 	stw	r2,-68(fp)
 40080c8:	e0bfef17 	ldw	r2,-68(fp)
 40080cc:	10800610 	cmplti	r2,r2,24
 40080d0:	103fe61e 	bne	r2,zero,400806c <__alt_mem_onchip_memory2_0+0xfc002eac>
		vga_ctrl->VRAM[(93 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(93 + i * 40) * 2 + 1] = 0x0e;
	}
	//draw bottom right corner
	vga_ctrl->VRAM[1053 * 2] = foreground << 4 | background;
 40080d4:	d0a00217 	ldw	r2,-32760(gp)
 40080d8:	e0fffc03 	ldbu	r3,-16(fp)
 40080dc:	1806913a 	slli	r3,r3,4
 40080e0:	1809883a 	mov	r4,r3
 40080e4:	e0fffd03 	ldbu	r3,-12(fp)
 40080e8:	20c6b03a 	or	r3,r4,r3
 40080ec:	10c20e85 	stb	r3,2106(r2)
	vga_ctrl->VRAM[1053 * 2 + 1] = 0x0f;
 40080f0:	d0a00217 	ldw	r2,-32760(gp)
 40080f4:	00c003c4 	movi	r3,15
 40080f8:	10c20ec5 	stb	r3,2107(r2)
	//draw bottom wall
	for(int i = 0; i < 11; i++){
 40080fc:	e03ff015 	stw	zero,-64(fp)
 4008100:	00001806 	br	4008164 <drawGrid+0x75c>
		vga_ctrl->VRAM[(1042 + i) * 2] = foreground << 4 | background;
 4008104:	d0e00217 	ldw	r3,-32760(gp)
 4008108:	e0bff017 	ldw	r2,-64(fp)
 400810c:	10810484 	addi	r2,r2,1042
 4008110:	1085883a 	add	r2,r2,r2
 4008114:	100b883a 	mov	r5,r2
 4008118:	e0bffc03 	ldbu	r2,-16(fp)
 400811c:	1004913a 	slli	r2,r2,4
 4008120:	1009883a 	mov	r4,r2
 4008124:	e0bffd03 	ldbu	r2,-12(fp)
 4008128:	2084b03a 	or	r2,r4,r2
 400812c:	1009883a 	mov	r4,r2
 4008130:	1945883a 	add	r2,r3,r5
 4008134:	11000005 	stb	r4,0(r2)
		vga_ctrl->VRAM[(1042 + i) * 2 + 1] = 0x10;
 4008138:	d0e00217 	ldw	r3,-32760(gp)
 400813c:	e0bff017 	ldw	r2,-64(fp)
 4008140:	10810484 	addi	r2,r2,1042
 4008144:	1085883a 	add	r2,r2,r2
 4008148:	10800044 	addi	r2,r2,1
 400814c:	1885883a 	add	r2,r3,r2
 4008150:	00c00404 	movi	r3,16
 4008154:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom right corner
	vga_ctrl->VRAM[1053 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[1053 * 2 + 1] = 0x0f;
	//draw bottom wall
	for(int i = 0; i < 11; i++){
 4008158:	e0bff017 	ldw	r2,-64(fp)
 400815c:	10800044 	addi	r2,r2,1
 4008160:	e0bff015 	stw	r2,-64(fp)
 4008164:	e0bff017 	ldw	r2,-64(fp)
 4008168:	108002d0 	cmplti	r2,r2,11
 400816c:	103fe51e 	bne	r2,zero,4008104 <__alt_mem_onchip_memory2_0+0xfc002f44>
		vga_ctrl->VRAM[(1042 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(1042 + i) * 2 + 1] = 0x10;
	}
	//draw bottom left corner
	vga_ctrl->VRAM[1041 * 2] = foreground << 4 | background;
 4008170:	d0a00217 	ldw	r2,-32760(gp)
 4008174:	e0fffc03 	ldbu	r3,-16(fp)
 4008178:	1806913a 	slli	r3,r3,4
 400817c:	1809883a 	mov	r4,r3
 4008180:	e0fffd03 	ldbu	r3,-12(fp)
 4008184:	20c6b03a 	or	r3,r4,r3
 4008188:	10c20885 	stb	r3,2082(r2)
	vga_ctrl->VRAM[1041 * 2 + 1] = 0x11;
 400818c:	d0a00217 	ldw	r2,-32760(gp)
 4008190:	00c00444 	movi	r3,17
 4008194:	10c208c5 	stb	r3,2083(r2)
	//draw left wall
	for(int i = 0; i < 24; i++){
 4008198:	e03ff115 	stw	zero,-60(fp)
 400819c:	00001706 	br	40081fc <drawGrid+0x7f4>
		vga_ctrl->VRAM[(81 + i * 40) * 2] = foreground << 4 | background;
 40081a0:	d4200217 	ldw	r16,-32760(gp)
 40081a4:	01401404 	movi	r5,80
 40081a8:	e13ff117 	ldw	r4,-60(fp)
 40081ac:	400dcd40 	call	400dcd4 <__mulsi3>
 40081b0:	10802884 	addi	r2,r2,162
 40081b4:	e0fffc03 	ldbu	r3,-16(fp)
 40081b8:	1806913a 	slli	r3,r3,4
 40081bc:	1809883a 	mov	r4,r3
 40081c0:	e0fffd03 	ldbu	r3,-12(fp)
 40081c4:	20c6b03a 	or	r3,r4,r3
 40081c8:	8085883a 	add	r2,r16,r2
 40081cc:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(81 + i * 40) * 2 + 1] = 0x12;
 40081d0:	d4200217 	ldw	r16,-32760(gp)
 40081d4:	01401404 	movi	r5,80
 40081d8:	e13ff117 	ldw	r4,-60(fp)
 40081dc:	400dcd40 	call	400dcd4 <__mulsi3>
 40081e0:	108028c4 	addi	r2,r2,163
 40081e4:	8085883a 	add	r2,r16,r2
 40081e8:	00c00484 	movi	r3,18
 40081ec:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom left corner
	vga_ctrl->VRAM[1041 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[1041 * 2 + 1] = 0x11;
	//draw left wall
	for(int i = 0; i < 24; i++){
 40081f0:	e0bff117 	ldw	r2,-60(fp)
 40081f4:	10800044 	addi	r2,r2,1
 40081f8:	e0bff115 	stw	r2,-60(fp)
 40081fc:	e0bff117 	ldw	r2,-60(fp)
 4008200:	10800610 	cmplti	r2,r2,24
 4008204:	103fe61e 	bne	r2,zero,40081a0 <__alt_mem_onchip_memory2_0+0xfc002fe0>
		vga_ctrl->VRAM[(81 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(81 + i * 40) * 2 + 1] = 0x12;
	}
	//S
	vga_ctrl->VRAM[123 * 2] = text << 4 | background;
 4008208:	d0a00217 	ldw	r2,-32760(gp)
 400820c:	e0fffe03 	ldbu	r3,-8(fp)
 4008210:	1806913a 	slli	r3,r3,4
 4008214:	1809883a 	mov	r4,r3
 4008218:	e0fffd03 	ldbu	r3,-12(fp)
 400821c:	20c6b03a 	or	r3,r4,r3
 4008220:	10c03d85 	stb	r3,246(r2)
	vga_ctrl->VRAM[123 * 2 + 1] = 0x32;
 4008224:	d0a00217 	ldw	r2,-32760(gp)
 4008228:	00c00c84 	movi	r3,50
 400822c:	10c03dc5 	stb	r3,247(r2)
	//T
	vga_ctrl->VRAM[124 * 2] = text << 4 | background;
 4008230:	d0a00217 	ldw	r2,-32760(gp)
 4008234:	e0fffe03 	ldbu	r3,-8(fp)
 4008238:	1806913a 	slli	r3,r3,4
 400823c:	1809883a 	mov	r4,r3
 4008240:	e0fffd03 	ldbu	r3,-12(fp)
 4008244:	20c6b03a 	or	r3,r4,r3
 4008248:	10c03e05 	stb	r3,248(r2)
	vga_ctrl->VRAM[124 * 2 + 1] = 0x33;
 400824c:	d0a00217 	ldw	r2,-32760(gp)
 4008250:	00c00cc4 	movi	r3,51
 4008254:	10c03e45 	stb	r3,249(r2)
	//A
	vga_ctrl->VRAM[125 * 2] = text << 4 | background;
 4008258:	d0a00217 	ldw	r2,-32760(gp)
 400825c:	e0fffe03 	ldbu	r3,-8(fp)
 4008260:	1806913a 	slli	r3,r3,4
 4008264:	1809883a 	mov	r4,r3
 4008268:	e0fffd03 	ldbu	r3,-12(fp)
 400826c:	20c6b03a 	or	r3,r4,r3
 4008270:	10c03e85 	stb	r3,250(r2)
	vga_ctrl->VRAM[125 * 2 + 1] = 0x20;
 4008274:	d0a00217 	ldw	r2,-32760(gp)
 4008278:	00c00804 	movi	r3,32
 400827c:	10c03ec5 	stb	r3,251(r2)
	//T
	vga_ctrl->VRAM[126 * 2] = text << 4 | background;
 4008280:	d0a00217 	ldw	r2,-32760(gp)
 4008284:	e0fffe03 	ldbu	r3,-8(fp)
 4008288:	1806913a 	slli	r3,r3,4
 400828c:	1809883a 	mov	r4,r3
 4008290:	e0fffd03 	ldbu	r3,-12(fp)
 4008294:	20c6b03a 	or	r3,r4,r3
 4008298:	10c03f05 	stb	r3,252(r2)
	vga_ctrl->VRAM[126 * 2 + 1] = 0x33;
 400829c:	d0a00217 	ldw	r2,-32760(gp)
 40082a0:	00c00cc4 	movi	r3,51
 40082a4:	10c03f45 	stb	r3,253(r2)
	//I
	vga_ctrl->VRAM[127 * 2] = text << 4 | background;
 40082a8:	d0a00217 	ldw	r2,-32760(gp)
 40082ac:	e0fffe03 	ldbu	r3,-8(fp)
 40082b0:	1806913a 	slli	r3,r3,4
 40082b4:	1809883a 	mov	r4,r3
 40082b8:	e0fffd03 	ldbu	r3,-12(fp)
 40082bc:	20c6b03a 	or	r3,r4,r3
 40082c0:	10c03f85 	stb	r3,254(r2)
	vga_ctrl->VRAM[127 * 2 + 1] = 0x28;
 40082c4:	d0a00217 	ldw	r2,-32760(gp)
 40082c8:	00c00a04 	movi	r3,40
 40082cc:	10c03fc5 	stb	r3,255(r2)
	//S
	vga_ctrl->VRAM[128 * 2] = text << 4 | background;
 40082d0:	d0a00217 	ldw	r2,-32760(gp)
 40082d4:	e0fffe03 	ldbu	r3,-8(fp)
 40082d8:	1806913a 	slli	r3,r3,4
 40082dc:	1809883a 	mov	r4,r3
 40082e0:	e0fffd03 	ldbu	r3,-12(fp)
 40082e4:	20c6b03a 	or	r3,r4,r3
 40082e8:	10c04005 	stb	r3,256(r2)
	vga_ctrl->VRAM[128 * 2 + 1] = 0x32;
 40082ec:	d0a00217 	ldw	r2,-32760(gp)
 40082f0:	00c00c84 	movi	r3,50
 40082f4:	10c04045 	stb	r3,257(r2)
	//T
	vga_ctrl->VRAM[129 * 2] = text << 4 | background;
 40082f8:	d0a00217 	ldw	r2,-32760(gp)
 40082fc:	e0fffe03 	ldbu	r3,-8(fp)
 4008300:	1806913a 	slli	r3,r3,4
 4008304:	1809883a 	mov	r4,r3
 4008308:	e0fffd03 	ldbu	r3,-12(fp)
 400830c:	20c6b03a 	or	r3,r4,r3
 4008310:	10c04085 	stb	r3,258(r2)
	vga_ctrl->VRAM[129 * 2 + 1] = 0x33;
 4008314:	d0a00217 	ldw	r2,-32760(gp)
 4008318:	00c00cc4 	movi	r3,51
 400831c:	10c040c5 	stb	r3,259(r2)
	//I
	vga_ctrl->VRAM[130 * 2] = text << 4 | background;
 4008320:	d0a00217 	ldw	r2,-32760(gp)
 4008324:	e0fffe03 	ldbu	r3,-8(fp)
 4008328:	1806913a 	slli	r3,r3,4
 400832c:	1809883a 	mov	r4,r3
 4008330:	e0fffd03 	ldbu	r3,-12(fp)
 4008334:	20c6b03a 	or	r3,r4,r3
 4008338:	10c04105 	stb	r3,260(r2)
	vga_ctrl->VRAM[130 * 2 + 1] = 0x28;
 400833c:	d0a00217 	ldw	r2,-32760(gp)
 4008340:	00c00a04 	movi	r3,40
 4008344:	10c04145 	stb	r3,261(r2)
	//C
	vga_ctrl->VRAM[131 * 2] = text << 4 | background;
 4008348:	d0a00217 	ldw	r2,-32760(gp)
 400834c:	e0fffe03 	ldbu	r3,-8(fp)
 4008350:	1806913a 	slli	r3,r3,4
 4008354:	1809883a 	mov	r4,r3
 4008358:	e0fffd03 	ldbu	r3,-12(fp)
 400835c:	20c6b03a 	or	r3,r4,r3
 4008360:	10c04185 	stb	r3,262(r2)
	vga_ctrl->VRAM[131 * 2 + 1] = 0x22;
 4008364:	d0a00217 	ldw	r2,-32760(gp)
 4008368:	00c00884 	movi	r3,34
 400836c:	10c041c5 	stb	r3,263(r2)

	//draw score grid & words
	//draw top left corner
	vga_ctrl->VRAM[66 * 2] = foreground << 4 | background;
 4008370:	d0a00217 	ldw	r2,-32760(gp)
 4008374:	e0fffc03 	ldbu	r3,-16(fp)
 4008378:	1806913a 	slli	r3,r3,4
 400837c:	1809883a 	mov	r4,r3
 4008380:	e0fffd03 	ldbu	r3,-12(fp)
 4008384:	20c6b03a 	or	r3,r4,r3
 4008388:	10c02105 	stb	r3,132(r2)
	vga_ctrl->VRAM[66 * 2 + 1] = 0x0b;
 400838c:	d0a00217 	ldw	r2,-32760(gp)
 4008390:	00c002c4 	movi	r3,11
 4008394:	10c02145 	stb	r3,133(r2)
	//draw top wall
	for(int i = 0; i < 9; i++){
 4008398:	e03ff215 	stw	zero,-56(fp)
 400839c:	00001806 	br	4008400 <drawGrid+0x9f8>
		vga_ctrl->VRAM[(67 + i) * 2] = foreground << 4 | background;
 40083a0:	d0e00217 	ldw	r3,-32760(gp)
 40083a4:	e0bff217 	ldw	r2,-56(fp)
 40083a8:	108010c4 	addi	r2,r2,67
 40083ac:	1085883a 	add	r2,r2,r2
 40083b0:	100b883a 	mov	r5,r2
 40083b4:	e0bffc03 	ldbu	r2,-16(fp)
 40083b8:	1004913a 	slli	r2,r2,4
 40083bc:	1009883a 	mov	r4,r2
 40083c0:	e0bffd03 	ldbu	r2,-12(fp)
 40083c4:	2084b03a 	or	r2,r4,r2
 40083c8:	1009883a 	mov	r4,r2
 40083cc:	1945883a 	add	r2,r3,r5
 40083d0:	11000005 	stb	r4,0(r2)
		vga_ctrl->VRAM[(67 + i) * 2 + 1] = 0x0c;
 40083d4:	d0e00217 	ldw	r3,-32760(gp)
 40083d8:	e0bff217 	ldw	r2,-56(fp)
 40083dc:	108010c4 	addi	r2,r2,67
 40083e0:	1085883a 	add	r2,r2,r2
 40083e4:	10800044 	addi	r2,r2,1
 40083e8:	1885883a 	add	r2,r3,r2
 40083ec:	00c00304 	movi	r3,12
 40083f0:	10c00005 	stb	r3,0(r2)
	//draw score grid & words
	//draw top left corner
	vga_ctrl->VRAM[66 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[66 * 2 + 1] = 0x0b;
	//draw top wall
	for(int i = 0; i < 9; i++){
 40083f4:	e0bff217 	ldw	r2,-56(fp)
 40083f8:	10800044 	addi	r2,r2,1
 40083fc:	e0bff215 	stw	r2,-56(fp)
 4008400:	e0bff217 	ldw	r2,-56(fp)
 4008404:	10800250 	cmplti	r2,r2,9
 4008408:	103fe51e 	bne	r2,zero,40083a0 <__alt_mem_onchip_memory2_0+0xfc0031e0>
		vga_ctrl->VRAM[(67 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(67 + i) * 2 + 1] = 0x0c;
	}
	//draw top right corner
	vga_ctrl->VRAM[76 * 2] = foreground << 4 | background;
 400840c:	d0a00217 	ldw	r2,-32760(gp)
 4008410:	e0fffc03 	ldbu	r3,-16(fp)
 4008414:	1806913a 	slli	r3,r3,4
 4008418:	1809883a 	mov	r4,r3
 400841c:	e0fffd03 	ldbu	r3,-12(fp)
 4008420:	20c6b03a 	or	r3,r4,r3
 4008424:	10c02605 	stb	r3,152(r2)
	vga_ctrl->VRAM[76 * 2 + 1] = 0x0d;
 4008428:	d0a00217 	ldw	r2,-32760(gp)
 400842c:	00c00344 	movi	r3,13
 4008430:	10c02645 	stb	r3,153(r2)
	//draw right wall
	for(int i = 0; i < 7; i++){
 4008434:	e03ff315 	stw	zero,-52(fp)
 4008438:	00001706 	br	4008498 <drawGrid+0xa90>
		vga_ctrl->VRAM[(116 + i * 40) * 2] = foreground << 4 | background;
 400843c:	d4200217 	ldw	r16,-32760(gp)
 4008440:	01401404 	movi	r5,80
 4008444:	e13ff317 	ldw	r4,-52(fp)
 4008448:	400dcd40 	call	400dcd4 <__mulsi3>
 400844c:	10803a04 	addi	r2,r2,232
 4008450:	e0fffc03 	ldbu	r3,-16(fp)
 4008454:	1806913a 	slli	r3,r3,4
 4008458:	1809883a 	mov	r4,r3
 400845c:	e0fffd03 	ldbu	r3,-12(fp)
 4008460:	20c6b03a 	or	r3,r4,r3
 4008464:	8085883a 	add	r2,r16,r2
 4008468:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(116 + i * 40) * 2 + 1] = 0x0e;
 400846c:	d4200217 	ldw	r16,-32760(gp)
 4008470:	01401404 	movi	r5,80
 4008474:	e13ff317 	ldw	r4,-52(fp)
 4008478:	400dcd40 	call	400dcd4 <__mulsi3>
 400847c:	10803a44 	addi	r2,r2,233
 4008480:	8085883a 	add	r2,r16,r2
 4008484:	00c00384 	movi	r3,14
 4008488:	10c00005 	stb	r3,0(r2)
	}
	//draw top right corner
	vga_ctrl->VRAM[76 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[76 * 2 + 1] = 0x0d;
	//draw right wall
	for(int i = 0; i < 7; i++){
 400848c:	e0bff317 	ldw	r2,-52(fp)
 4008490:	10800044 	addi	r2,r2,1
 4008494:	e0bff315 	stw	r2,-52(fp)
 4008498:	e0bff317 	ldw	r2,-52(fp)
 400849c:	108001d0 	cmplti	r2,r2,7
 40084a0:	103fe61e 	bne	r2,zero,400843c <__alt_mem_onchip_memory2_0+0xfc00327c>
		vga_ctrl->VRAM[(116 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(116 + i * 40) * 2 + 1] = 0x0e;
	}
	//draw bottom right corner
	vga_ctrl->VRAM[396 * 2] = foreground << 4 | background;
 40084a4:	d0a00217 	ldw	r2,-32760(gp)
 40084a8:	e0fffc03 	ldbu	r3,-16(fp)
 40084ac:	1806913a 	slli	r3,r3,4
 40084b0:	1809883a 	mov	r4,r3
 40084b4:	e0fffd03 	ldbu	r3,-12(fp)
 40084b8:	20c6b03a 	or	r3,r4,r3
 40084bc:	10c0c605 	stb	r3,792(r2)
	vga_ctrl->VRAM[396 * 2 + 1] = 0x0f;
 40084c0:	d0a00217 	ldw	r2,-32760(gp)
 40084c4:	00c003c4 	movi	r3,15
 40084c8:	10c0c645 	stb	r3,793(r2)
	//draw bottom wall
	for(int i = 0; i < 9; i++){
 40084cc:	e03ff415 	stw	zero,-48(fp)
 40084d0:	00001806 	br	4008534 <drawGrid+0xb2c>
		vga_ctrl->VRAM[(387 + i) * 2] = foreground << 4 | background;
 40084d4:	d0e00217 	ldw	r3,-32760(gp)
 40084d8:	e0bff417 	ldw	r2,-48(fp)
 40084dc:	108060c4 	addi	r2,r2,387
 40084e0:	1085883a 	add	r2,r2,r2
 40084e4:	100b883a 	mov	r5,r2
 40084e8:	e0bffc03 	ldbu	r2,-16(fp)
 40084ec:	1004913a 	slli	r2,r2,4
 40084f0:	1009883a 	mov	r4,r2
 40084f4:	e0bffd03 	ldbu	r2,-12(fp)
 40084f8:	2084b03a 	or	r2,r4,r2
 40084fc:	1009883a 	mov	r4,r2
 4008500:	1945883a 	add	r2,r3,r5
 4008504:	11000005 	stb	r4,0(r2)
		vga_ctrl->VRAM[(387 + i) * 2 + 1] = 0x10;
 4008508:	d0e00217 	ldw	r3,-32760(gp)
 400850c:	e0bff417 	ldw	r2,-48(fp)
 4008510:	108060c4 	addi	r2,r2,387
 4008514:	1085883a 	add	r2,r2,r2
 4008518:	10800044 	addi	r2,r2,1
 400851c:	1885883a 	add	r2,r3,r2
 4008520:	00c00404 	movi	r3,16
 4008524:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom right corner
	vga_ctrl->VRAM[396 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[396 * 2 + 1] = 0x0f;
	//draw bottom wall
	for(int i = 0; i < 9; i++){
 4008528:	e0bff417 	ldw	r2,-48(fp)
 400852c:	10800044 	addi	r2,r2,1
 4008530:	e0bff415 	stw	r2,-48(fp)
 4008534:	e0bff417 	ldw	r2,-48(fp)
 4008538:	10800250 	cmplti	r2,r2,9
 400853c:	103fe51e 	bne	r2,zero,40084d4 <__alt_mem_onchip_memory2_0+0xfc003314>
		vga_ctrl->VRAM[(387 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(387 + i) * 2 + 1] = 0x10;
	}
	//draw bottom left corner
	vga_ctrl->VRAM[386 * 2] = foreground << 4 | background;
 4008540:	d0a00217 	ldw	r2,-32760(gp)
 4008544:	e0fffc03 	ldbu	r3,-16(fp)
 4008548:	1806913a 	slli	r3,r3,4
 400854c:	1809883a 	mov	r4,r3
 4008550:	e0fffd03 	ldbu	r3,-12(fp)
 4008554:	20c6b03a 	or	r3,r4,r3
 4008558:	10c0c105 	stb	r3,772(r2)
	vga_ctrl->VRAM[386 * 2 + 1] = 0x11;
 400855c:	d0a00217 	ldw	r2,-32760(gp)
 4008560:	00c00444 	movi	r3,17
 4008564:	10c0c145 	stb	r3,773(r2)
	//draw left wall
	for(int i = 0; i < 7; i++){
 4008568:	e03ff515 	stw	zero,-44(fp)
 400856c:	00001706 	br	40085cc <drawGrid+0xbc4>
		vga_ctrl->VRAM[(106 + i * 40) * 2] = foreground << 4 | background;
 4008570:	d4200217 	ldw	r16,-32760(gp)
 4008574:	01401404 	movi	r5,80
 4008578:	e13ff517 	ldw	r4,-44(fp)
 400857c:	400dcd40 	call	400dcd4 <__mulsi3>
 4008580:	10803504 	addi	r2,r2,212
 4008584:	e0fffc03 	ldbu	r3,-16(fp)
 4008588:	1806913a 	slli	r3,r3,4
 400858c:	1809883a 	mov	r4,r3
 4008590:	e0fffd03 	ldbu	r3,-12(fp)
 4008594:	20c6b03a 	or	r3,r4,r3
 4008598:	8085883a 	add	r2,r16,r2
 400859c:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(106 + i * 40) * 2 + 1] = 0x12;
 40085a0:	d4200217 	ldw	r16,-32760(gp)
 40085a4:	01401404 	movi	r5,80
 40085a8:	e13ff517 	ldw	r4,-44(fp)
 40085ac:	400dcd40 	call	400dcd4 <__mulsi3>
 40085b0:	10803544 	addi	r2,r2,213
 40085b4:	8085883a 	add	r2,r16,r2
 40085b8:	00c00484 	movi	r3,18
 40085bc:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom left corner
	vga_ctrl->VRAM[386 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[386 * 2 + 1] = 0x11;
	//draw left wall
	for(int i = 0; i < 7; i++){
 40085c0:	e0bff517 	ldw	r2,-44(fp)
 40085c4:	10800044 	addi	r2,r2,1
 40085c8:	e0bff515 	stw	r2,-44(fp)
 40085cc:	e0bff517 	ldw	r2,-44(fp)
 40085d0:	108001d0 	cmplti	r2,r2,7
 40085d4:	103fe61e 	bne	r2,zero,4008570 <__alt_mem_onchip_memory2_0+0xfc0033b0>
		vga_ctrl->VRAM[(106 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(106 + i * 40) * 2 + 1] = 0x12;
	}
	for(int i = 0; i < 5; i++){
 40085d8:	e03ff615 	stw	zero,-40(fp)
 40085dc:	00001d06 	br	4008654 <drawGrid+0xc4c>
		vga_ctrl->VRAM[108 + i * 2] = text << 4 | background;
 40085e0:	d0e00217 	ldw	r3,-32760(gp)
 40085e4:	e0bff617 	ldw	r2,-40(fp)
 40085e8:	10800d84 	addi	r2,r2,54
 40085ec:	1085883a 	add	r2,r2,r2
 40085f0:	100b883a 	mov	r5,r2
 40085f4:	e0bffe03 	ldbu	r2,-8(fp)
 40085f8:	1004913a 	slli	r2,r2,4
 40085fc:	1009883a 	mov	r4,r2
 4008600:	e0bffd03 	ldbu	r2,-12(fp)
 4008604:	2084b03a 	or	r2,r4,r2
 4008608:	1009883a 	mov	r4,r2
 400860c:	1945883a 	add	r2,r3,r5
 4008610:	11000005 	stb	r4,0(r2)
		vga_ctrl->VRAM[228 + i * 2] = text << 4 | background;
 4008614:	d0e00217 	ldw	r3,-32760(gp)
 4008618:	e0bff617 	ldw	r2,-40(fp)
 400861c:	10801c84 	addi	r2,r2,114
 4008620:	1085883a 	add	r2,r2,r2
 4008624:	100b883a 	mov	r5,r2
 4008628:	e0bffe03 	ldbu	r2,-8(fp)
 400862c:	1004913a 	slli	r2,r2,4
 4008630:	1009883a 	mov	r4,r2
 4008634:	e0bffd03 	ldbu	r2,-12(fp)
 4008638:	2084b03a 	or	r2,r4,r2
 400863c:	1009883a 	mov	r4,r2
 4008640:	1945883a 	add	r2,r3,r5
 4008644:	11000005 	stb	r4,0(r2)
	//draw left wall
	for(int i = 0; i < 7; i++){
		vga_ctrl->VRAM[(106 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(106 + i * 40) * 2 + 1] = 0x12;
	}
	for(int i = 0; i < 5; i++){
 4008648:	e0bff617 	ldw	r2,-40(fp)
 400864c:	10800044 	addi	r2,r2,1
 4008650:	e0bff615 	stw	r2,-40(fp)
 4008654:	e0bff617 	ldw	r2,-40(fp)
 4008658:	10800150 	cmplti	r2,r2,5
 400865c:	103fe01e 	bne	r2,zero,40085e0 <__alt_mem_onchip_memory2_0+0xfc003420>
		vga_ctrl->VRAM[108 + i * 2] = text << 4 | background;
		vga_ctrl->VRAM[228 + i * 2] = text << 4 | background;
	}
	//S
	vga_ctrl->VRAM[148 * 2] = text << 4 | background;
 4008660:	d0a00217 	ldw	r2,-32760(gp)
 4008664:	e0fffe03 	ldbu	r3,-8(fp)
 4008668:	1806913a 	slli	r3,r3,4
 400866c:	1809883a 	mov	r4,r3
 4008670:	e0fffd03 	ldbu	r3,-12(fp)
 4008674:	20c6b03a 	or	r3,r4,r3
 4008678:	10c04a05 	stb	r3,296(r2)
	vga_ctrl->VRAM[148 * 2 + 1] = 0x32;
 400867c:	d0a00217 	ldw	r2,-32760(gp)
 4008680:	00c00c84 	movi	r3,50
 4008684:	10c04a45 	stb	r3,297(r2)
	//C
	vga_ctrl->VRAM[149 * 2] = text << 4 | background;
 4008688:	d0a00217 	ldw	r2,-32760(gp)
 400868c:	e0fffe03 	ldbu	r3,-8(fp)
 4008690:	1806913a 	slli	r3,r3,4
 4008694:	1809883a 	mov	r4,r3
 4008698:	e0fffd03 	ldbu	r3,-12(fp)
 400869c:	20c6b03a 	or	r3,r4,r3
 40086a0:	10c04a85 	stb	r3,298(r2)
	vga_ctrl->VRAM[149 * 2 + 1] = 0x22;
 40086a4:	d0a00217 	ldw	r2,-32760(gp)
 40086a8:	00c00884 	movi	r3,34
 40086ac:	10c04ac5 	stb	r3,299(r2)
	//O
	vga_ctrl->VRAM[150 * 2] = text << 4 | background;
 40086b0:	d0a00217 	ldw	r2,-32760(gp)
 40086b4:	e0fffe03 	ldbu	r3,-8(fp)
 40086b8:	1806913a 	slli	r3,r3,4
 40086bc:	1809883a 	mov	r4,r3
 40086c0:	e0fffd03 	ldbu	r3,-12(fp)
 40086c4:	20c6b03a 	or	r3,r4,r3
 40086c8:	10c04b05 	stb	r3,300(r2)
	vga_ctrl->VRAM[150 * 2 + 1] = 0x2e;
 40086cc:	d0a00217 	ldw	r2,-32760(gp)
 40086d0:	00c00b84 	movi	r3,46
 40086d4:	10c04b45 	stb	r3,301(r2)
	//R
	vga_ctrl->VRAM[151 * 2] = text << 4 | background;
 40086d8:	d0a00217 	ldw	r2,-32760(gp)
 40086dc:	e0fffe03 	ldbu	r3,-8(fp)
 40086e0:	1806913a 	slli	r3,r3,4
 40086e4:	1809883a 	mov	r4,r3
 40086e8:	e0fffd03 	ldbu	r3,-12(fp)
 40086ec:	20c6b03a 	or	r3,r4,r3
 40086f0:	10c04b85 	stb	r3,302(r2)
	vga_ctrl->VRAM[151 * 2 + 1] = 0x31;
 40086f4:	d0a00217 	ldw	r2,-32760(gp)
 40086f8:	00c00c44 	movi	r3,49
 40086fc:	10c04bc5 	stb	r3,303(r2)
	//E
	vga_ctrl->VRAM[152 * 2] = text << 4 | background;
 4008700:	d0a00217 	ldw	r2,-32760(gp)
 4008704:	e0fffe03 	ldbu	r3,-8(fp)
 4008708:	1806913a 	slli	r3,r3,4
 400870c:	1809883a 	mov	r4,r3
 4008710:	e0fffd03 	ldbu	r3,-12(fp)
 4008714:	20c6b03a 	or	r3,r4,r3
 4008718:	10c04c05 	stb	r3,304(r2)
	vga_ctrl->VRAM[152 * 2 + 1] = 0x24;
 400871c:	d0a00217 	ldw	r2,-32760(gp)
 4008720:	00c00904 	movi	r3,36
 4008724:	10c04c45 	stb	r3,305(r2)
	//L
	vga_ctrl->VRAM[268 * 2] = text << 4 | background;
 4008728:	d0a00217 	ldw	r2,-32760(gp)
 400872c:	e0fffe03 	ldbu	r3,-8(fp)
 4008730:	1806913a 	slli	r3,r3,4
 4008734:	1809883a 	mov	r4,r3
 4008738:	e0fffd03 	ldbu	r3,-12(fp)
 400873c:	20c6b03a 	or	r3,r4,r3
 4008740:	10c08605 	stb	r3,536(r2)
	vga_ctrl->VRAM[268 * 2 + 1] = 0x2b;
 4008744:	d0a00217 	ldw	r2,-32760(gp)
 4008748:	00c00ac4 	movi	r3,43
 400874c:	10c08645 	stb	r3,537(r2)
	//I
	vga_ctrl->VRAM[269 * 2] = text << 4 | background;
 4008750:	d0a00217 	ldw	r2,-32760(gp)
 4008754:	e0fffe03 	ldbu	r3,-8(fp)
 4008758:	1806913a 	slli	r3,r3,4
 400875c:	1809883a 	mov	r4,r3
 4008760:	e0fffd03 	ldbu	r3,-12(fp)
 4008764:	20c6b03a 	or	r3,r4,r3
 4008768:	10c08685 	stb	r3,538(r2)
	vga_ctrl->VRAM[269 * 2 + 1] = 0x28;
 400876c:	d0a00217 	ldw	r2,-32760(gp)
 4008770:	00c00a04 	movi	r3,40
 4008774:	10c086c5 	stb	r3,539(r2)
	//N
	vga_ctrl->VRAM[270 * 2] = text << 4 | background;
 4008778:	d0a00217 	ldw	r2,-32760(gp)
 400877c:	e0fffe03 	ldbu	r3,-8(fp)
 4008780:	1806913a 	slli	r3,r3,4
 4008784:	1809883a 	mov	r4,r3
 4008788:	e0fffd03 	ldbu	r3,-12(fp)
 400878c:	20c6b03a 	or	r3,r4,r3
 4008790:	10c08705 	stb	r3,540(r2)
	vga_ctrl->VRAM[270 * 2 + 1] = 0x2d;
 4008794:	d0a00217 	ldw	r2,-32760(gp)
 4008798:	00c00b44 	movi	r3,45
 400879c:	10c08745 	stb	r3,541(r2)
	//E
	vga_ctrl->VRAM[271 * 2] = text << 4 | background;
 40087a0:	d0a00217 	ldw	r2,-32760(gp)
 40087a4:	e0fffe03 	ldbu	r3,-8(fp)
 40087a8:	1806913a 	slli	r3,r3,4
 40087ac:	1809883a 	mov	r4,r3
 40087b0:	e0fffd03 	ldbu	r3,-12(fp)
 40087b4:	20c6b03a 	or	r3,r4,r3
 40087b8:	10c08785 	stb	r3,542(r2)
	vga_ctrl->VRAM[271 * 2 + 1] = 0x24;
 40087bc:	d0a00217 	ldw	r2,-32760(gp)
 40087c0:	00c00904 	movi	r3,36
 40087c4:	10c087c5 	stb	r3,543(r2)
	//S
	vga_ctrl->VRAM[272 * 2] = text << 4 | background;
 40087c8:	d0a00217 	ldw	r2,-32760(gp)
 40087cc:	e0fffe03 	ldbu	r3,-8(fp)
 40087d0:	1806913a 	slli	r3,r3,4
 40087d4:	1809883a 	mov	r4,r3
 40087d8:	e0fffd03 	ldbu	r3,-12(fp)
 40087dc:	20c6b03a 	or	r3,r4,r3
 40087e0:	10c08805 	stb	r3,544(r2)
	vga_ctrl->VRAM[272 * 2 + 1] = 0x32;
 40087e4:	d0a00217 	ldw	r2,-32760(gp)
 40087e8:	00c00c84 	movi	r3,50
 40087ec:	10c08845 	stb	r3,545(r2)

	//draw level & words
	//draw top left corner
	vga_ctrl->VRAM[786 * 2] = foreground << 4 | background;
 40087f0:	d0a00217 	ldw	r2,-32760(gp)
 40087f4:	e0fffc03 	ldbu	r3,-16(fp)
 40087f8:	1806913a 	slli	r3,r3,4
 40087fc:	1809883a 	mov	r4,r3
 4008800:	e0fffd03 	ldbu	r3,-12(fp)
 4008804:	20c6b03a 	or	r3,r4,r3
 4008808:	10c18905 	stb	r3,1572(r2)
	vga_ctrl->VRAM[786 * 2 + 1] = 0x0b;
 400880c:	d0a00217 	ldw	r2,-32760(gp)
 4008810:	00c002c4 	movi	r3,11
 4008814:	10c18945 	stb	r3,1573(r2)
	//draw top wall
	for(int i = 0; i < 7; i++){
 4008818:	e03ff715 	stw	zero,-36(fp)
 400881c:	00001806 	br	4008880 <drawGrid+0xe78>
		vga_ctrl->VRAM[(787 + i) * 2] = foreground << 4 | background;
 4008820:	d0e00217 	ldw	r3,-32760(gp)
 4008824:	e0bff717 	ldw	r2,-36(fp)
 4008828:	1080c4c4 	addi	r2,r2,787
 400882c:	1085883a 	add	r2,r2,r2
 4008830:	100b883a 	mov	r5,r2
 4008834:	e0bffc03 	ldbu	r2,-16(fp)
 4008838:	1004913a 	slli	r2,r2,4
 400883c:	1009883a 	mov	r4,r2
 4008840:	e0bffd03 	ldbu	r2,-12(fp)
 4008844:	2084b03a 	or	r2,r4,r2
 4008848:	1009883a 	mov	r4,r2
 400884c:	1945883a 	add	r2,r3,r5
 4008850:	11000005 	stb	r4,0(r2)
		vga_ctrl->VRAM[(787 + i) * 2 + 1] = 0x0c;
 4008854:	d0e00217 	ldw	r3,-32760(gp)
 4008858:	e0bff717 	ldw	r2,-36(fp)
 400885c:	1080c4c4 	addi	r2,r2,787
 4008860:	1085883a 	add	r2,r2,r2
 4008864:	10800044 	addi	r2,r2,1
 4008868:	1885883a 	add	r2,r3,r2
 400886c:	00c00304 	movi	r3,12
 4008870:	10c00005 	stb	r3,0(r2)
	//draw level & words
	//draw top left corner
	vga_ctrl->VRAM[786 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[786 * 2 + 1] = 0x0b;
	//draw top wall
	for(int i = 0; i < 7; i++){
 4008874:	e0bff717 	ldw	r2,-36(fp)
 4008878:	10800044 	addi	r2,r2,1
 400887c:	e0bff715 	stw	r2,-36(fp)
 4008880:	e0bff717 	ldw	r2,-36(fp)
 4008884:	108001d0 	cmplti	r2,r2,7
 4008888:	103fe51e 	bne	r2,zero,4008820 <__alt_mem_onchip_memory2_0+0xfc003660>
		vga_ctrl->VRAM[(787 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(787 + i) * 2 + 1] = 0x0c;
	}
	//draw top right corner
	vga_ctrl->VRAM[794 * 2] = foreground << 4 | background;
 400888c:	d0a00217 	ldw	r2,-32760(gp)
 4008890:	e0fffc03 	ldbu	r3,-16(fp)
 4008894:	1806913a 	slli	r3,r3,4
 4008898:	1809883a 	mov	r4,r3
 400889c:	e0fffd03 	ldbu	r3,-12(fp)
 40088a0:	20c6b03a 	or	r3,r4,r3
 40088a4:	10c18d05 	stb	r3,1588(r2)
	vga_ctrl->VRAM[794 * 2 + 1] = 0x0d;
 40088a8:	d0a00217 	ldw	r2,-32760(gp)
 40088ac:	00c00344 	movi	r3,13
 40088b0:	10c18d45 	stb	r3,1589(r2)
	//draw right wall
	for(int i = 0; i < 4; i++){
 40088b4:	e03ff815 	stw	zero,-32(fp)
 40088b8:	00001706 	br	4008918 <drawGrid+0xf10>
		vga_ctrl->VRAM[(834 + i * 40) * 2] = foreground << 4 | background;
 40088bc:	d4200217 	ldw	r16,-32760(gp)
 40088c0:	01401404 	movi	r5,80
 40088c4:	e13ff817 	ldw	r4,-32(fp)
 40088c8:	400dcd40 	call	400dcd4 <__mulsi3>
 40088cc:	1081a104 	addi	r2,r2,1668
 40088d0:	e0fffc03 	ldbu	r3,-16(fp)
 40088d4:	1806913a 	slli	r3,r3,4
 40088d8:	1809883a 	mov	r4,r3
 40088dc:	e0fffd03 	ldbu	r3,-12(fp)
 40088e0:	20c6b03a 	or	r3,r4,r3
 40088e4:	8085883a 	add	r2,r16,r2
 40088e8:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(834 + i * 40) * 2 + 1] = 0x0e;
 40088ec:	d4200217 	ldw	r16,-32760(gp)
 40088f0:	01401404 	movi	r5,80
 40088f4:	e13ff817 	ldw	r4,-32(fp)
 40088f8:	400dcd40 	call	400dcd4 <__mulsi3>
 40088fc:	1081a144 	addi	r2,r2,1669
 4008900:	8085883a 	add	r2,r16,r2
 4008904:	00c00384 	movi	r3,14
 4008908:	10c00005 	stb	r3,0(r2)
	}
	//draw top right corner
	vga_ctrl->VRAM[794 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[794 * 2 + 1] = 0x0d;
	//draw right wall
	for(int i = 0; i < 4; i++){
 400890c:	e0bff817 	ldw	r2,-32(fp)
 4008910:	10800044 	addi	r2,r2,1
 4008914:	e0bff815 	stw	r2,-32(fp)
 4008918:	e0bff817 	ldw	r2,-32(fp)
 400891c:	10800110 	cmplti	r2,r2,4
 4008920:	103fe61e 	bne	r2,zero,40088bc <__alt_mem_onchip_memory2_0+0xfc0036fc>
		vga_ctrl->VRAM[(834 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(834 + i * 40) * 2 + 1] = 0x0e;
	}
	//draw bottom right corner
	vga_ctrl->VRAM[994 * 2] = foreground << 4 | background;
 4008924:	d0a00217 	ldw	r2,-32760(gp)
 4008928:	e0fffc03 	ldbu	r3,-16(fp)
 400892c:	1806913a 	slli	r3,r3,4
 4008930:	1809883a 	mov	r4,r3
 4008934:	e0fffd03 	ldbu	r3,-12(fp)
 4008938:	20c6b03a 	or	r3,r4,r3
 400893c:	10c1f105 	stb	r3,1988(r2)
	vga_ctrl->VRAM[994 * 2 + 1] = 0x0f;
 4008940:	d0a00217 	ldw	r2,-32760(gp)
 4008944:	00c003c4 	movi	r3,15
 4008948:	10c1f145 	stb	r3,1989(r2)
	//draw bottom wall
	for(int i = 0; i < 7; i++){
 400894c:	e03ff915 	stw	zero,-28(fp)
 4008950:	00001806 	br	40089b4 <drawGrid+0xfac>
		vga_ctrl->VRAM[(987 + i) * 2] = foreground << 4 | background;
 4008954:	d0e00217 	ldw	r3,-32760(gp)
 4008958:	e0bff917 	ldw	r2,-28(fp)
 400895c:	1080f6c4 	addi	r2,r2,987
 4008960:	1085883a 	add	r2,r2,r2
 4008964:	100b883a 	mov	r5,r2
 4008968:	e0bffc03 	ldbu	r2,-16(fp)
 400896c:	1004913a 	slli	r2,r2,4
 4008970:	1009883a 	mov	r4,r2
 4008974:	e0bffd03 	ldbu	r2,-12(fp)
 4008978:	2084b03a 	or	r2,r4,r2
 400897c:	1009883a 	mov	r4,r2
 4008980:	1945883a 	add	r2,r3,r5
 4008984:	11000005 	stb	r4,0(r2)
		vga_ctrl->VRAM[(987 + i) * 2 + 1] = 0x10;
 4008988:	d0e00217 	ldw	r3,-32760(gp)
 400898c:	e0bff917 	ldw	r2,-28(fp)
 4008990:	1080f6c4 	addi	r2,r2,987
 4008994:	1085883a 	add	r2,r2,r2
 4008998:	10800044 	addi	r2,r2,1
 400899c:	1885883a 	add	r2,r3,r2
 40089a0:	00c00404 	movi	r3,16
 40089a4:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom right corner
	vga_ctrl->VRAM[994 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[994 * 2 + 1] = 0x0f;
	//draw bottom wall
	for(int i = 0; i < 7; i++){
 40089a8:	e0bff917 	ldw	r2,-28(fp)
 40089ac:	10800044 	addi	r2,r2,1
 40089b0:	e0bff915 	stw	r2,-28(fp)
 40089b4:	e0bff917 	ldw	r2,-28(fp)
 40089b8:	108001d0 	cmplti	r2,r2,7
 40089bc:	103fe51e 	bne	r2,zero,4008954 <__alt_mem_onchip_memory2_0+0xfc003794>
		vga_ctrl->VRAM[(987 + i) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(987 + i) * 2 + 1] = 0x10;
	}
	//draw bottom left corner
	vga_ctrl->VRAM[986 * 2] = foreground << 4 | background;
 40089c0:	d0a00217 	ldw	r2,-32760(gp)
 40089c4:	e0fffc03 	ldbu	r3,-16(fp)
 40089c8:	1806913a 	slli	r3,r3,4
 40089cc:	1809883a 	mov	r4,r3
 40089d0:	e0fffd03 	ldbu	r3,-12(fp)
 40089d4:	20c6b03a 	or	r3,r4,r3
 40089d8:	10c1ed05 	stb	r3,1972(r2)
	vga_ctrl->VRAM[986 * 2 + 1] = 0x11;
 40089dc:	d0a00217 	ldw	r2,-32760(gp)
 40089e0:	00c00444 	movi	r3,17
 40089e4:	10c1ed45 	stb	r3,1973(r2)
	//draw left wall
	for(int i = 0; i < 4; i++){
 40089e8:	e03ffa15 	stw	zero,-24(fp)
 40089ec:	00001706 	br	4008a4c <drawGrid+0x1044>
		vga_ctrl->VRAM[(826 + i * 40) * 2] = foreground << 4 | background;
 40089f0:	d4200217 	ldw	r16,-32760(gp)
 40089f4:	01401404 	movi	r5,80
 40089f8:	e13ffa17 	ldw	r4,-24(fp)
 40089fc:	400dcd40 	call	400dcd4 <__mulsi3>
 4008a00:	10819d04 	addi	r2,r2,1652
 4008a04:	e0fffc03 	ldbu	r3,-16(fp)
 4008a08:	1806913a 	slli	r3,r3,4
 4008a0c:	1809883a 	mov	r4,r3
 4008a10:	e0fffd03 	ldbu	r3,-12(fp)
 4008a14:	20c6b03a 	or	r3,r4,r3
 4008a18:	8085883a 	add	r2,r16,r2
 4008a1c:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(826 + i * 40) * 2 + 1] = 0x12;
 4008a20:	d4200217 	ldw	r16,-32760(gp)
 4008a24:	01401404 	movi	r5,80
 4008a28:	e13ffa17 	ldw	r4,-24(fp)
 4008a2c:	400dcd40 	call	400dcd4 <__mulsi3>
 4008a30:	10819d44 	addi	r2,r2,1653
 4008a34:	8085883a 	add	r2,r16,r2
 4008a38:	00c00484 	movi	r3,18
 4008a3c:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom left corner
	vga_ctrl->VRAM[986 * 2] = foreground << 4 | background;
	vga_ctrl->VRAM[986 * 2 + 1] = 0x11;
	//draw left wall
	for(int i = 0; i < 4; i++){
 4008a40:	e0bffa17 	ldw	r2,-24(fp)
 4008a44:	10800044 	addi	r2,r2,1
 4008a48:	e0bffa15 	stw	r2,-24(fp)
 4008a4c:	e0bffa17 	ldw	r2,-24(fp)
 4008a50:	10800110 	cmplti	r2,r2,4
 4008a54:	103fe61e 	bne	r2,zero,40089f0 <__alt_mem_onchip_memory2_0+0xfc003830>
		vga_ctrl->VRAM[(826 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(826 + i * 40) * 2 + 1] = 0x12;
	}
	for(int i = 0; i < 5; i++){
 4008a58:	e03ffb15 	stw	zero,-20(fp)
 4008a5c:	00001006 	br	4008aa0 <drawGrid+0x1098>
		vga_ctrl->VRAM[868 + i * 2] = text << 4 | background;
 4008a60:	d0e00217 	ldw	r3,-32760(gp)
 4008a64:	e0bffb17 	ldw	r2,-20(fp)
 4008a68:	10806c84 	addi	r2,r2,434
 4008a6c:	1085883a 	add	r2,r2,r2
 4008a70:	100b883a 	mov	r5,r2
 4008a74:	e0bffe03 	ldbu	r2,-8(fp)
 4008a78:	1004913a 	slli	r2,r2,4
 4008a7c:	1009883a 	mov	r4,r2
 4008a80:	e0bffd03 	ldbu	r2,-12(fp)
 4008a84:	2084b03a 	or	r2,r4,r2
 4008a88:	1009883a 	mov	r4,r2
 4008a8c:	1945883a 	add	r2,r3,r5
 4008a90:	11000005 	stb	r4,0(r2)
	//draw left wall
	for(int i = 0; i < 4; i++){
		vga_ctrl->VRAM[(826 + i * 40) * 2] = foreground << 4 | background;
		vga_ctrl->VRAM[(826 + i * 40) * 2 + 1] = 0x12;
	}
	for(int i = 0; i < 5; i++){
 4008a94:	e0bffb17 	ldw	r2,-20(fp)
 4008a98:	10800044 	addi	r2,r2,1
 4008a9c:	e0bffb15 	stw	r2,-20(fp)
 4008aa0:	e0bffb17 	ldw	r2,-20(fp)
 4008aa4:	10800150 	cmplti	r2,r2,5
 4008aa8:	103fed1e 	bne	r2,zero,4008a60 <__alt_mem_onchip_memory2_0+0xfc0038a0>
		vga_ctrl->VRAM[868 + i * 2] = text << 4 | background;
	}
	//L
	vga_ctrl->VRAM[868 * 2] = text << 4 | background;
 4008aac:	d0a00217 	ldw	r2,-32760(gp)
 4008ab0:	e0fffe03 	ldbu	r3,-8(fp)
 4008ab4:	1806913a 	slli	r3,r3,4
 4008ab8:	1809883a 	mov	r4,r3
 4008abc:	e0fffd03 	ldbu	r3,-12(fp)
 4008ac0:	20c6b03a 	or	r3,r4,r3
 4008ac4:	10c1b205 	stb	r3,1736(r2)
	vga_ctrl->VRAM[868 * 2 + 1] = 0x2b;
 4008ac8:	d0a00217 	ldw	r2,-32760(gp)
 4008acc:	00c00ac4 	movi	r3,43
 4008ad0:	10c1b245 	stb	r3,1737(r2)
	//E
	vga_ctrl->VRAM[869 * 2] = text << 4 | background;
 4008ad4:	d0a00217 	ldw	r2,-32760(gp)
 4008ad8:	e0fffe03 	ldbu	r3,-8(fp)
 4008adc:	1806913a 	slli	r3,r3,4
 4008ae0:	1809883a 	mov	r4,r3
 4008ae4:	e0fffd03 	ldbu	r3,-12(fp)
 4008ae8:	20c6b03a 	or	r3,r4,r3
 4008aec:	10c1b285 	stb	r3,1738(r2)
	vga_ctrl->VRAM[869 * 2 + 1] = 0x24;
 4008af0:	d0a00217 	ldw	r2,-32760(gp)
 4008af4:	00c00904 	movi	r3,36
 4008af8:	10c1b2c5 	stb	r3,1739(r2)
	//V
	vga_ctrl->VRAM[870 * 2] = text << 4 | background;
 4008afc:	d0a00217 	ldw	r2,-32760(gp)
 4008b00:	e0fffe03 	ldbu	r3,-8(fp)
 4008b04:	1806913a 	slli	r3,r3,4
 4008b08:	1809883a 	mov	r4,r3
 4008b0c:	e0fffd03 	ldbu	r3,-12(fp)
 4008b10:	20c6b03a 	or	r3,r4,r3
 4008b14:	10c1b305 	stb	r3,1740(r2)
	vga_ctrl->VRAM[870 * 2 + 1] = 0x35;
 4008b18:	d0a00217 	ldw	r2,-32760(gp)
 4008b1c:	00c00d44 	movi	r3,53
 4008b20:	10c1b345 	stb	r3,1741(r2)
	//E
	vga_ctrl->VRAM[871 * 2] = text << 4 | background;
 4008b24:	d0a00217 	ldw	r2,-32760(gp)
 4008b28:	e0fffe03 	ldbu	r3,-8(fp)
 4008b2c:	1806913a 	slli	r3,r3,4
 4008b30:	1809883a 	mov	r4,r3
 4008b34:	e0fffd03 	ldbu	r3,-12(fp)
 4008b38:	20c6b03a 	or	r3,r4,r3
 4008b3c:	10c1b385 	stb	r3,1742(r2)
	vga_ctrl->VRAM[871 * 2 + 1] = 0x24;
 4008b40:	d0a00217 	ldw	r2,-32760(gp)
 4008b44:	00c00904 	movi	r3,36
 4008b48:	10c1b3c5 	stb	r3,1743(r2)
	//L
	vga_ctrl->VRAM[872 * 2] = text << 4 | background;
 4008b4c:	d0a00217 	ldw	r2,-32760(gp)
 4008b50:	e0fffe03 	ldbu	r3,-8(fp)
 4008b54:	1806913a 	slli	r3,r3,4
 4008b58:	1809883a 	mov	r4,r3
 4008b5c:	e0fffd03 	ldbu	r3,-12(fp)
 4008b60:	20c6b03a 	or	r3,r4,r3
 4008b64:	10c1b405 	stb	r3,1744(r2)
	vga_ctrl->VRAM[872 * 2 + 1] = 0x2b;
 4008b68:	d0a00217 	ldw	r2,-32760(gp)
 4008b6c:	00c00ac4 	movi	r3,43
 4008b70:	10c1b445 	stb	r3,1745(r2)
}
 4008b74:	0001883a 	nop
 4008b78:	e6ffff04 	addi	sp,fp,-4
 4008b7c:	dfc00217 	ldw	ra,8(sp)
 4008b80:	df000117 	ldw	fp,4(sp)
 4008b84:	dc000017 	ldw	r16,0(sp)
 4008b88:	dec00304 	addi	sp,sp,12
 4008b8c:	f800283a 	ret

04008b90 <drawDigit>:

void drawDigit(int digit, int location, alt_u8 text, alt_u8 background){
 4008b90:	defffa04 	addi	sp,sp,-24
 4008b94:	df000515 	stw	fp,20(sp)
 4008b98:	df000504 	addi	fp,sp,20
 4008b9c:	e13ffc15 	stw	r4,-16(fp)
 4008ba0:	e17ffd15 	stw	r5,-12(fp)
 4008ba4:	3007883a 	mov	r3,r6
 4008ba8:	3805883a 	mov	r2,r7
 4008bac:	e0fffe05 	stb	r3,-8(fp)
 4008bb0:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 ch;
	switch(digit){
 4008bb4:	e0bffc17 	ldw	r2,-16(fp)
 4008bb8:	108002a8 	cmpgeui	r2,r2,10
 4008bbc:	10002f1e 	bne	r2,zero,4008c7c <drawDigit+0xec>
 4008bc0:	e0bffc17 	ldw	r2,-16(fp)
 4008bc4:	100690ba 	slli	r3,r2,2
 4008bc8:	00810074 	movhi	r2,1025
 4008bcc:	10a2f704 	addi	r2,r2,-29732
 4008bd0:	1885883a 	add	r2,r3,r2
 4008bd4:	10800017 	ldw	r2,0(r2)
 4008bd8:	1000683a 	jmp	r2
 4008bdc:	04008c70 	cmpltui	r16,zero,561
 4008be0:	04008c04 	movi	r16,560
 4008be4:	04008c10 	cmplti	r16,zero,560
 4008be8:	04008c1c 	xori	r16,zero,560
 4008bec:	04008c28 	cmpgeui	r16,zero,560
 4008bf0:	04008c34 	movhi	r16,560
 4008bf4:	04008c40 	call	4008c4 <__reset-0x3bff73c>
 4008bf8:	04008c4c 	andi	r16,zero,561
 4008bfc:	04008c58 	cmpnei	r16,zero,561
 4008c00:	04008c64 	muli	r16,zero,561
	case 1:
		ch = 0x3a;
 4008c04:	00800e84 	movi	r2,58
 4008c08:	e0bffb05 	stb	r2,-20(fp)
		break;
 4008c0c:	00001b06 	br	4008c7c <drawDigit+0xec>
	case 2:
		ch = 0x3b;
 4008c10:	00800ec4 	movi	r2,59
 4008c14:	e0bffb05 	stb	r2,-20(fp)
		break;
 4008c18:	00001806 	br	4008c7c <drawDigit+0xec>
	case 3:
		ch = 0x3c;
 4008c1c:	00800f04 	movi	r2,60
 4008c20:	e0bffb05 	stb	r2,-20(fp)
		break;
 4008c24:	00001506 	br	4008c7c <drawDigit+0xec>
	case 4:
		ch = 0x3d;
 4008c28:	00800f44 	movi	r2,61
 4008c2c:	e0bffb05 	stb	r2,-20(fp)
		break;
 4008c30:	00001206 	br	4008c7c <drawDigit+0xec>
	case 5:
		ch = 0x3e;
 4008c34:	00800f84 	movi	r2,62
 4008c38:	e0bffb05 	stb	r2,-20(fp)
		break;
 4008c3c:	00000f06 	br	4008c7c <drawDigit+0xec>
	case 6:
		ch = 0x3f;
 4008c40:	00800fc4 	movi	r2,63
 4008c44:	e0bffb05 	stb	r2,-20(fp)
		break;
 4008c48:	00000c06 	br	4008c7c <drawDigit+0xec>
	case 7:
		ch = 0x40;
 4008c4c:	00801004 	movi	r2,64
 4008c50:	e0bffb05 	stb	r2,-20(fp)
		break;
 4008c54:	00000906 	br	4008c7c <drawDigit+0xec>
	case 8:
		ch = 0x41;
 4008c58:	00801044 	movi	r2,65
 4008c5c:	e0bffb05 	stb	r2,-20(fp)
		break;
 4008c60:	00000606 	br	4008c7c <drawDigit+0xec>
	case 9:
		ch = 0x42;
 4008c64:	00801084 	movi	r2,66
 4008c68:	e0bffb05 	stb	r2,-20(fp)
		break;
 4008c6c:	00000306 	br	4008c7c <drawDigit+0xec>
	case 0:
		ch = 0x43;
 4008c70:	008010c4 	movi	r2,67
 4008c74:	e0bffb05 	stb	r2,-20(fp)
		break;
 4008c78:	0001883a 	nop
	}
	vga_ctrl->VRAM[location * 2] = text << 4 | background;
 4008c7c:	d0e00217 	ldw	r3,-32760(gp)
 4008c80:	e0bffd17 	ldw	r2,-12(fp)
 4008c84:	1085883a 	add	r2,r2,r2
 4008c88:	100b883a 	mov	r5,r2
 4008c8c:	e0bffe03 	ldbu	r2,-8(fp)
 4008c90:	1004913a 	slli	r2,r2,4
 4008c94:	1009883a 	mov	r4,r2
 4008c98:	e0bfff03 	ldbu	r2,-4(fp)
 4008c9c:	2084b03a 	or	r2,r4,r2
 4008ca0:	1009883a 	mov	r4,r2
 4008ca4:	1945883a 	add	r2,r3,r5
 4008ca8:	11000005 	stb	r4,0(r2)
	vga_ctrl->VRAM[location * 2 + 1] = ch;
 4008cac:	d0e00217 	ldw	r3,-32760(gp)
 4008cb0:	e0bffd17 	ldw	r2,-12(fp)
 4008cb4:	1085883a 	add	r2,r2,r2
 4008cb8:	10800044 	addi	r2,r2,1
 4008cbc:	1885883a 	add	r2,r3,r2
 4008cc0:	e0fffb03 	ldbu	r3,-20(fp)
 4008cc4:	10c00005 	stb	r3,0(r2)
}
 4008cc8:	0001883a 	nop
 4008ccc:	e037883a 	mov	sp,fp
 4008cd0:	df000017 	ldw	fp,0(sp)
 4008cd4:	dec00104 	addi	sp,sp,4
 4008cd8:	f800283a 	ret

04008cdc <drawLevel>:

void drawLevel(int level){
 4008cdc:	defffc04 	addi	sp,sp,-16
 4008ce0:	dfc00315 	stw	ra,12(sp)
 4008ce4:	df000215 	stw	fp,8(sp)
 4008ce8:	df000204 	addi	fp,sp,8
 4008cec:	e13fff15 	stw	r4,-4(fp)
	int dig = level % 10;
 4008cf0:	e0bfff17 	ldw	r2,-4(fp)
 4008cf4:	01400284 	movi	r5,10
 4008cf8:	1009883a 	mov	r4,r2
 4008cfc:	400dba40 	call	400dba4 <__modsi3>
 4008d00:	e0bffe15 	stw	r2,-8(fp)
	drawDigit(dig, 912, 15, 0);
 4008d04:	000f883a 	mov	r7,zero
 4008d08:	018003c4 	movi	r6,15
 4008d0c:	0140e404 	movi	r5,912
 4008d10:	e13ffe17 	ldw	r4,-8(fp)
 4008d14:	4008b900 	call	4008b90 <drawDigit>
	level /= 10;
 4008d18:	e0bfff17 	ldw	r2,-4(fp)
 4008d1c:	01400284 	movi	r5,10
 4008d20:	1009883a 	mov	r4,r2
 4008d24:	400db200 	call	400db20 <__divsi3>
 4008d28:	e0bfff15 	stw	r2,-4(fp)
	dig = level % 10;
 4008d2c:	e0bfff17 	ldw	r2,-4(fp)
 4008d30:	01400284 	movi	r5,10
 4008d34:	1009883a 	mov	r4,r2
 4008d38:	400dba40 	call	400dba4 <__modsi3>
 4008d3c:	e0bffe15 	stw	r2,-8(fp)
	drawDigit(dig, 911, 15, 0);
 4008d40:	000f883a 	mov	r7,zero
 4008d44:	018003c4 	movi	r6,15
 4008d48:	0140e3c4 	movi	r5,911
 4008d4c:	e13ffe17 	ldw	r4,-8(fp)
 4008d50:	4008b900 	call	4008b90 <drawDigit>
}
 4008d54:	0001883a 	nop
 4008d58:	e037883a 	mov	sp,fp
 4008d5c:	dfc00117 	ldw	ra,4(sp)
 4008d60:	df000017 	ldw	fp,0(sp)
 4008d64:	dec00204 	addi	sp,sp,8
 4008d68:	f800283a 	ret

04008d6c <drawScore>:

void drawScore(int score){
 4008d6c:	defffb04 	addi	sp,sp,-20
 4008d70:	dfc00415 	stw	ra,16(sp)
 4008d74:	df000315 	stw	fp,12(sp)
 4008d78:	df000304 	addi	fp,sp,12
 4008d7c:	e13fff15 	stw	r4,-4(fp)
	for(int i = 0; i < 7; i++){
 4008d80:	e03ffd15 	stw	zero,-12(fp)
 4008d84:	00001506 	br	4008ddc <drawScore+0x70>
		int dig = score % 10;
 4008d88:	e0bfff17 	ldw	r2,-4(fp)
 4008d8c:	01400284 	movi	r5,10
 4008d90:	1009883a 	mov	r4,r2
 4008d94:	400dba40 	call	400dba4 <__modsi3>
 4008d98:	e0bffe15 	stw	r2,-8(fp)
		drawDigit(dig, 194 - i, 15, 0);
 4008d9c:	00c03084 	movi	r3,194
 4008da0:	e0bffd17 	ldw	r2,-12(fp)
 4008da4:	1885c83a 	sub	r2,r3,r2
 4008da8:	000f883a 	mov	r7,zero
 4008dac:	018003c4 	movi	r6,15
 4008db0:	100b883a 	mov	r5,r2
 4008db4:	e13ffe17 	ldw	r4,-8(fp)
 4008db8:	4008b900 	call	4008b90 <drawDigit>
		score /= 10;
 4008dbc:	e0bfff17 	ldw	r2,-4(fp)
 4008dc0:	01400284 	movi	r5,10
 4008dc4:	1009883a 	mov	r4,r2
 4008dc8:	400db200 	call	400db20 <__divsi3>
 4008dcc:	e0bfff15 	stw	r2,-4(fp)
	dig = level % 10;
	drawDigit(dig, 911, 15, 0);
}

void drawScore(int score){
	for(int i = 0; i < 7; i++){
 4008dd0:	e0bffd17 	ldw	r2,-12(fp)
 4008dd4:	10800044 	addi	r2,r2,1
 4008dd8:	e0bffd15 	stw	r2,-12(fp)
 4008ddc:	e0bffd17 	ldw	r2,-12(fp)
 4008de0:	108001d0 	cmplti	r2,r2,7
 4008de4:	103fe81e 	bne	r2,zero,4008d88 <__alt_mem_onchip_memory2_0+0xfc003bc8>
		int dig = score % 10;
		drawDigit(dig, 194 - i, 15, 0);
		score /= 10;
	}
}
 4008de8:	0001883a 	nop
 4008dec:	e037883a 	mov	sp,fp
 4008df0:	dfc00117 	ldw	ra,4(sp)
 4008df4:	df000017 	ldw	fp,0(sp)
 4008df8:	dec00204 	addi	sp,sp,8
 4008dfc:	f800283a 	ret

04008e00 <drawLines>:

void drawLines(int lines){
 4008e00:	defffb04 	addi	sp,sp,-20
 4008e04:	dfc00415 	stw	ra,16(sp)
 4008e08:	df000315 	stw	fp,12(sp)
 4008e0c:	df000304 	addi	fp,sp,12
 4008e10:	e13fff15 	stw	r4,-4(fp)
	for(int i = 0; i < 4; i++){
 4008e14:	e03ffd15 	stw	zero,-12(fp)
 4008e18:	00001506 	br	4008e70 <drawLines+0x70>
		int dig = lines % 10;
 4008e1c:	e0bfff17 	ldw	r2,-4(fp)
 4008e20:	01400284 	movi	r5,10
 4008e24:	1009883a 	mov	r4,r2
 4008e28:	400dba40 	call	400dba4 <__modsi3>
 4008e2c:	e0bffe15 	stw	r2,-8(fp)
		drawDigit(dig, 311 - i, 15, 0);
 4008e30:	00c04dc4 	movi	r3,311
 4008e34:	e0bffd17 	ldw	r2,-12(fp)
 4008e38:	1885c83a 	sub	r2,r3,r2
 4008e3c:	000f883a 	mov	r7,zero
 4008e40:	018003c4 	movi	r6,15
 4008e44:	100b883a 	mov	r5,r2
 4008e48:	e13ffe17 	ldw	r4,-8(fp)
 4008e4c:	4008b900 	call	4008b90 <drawDigit>
		lines /= 10;
 4008e50:	e0bfff17 	ldw	r2,-4(fp)
 4008e54:	01400284 	movi	r5,10
 4008e58:	1009883a 	mov	r4,r2
 4008e5c:	400db200 	call	400db20 <__divsi3>
 4008e60:	e0bfff15 	stw	r2,-4(fp)
		score /= 10;
	}
}

void drawLines(int lines){
	for(int i = 0; i < 4; i++){
 4008e64:	e0bffd17 	ldw	r2,-12(fp)
 4008e68:	10800044 	addi	r2,r2,1
 4008e6c:	e0bffd15 	stw	r2,-12(fp)
 4008e70:	e0bffd17 	ldw	r2,-12(fp)
 4008e74:	10800110 	cmplti	r2,r2,4
 4008e78:	103fe81e 	bne	r2,zero,4008e1c <__alt_mem_onchip_memory2_0+0xfc003c5c>
		int dig = lines % 10;
		drawDigit(dig, 311 - i, 15, 0);
		lines /= 10;
	}
}
 4008e7c:	0001883a 	nop
 4008e80:	e037883a 	mov	sp,fp
 4008e84:	dfc00117 	ldw	ra,4(sp)
 4008e88:	df000017 	ldw	fp,0(sp)
 4008e8c:	dec00204 	addi	sp,sp,8
 4008e90:	f800283a 	ret

04008e94 <drawGame>:

void drawGame(int gameboard[20][10], alt_u8 fg1, alt_u8 bg1, alt_u8 fg2, alt_u8 bg2){
 4008e94:	defff404 	addi	sp,sp,-48
 4008e98:	dfc00b15 	stw	ra,44(sp)
 4008e9c:	df000a15 	stw	fp,40(sp)
 4008ea0:	dc400915 	stw	r17,36(sp)
 4008ea4:	dc000815 	stw	r16,32(sp)
 4008ea8:	df000a04 	addi	fp,sp,40
 4008eac:	e13ff915 	stw	r4,-28(fp)
 4008eb0:	3009883a 	mov	r4,r6
 4008eb4:	3807883a 	mov	r3,r7
 4008eb8:	e0800217 	ldw	r2,8(fp)
 4008ebc:	e17ffa05 	stb	r5,-24(fp)
 4008ec0:	e13ffb05 	stb	r4,-20(fp)
 4008ec4:	e0fffc05 	stb	r3,-16(fp)
 4008ec8:	e0bffd05 	stb	r2,-12(fp)
	//iterate over full array
	for(int i = 0; i < 20; i++){
 4008ecc:	e03ff615 	stw	zero,-40(fp)
 4008ed0:	00011706 	br	4009330 <drawGame+0x49c>
		for(int j = 0; j < 10; j++){
 4008ed4:	e03ff715 	stw	zero,-36(fp)
 4008ed8:	00010f06 	br	4009318 <drawGame+0x484>
			int block = abs(gameboard[i][j]);
 4008edc:	e0bff617 	ldw	r2,-40(fp)
 4008ee0:	01400a04 	movi	r5,40
 4008ee4:	1009883a 	mov	r4,r2
 4008ee8:	400dcd40 	call	400dcd4 <__mulsi3>
 4008eec:	1007883a 	mov	r3,r2
 4008ef0:	e0bff917 	ldw	r2,-28(fp)
 4008ef4:	10c7883a 	add	r3,r2,r3
 4008ef8:	e0bff717 	ldw	r2,-36(fp)
 4008efc:	1085883a 	add	r2,r2,r2
 4008f00:	1085883a 	add	r2,r2,r2
 4008f04:	1885883a 	add	r2,r3,r2
 4008f08:	10800017 	ldw	r2,0(r2)
 4008f0c:	1000010e 	bge	r2,zero,4008f14 <drawGame+0x80>
 4008f10:	0085c83a 	sub	r2,zero,r2
 4008f14:	e0bff815 	stw	r2,-32(fp)
			if(block == 0){
 4008f18:	e0bff817 	ldw	r2,-32(fp)
 4008f1c:	1000151e 	bne	r2,zero,4008f74 <drawGame+0xe0>
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = 0x0;
 4008f20:	d4200217 	ldw	r16,-32760(gp)
 4008f24:	e0bff717 	ldw	r2,-36(fp)
 4008f28:	144035c4 	addi	r17,r2,215
 4008f2c:	01400a04 	movi	r5,40
 4008f30:	e13ff617 	ldw	r4,-40(fp)
 4008f34:	400dcd40 	call	400dcd4 <__mulsi3>
 4008f38:	8885883a 	add	r2,r17,r2
 4008f3c:	1085883a 	add	r2,r2,r2
 4008f40:	8085883a 	add	r2,r16,r2
 4008f44:	10000005 	stb	zero,0(r2)
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x0;
 4008f48:	d4200217 	ldw	r16,-32760(gp)
 4008f4c:	e0bff717 	ldw	r2,-36(fp)
 4008f50:	144035c4 	addi	r17,r2,215
 4008f54:	01400a04 	movi	r5,40
 4008f58:	e13ff617 	ldw	r4,-40(fp)
 4008f5c:	400dcd40 	call	400dcd4 <__mulsi3>
 4008f60:	8885883a 	add	r2,r17,r2
 4008f64:	1085883a 	add	r2,r2,r2
 4008f68:	10800044 	addi	r2,r2,1
 4008f6c:	8085883a 	add	r2,r16,r2
 4008f70:	10000005 	stb	zero,0(r2)
			}
			if(block == 1){ //draw I block
 4008f74:	e0bff817 	ldw	r2,-32(fp)
 4008f78:	10800058 	cmpnei	r2,r2,1
 4008f7c:	10001e1e 	bne	r2,zero,4008ff8 <drawGame+0x164>
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg1 << 4 | bg1;
 4008f80:	d4200217 	ldw	r16,-32760(gp)
 4008f84:	e0bff717 	ldw	r2,-36(fp)
 4008f88:	144035c4 	addi	r17,r2,215
 4008f8c:	01400a04 	movi	r5,40
 4008f90:	e13ff617 	ldw	r4,-40(fp)
 4008f94:	400dcd40 	call	400dcd4 <__mulsi3>
 4008f98:	8885883a 	add	r2,r17,r2
 4008f9c:	1085883a 	add	r2,r2,r2
 4008fa0:	1009883a 	mov	r4,r2
 4008fa4:	e0bffa03 	ldbu	r2,-24(fp)
 4008fa8:	1004913a 	slli	r2,r2,4
 4008fac:	1007883a 	mov	r3,r2
 4008fb0:	e0bffb03 	ldbu	r2,-20(fp)
 4008fb4:	1884b03a 	or	r2,r3,r2
 4008fb8:	1007883a 	mov	r3,r2
 4008fbc:	8105883a 	add	r2,r16,r4
 4008fc0:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x01;
 4008fc4:	d4200217 	ldw	r16,-32760(gp)
 4008fc8:	e0bff717 	ldw	r2,-36(fp)
 4008fcc:	144035c4 	addi	r17,r2,215
 4008fd0:	01400a04 	movi	r5,40
 4008fd4:	e13ff617 	ldw	r4,-40(fp)
 4008fd8:	400dcd40 	call	400dcd4 <__mulsi3>
 4008fdc:	8885883a 	add	r2,r17,r2
 4008fe0:	1085883a 	add	r2,r2,r2
 4008fe4:	10800044 	addi	r2,r2,1
 4008fe8:	8085883a 	add	r2,r16,r2
 4008fec:	00c00044 	movi	r3,1
 4008ff0:	10c00005 	stb	r3,0(r2)
 4008ff4:	0000c506 	br	400930c <drawGame+0x478>
			}
			else if(block == 2){ //draw J block
 4008ff8:	e0bff817 	ldw	r2,-32(fp)
 4008ffc:	10800098 	cmpnei	r2,r2,2
 4009000:	10001e1e 	bne	r2,zero,400907c <drawGame+0x1e8>
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg1 << 4 | bg1;
 4009004:	d4200217 	ldw	r16,-32760(gp)
 4009008:	e0bff717 	ldw	r2,-36(fp)
 400900c:	144035c4 	addi	r17,r2,215
 4009010:	01400a04 	movi	r5,40
 4009014:	e13ff617 	ldw	r4,-40(fp)
 4009018:	400dcd40 	call	400dcd4 <__mulsi3>
 400901c:	8885883a 	add	r2,r17,r2
 4009020:	1085883a 	add	r2,r2,r2
 4009024:	1009883a 	mov	r4,r2
 4009028:	e0bffa03 	ldbu	r2,-24(fp)
 400902c:	1004913a 	slli	r2,r2,4
 4009030:	1007883a 	mov	r3,r2
 4009034:	e0bffb03 	ldbu	r2,-20(fp)
 4009038:	1884b03a 	or	r2,r3,r2
 400903c:	1007883a 	mov	r3,r2
 4009040:	8105883a 	add	r2,r16,r4
 4009044:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x02;
 4009048:	d4200217 	ldw	r16,-32760(gp)
 400904c:	e0bff717 	ldw	r2,-36(fp)
 4009050:	144035c4 	addi	r17,r2,215
 4009054:	01400a04 	movi	r5,40
 4009058:	e13ff617 	ldw	r4,-40(fp)
 400905c:	400dcd40 	call	400dcd4 <__mulsi3>
 4009060:	8885883a 	add	r2,r17,r2
 4009064:	1085883a 	add	r2,r2,r2
 4009068:	10800044 	addi	r2,r2,1
 400906c:	8085883a 	add	r2,r16,r2
 4009070:	00c00084 	movi	r3,2
 4009074:	10c00005 	stb	r3,0(r2)
 4009078:	0000a406 	br	400930c <drawGame+0x478>
			}
			else if(block == 3){ //draw L block
 400907c:	e0bff817 	ldw	r2,-32(fp)
 4009080:	108000d8 	cmpnei	r2,r2,3
 4009084:	10001e1e 	bne	r2,zero,4009100 <drawGame+0x26c>
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg2 << 4 | bg2;
 4009088:	d4200217 	ldw	r16,-32760(gp)
 400908c:	e0bff717 	ldw	r2,-36(fp)
 4009090:	144035c4 	addi	r17,r2,215
 4009094:	01400a04 	movi	r5,40
 4009098:	e13ff617 	ldw	r4,-40(fp)
 400909c:	400dcd40 	call	400dcd4 <__mulsi3>
 40090a0:	8885883a 	add	r2,r17,r2
 40090a4:	1085883a 	add	r2,r2,r2
 40090a8:	1009883a 	mov	r4,r2
 40090ac:	e0bffc03 	ldbu	r2,-16(fp)
 40090b0:	1004913a 	slli	r2,r2,4
 40090b4:	1007883a 	mov	r3,r2
 40090b8:	e0bffd03 	ldbu	r2,-12(fp)
 40090bc:	1884b03a 	or	r2,r3,r2
 40090c0:	1007883a 	mov	r3,r2
 40090c4:	8105883a 	add	r2,r16,r4
 40090c8:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x02;
 40090cc:	d4200217 	ldw	r16,-32760(gp)
 40090d0:	e0bff717 	ldw	r2,-36(fp)
 40090d4:	144035c4 	addi	r17,r2,215
 40090d8:	01400a04 	movi	r5,40
 40090dc:	e13ff617 	ldw	r4,-40(fp)
 40090e0:	400dcd40 	call	400dcd4 <__mulsi3>
 40090e4:	8885883a 	add	r2,r17,r2
 40090e8:	1085883a 	add	r2,r2,r2
 40090ec:	10800044 	addi	r2,r2,1
 40090f0:	8085883a 	add	r2,r16,r2
 40090f4:	00c00084 	movi	r3,2
 40090f8:	10c00005 	stb	r3,0(r2)
 40090fc:	00008306 	br	400930c <drawGame+0x478>
			}
			else if(block == 4){ //draw O block
 4009100:	e0bff817 	ldw	r2,-32(fp)
 4009104:	10800118 	cmpnei	r2,r2,4
 4009108:	10001e1e 	bne	r2,zero,4009184 <drawGame+0x2f0>
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg1 << 4 | bg1;
 400910c:	d4200217 	ldw	r16,-32760(gp)
 4009110:	e0bff717 	ldw	r2,-36(fp)
 4009114:	144035c4 	addi	r17,r2,215
 4009118:	01400a04 	movi	r5,40
 400911c:	e13ff617 	ldw	r4,-40(fp)
 4009120:	400dcd40 	call	400dcd4 <__mulsi3>
 4009124:	8885883a 	add	r2,r17,r2
 4009128:	1085883a 	add	r2,r2,r2
 400912c:	1009883a 	mov	r4,r2
 4009130:	e0bffa03 	ldbu	r2,-24(fp)
 4009134:	1004913a 	slli	r2,r2,4
 4009138:	1007883a 	mov	r3,r2
 400913c:	e0bffb03 	ldbu	r2,-20(fp)
 4009140:	1884b03a 	or	r2,r3,r2
 4009144:	1007883a 	mov	r3,r2
 4009148:	8105883a 	add	r2,r16,r4
 400914c:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x01;
 4009150:	d4200217 	ldw	r16,-32760(gp)
 4009154:	e0bff717 	ldw	r2,-36(fp)
 4009158:	144035c4 	addi	r17,r2,215
 400915c:	01400a04 	movi	r5,40
 4009160:	e13ff617 	ldw	r4,-40(fp)
 4009164:	400dcd40 	call	400dcd4 <__mulsi3>
 4009168:	8885883a 	add	r2,r17,r2
 400916c:	1085883a 	add	r2,r2,r2
 4009170:	10800044 	addi	r2,r2,1
 4009174:	8085883a 	add	r2,r16,r2
 4009178:	00c00044 	movi	r3,1
 400917c:	10c00005 	stb	r3,0(r2)
 4009180:	00006206 	br	400930c <drawGame+0x478>
			}
			else if(block == 5){ //draw S block
 4009184:	e0bff817 	ldw	r2,-32(fp)
 4009188:	10800158 	cmpnei	r2,r2,5
 400918c:	10001e1e 	bne	r2,zero,4009208 <drawGame+0x374>
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg1 << 4 | bg1;
 4009190:	d4200217 	ldw	r16,-32760(gp)
 4009194:	e0bff717 	ldw	r2,-36(fp)
 4009198:	144035c4 	addi	r17,r2,215
 400919c:	01400a04 	movi	r5,40
 40091a0:	e13ff617 	ldw	r4,-40(fp)
 40091a4:	400dcd40 	call	400dcd4 <__mulsi3>
 40091a8:	8885883a 	add	r2,r17,r2
 40091ac:	1085883a 	add	r2,r2,r2
 40091b0:	1009883a 	mov	r4,r2
 40091b4:	e0bffa03 	ldbu	r2,-24(fp)
 40091b8:	1004913a 	slli	r2,r2,4
 40091bc:	1007883a 	mov	r3,r2
 40091c0:	e0bffb03 	ldbu	r2,-20(fp)
 40091c4:	1884b03a 	or	r2,r3,r2
 40091c8:	1007883a 	mov	r3,r2
 40091cc:	8105883a 	add	r2,r16,r4
 40091d0:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x02;
 40091d4:	d4200217 	ldw	r16,-32760(gp)
 40091d8:	e0bff717 	ldw	r2,-36(fp)
 40091dc:	144035c4 	addi	r17,r2,215
 40091e0:	01400a04 	movi	r5,40
 40091e4:	e13ff617 	ldw	r4,-40(fp)
 40091e8:	400dcd40 	call	400dcd4 <__mulsi3>
 40091ec:	8885883a 	add	r2,r17,r2
 40091f0:	1085883a 	add	r2,r2,r2
 40091f4:	10800044 	addi	r2,r2,1
 40091f8:	8085883a 	add	r2,r16,r2
 40091fc:	00c00084 	movi	r3,2
 4009200:	10c00005 	stb	r3,0(r2)
 4009204:	00004106 	br	400930c <drawGame+0x478>
			}
			else if(block == 6){ //draw T block
 4009208:	e0bff817 	ldw	r2,-32(fp)
 400920c:	10800198 	cmpnei	r2,r2,6
 4009210:	10001e1e 	bne	r2,zero,400928c <drawGame+0x3f8>
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg1 << 4 | bg1;
 4009214:	d4200217 	ldw	r16,-32760(gp)
 4009218:	e0bff717 	ldw	r2,-36(fp)
 400921c:	144035c4 	addi	r17,r2,215
 4009220:	01400a04 	movi	r5,40
 4009224:	e13ff617 	ldw	r4,-40(fp)
 4009228:	400dcd40 	call	400dcd4 <__mulsi3>
 400922c:	8885883a 	add	r2,r17,r2
 4009230:	1085883a 	add	r2,r2,r2
 4009234:	1009883a 	mov	r4,r2
 4009238:	e0bffa03 	ldbu	r2,-24(fp)
 400923c:	1004913a 	slli	r2,r2,4
 4009240:	1007883a 	mov	r3,r2
 4009244:	e0bffb03 	ldbu	r2,-20(fp)
 4009248:	1884b03a 	or	r2,r3,r2
 400924c:	1007883a 	mov	r3,r2
 4009250:	8105883a 	add	r2,r16,r4
 4009254:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x01;
 4009258:	d4200217 	ldw	r16,-32760(gp)
 400925c:	e0bff717 	ldw	r2,-36(fp)
 4009260:	144035c4 	addi	r17,r2,215
 4009264:	01400a04 	movi	r5,40
 4009268:	e13ff617 	ldw	r4,-40(fp)
 400926c:	400dcd40 	call	400dcd4 <__mulsi3>
 4009270:	8885883a 	add	r2,r17,r2
 4009274:	1085883a 	add	r2,r2,r2
 4009278:	10800044 	addi	r2,r2,1
 400927c:	8085883a 	add	r2,r16,r2
 4009280:	00c00044 	movi	r3,1
 4009284:	10c00005 	stb	r3,0(r2)
 4009288:	00002006 	br	400930c <drawGame+0x478>
			}
			else if(block == 7){ //draw Z block
 400928c:	e0bff817 	ldw	r2,-32(fp)
 4009290:	108001d8 	cmpnei	r2,r2,7
 4009294:	10001d1e 	bne	r2,zero,400930c <drawGame+0x478>
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg2 << 4 | bg2;
 4009298:	d4200217 	ldw	r16,-32760(gp)
 400929c:	e0bff717 	ldw	r2,-36(fp)
 40092a0:	144035c4 	addi	r17,r2,215
 40092a4:	01400a04 	movi	r5,40
 40092a8:	e13ff617 	ldw	r4,-40(fp)
 40092ac:	400dcd40 	call	400dcd4 <__mulsi3>
 40092b0:	8885883a 	add	r2,r17,r2
 40092b4:	1085883a 	add	r2,r2,r2
 40092b8:	1009883a 	mov	r4,r2
 40092bc:	e0bffc03 	ldbu	r2,-16(fp)
 40092c0:	1004913a 	slli	r2,r2,4
 40092c4:	1007883a 	mov	r3,r2
 40092c8:	e0bffd03 	ldbu	r2,-12(fp)
 40092cc:	1884b03a 	or	r2,r3,r2
 40092d0:	1007883a 	mov	r3,r2
 40092d4:	8105883a 	add	r2,r16,r4
 40092d8:	10c00005 	stb	r3,0(r2)
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x2;
 40092dc:	d4200217 	ldw	r16,-32760(gp)
 40092e0:	e0bff717 	ldw	r2,-36(fp)
 40092e4:	144035c4 	addi	r17,r2,215
 40092e8:	01400a04 	movi	r5,40
 40092ec:	e13ff617 	ldw	r4,-40(fp)
 40092f0:	400dcd40 	call	400dcd4 <__mulsi3>
 40092f4:	8885883a 	add	r2,r17,r2
 40092f8:	1085883a 	add	r2,r2,r2
 40092fc:	10800044 	addi	r2,r2,1
 4009300:	8085883a 	add	r2,r16,r2
 4009304:	00c00084 	movi	r3,2
 4009308:	10c00005 	stb	r3,0(r2)
}

void drawGame(int gameboard[20][10], alt_u8 fg1, alt_u8 bg1, alt_u8 fg2, alt_u8 bg2){
	//iterate over full array
	for(int i = 0; i < 20; i++){
		for(int j = 0; j < 10; j++){
 400930c:	e0bff717 	ldw	r2,-36(fp)
 4009310:	10800044 	addi	r2,r2,1
 4009314:	e0bff715 	stw	r2,-36(fp)
 4009318:	e0bff717 	ldw	r2,-36(fp)
 400931c:	10800290 	cmplti	r2,r2,10
 4009320:	103eee1e 	bne	r2,zero,4008edc <__alt_mem_onchip_memory2_0+0xfc003d1c>
	}
}

void drawGame(int gameboard[20][10], alt_u8 fg1, alt_u8 bg1, alt_u8 fg2, alt_u8 bg2){
	//iterate over full array
	for(int i = 0; i < 20; i++){
 4009324:	e0bff617 	ldw	r2,-40(fp)
 4009328:	10800044 	addi	r2,r2,1
 400932c:	e0bff615 	stw	r2,-40(fp)
 4009330:	e0bff617 	ldw	r2,-40(fp)
 4009334:	10800510 	cmplti	r2,r2,20
 4009338:	103ee61e 	bne	r2,zero,4008ed4 <__alt_mem_onchip_memory2_0+0xfc003d14>
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2] = fg2 << 4 | bg2;
				vga_ctrl->VRAM[(215 + j + 40 * i) * 2 + 1] = 0x2;
			}
		}
	}
}
 400933c:	0001883a 	nop
 4009340:	e6fffe04 	addi	sp,fp,-8
 4009344:	dfc00317 	ldw	ra,12(sp)
 4009348:	df000217 	ldw	fp,8(sp)
 400934c:	dc400117 	ldw	r17,4(sp)
 4009350:	dc000017 	ldw	r16,0(sp)
 4009354:	dec00404 	addi	sp,sp,16
 4009358:	f800283a 	ret

0400935c <drawStatBlocks>:

void drawStatBlocks(alt_u8 fg1, alt_u8 bg1, alt_u8 fg2, alt_u8 bg2){
 400935c:	defffb04 	addi	sp,sp,-20
 4009360:	df000415 	stw	fp,16(sp)
 4009364:	df000404 	addi	fp,sp,16
 4009368:	2011883a 	mov	r8,r4
 400936c:	2809883a 	mov	r4,r5
 4009370:	3007883a 	mov	r3,r6
 4009374:	3805883a 	mov	r2,r7
 4009378:	e23ffc05 	stb	r8,-16(fp)
 400937c:	e13ffd05 	stb	r4,-12(fp)
 4009380:	e0fffe05 	stb	r3,-8(fp)
 4009384:	e0bfff05 	stb	r2,-4(fp)
	//T block
	vga_ctrl->VRAM[204 * 2] = fg1 << 4 | bg1;
 4009388:	d0a00217 	ldw	r2,-32760(gp)
 400938c:	e0fffc03 	ldbu	r3,-16(fp)
 4009390:	1806913a 	slli	r3,r3,4
 4009394:	1809883a 	mov	r4,r3
 4009398:	e0fffd03 	ldbu	r3,-12(fp)
 400939c:	20c6b03a 	or	r3,r4,r3
 40093a0:	10c06605 	stb	r3,408(r2)
	vga_ctrl->VRAM[204 * 2 + 1] = 0x01;
 40093a4:	d0a00217 	ldw	r2,-32760(gp)
 40093a8:	00c00044 	movi	r3,1
 40093ac:	10c06645 	stb	r3,409(r2)
	vga_ctrl->VRAM[205 * 2] = fg1 << 4 | bg1;
 40093b0:	d0a00217 	ldw	r2,-32760(gp)
 40093b4:	e0fffc03 	ldbu	r3,-16(fp)
 40093b8:	1806913a 	slli	r3,r3,4
 40093bc:	1809883a 	mov	r4,r3
 40093c0:	e0fffd03 	ldbu	r3,-12(fp)
 40093c4:	20c6b03a 	or	r3,r4,r3
 40093c8:	10c06685 	stb	r3,410(r2)
	vga_ctrl->VRAM[205 * 2 + 1] = 0x01;
 40093cc:	d0a00217 	ldw	r2,-32760(gp)
 40093d0:	00c00044 	movi	r3,1
 40093d4:	10c066c5 	stb	r3,411(r2)
	vga_ctrl->VRAM[206 * 2] = fg1 << 4 | bg1;
 40093d8:	d0a00217 	ldw	r2,-32760(gp)
 40093dc:	e0fffc03 	ldbu	r3,-16(fp)
 40093e0:	1806913a 	slli	r3,r3,4
 40093e4:	1809883a 	mov	r4,r3
 40093e8:	e0fffd03 	ldbu	r3,-12(fp)
 40093ec:	20c6b03a 	or	r3,r4,r3
 40093f0:	10c06705 	stb	r3,412(r2)
	vga_ctrl->VRAM[206 * 2 + 1] = 0x01;
 40093f4:	d0a00217 	ldw	r2,-32760(gp)
 40093f8:	00c00044 	movi	r3,1
 40093fc:	10c06745 	stb	r3,413(r2)
	vga_ctrl->VRAM[245 * 2] = fg1 << 4 | bg1;
 4009400:	d0a00217 	ldw	r2,-32760(gp)
 4009404:	e0fffc03 	ldbu	r3,-16(fp)
 4009408:	1806913a 	slli	r3,r3,4
 400940c:	1809883a 	mov	r4,r3
 4009410:	e0fffd03 	ldbu	r3,-12(fp)
 4009414:	20c6b03a 	or	r3,r4,r3
 4009418:	10c07a85 	stb	r3,490(r2)
	vga_ctrl->VRAM[245 * 2 + 1] = 0x01;
 400941c:	d0a00217 	ldw	r2,-32760(gp)
 4009420:	00c00044 	movi	r3,1
 4009424:	10c07ac5 	stb	r3,491(r2)

	//J block
	vga_ctrl->VRAM[324 * 2] = fg1 << 4 | bg1;
 4009428:	d0a00217 	ldw	r2,-32760(gp)
 400942c:	e0fffc03 	ldbu	r3,-16(fp)
 4009430:	1806913a 	slli	r3,r3,4
 4009434:	1809883a 	mov	r4,r3
 4009438:	e0fffd03 	ldbu	r3,-12(fp)
 400943c:	20c6b03a 	or	r3,r4,r3
 4009440:	10c0a205 	stb	r3,648(r2)
	vga_ctrl->VRAM[324 * 2 + 1] = 0x02;
 4009444:	d0a00217 	ldw	r2,-32760(gp)
 4009448:	00c00084 	movi	r3,2
 400944c:	10c0a245 	stb	r3,649(r2)
	vga_ctrl->VRAM[325 * 2] = fg1 << 4 | bg1;
 4009450:	d0a00217 	ldw	r2,-32760(gp)
 4009454:	e0fffc03 	ldbu	r3,-16(fp)
 4009458:	1806913a 	slli	r3,r3,4
 400945c:	1809883a 	mov	r4,r3
 4009460:	e0fffd03 	ldbu	r3,-12(fp)
 4009464:	20c6b03a 	or	r3,r4,r3
 4009468:	10c0a285 	stb	r3,650(r2)
	vga_ctrl->VRAM[325 * 2 + 1] = 0x02;
 400946c:	d0a00217 	ldw	r2,-32760(gp)
 4009470:	00c00084 	movi	r3,2
 4009474:	10c0a2c5 	stb	r3,651(r2)
	vga_ctrl->VRAM[326 * 2] = fg1 << 4 | bg1;
 4009478:	d0a00217 	ldw	r2,-32760(gp)
 400947c:	e0fffc03 	ldbu	r3,-16(fp)
 4009480:	1806913a 	slli	r3,r3,4
 4009484:	1809883a 	mov	r4,r3
 4009488:	e0fffd03 	ldbu	r3,-12(fp)
 400948c:	20c6b03a 	or	r3,r4,r3
 4009490:	10c0a305 	stb	r3,652(r2)
	vga_ctrl->VRAM[326 * 2 + 1] = 0x02;
 4009494:	d0a00217 	ldw	r2,-32760(gp)
 4009498:	00c00084 	movi	r3,2
 400949c:	10c0a345 	stb	r3,653(r2)
	vga_ctrl->VRAM[366 * 2] = fg1 << 4 | bg1;
 40094a0:	d0a00217 	ldw	r2,-32760(gp)
 40094a4:	e0fffc03 	ldbu	r3,-16(fp)
 40094a8:	1806913a 	slli	r3,r3,4
 40094ac:	1809883a 	mov	r4,r3
 40094b0:	e0fffd03 	ldbu	r3,-12(fp)
 40094b4:	20c6b03a 	or	r3,r4,r3
 40094b8:	10c0b705 	stb	r3,732(r2)
	vga_ctrl->VRAM[366 * 2 + 1] = 0x02;
 40094bc:	d0a00217 	ldw	r2,-32760(gp)
 40094c0:	00c00084 	movi	r3,2
 40094c4:	10c0b745 	stb	r3,733(r2)

	//Z block
	vga_ctrl->VRAM[444 * 2] = fg2 << 4 | bg2;
 40094c8:	d0a00217 	ldw	r2,-32760(gp)
 40094cc:	e0fffe03 	ldbu	r3,-8(fp)
 40094d0:	1806913a 	slli	r3,r3,4
 40094d4:	1809883a 	mov	r4,r3
 40094d8:	e0ffff03 	ldbu	r3,-4(fp)
 40094dc:	20c6b03a 	or	r3,r4,r3
 40094e0:	10c0de05 	stb	r3,888(r2)
	vga_ctrl->VRAM[444 * 2 + 1] = 0x02;
 40094e4:	d0a00217 	ldw	r2,-32760(gp)
 40094e8:	00c00084 	movi	r3,2
 40094ec:	10c0de45 	stb	r3,889(r2)
	vga_ctrl->VRAM[445 * 2] = fg2 << 4 | bg2;
 40094f0:	d0a00217 	ldw	r2,-32760(gp)
 40094f4:	e0fffe03 	ldbu	r3,-8(fp)
 40094f8:	1806913a 	slli	r3,r3,4
 40094fc:	1809883a 	mov	r4,r3
 4009500:	e0ffff03 	ldbu	r3,-4(fp)
 4009504:	20c6b03a 	or	r3,r4,r3
 4009508:	10c0de85 	stb	r3,890(r2)
	vga_ctrl->VRAM[445 * 2 + 1] = 0x02;
 400950c:	d0a00217 	ldw	r2,-32760(gp)
 4009510:	00c00084 	movi	r3,2
 4009514:	10c0dec5 	stb	r3,891(r2)
	vga_ctrl->VRAM[485 * 2] = fg2 << 4 | bg2;
 4009518:	d0a00217 	ldw	r2,-32760(gp)
 400951c:	e0fffe03 	ldbu	r3,-8(fp)
 4009520:	1806913a 	slli	r3,r3,4
 4009524:	1809883a 	mov	r4,r3
 4009528:	e0ffff03 	ldbu	r3,-4(fp)
 400952c:	20c6b03a 	or	r3,r4,r3
 4009530:	10c0f285 	stb	r3,970(r2)
	vga_ctrl->VRAM[485 * 2 + 1] = 0x02;
 4009534:	d0a00217 	ldw	r2,-32760(gp)
 4009538:	00c00084 	movi	r3,2
 400953c:	10c0f2c5 	stb	r3,971(r2)
	vga_ctrl->VRAM[486 * 2] = fg2 << 4 | bg2;
 4009540:	d0a00217 	ldw	r2,-32760(gp)
 4009544:	e0fffe03 	ldbu	r3,-8(fp)
 4009548:	1806913a 	slli	r3,r3,4
 400954c:	1809883a 	mov	r4,r3
 4009550:	e0ffff03 	ldbu	r3,-4(fp)
 4009554:	20c6b03a 	or	r3,r4,r3
 4009558:	10c0f305 	stb	r3,972(r2)
	vga_ctrl->VRAM[486 * 2 + 1] = 0x02;
 400955c:	d0a00217 	ldw	r2,-32760(gp)
 4009560:	00c00084 	movi	r3,2
 4009564:	10c0f345 	stb	r3,973(r2)

	//O block
	vga_ctrl->VRAM[565 * 2] = fg1 << 4 | bg1;
 4009568:	d0a00217 	ldw	r2,-32760(gp)
 400956c:	e0fffc03 	ldbu	r3,-16(fp)
 4009570:	1806913a 	slli	r3,r3,4
 4009574:	1809883a 	mov	r4,r3
 4009578:	e0fffd03 	ldbu	r3,-12(fp)
 400957c:	20c6b03a 	or	r3,r4,r3
 4009580:	10c11a85 	stb	r3,1130(r2)
	vga_ctrl->VRAM[565 * 2 + 1] = 0x01;
 4009584:	d0a00217 	ldw	r2,-32760(gp)
 4009588:	00c00044 	movi	r3,1
 400958c:	10c11ac5 	stb	r3,1131(r2)
	vga_ctrl->VRAM[605 * 2] = fg1 << 4 | bg1;
 4009590:	d0a00217 	ldw	r2,-32760(gp)
 4009594:	e0fffc03 	ldbu	r3,-16(fp)
 4009598:	1806913a 	slli	r3,r3,4
 400959c:	1809883a 	mov	r4,r3
 40095a0:	e0fffd03 	ldbu	r3,-12(fp)
 40095a4:	20c6b03a 	or	r3,r4,r3
 40095a8:	10c12e85 	stb	r3,1210(r2)
	vga_ctrl->VRAM[605 * 2 + 1] = 0x01;
 40095ac:	d0a00217 	ldw	r2,-32760(gp)
 40095b0:	00c00044 	movi	r3,1
 40095b4:	10c12ec5 	stb	r3,1211(r2)
	vga_ctrl->VRAM[566 * 2] = fg1 << 4 | bg1;
 40095b8:	d0a00217 	ldw	r2,-32760(gp)
 40095bc:	e0fffc03 	ldbu	r3,-16(fp)
 40095c0:	1806913a 	slli	r3,r3,4
 40095c4:	1809883a 	mov	r4,r3
 40095c8:	e0fffd03 	ldbu	r3,-12(fp)
 40095cc:	20c6b03a 	or	r3,r4,r3
 40095d0:	10c11b05 	stb	r3,1132(r2)
	vga_ctrl->VRAM[566 * 2 + 1] = 0x01;
 40095d4:	d0a00217 	ldw	r2,-32760(gp)
 40095d8:	00c00044 	movi	r3,1
 40095dc:	10c11b45 	stb	r3,1133(r2)
	vga_ctrl->VRAM[606 * 2] = fg1 << 4 | bg1;
 40095e0:	d0a00217 	ldw	r2,-32760(gp)
 40095e4:	e0fffc03 	ldbu	r3,-16(fp)
 40095e8:	1806913a 	slli	r3,r3,4
 40095ec:	1809883a 	mov	r4,r3
 40095f0:	e0fffd03 	ldbu	r3,-12(fp)
 40095f4:	20c6b03a 	or	r3,r4,r3
 40095f8:	10c12f05 	stb	r3,1212(r2)
	vga_ctrl->VRAM[606 * 2 + 1] = 0x01;
 40095fc:	d0a00217 	ldw	r2,-32760(gp)
 4009600:	00c00044 	movi	r3,1
 4009604:	10c12f45 	stb	r3,1213(r2)

	//S block
	vga_ctrl->VRAM[685 * 2] = fg1 << 4 | bg1;
 4009608:	d0a00217 	ldw	r2,-32760(gp)
 400960c:	e0fffc03 	ldbu	r3,-16(fp)
 4009610:	1806913a 	slli	r3,r3,4
 4009614:	1809883a 	mov	r4,r3
 4009618:	e0fffd03 	ldbu	r3,-12(fp)
 400961c:	20c6b03a 	or	r3,r4,r3
 4009620:	10c15685 	stb	r3,1370(r2)
	vga_ctrl->VRAM[685 * 2 + 1] = 0x02;
 4009624:	d0a00217 	ldw	r2,-32760(gp)
 4009628:	00c00084 	movi	r3,2
 400962c:	10c156c5 	stb	r3,1371(r2)
	vga_ctrl->VRAM[686 * 2] = fg1 << 4 | bg1;
 4009630:	d0a00217 	ldw	r2,-32760(gp)
 4009634:	e0fffc03 	ldbu	r3,-16(fp)
 4009638:	1806913a 	slli	r3,r3,4
 400963c:	1809883a 	mov	r4,r3
 4009640:	e0fffd03 	ldbu	r3,-12(fp)
 4009644:	20c6b03a 	or	r3,r4,r3
 4009648:	10c15705 	stb	r3,1372(r2)
	vga_ctrl->VRAM[686 * 2 + 1] = 0x02;
 400964c:	d0a00217 	ldw	r2,-32760(gp)
 4009650:	00c00084 	movi	r3,2
 4009654:	10c15745 	stb	r3,1373(r2)
	vga_ctrl->VRAM[724 * 2] = fg1 << 4 | bg1;
 4009658:	d0a00217 	ldw	r2,-32760(gp)
 400965c:	e0fffc03 	ldbu	r3,-16(fp)
 4009660:	1806913a 	slli	r3,r3,4
 4009664:	1809883a 	mov	r4,r3
 4009668:	e0fffd03 	ldbu	r3,-12(fp)
 400966c:	20c6b03a 	or	r3,r4,r3
 4009670:	10c16a05 	stb	r3,1448(r2)
	vga_ctrl->VRAM[724 * 2 + 1] = 0x02;
 4009674:	d0a00217 	ldw	r2,-32760(gp)
 4009678:	00c00084 	movi	r3,2
 400967c:	10c16a45 	stb	r3,1449(r2)
	vga_ctrl->VRAM[725 * 2] = fg1 << 4 | bg1;
 4009680:	d0a00217 	ldw	r2,-32760(gp)
 4009684:	e0fffc03 	ldbu	r3,-16(fp)
 4009688:	1806913a 	slli	r3,r3,4
 400968c:	1809883a 	mov	r4,r3
 4009690:	e0fffd03 	ldbu	r3,-12(fp)
 4009694:	20c6b03a 	or	r3,r4,r3
 4009698:	10c16a85 	stb	r3,1450(r2)
	vga_ctrl->VRAM[725 * 2 + 1] = 0x02;
 400969c:	d0a00217 	ldw	r2,-32760(gp)
 40096a0:	00c00084 	movi	r3,2
 40096a4:	10c16ac5 	stb	r3,1451(r2)

	//L block
	vga_ctrl->VRAM[804 * 2] = fg2 << 4 | bg2;
 40096a8:	d0a00217 	ldw	r2,-32760(gp)
 40096ac:	e0fffe03 	ldbu	r3,-8(fp)
 40096b0:	1806913a 	slli	r3,r3,4
 40096b4:	1809883a 	mov	r4,r3
 40096b8:	e0ffff03 	ldbu	r3,-4(fp)
 40096bc:	20c6b03a 	or	r3,r4,r3
 40096c0:	10c19205 	stb	r3,1608(r2)
	vga_ctrl->VRAM[804 * 2 + 1] = 0x02;
 40096c4:	d0a00217 	ldw	r2,-32760(gp)
 40096c8:	00c00084 	movi	r3,2
 40096cc:	10c19245 	stb	r3,1609(r2)
	vga_ctrl->VRAM[805 * 2] = fg2 << 4 | bg2;
 40096d0:	d0a00217 	ldw	r2,-32760(gp)
 40096d4:	e0fffe03 	ldbu	r3,-8(fp)
 40096d8:	1806913a 	slli	r3,r3,4
 40096dc:	1809883a 	mov	r4,r3
 40096e0:	e0ffff03 	ldbu	r3,-4(fp)
 40096e4:	20c6b03a 	or	r3,r4,r3
 40096e8:	10c19285 	stb	r3,1610(r2)
	vga_ctrl->VRAM[805 * 2 + 1] = 0x02;
 40096ec:	d0a00217 	ldw	r2,-32760(gp)
 40096f0:	00c00084 	movi	r3,2
 40096f4:	10c192c5 	stb	r3,1611(r2)
	vga_ctrl->VRAM[806 * 2] = fg2 << 4 | bg2;
 40096f8:	d0a00217 	ldw	r2,-32760(gp)
 40096fc:	e0fffe03 	ldbu	r3,-8(fp)
 4009700:	1806913a 	slli	r3,r3,4
 4009704:	1809883a 	mov	r4,r3
 4009708:	e0ffff03 	ldbu	r3,-4(fp)
 400970c:	20c6b03a 	or	r3,r4,r3
 4009710:	10c19305 	stb	r3,1612(r2)
	vga_ctrl->VRAM[806 * 2 + 1] = 0x02;
 4009714:	d0a00217 	ldw	r2,-32760(gp)
 4009718:	00c00084 	movi	r3,2
 400971c:	10c19345 	stb	r3,1613(r2)
	vga_ctrl->VRAM[844 * 2] = fg2 << 4 | bg2;
 4009720:	d0a00217 	ldw	r2,-32760(gp)
 4009724:	e0fffe03 	ldbu	r3,-8(fp)
 4009728:	1806913a 	slli	r3,r3,4
 400972c:	1809883a 	mov	r4,r3
 4009730:	e0ffff03 	ldbu	r3,-4(fp)
 4009734:	20c6b03a 	or	r3,r4,r3
 4009738:	10c1a605 	stb	r3,1688(r2)
	vga_ctrl->VRAM[844 * 2 + 1] = 0x02;
 400973c:	d0a00217 	ldw	r2,-32760(gp)
 4009740:	00c00084 	movi	r3,2
 4009744:	10c1a645 	stb	r3,1689(r2)

	//I block
	vga_ctrl->VRAM[924 * 2] = fg1 << 4 | bg1;
 4009748:	d0a00217 	ldw	r2,-32760(gp)
 400974c:	e0fffc03 	ldbu	r3,-16(fp)
 4009750:	1806913a 	slli	r3,r3,4
 4009754:	1809883a 	mov	r4,r3
 4009758:	e0fffd03 	ldbu	r3,-12(fp)
 400975c:	20c6b03a 	or	r3,r4,r3
 4009760:	10c1ce05 	stb	r3,1848(r2)
	vga_ctrl->VRAM[924 * 2 + 1] = 0x01;
 4009764:	d0a00217 	ldw	r2,-32760(gp)
 4009768:	00c00044 	movi	r3,1
 400976c:	10c1ce45 	stb	r3,1849(r2)
	vga_ctrl->VRAM[925 * 2] = fg1 << 4 | bg1;
 4009770:	d0a00217 	ldw	r2,-32760(gp)
 4009774:	e0fffc03 	ldbu	r3,-16(fp)
 4009778:	1806913a 	slli	r3,r3,4
 400977c:	1809883a 	mov	r4,r3
 4009780:	e0fffd03 	ldbu	r3,-12(fp)
 4009784:	20c6b03a 	or	r3,r4,r3
 4009788:	10c1ce85 	stb	r3,1850(r2)
	vga_ctrl->VRAM[925 * 2 + 1] = 0x01;
 400978c:	d0a00217 	ldw	r2,-32760(gp)
 4009790:	00c00044 	movi	r3,1
 4009794:	10c1cec5 	stb	r3,1851(r2)
	vga_ctrl->VRAM[926 * 2] = fg1 << 4 | bg1;
 4009798:	d0a00217 	ldw	r2,-32760(gp)
 400979c:	e0fffc03 	ldbu	r3,-16(fp)
 40097a0:	1806913a 	slli	r3,r3,4
 40097a4:	1809883a 	mov	r4,r3
 40097a8:	e0fffd03 	ldbu	r3,-12(fp)
 40097ac:	20c6b03a 	or	r3,r4,r3
 40097b0:	10c1cf05 	stb	r3,1852(r2)
	vga_ctrl->VRAM[926 * 2 + 1] = 0x01;
 40097b4:	d0a00217 	ldw	r2,-32760(gp)
 40097b8:	00c00044 	movi	r3,1
 40097bc:	10c1cf45 	stb	r3,1853(r2)
	vga_ctrl->VRAM[927 * 2] = fg1 << 4 | bg1;
 40097c0:	d0a00217 	ldw	r2,-32760(gp)
 40097c4:	e0fffc03 	ldbu	r3,-16(fp)
 40097c8:	1806913a 	slli	r3,r3,4
 40097cc:	1809883a 	mov	r4,r3
 40097d0:	e0fffd03 	ldbu	r3,-12(fp)
 40097d4:	20c6b03a 	or	r3,r4,r3
 40097d8:	10c1cf85 	stb	r3,1854(r2)
	vga_ctrl->VRAM[927 * 2 + 1] = 0x01;
 40097dc:	d0a00217 	ldw	r2,-32760(gp)
 40097e0:	00c00044 	movi	r3,1
 40097e4:	10c1cfc5 	stb	r3,1855(r2)
}
 40097e8:	0001883a 	nop
 40097ec:	e037883a 	mov	sp,fp
 40097f0:	df000017 	ldw	fp,0(sp)
 40097f4:	dec00104 	addi	sp,sp,4
 40097f8:	f800283a 	ret

040097fc <drawNext>:

void drawNext(int block, alt_u8 fg1, alt_u8 bg1, alt_u8 fg2, alt_u8 bg2){
 40097fc:	defffa04 	addi	sp,sp,-24
 4009800:	df000515 	stw	fp,20(sp)
 4009804:	df000504 	addi	fp,sp,20
 4009808:	e13ffb15 	stw	r4,-20(fp)
 400980c:	3009883a 	mov	r4,r6
 4009810:	3807883a 	mov	r3,r7
 4009814:	e0800117 	ldw	r2,4(fp)
 4009818:	e17ffc05 	stb	r5,-16(fp)
 400981c:	e13ffd05 	stb	r4,-12(fp)
 4009820:	e0fffe05 	stb	r3,-8(fp)
 4009824:	e0bfff05 	stb	r2,-4(fp)
	switch(block){
 4009828:	e0bffb17 	ldw	r2,-20(fp)
 400982c:	10800228 	cmpgeui	r2,r2,8
 4009830:	10012e1e 	bne	r2,zero,4009cec <drawNext+0x4f0>
 4009834:	e0bffb17 	ldw	r2,-20(fp)
 4009838:	100690ba 	slli	r3,r2,2
 400983c:	00810074 	movhi	r2,1025
 4009840:	10a61404 	addi	r2,r2,-26544
 4009844:	1885883a 	add	r2,r3,r2
 4009848:	10800017 	ldw	r2,0(r2)
 400984c:	1000683a 	jmp	r2
 4009850:	04009cec 	andhi	r16,zero,627
 4009854:	04009870 	cmpltui	r16,zero,609
 4009858:	04009914 	movui	r16,612
 400985c:	040099b8 	rdprs	r16,zero,614
 4009860:	04009a5c 	xori	r16,zero,617
 4009864:	04009b00 	call	4009b0 <__reset-0x3bff650>
 4009868:	04009ba4 	muli	r16,zero,622
 400986c:	04009c48 	cmpgei	r16,zero,625
	case 1:
		vga_ctrl->VRAM[548 * 2] = fg1 << 4 | bg1;
 4009870:	d0a00217 	ldw	r2,-32760(gp)
 4009874:	e0fffc03 	ldbu	r3,-16(fp)
 4009878:	1806913a 	slli	r3,r3,4
 400987c:	1809883a 	mov	r4,r3
 4009880:	e0fffd03 	ldbu	r3,-12(fp)
 4009884:	20c6b03a 	or	r3,r4,r3
 4009888:	10c11205 	stb	r3,1096(r2)
		vga_ctrl->VRAM[548 * 2 + 1] = 0x01;
 400988c:	d0a00217 	ldw	r2,-32760(gp)
 4009890:	00c00044 	movi	r3,1
 4009894:	10c11245 	stb	r3,1097(r2)
		vga_ctrl->VRAM[588 * 2] = fg1 << 4 | bg1;
 4009898:	d0a00217 	ldw	r2,-32760(gp)
 400989c:	e0fffc03 	ldbu	r3,-16(fp)
 40098a0:	1806913a 	slli	r3,r3,4
 40098a4:	1809883a 	mov	r4,r3
 40098a8:	e0fffd03 	ldbu	r3,-12(fp)
 40098ac:	20c6b03a 	or	r3,r4,r3
 40098b0:	10c12605 	stb	r3,1176(r2)
		vga_ctrl->VRAM[588 * 2 + 1] = 0x01;
 40098b4:	d0a00217 	ldw	r2,-32760(gp)
 40098b8:	00c00044 	movi	r3,1
 40098bc:	10c12645 	stb	r3,1177(r2)
		vga_ctrl->VRAM[628 * 2] = fg1 << 4 | bg1;
 40098c0:	d0a00217 	ldw	r2,-32760(gp)
 40098c4:	e0fffc03 	ldbu	r3,-16(fp)
 40098c8:	1806913a 	slli	r3,r3,4
 40098cc:	1809883a 	mov	r4,r3
 40098d0:	e0fffd03 	ldbu	r3,-12(fp)
 40098d4:	20c6b03a 	or	r3,r4,r3
 40098d8:	10c13a05 	stb	r3,1256(r2)
		vga_ctrl->VRAM[628 * 2 + 1] = 0x01;
 40098dc:	d0a00217 	ldw	r2,-32760(gp)
 40098e0:	00c00044 	movi	r3,1
 40098e4:	10c13a45 	stb	r3,1257(r2)
		vga_ctrl->VRAM[668 * 2] = fg1 << 4 | bg1;
 40098e8:	d0a00217 	ldw	r2,-32760(gp)
 40098ec:	e0fffc03 	ldbu	r3,-16(fp)
 40098f0:	1806913a 	slli	r3,r3,4
 40098f4:	1809883a 	mov	r4,r3
 40098f8:	e0fffd03 	ldbu	r3,-12(fp)
 40098fc:	20c6b03a 	or	r3,r4,r3
 4009900:	10c14e05 	stb	r3,1336(r2)
		vga_ctrl->VRAM[668 * 2 + 1] = 0x01;
 4009904:	d0a00217 	ldw	r2,-32760(gp)
 4009908:	00c00044 	movi	r3,1
 400990c:	10c14e45 	stb	r3,1337(r2)
		break;
 4009910:	00011706 	br	4009d70 <drawNext+0x574>
	case 2:
		vga_ctrl->VRAM[589 * 2] = fg1 << 4 | bg1;
 4009914:	d0a00217 	ldw	r2,-32760(gp)
 4009918:	e0fffc03 	ldbu	r3,-16(fp)
 400991c:	1806913a 	slli	r3,r3,4
 4009920:	1809883a 	mov	r4,r3
 4009924:	e0fffd03 	ldbu	r3,-12(fp)
 4009928:	20c6b03a 	or	r3,r4,r3
 400992c:	10c12685 	stb	r3,1178(r2)
		vga_ctrl->VRAM[589 * 2 + 1] = 0x02;
 4009930:	d0a00217 	ldw	r2,-32760(gp)
 4009934:	00c00084 	movi	r3,2
 4009938:	10c126c5 	stb	r3,1179(r2)
		vga_ctrl->VRAM[629 * 2] = fg1 << 4 | bg1;
 400993c:	d0a00217 	ldw	r2,-32760(gp)
 4009940:	e0fffc03 	ldbu	r3,-16(fp)
 4009944:	1806913a 	slli	r3,r3,4
 4009948:	1809883a 	mov	r4,r3
 400994c:	e0fffd03 	ldbu	r3,-12(fp)
 4009950:	20c6b03a 	or	r3,r4,r3
 4009954:	10c13a85 	stb	r3,1258(r2)
		vga_ctrl->VRAM[629 * 2 + 1] = 0x02;
 4009958:	d0a00217 	ldw	r2,-32760(gp)
 400995c:	00c00084 	movi	r3,2
 4009960:	10c13ac5 	stb	r3,1259(r2)
		vga_ctrl->VRAM[668 * 2] = fg1 << 4 | bg1;
 4009964:	d0a00217 	ldw	r2,-32760(gp)
 4009968:	e0fffc03 	ldbu	r3,-16(fp)
 400996c:	1806913a 	slli	r3,r3,4
 4009970:	1809883a 	mov	r4,r3
 4009974:	e0fffd03 	ldbu	r3,-12(fp)
 4009978:	20c6b03a 	or	r3,r4,r3
 400997c:	10c14e05 	stb	r3,1336(r2)
		vga_ctrl->VRAM[668 * 2 + 1] = 0x02;
 4009980:	d0a00217 	ldw	r2,-32760(gp)
 4009984:	00c00084 	movi	r3,2
 4009988:	10c14e45 	stb	r3,1337(r2)
		vga_ctrl->VRAM[669 * 2] = fg1 << 4 | bg1;
 400998c:	d0a00217 	ldw	r2,-32760(gp)
 4009990:	e0fffc03 	ldbu	r3,-16(fp)
 4009994:	1806913a 	slli	r3,r3,4
 4009998:	1809883a 	mov	r4,r3
 400999c:	e0fffd03 	ldbu	r3,-12(fp)
 40099a0:	20c6b03a 	or	r3,r4,r3
 40099a4:	10c14e85 	stb	r3,1338(r2)
		vga_ctrl->VRAM[669 * 2 + 1] = 0x02;
 40099a8:	d0a00217 	ldw	r2,-32760(gp)
 40099ac:	00c00084 	movi	r3,2
 40099b0:	10c14ec5 	stb	r3,1339(r2)
		break;
 40099b4:	0000ee06 	br	4009d70 <drawNext+0x574>
	case 3:
		vga_ctrl->VRAM[588 * 2] = fg2 << 4 | bg2;
 40099b8:	d0a00217 	ldw	r2,-32760(gp)
 40099bc:	e0fffe03 	ldbu	r3,-8(fp)
 40099c0:	1806913a 	slli	r3,r3,4
 40099c4:	1809883a 	mov	r4,r3
 40099c8:	e0ffff03 	ldbu	r3,-4(fp)
 40099cc:	20c6b03a 	or	r3,r4,r3
 40099d0:	10c12605 	stb	r3,1176(r2)
		vga_ctrl->VRAM[588 * 2 + 1] = 0x02;
 40099d4:	d0a00217 	ldw	r2,-32760(gp)
 40099d8:	00c00084 	movi	r3,2
 40099dc:	10c12645 	stb	r3,1177(r2)
		vga_ctrl->VRAM[628 * 2] = fg2 << 4 | bg2;
 40099e0:	d0a00217 	ldw	r2,-32760(gp)
 40099e4:	e0fffe03 	ldbu	r3,-8(fp)
 40099e8:	1806913a 	slli	r3,r3,4
 40099ec:	1809883a 	mov	r4,r3
 40099f0:	e0ffff03 	ldbu	r3,-4(fp)
 40099f4:	20c6b03a 	or	r3,r4,r3
 40099f8:	10c13a05 	stb	r3,1256(r2)
		vga_ctrl->VRAM[628 * 2 + 1] = 0x02;
 40099fc:	d0a00217 	ldw	r2,-32760(gp)
 4009a00:	00c00084 	movi	r3,2
 4009a04:	10c13a45 	stb	r3,1257(r2)
		vga_ctrl->VRAM[668 * 2] = fg2 << 4 | bg2;
 4009a08:	d0a00217 	ldw	r2,-32760(gp)
 4009a0c:	e0fffe03 	ldbu	r3,-8(fp)
 4009a10:	1806913a 	slli	r3,r3,4
 4009a14:	1809883a 	mov	r4,r3
 4009a18:	e0ffff03 	ldbu	r3,-4(fp)
 4009a1c:	20c6b03a 	or	r3,r4,r3
 4009a20:	10c14e05 	stb	r3,1336(r2)
		vga_ctrl->VRAM[668 * 2 + 1] = 0x02;
 4009a24:	d0a00217 	ldw	r2,-32760(gp)
 4009a28:	00c00084 	movi	r3,2
 4009a2c:	10c14e45 	stb	r3,1337(r2)
		vga_ctrl->VRAM[669 * 2] = fg2 << 4 | bg2;
 4009a30:	d0a00217 	ldw	r2,-32760(gp)
 4009a34:	e0fffe03 	ldbu	r3,-8(fp)
 4009a38:	1806913a 	slli	r3,r3,4
 4009a3c:	1809883a 	mov	r4,r3
 4009a40:	e0ffff03 	ldbu	r3,-4(fp)
 4009a44:	20c6b03a 	or	r3,r4,r3
 4009a48:	10c14e85 	stb	r3,1338(r2)
		vga_ctrl->VRAM[669 * 2 + 1] = 0x02;
 4009a4c:	d0a00217 	ldw	r2,-32760(gp)
 4009a50:	00c00084 	movi	r3,2
 4009a54:	10c14ec5 	stb	r3,1339(r2)
		break;
 4009a58:	0000c506 	br	4009d70 <drawNext+0x574>
	case 4:
		vga_ctrl->VRAM[628 * 2] = fg1 << 4 | bg1;
 4009a5c:	d0a00217 	ldw	r2,-32760(gp)
 4009a60:	e0fffc03 	ldbu	r3,-16(fp)
 4009a64:	1806913a 	slli	r3,r3,4
 4009a68:	1809883a 	mov	r4,r3
 4009a6c:	e0fffd03 	ldbu	r3,-12(fp)
 4009a70:	20c6b03a 	or	r3,r4,r3
 4009a74:	10c13a05 	stb	r3,1256(r2)
		vga_ctrl->VRAM[628 * 2 + 1] = 0x01;
 4009a78:	d0a00217 	ldw	r2,-32760(gp)
 4009a7c:	00c00044 	movi	r3,1
 4009a80:	10c13a45 	stb	r3,1257(r2)
		vga_ctrl->VRAM[629 * 2] = fg1 << 4 | bg1;
 4009a84:	d0a00217 	ldw	r2,-32760(gp)
 4009a88:	e0fffc03 	ldbu	r3,-16(fp)
 4009a8c:	1806913a 	slli	r3,r3,4
 4009a90:	1809883a 	mov	r4,r3
 4009a94:	e0fffd03 	ldbu	r3,-12(fp)
 4009a98:	20c6b03a 	or	r3,r4,r3
 4009a9c:	10c13a85 	stb	r3,1258(r2)
		vga_ctrl->VRAM[629 * 2 + 1] = 0x01;
 4009aa0:	d0a00217 	ldw	r2,-32760(gp)
 4009aa4:	00c00044 	movi	r3,1
 4009aa8:	10c13ac5 	stb	r3,1259(r2)
		vga_ctrl->VRAM[668 * 2] = fg1 << 4 | bg1;
 4009aac:	d0a00217 	ldw	r2,-32760(gp)
 4009ab0:	e0fffc03 	ldbu	r3,-16(fp)
 4009ab4:	1806913a 	slli	r3,r3,4
 4009ab8:	1809883a 	mov	r4,r3
 4009abc:	e0fffd03 	ldbu	r3,-12(fp)
 4009ac0:	20c6b03a 	or	r3,r4,r3
 4009ac4:	10c14e05 	stb	r3,1336(r2)
		vga_ctrl->VRAM[668 * 2 + 1] = 0x01;
 4009ac8:	d0a00217 	ldw	r2,-32760(gp)
 4009acc:	00c00044 	movi	r3,1
 4009ad0:	10c14e45 	stb	r3,1337(r2)
		vga_ctrl->VRAM[669 * 2] = fg1 << 4 | bg1;
 4009ad4:	d0a00217 	ldw	r2,-32760(gp)
 4009ad8:	e0fffc03 	ldbu	r3,-16(fp)
 4009adc:	1806913a 	slli	r3,r3,4
 4009ae0:	1809883a 	mov	r4,r3
 4009ae4:	e0fffd03 	ldbu	r3,-12(fp)
 4009ae8:	20c6b03a 	or	r3,r4,r3
 4009aec:	10c14e85 	stb	r3,1338(r2)
		vga_ctrl->VRAM[669 * 2 + 1] = 0x01;
 4009af0:	d0a00217 	ldw	r2,-32760(gp)
 4009af4:	00c00044 	movi	r3,1
 4009af8:	10c14ec5 	stb	r3,1339(r2)
		break;
 4009afc:	00009c06 	br	4009d70 <drawNext+0x574>
	case 5:
		vga_ctrl->VRAM[588 * 2] = fg1 << 4 | bg1;
 4009b00:	d0a00217 	ldw	r2,-32760(gp)
 4009b04:	e0fffc03 	ldbu	r3,-16(fp)
 4009b08:	1806913a 	slli	r3,r3,4
 4009b0c:	1809883a 	mov	r4,r3
 4009b10:	e0fffd03 	ldbu	r3,-12(fp)
 4009b14:	20c6b03a 	or	r3,r4,r3
 4009b18:	10c12605 	stb	r3,1176(r2)
		vga_ctrl->VRAM[588 * 2 + 1] = 0x02;
 4009b1c:	d0a00217 	ldw	r2,-32760(gp)
 4009b20:	00c00084 	movi	r3,2
 4009b24:	10c12645 	stb	r3,1177(r2)
		vga_ctrl->VRAM[628 * 2] = fg1 << 4 | bg1;
 4009b28:	d0a00217 	ldw	r2,-32760(gp)
 4009b2c:	e0fffc03 	ldbu	r3,-16(fp)
 4009b30:	1806913a 	slli	r3,r3,4
 4009b34:	1809883a 	mov	r4,r3
 4009b38:	e0fffd03 	ldbu	r3,-12(fp)
 4009b3c:	20c6b03a 	or	r3,r4,r3
 4009b40:	10c13a05 	stb	r3,1256(r2)
		vga_ctrl->VRAM[628 * 2 + 1] = 0x02;
 4009b44:	d0a00217 	ldw	r2,-32760(gp)
 4009b48:	00c00084 	movi	r3,2
 4009b4c:	10c13a45 	stb	r3,1257(r2)
		vga_ctrl->VRAM[629 * 2] = fg1 << 4 | bg1;
 4009b50:	d0a00217 	ldw	r2,-32760(gp)
 4009b54:	e0fffc03 	ldbu	r3,-16(fp)
 4009b58:	1806913a 	slli	r3,r3,4
 4009b5c:	1809883a 	mov	r4,r3
 4009b60:	e0fffd03 	ldbu	r3,-12(fp)
 4009b64:	20c6b03a 	or	r3,r4,r3
 4009b68:	10c13a85 	stb	r3,1258(r2)
		vga_ctrl->VRAM[629 * 2 + 1] = 0x02;
 4009b6c:	d0a00217 	ldw	r2,-32760(gp)
 4009b70:	00c00084 	movi	r3,2
 4009b74:	10c13ac5 	stb	r3,1259(r2)
		vga_ctrl->VRAM[669 * 2] = fg1 << 4 | bg1;
 4009b78:	d0a00217 	ldw	r2,-32760(gp)
 4009b7c:	e0fffc03 	ldbu	r3,-16(fp)
 4009b80:	1806913a 	slli	r3,r3,4
 4009b84:	1809883a 	mov	r4,r3
 4009b88:	e0fffd03 	ldbu	r3,-12(fp)
 4009b8c:	20c6b03a 	or	r3,r4,r3
 4009b90:	10c14e85 	stb	r3,1338(r2)
		vga_ctrl->VRAM[669 * 2 + 1] = 0x02;
 4009b94:	d0a00217 	ldw	r2,-32760(gp)
 4009b98:	00c00084 	movi	r3,2
 4009b9c:	10c14ec5 	stb	r3,1339(r2)
		break;
 4009ba0:	00007306 	br	4009d70 <drawNext+0x574>
	case 6:
		vga_ctrl->VRAM[589 * 2] = fg1 << 4 | bg1;
 4009ba4:	d0a00217 	ldw	r2,-32760(gp)
 4009ba8:	e0fffc03 	ldbu	r3,-16(fp)
 4009bac:	1806913a 	slli	r3,r3,4
 4009bb0:	1809883a 	mov	r4,r3
 4009bb4:	e0fffd03 	ldbu	r3,-12(fp)
 4009bb8:	20c6b03a 	or	r3,r4,r3
 4009bbc:	10c12685 	stb	r3,1178(r2)
		vga_ctrl->VRAM[589 * 2 + 1] = 0x01;
 4009bc0:	d0a00217 	ldw	r2,-32760(gp)
 4009bc4:	00c00044 	movi	r3,1
 4009bc8:	10c126c5 	stb	r3,1179(r2)
		vga_ctrl->VRAM[628 * 2] = fg1 << 4 | bg1;
 4009bcc:	d0a00217 	ldw	r2,-32760(gp)
 4009bd0:	e0fffc03 	ldbu	r3,-16(fp)
 4009bd4:	1806913a 	slli	r3,r3,4
 4009bd8:	1809883a 	mov	r4,r3
 4009bdc:	e0fffd03 	ldbu	r3,-12(fp)
 4009be0:	20c6b03a 	or	r3,r4,r3
 4009be4:	10c13a05 	stb	r3,1256(r2)
		vga_ctrl->VRAM[628 * 2 + 1] = 0x01;
 4009be8:	d0a00217 	ldw	r2,-32760(gp)
 4009bec:	00c00044 	movi	r3,1
 4009bf0:	10c13a45 	stb	r3,1257(r2)
		vga_ctrl->VRAM[629 * 2] = fg1 << 4 | bg1;
 4009bf4:	d0a00217 	ldw	r2,-32760(gp)
 4009bf8:	e0fffc03 	ldbu	r3,-16(fp)
 4009bfc:	1806913a 	slli	r3,r3,4
 4009c00:	1809883a 	mov	r4,r3
 4009c04:	e0fffd03 	ldbu	r3,-12(fp)
 4009c08:	20c6b03a 	or	r3,r4,r3
 4009c0c:	10c13a85 	stb	r3,1258(r2)
		vga_ctrl->VRAM[629 * 2 + 1] = 0x01;
 4009c10:	d0a00217 	ldw	r2,-32760(gp)
 4009c14:	00c00044 	movi	r3,1
 4009c18:	10c13ac5 	stb	r3,1259(r2)
		vga_ctrl->VRAM[669 * 2] = fg1 << 4 | bg1;
 4009c1c:	d0a00217 	ldw	r2,-32760(gp)
 4009c20:	e0fffc03 	ldbu	r3,-16(fp)
 4009c24:	1806913a 	slli	r3,r3,4
 4009c28:	1809883a 	mov	r4,r3
 4009c2c:	e0fffd03 	ldbu	r3,-12(fp)
 4009c30:	20c6b03a 	or	r3,r4,r3
 4009c34:	10c14e85 	stb	r3,1338(r2)
		vga_ctrl->VRAM[669 * 2 + 1] = 0x01;
 4009c38:	d0a00217 	ldw	r2,-32760(gp)
 4009c3c:	00c00044 	movi	r3,1
 4009c40:	10c14ec5 	stb	r3,1339(r2)
		break;
 4009c44:	00004a06 	br	4009d70 <drawNext+0x574>
	case 7:
		vga_ctrl->VRAM[589 * 2] = fg2 << 4 | bg2;
 4009c48:	d0a00217 	ldw	r2,-32760(gp)
 4009c4c:	e0fffe03 	ldbu	r3,-8(fp)
 4009c50:	1806913a 	slli	r3,r3,4
 4009c54:	1809883a 	mov	r4,r3
 4009c58:	e0ffff03 	ldbu	r3,-4(fp)
 4009c5c:	20c6b03a 	or	r3,r4,r3
 4009c60:	10c12685 	stb	r3,1178(r2)
		vga_ctrl->VRAM[589 * 2 + 1] = 0x02;
 4009c64:	d0a00217 	ldw	r2,-32760(gp)
 4009c68:	00c00084 	movi	r3,2
 4009c6c:	10c126c5 	stb	r3,1179(r2)
		vga_ctrl->VRAM[628 * 2] = fg2 << 4 | bg2;
 4009c70:	d0a00217 	ldw	r2,-32760(gp)
 4009c74:	e0fffe03 	ldbu	r3,-8(fp)
 4009c78:	1806913a 	slli	r3,r3,4
 4009c7c:	1809883a 	mov	r4,r3
 4009c80:	e0ffff03 	ldbu	r3,-4(fp)
 4009c84:	20c6b03a 	or	r3,r4,r3
 4009c88:	10c13a05 	stb	r3,1256(r2)
		vga_ctrl->VRAM[628 * 2 + 1] = 0x02;
 4009c8c:	d0a00217 	ldw	r2,-32760(gp)
 4009c90:	00c00084 	movi	r3,2
 4009c94:	10c13a45 	stb	r3,1257(r2)
		vga_ctrl->VRAM[629 * 2] = fg2 << 4 | bg2;
 4009c98:	d0a00217 	ldw	r2,-32760(gp)
 4009c9c:	e0fffe03 	ldbu	r3,-8(fp)
 4009ca0:	1806913a 	slli	r3,r3,4
 4009ca4:	1809883a 	mov	r4,r3
 4009ca8:	e0ffff03 	ldbu	r3,-4(fp)
 4009cac:	20c6b03a 	or	r3,r4,r3
 4009cb0:	10c13a85 	stb	r3,1258(r2)
		vga_ctrl->VRAM[629 * 2 + 1] = 0x02;
 4009cb4:	d0a00217 	ldw	r2,-32760(gp)
 4009cb8:	00c00084 	movi	r3,2
 4009cbc:	10c13ac5 	stb	r3,1259(r2)
		vga_ctrl->VRAM[668 * 2] = fg2 << 4 | bg2;
 4009cc0:	d0a00217 	ldw	r2,-32760(gp)
 4009cc4:	e0fffe03 	ldbu	r3,-8(fp)
 4009cc8:	1806913a 	slli	r3,r3,4
 4009ccc:	1809883a 	mov	r4,r3
 4009cd0:	e0ffff03 	ldbu	r3,-4(fp)
 4009cd4:	20c6b03a 	or	r3,r4,r3
 4009cd8:	10c14e05 	stb	r3,1336(r2)
		vga_ctrl->VRAM[668 * 2 + 1] = 0x02;
 4009cdc:	d0a00217 	ldw	r2,-32760(gp)
 4009ce0:	00c00084 	movi	r3,2
 4009ce4:	10c14e45 	stb	r3,1337(r2)
		break;
 4009ce8:	00002106 	br	4009d70 <drawNext+0x574>
	default:
		vga_ctrl->VRAM[548 * 2] = 0x0;
 4009cec:	d0a00217 	ldw	r2,-32760(gp)
 4009cf0:	10011205 	stb	zero,1096(r2)
		vga_ctrl->VRAM[548 * 2 + 1] = 0x0;
 4009cf4:	d0a00217 	ldw	r2,-32760(gp)
 4009cf8:	10011245 	stb	zero,1097(r2)
		vga_ctrl->VRAM[549 * 2] = 0x0;
 4009cfc:	d0a00217 	ldw	r2,-32760(gp)
 4009d00:	10011285 	stb	zero,1098(r2)
		vga_ctrl->VRAM[549 * 2 + 1] = 0x0;
 4009d04:	d0a00217 	ldw	r2,-32760(gp)
 4009d08:	100112c5 	stb	zero,1099(r2)
		vga_ctrl->VRAM[588 * 2] = 0x0;
 4009d0c:	d0a00217 	ldw	r2,-32760(gp)
 4009d10:	10012605 	stb	zero,1176(r2)
		vga_ctrl->VRAM[588 * 2 + 1] = 0x0;
 4009d14:	d0a00217 	ldw	r2,-32760(gp)
 4009d18:	10012645 	stb	zero,1177(r2)
		vga_ctrl->VRAM[589 * 2] = 0x0;
 4009d1c:	d0a00217 	ldw	r2,-32760(gp)
 4009d20:	10012685 	stb	zero,1178(r2)
		vga_ctrl->VRAM[589 * 2 + 1] = 0x0;
 4009d24:	d0a00217 	ldw	r2,-32760(gp)
 4009d28:	100126c5 	stb	zero,1179(r2)
		vga_ctrl->VRAM[628 * 2] = 0x0;
 4009d2c:	d0a00217 	ldw	r2,-32760(gp)
 4009d30:	10013a05 	stb	zero,1256(r2)
		vga_ctrl->VRAM[628 * 2 + 1] = 0x0;
 4009d34:	d0a00217 	ldw	r2,-32760(gp)
 4009d38:	10013a45 	stb	zero,1257(r2)
		vga_ctrl->VRAM[629 * 2] = 0x0;
 4009d3c:	d0a00217 	ldw	r2,-32760(gp)
 4009d40:	10013a85 	stb	zero,1258(r2)
		vga_ctrl->VRAM[629 * 2 + 1] = 0x0;
 4009d44:	d0a00217 	ldw	r2,-32760(gp)
 4009d48:	10013ac5 	stb	zero,1259(r2)
		vga_ctrl->VRAM[668 * 2] = 0x0;
 4009d4c:	d0a00217 	ldw	r2,-32760(gp)
 4009d50:	10014e05 	stb	zero,1336(r2)
		vga_ctrl->VRAM[668 * 2 + 1] = 0x0;
 4009d54:	d0a00217 	ldw	r2,-32760(gp)
 4009d58:	10014e45 	stb	zero,1337(r2)
		vga_ctrl->VRAM[669 * 2] = 0x0;
 4009d5c:	d0a00217 	ldw	r2,-32760(gp)
 4009d60:	10014e85 	stb	zero,1338(r2)
		vga_ctrl->VRAM[669 * 2 + 1] = 0x0;
 4009d64:	d0a00217 	ldw	r2,-32760(gp)
 4009d68:	10014ec5 	stb	zero,1339(r2)
		break;
 4009d6c:	0001883a 	nop
	}
}
 4009d70:	0001883a 	nop
 4009d74:	e037883a 	mov	sp,fp
 4009d78:	df000017 	ldw	fp,0(sp)
 4009d7c:	dec00104 	addi	sp,sp,4
 4009d80:	f800283a 	ret

04009d84 <drawStats>:

void drawStats(int T, int J, int Z, int O, int S, int L, int I){
 4009d84:	deffec04 	addi	sp,sp,-80
 4009d88:	dfc01315 	stw	ra,76(sp)
 4009d8c:	df001215 	stw	fp,72(sp)
 4009d90:	df001204 	addi	fp,sp,72
 4009d94:	e13ffc15 	stw	r4,-16(fp)
 4009d98:	e17ffd15 	stw	r5,-12(fp)
 4009d9c:	e1bffe15 	stw	r6,-8(fp)
 4009da0:	e1ffff15 	stw	r7,-4(fp)
	for(int i = 0; i < 3; i++){
 4009da4:	e03fee15 	stw	zero,-72(fp)
 4009da8:	00001506 	br	4009e00 <drawStats+0x7c>
		int dig = T % 10;
 4009dac:	e0bffc17 	ldw	r2,-16(fp)
 4009db0:	01400284 	movi	r5,10
 4009db4:	1009883a 	mov	r4,r2
 4009db8:	400dba40 	call	400dba4 <__modsi3>
 4009dbc:	e0bff515 	stw	r2,-44(fp)
		drawDigit(dig, 210 - i, 4, 0);
 4009dc0:	00c03484 	movi	r3,210
 4009dc4:	e0bfee17 	ldw	r2,-72(fp)
 4009dc8:	1885c83a 	sub	r2,r3,r2
 4009dcc:	000f883a 	mov	r7,zero
 4009dd0:	01800104 	movi	r6,4
 4009dd4:	100b883a 	mov	r5,r2
 4009dd8:	e13ff517 	ldw	r4,-44(fp)
 4009ddc:	4008b900 	call	4008b90 <drawDigit>
		T /= 10;
 4009de0:	e0bffc17 	ldw	r2,-16(fp)
 4009de4:	01400284 	movi	r5,10
 4009de8:	1009883a 	mov	r4,r2
 4009dec:	400db200 	call	400db20 <__divsi3>
 4009df0:	e0bffc15 	stw	r2,-16(fp)
		break;
	}
}

void drawStats(int T, int J, int Z, int O, int S, int L, int I){
	for(int i = 0; i < 3; i++){
 4009df4:	e0bfee17 	ldw	r2,-72(fp)
 4009df8:	10800044 	addi	r2,r2,1
 4009dfc:	e0bfee15 	stw	r2,-72(fp)
 4009e00:	e0bfee17 	ldw	r2,-72(fp)
 4009e04:	108000d0 	cmplti	r2,r2,3
 4009e08:	103fe81e 	bne	r2,zero,4009dac <__alt_mem_onchip_memory2_0+0xfc004bec>
		int dig = T % 10;
		drawDigit(dig, 210 - i, 4, 0);
		T /= 10;
	}
	for(int i = 0; i < 3; i++){
 4009e0c:	e03fef15 	stw	zero,-68(fp)
 4009e10:	00001506 	br	4009e68 <drawStats+0xe4>
		int dig = J % 10;
 4009e14:	e0bffd17 	ldw	r2,-12(fp)
 4009e18:	01400284 	movi	r5,10
 4009e1c:	1009883a 	mov	r4,r2
 4009e20:	400dba40 	call	400dba4 <__modsi3>
 4009e24:	e0bff615 	stw	r2,-40(fp)
		drawDigit(dig, 330 - i, 4, 0);
 4009e28:	00c05284 	movi	r3,330
 4009e2c:	e0bfef17 	ldw	r2,-68(fp)
 4009e30:	1885c83a 	sub	r2,r3,r2
 4009e34:	000f883a 	mov	r7,zero
 4009e38:	01800104 	movi	r6,4
 4009e3c:	100b883a 	mov	r5,r2
 4009e40:	e13ff617 	ldw	r4,-40(fp)
 4009e44:	4008b900 	call	4008b90 <drawDigit>
		J /= 10;
 4009e48:	e0bffd17 	ldw	r2,-12(fp)
 4009e4c:	01400284 	movi	r5,10
 4009e50:	1009883a 	mov	r4,r2
 4009e54:	400db200 	call	400db20 <__divsi3>
 4009e58:	e0bffd15 	stw	r2,-12(fp)
	for(int i = 0; i < 3; i++){
		int dig = T % 10;
		drawDigit(dig, 210 - i, 4, 0);
		T /= 10;
	}
	for(int i = 0; i < 3; i++){
 4009e5c:	e0bfef17 	ldw	r2,-68(fp)
 4009e60:	10800044 	addi	r2,r2,1
 4009e64:	e0bfef15 	stw	r2,-68(fp)
 4009e68:	e0bfef17 	ldw	r2,-68(fp)
 4009e6c:	108000d0 	cmplti	r2,r2,3
 4009e70:	103fe81e 	bne	r2,zero,4009e14 <__alt_mem_onchip_memory2_0+0xfc004c54>
		int dig = J % 10;
		drawDigit(dig, 330 - i, 4, 0);
		J /= 10;
	}
	for(int i = 0; i < 3; i++){
 4009e74:	e03ff015 	stw	zero,-64(fp)
 4009e78:	00001506 	br	4009ed0 <drawStats+0x14c>
		int dig = Z % 10;
 4009e7c:	e0bffe17 	ldw	r2,-8(fp)
 4009e80:	01400284 	movi	r5,10
 4009e84:	1009883a 	mov	r4,r2
 4009e88:	400dba40 	call	400dba4 <__modsi3>
 4009e8c:	e0bff715 	stw	r2,-36(fp)
		drawDigit(dig, 450 - i, 4, 0);
 4009e90:	00c07084 	movi	r3,450
 4009e94:	e0bff017 	ldw	r2,-64(fp)
 4009e98:	1885c83a 	sub	r2,r3,r2
 4009e9c:	000f883a 	mov	r7,zero
 4009ea0:	01800104 	movi	r6,4
 4009ea4:	100b883a 	mov	r5,r2
 4009ea8:	e13ff717 	ldw	r4,-36(fp)
 4009eac:	4008b900 	call	4008b90 <drawDigit>
		Z /= 10;
 4009eb0:	e0bffe17 	ldw	r2,-8(fp)
 4009eb4:	01400284 	movi	r5,10
 4009eb8:	1009883a 	mov	r4,r2
 4009ebc:	400db200 	call	400db20 <__divsi3>
 4009ec0:	e0bffe15 	stw	r2,-8(fp)
	for(int i = 0; i < 3; i++){
		int dig = J % 10;
		drawDigit(dig, 330 - i, 4, 0);
		J /= 10;
	}
	for(int i = 0; i < 3; i++){
 4009ec4:	e0bff017 	ldw	r2,-64(fp)
 4009ec8:	10800044 	addi	r2,r2,1
 4009ecc:	e0bff015 	stw	r2,-64(fp)
 4009ed0:	e0bff017 	ldw	r2,-64(fp)
 4009ed4:	108000d0 	cmplti	r2,r2,3
 4009ed8:	103fe81e 	bne	r2,zero,4009e7c <__alt_mem_onchip_memory2_0+0xfc004cbc>
		int dig = Z % 10;
		drawDigit(dig, 450 - i, 4, 0);
		Z /= 10;
	}
	for(int i = 0; i < 3; i++){
 4009edc:	e03ff115 	stw	zero,-60(fp)
 4009ee0:	00001506 	br	4009f38 <drawStats+0x1b4>
		int dig = O % 10;
 4009ee4:	e0bfff17 	ldw	r2,-4(fp)
 4009ee8:	01400284 	movi	r5,10
 4009eec:	1009883a 	mov	r4,r2
 4009ef0:	400dba40 	call	400dba4 <__modsi3>
 4009ef4:	e0bff815 	stw	r2,-32(fp)
		drawDigit(dig, 570 - i, 4, 0);
 4009ef8:	00c08e84 	movi	r3,570
 4009efc:	e0bff117 	ldw	r2,-60(fp)
 4009f00:	1885c83a 	sub	r2,r3,r2
 4009f04:	000f883a 	mov	r7,zero
 4009f08:	01800104 	movi	r6,4
 4009f0c:	100b883a 	mov	r5,r2
 4009f10:	e13ff817 	ldw	r4,-32(fp)
 4009f14:	4008b900 	call	4008b90 <drawDigit>
		O /= 10;
 4009f18:	e0bfff17 	ldw	r2,-4(fp)
 4009f1c:	01400284 	movi	r5,10
 4009f20:	1009883a 	mov	r4,r2
 4009f24:	400db200 	call	400db20 <__divsi3>
 4009f28:	e0bfff15 	stw	r2,-4(fp)
	for(int i = 0; i < 3; i++){
		int dig = Z % 10;
		drawDigit(dig, 450 - i, 4, 0);
		Z /= 10;
	}
	for(int i = 0; i < 3; i++){
 4009f2c:	e0bff117 	ldw	r2,-60(fp)
 4009f30:	10800044 	addi	r2,r2,1
 4009f34:	e0bff115 	stw	r2,-60(fp)
 4009f38:	e0bff117 	ldw	r2,-60(fp)
 4009f3c:	108000d0 	cmplti	r2,r2,3
 4009f40:	103fe81e 	bne	r2,zero,4009ee4 <__alt_mem_onchip_memory2_0+0xfc004d24>
		int dig = O % 10;
		drawDigit(dig, 570 - i, 4, 0);
		O /= 10;
	}
	for(int i = 0; i < 3; i++){
 4009f44:	e03ff215 	stw	zero,-56(fp)
 4009f48:	00001506 	br	4009fa0 <drawStats+0x21c>
		int dig = S % 10;
 4009f4c:	e0800217 	ldw	r2,8(fp)
 4009f50:	01400284 	movi	r5,10
 4009f54:	1009883a 	mov	r4,r2
 4009f58:	400dba40 	call	400dba4 <__modsi3>
 4009f5c:	e0bff915 	stw	r2,-28(fp)
		drawDigit(dig, 690 - i, 4, 0);
 4009f60:	00c0ac84 	movi	r3,690
 4009f64:	e0bff217 	ldw	r2,-56(fp)
 4009f68:	1885c83a 	sub	r2,r3,r2
 4009f6c:	000f883a 	mov	r7,zero
 4009f70:	01800104 	movi	r6,4
 4009f74:	100b883a 	mov	r5,r2
 4009f78:	e13ff917 	ldw	r4,-28(fp)
 4009f7c:	4008b900 	call	4008b90 <drawDigit>
		S /= 10;
 4009f80:	e0800217 	ldw	r2,8(fp)
 4009f84:	01400284 	movi	r5,10
 4009f88:	1009883a 	mov	r4,r2
 4009f8c:	400db200 	call	400db20 <__divsi3>
 4009f90:	e0800215 	stw	r2,8(fp)
	for(int i = 0; i < 3; i++){
		int dig = O % 10;
		drawDigit(dig, 570 - i, 4, 0);
		O /= 10;
	}
	for(int i = 0; i < 3; i++){
 4009f94:	e0bff217 	ldw	r2,-56(fp)
 4009f98:	10800044 	addi	r2,r2,1
 4009f9c:	e0bff215 	stw	r2,-56(fp)
 4009fa0:	e0bff217 	ldw	r2,-56(fp)
 4009fa4:	108000d0 	cmplti	r2,r2,3
 4009fa8:	103fe81e 	bne	r2,zero,4009f4c <__alt_mem_onchip_memory2_0+0xfc004d8c>
		int dig = S % 10;
		drawDigit(dig, 690 - i, 4, 0);
		S /= 10;
	}
	for(int i = 0; i < 3; i++){
 4009fac:	e03ff315 	stw	zero,-52(fp)
 4009fb0:	00001506 	br	400a008 <drawStats+0x284>
		int dig = L % 10;
 4009fb4:	e0800317 	ldw	r2,12(fp)
 4009fb8:	01400284 	movi	r5,10
 4009fbc:	1009883a 	mov	r4,r2
 4009fc0:	400dba40 	call	400dba4 <__modsi3>
 4009fc4:	e0bffa15 	stw	r2,-24(fp)
		drawDigit(dig, 810 - i, 4, 0);
 4009fc8:	00c0ca84 	movi	r3,810
 4009fcc:	e0bff317 	ldw	r2,-52(fp)
 4009fd0:	1885c83a 	sub	r2,r3,r2
 4009fd4:	000f883a 	mov	r7,zero
 4009fd8:	01800104 	movi	r6,4
 4009fdc:	100b883a 	mov	r5,r2
 4009fe0:	e13ffa17 	ldw	r4,-24(fp)
 4009fe4:	4008b900 	call	4008b90 <drawDigit>
		L /= 10;
 4009fe8:	e0800317 	ldw	r2,12(fp)
 4009fec:	01400284 	movi	r5,10
 4009ff0:	1009883a 	mov	r4,r2
 4009ff4:	400db200 	call	400db20 <__divsi3>
 4009ff8:	e0800315 	stw	r2,12(fp)
	for(int i = 0; i < 3; i++){
		int dig = S % 10;
		drawDigit(dig, 690 - i, 4, 0);
		S /= 10;
	}
	for(int i = 0; i < 3; i++){
 4009ffc:	e0bff317 	ldw	r2,-52(fp)
 400a000:	10800044 	addi	r2,r2,1
 400a004:	e0bff315 	stw	r2,-52(fp)
 400a008:	e0bff317 	ldw	r2,-52(fp)
 400a00c:	108000d0 	cmplti	r2,r2,3
 400a010:	103fe81e 	bne	r2,zero,4009fb4 <__alt_mem_onchip_memory2_0+0xfc004df4>
		int dig = L % 10;
		drawDigit(dig, 810 - i, 4, 0);
		L /= 10;
	}
	for(int i = 0; i < 3; i++){
 400a014:	e03ff415 	stw	zero,-48(fp)
 400a018:	00001506 	br	400a070 <drawStats+0x2ec>
		int dig = I % 10;
 400a01c:	e0800417 	ldw	r2,16(fp)
 400a020:	01400284 	movi	r5,10
 400a024:	1009883a 	mov	r4,r2
 400a028:	400dba40 	call	400dba4 <__modsi3>
 400a02c:	e0bffb15 	stw	r2,-20(fp)
		drawDigit(dig, 930 - i, 4, 0);
 400a030:	00c0e884 	movi	r3,930
 400a034:	e0bff417 	ldw	r2,-48(fp)
 400a038:	1885c83a 	sub	r2,r3,r2
 400a03c:	000f883a 	mov	r7,zero
 400a040:	01800104 	movi	r6,4
 400a044:	100b883a 	mov	r5,r2
 400a048:	e13ffb17 	ldw	r4,-20(fp)
 400a04c:	4008b900 	call	4008b90 <drawDigit>
		I /= 10;
 400a050:	e0800417 	ldw	r2,16(fp)
 400a054:	01400284 	movi	r5,10
 400a058:	1009883a 	mov	r4,r2
 400a05c:	400db200 	call	400db20 <__divsi3>
 400a060:	e0800415 	stw	r2,16(fp)
	for(int i = 0; i < 3; i++){
		int dig = L % 10;
		drawDigit(dig, 810 - i, 4, 0);
		L /= 10;
	}
	for(int i = 0; i < 3; i++){
 400a064:	e0bff417 	ldw	r2,-48(fp)
 400a068:	10800044 	addi	r2,r2,1
 400a06c:	e0bff415 	stw	r2,-48(fp)
 400a070:	e0bff417 	ldw	r2,-48(fp)
 400a074:	108000d0 	cmplti	r2,r2,3
 400a078:	103fe81e 	bne	r2,zero,400a01c <__alt_mem_onchip_memory2_0+0xfc004e5c>
		int dig = I % 10;
		drawDigit(dig, 930 - i, 4, 0);
		I /= 10;
	}
}
 400a07c:	0001883a 	nop
 400a080:	e037883a 	mov	sp,fp
 400a084:	dfc00117 	ldw	ra,4(sp)
 400a088:	df000017 	ldw	fp,0(sp)
 400a08c:	dec00204 	addi	sp,sp,8
 400a090:	f800283a 	ret

0400a094 <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 400a094:	defffb04 	addi	sp,sp,-20
 400a098:	df000415 	stw	fp,16(sp)
 400a09c:	df000404 	addi	fp,sp,16
 400a0a0:	2011883a 	mov	r8,r4
 400a0a4:	2809883a 	mov	r4,r5
 400a0a8:	3007883a 	mov	r3,r6
 400a0ac:	3805883a 	mov	r2,r7
 400a0b0:	e23ffc05 	stb	r8,-16(fp)
 400a0b4:	e13ffd05 	stb	r4,-12(fp)
 400a0b8:	e0fffe05 	stb	r3,-8(fp)
 400a0bc:	e0bfff05 	stb	r2,-4(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	if(color % 2 == 0){
 400a0c0:	e0bffc03 	ldbu	r2,-16(fp)
 400a0c4:	1080004c 	andi	r2,r2,1
 400a0c8:	10803fcc 	andi	r2,r2,255
 400a0cc:	1000131e 	bne	r2,zero,400a11c <setColorPalette+0x88>
		vga_ctrl->PALETTE[color >> 1] = (red << 9) | (green << 5) | (blue << 1);
 400a0d0:	d0e00217 	ldw	r3,-32760(gp)
 400a0d4:	e0bffc03 	ldbu	r2,-16(fp)
 400a0d8:	1004d07a 	srli	r2,r2,1
 400a0dc:	11003fcc 	andi	r4,r2,255
 400a0e0:	e0bffd03 	ldbu	r2,-12(fp)
 400a0e4:	100a927a 	slli	r5,r2,9
 400a0e8:	e0bffe03 	ldbu	r2,-8(fp)
 400a0ec:	1004917a 	slli	r2,r2,5
 400a0f0:	288ab03a 	or	r5,r5,r2
 400a0f4:	e0bfff03 	ldbu	r2,-4(fp)
 400a0f8:	1085883a 	add	r2,r2,r2
 400a0fc:	2884b03a 	or	r2,r5,r2
 400a100:	100b883a 	mov	r5,r2
 400a104:	20820004 	addi	r2,r4,2048
 400a108:	1085883a 	add	r2,r2,r2
 400a10c:	1085883a 	add	r2,r2,r2
 400a110:	1885883a 	add	r2,r3,r2
 400a114:	11400015 	stw	r5,0(r2)
	}
	else{
		vga_ctrl->PALETTE[color >> 1] = vga_ctrl->PALETTE[color >> 1] | (red << 21) | (green << 17) | (blue << 13);
	}

}
 400a118:	00001b06 	br	400a188 <setColorPalette+0xf4>
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	if(color % 2 == 0){
		vga_ctrl->PALETTE[color >> 1] = (red << 9) | (green << 5) | (blue << 1);
	}
	else{
		vga_ctrl->PALETTE[color >> 1] = vga_ctrl->PALETTE[color >> 1] | (red << 21) | (green << 17) | (blue << 13);
 400a11c:	d1200217 	ldw	r4,-32760(gp)
 400a120:	e0bffc03 	ldbu	r2,-16(fp)
 400a124:	1004d07a 	srli	r2,r2,1
 400a128:	11403fcc 	andi	r5,r2,255
 400a12c:	d0e00217 	ldw	r3,-32760(gp)
 400a130:	e0bffc03 	ldbu	r2,-16(fp)
 400a134:	1004d07a 	srli	r2,r2,1
 400a138:	10803fcc 	andi	r2,r2,255
 400a13c:	10820004 	addi	r2,r2,2048
 400a140:	1085883a 	add	r2,r2,r2
 400a144:	1085883a 	add	r2,r2,r2
 400a148:	1885883a 	add	r2,r3,r2
 400a14c:	10800017 	ldw	r2,0(r2)
 400a150:	e0fffd03 	ldbu	r3,-12(fp)
 400a154:	1806957a 	slli	r3,r3,21
 400a158:	10c4b03a 	or	r2,r2,r3
 400a15c:	e0fffe03 	ldbu	r3,-8(fp)
 400a160:	1806947a 	slli	r3,r3,17
 400a164:	10c4b03a 	or	r2,r2,r3
 400a168:	e0ffff03 	ldbu	r3,-4(fp)
 400a16c:	1806937a 	slli	r3,r3,13
 400a170:	10c6b03a 	or	r3,r2,r3
 400a174:	28820004 	addi	r2,r5,2048
 400a178:	1085883a 	add	r2,r2,r2
 400a17c:	1085883a 	add	r2,r2,r2
 400a180:	2085883a 	add	r2,r4,r2
 400a184:	10c00015 	stw	r3,0(r2)
	}

}
 400a188:	0001883a 	nop
 400a18c:	e037883a 	mov	sp,fp
 400a190:	df000017 	ldw	fp,0(sp)
 400a194:	dec00104 	addi	sp,sp,4
 400a198:	f800283a 	ret

0400a19c <startScreen>:

void startScreen(){
 400a19c:	deffef04 	addi	sp,sp,-68
 400a1a0:	dfc01015 	stw	ra,64(sp)
 400a1a4:	df000f15 	stw	fp,60(sp)
 400a1a8:	dc000e15 	stw	r16,56(sp)
 400a1ac:	df000f04 	addi	fp,sp,60
    alt_u8 color1[10] = {1, 2, 5, 1, 12, 10, 4, 1, 9, 4}; //level color palette sets
 400a1b0:	00800044 	movi	r2,1
 400a1b4:	e0bff985 	stb	r2,-26(fp)
 400a1b8:	00800084 	movi	r2,2
 400a1bc:	e0bff9c5 	stb	r2,-25(fp)
 400a1c0:	00800144 	movi	r2,5
 400a1c4:	e0bffa05 	stb	r2,-24(fp)
 400a1c8:	00800044 	movi	r2,1
 400a1cc:	e0bffa45 	stb	r2,-23(fp)
 400a1d0:	00800304 	movi	r2,12
 400a1d4:	e0bffa85 	stb	r2,-22(fp)
 400a1d8:	00800284 	movi	r2,10
 400a1dc:	e0bffac5 	stb	r2,-21(fp)
 400a1e0:	00800104 	movi	r2,4
 400a1e4:	e0bffb05 	stb	r2,-20(fp)
 400a1e8:	00800044 	movi	r2,1
 400a1ec:	e0bffb45 	stb	r2,-19(fp)
 400a1f0:	00800244 	movi	r2,9
 400a1f4:	e0bffb85 	stb	r2,-18(fp)
 400a1f8:	00800104 	movi	r2,4
 400a1fc:	e0bffbc5 	stb	r2,-17(fp)
    alt_u8 color2[10] = {5, 10, 13, 2, 10, 9, 8, 4, 12, 14};
 400a200:	00800144 	movi	r2,5
 400a204:	e0bffc05 	stb	r2,-16(fp)
 400a208:	00800284 	movi	r2,10
 400a20c:	e0bffc45 	stb	r2,-15(fp)
 400a210:	00800344 	movi	r2,13
 400a214:	e0bffc85 	stb	r2,-14(fp)
 400a218:	00800084 	movi	r2,2
 400a21c:	e0bffcc5 	stb	r2,-13(fp)
 400a220:	00800284 	movi	r2,10
 400a224:	e0bffd05 	stb	r2,-12(fp)
 400a228:	00800244 	movi	r2,9
 400a22c:	e0bffd45 	stb	r2,-11(fp)
 400a230:	00800204 	movi	r2,8
 400a234:	e0bffd85 	stb	r2,-10(fp)
 400a238:	00800104 	movi	r2,4
 400a23c:	e0bffdc5 	stb	r2,-9(fp)
 400a240:	00800304 	movi	r2,12
 400a244:	e0bffe05 	stb	r2,-8(fp)
 400a248:	00800384 	movi	r2,14
 400a24c:	e0bffe45 	stb	r2,-7(fp)
    int count = 0;
 400a250:	e03ff115 	stw	zero,-60(fp)
    int count2 = 0;
 400a254:	e03ff215 	stw	zero,-56(fp)
	while(keycode != 40){
 400a258:	0001fb06 	br	400aa48 <startScreen+0x8ac>
		keycode = keyboardDriver(keycode);
 400a25c:	d0a7f917 	ldw	r2,-24604(gp)
 400a260:	1009883a 	mov	r4,r2
 400a264:	400ba780 	call	400ba78 <keyboardDriver>
 400a268:	d0a7f915 	stw	r2,-24604(gp)
		alt_u8 c1 = color1[count % 10];
 400a26c:	e0bff117 	ldw	r2,-60(fp)
 400a270:	01400284 	movi	r5,10
 400a274:	1009883a 	mov	r4,r2
 400a278:	400dba40 	call	400dba4 <__modsi3>
 400a27c:	1007883a 	mov	r3,r2
 400a280:	e0bff984 	addi	r2,fp,-26
 400a284:	10c5883a 	add	r2,r2,r3
 400a288:	10800003 	ldbu	r2,0(r2)
 400a28c:	e0bff905 	stb	r2,-28(fp)
		alt_u8 c2 = color2[count % 10];
 400a290:	e0bff117 	ldw	r2,-60(fp)
 400a294:	01400284 	movi	r5,10
 400a298:	1009883a 	mov	r4,r2
 400a29c:	400dba40 	call	400dba4 <__modsi3>
 400a2a0:	1007883a 	mov	r3,r2
 400a2a4:	e0bffc04 	addi	r2,fp,-16
 400a2a8:	10c5883a 	add	r2,r2,r3
 400a2ac:	10800003 	ldbu	r2,0(r2)
 400a2b0:	e0bff945 	stb	r2,-27(fp)
		//T
		for(int i = 0; i < 5; i++){
 400a2b4:	e03ff315 	stw	zero,-52(fp)
 400a2b8:	00002806 	br	400a35c <startScreen+0x1c0>
			vga_ctrl->VRAM[(322 + i) * 2] = c2 << 4 | 15;
 400a2bc:	d0e00217 	ldw	r3,-32760(gp)
 400a2c0:	e0bff317 	ldw	r2,-52(fp)
 400a2c4:	10805084 	addi	r2,r2,322
 400a2c8:	1085883a 	add	r2,r2,r2
 400a2cc:	100b883a 	mov	r5,r2
 400a2d0:	e0bff943 	ldbu	r2,-27(fp)
 400a2d4:	1004913a 	slli	r2,r2,4
 400a2d8:	108003d4 	ori	r2,r2,15
 400a2dc:	1009883a 	mov	r4,r2
 400a2e0:	1945883a 	add	r2,r3,r5
 400a2e4:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(322 + i) * 2 + 1] = 0x02;
 400a2e8:	d0e00217 	ldw	r3,-32760(gp)
 400a2ec:	e0bff317 	ldw	r2,-52(fp)
 400a2f0:	10805084 	addi	r2,r2,322
 400a2f4:	1085883a 	add	r2,r2,r2
 400a2f8:	10800044 	addi	r2,r2,1
 400a2fc:	1885883a 	add	r2,r3,r2
 400a300:	00c00084 	movi	r3,2
 400a304:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(324 + 40 * i) * 2] = c2 << 4 | 15;
 400a308:	d4200217 	ldw	r16,-32760(gp)
 400a30c:	01401404 	movi	r5,80
 400a310:	e13ff317 	ldw	r4,-52(fp)
 400a314:	400dcd40 	call	400dcd4 <__mulsi3>
 400a318:	1080a204 	addi	r2,r2,648
 400a31c:	e0fff943 	ldbu	r3,-27(fp)
 400a320:	1806913a 	slli	r3,r3,4
 400a324:	18c003d4 	ori	r3,r3,15
 400a328:	8085883a 	add	r2,r16,r2
 400a32c:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(324 + 40 * i) * 2 + 1] = 0x02;
 400a330:	d4200217 	ldw	r16,-32760(gp)
 400a334:	01401404 	movi	r5,80
 400a338:	e13ff317 	ldw	r4,-52(fp)
 400a33c:	400dcd40 	call	400dcd4 <__mulsi3>
 400a340:	1080a244 	addi	r2,r2,649
 400a344:	8085883a 	add	r2,r16,r2
 400a348:	00c00084 	movi	r3,2
 400a34c:	10c00005 	stb	r3,0(r2)
	while(keycode != 40){
		keycode = keyboardDriver(keycode);
		alt_u8 c1 = color1[count % 10];
		alt_u8 c2 = color2[count % 10];
		//T
		for(int i = 0; i < 5; i++){
 400a350:	e0bff317 	ldw	r2,-52(fp)
 400a354:	10800044 	addi	r2,r2,1
 400a358:	e0bff315 	stw	r2,-52(fp)
 400a35c:	e0bff317 	ldw	r2,-52(fp)
 400a360:	10800150 	cmplti	r2,r2,5
 400a364:	103fd51e 	bne	r2,zero,400a2bc <__alt_mem_onchip_memory2_0+0xfc0050fc>
			vga_ctrl->VRAM[(322 + i) * 2 + 1] = 0x02;
			vga_ctrl->VRAM[(324 + 40 * i) * 2] = c2 << 4 | 15;
			vga_ctrl->VRAM[(324 + 40 * i) * 2 + 1] = 0x02;
		}
		//E
		for(int i = 0; i < 4; i++){
 400a368:	e03ff415 	stw	zero,-48(fp)
 400a36c:	00004e06 	br	400a4a8 <startScreen+0x30c>
			vga_ctrl->VRAM[(329 + i) * 2] = c1 << 4 | 15;
 400a370:	d0e00217 	ldw	r3,-32760(gp)
 400a374:	e0bff417 	ldw	r2,-48(fp)
 400a378:	10805244 	addi	r2,r2,329
 400a37c:	1085883a 	add	r2,r2,r2
 400a380:	100b883a 	mov	r5,r2
 400a384:	e0bff903 	ldbu	r2,-28(fp)
 400a388:	1004913a 	slli	r2,r2,4
 400a38c:	108003d4 	ori	r2,r2,15
 400a390:	1009883a 	mov	r4,r2
 400a394:	1945883a 	add	r2,r3,r5
 400a398:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(329 + i) * 2 + 1] = 0x01;
 400a39c:	d0e00217 	ldw	r3,-32760(gp)
 400a3a0:	e0bff417 	ldw	r2,-48(fp)
 400a3a4:	10805244 	addi	r2,r2,329
 400a3a8:	1085883a 	add	r2,r2,r2
 400a3ac:	10800044 	addi	r2,r2,1
 400a3b0:	1885883a 	add	r2,r3,r2
 400a3b4:	00c00044 	movi	r3,1
 400a3b8:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(328 + 40 * i) * 2] = c1 << 4 | 15;
 400a3bc:	d4200217 	ldw	r16,-32760(gp)
 400a3c0:	01401404 	movi	r5,80
 400a3c4:	e13ff417 	ldw	r4,-48(fp)
 400a3c8:	400dcd40 	call	400dcd4 <__mulsi3>
 400a3cc:	1080a404 	addi	r2,r2,656
 400a3d0:	e0fff903 	ldbu	r3,-28(fp)
 400a3d4:	1806913a 	slli	r3,r3,4
 400a3d8:	18c003d4 	ori	r3,r3,15
 400a3dc:	8085883a 	add	r2,r16,r2
 400a3e0:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(328 + 40 * i) * 2 + 1] = 0x01;
 400a3e4:	d4200217 	ldw	r16,-32760(gp)
 400a3e8:	01401404 	movi	r5,80
 400a3ec:	e13ff417 	ldw	r4,-48(fp)
 400a3f0:	400dcd40 	call	400dcd4 <__mulsi3>
 400a3f4:	1080a444 	addi	r2,r2,657
 400a3f8:	8085883a 	add	r2,r16,r2
 400a3fc:	00c00044 	movi	r3,1
 400a400:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(408 + i) * 2] = c1 << 4 | 15;
 400a404:	d0e00217 	ldw	r3,-32760(gp)
 400a408:	e0bff417 	ldw	r2,-48(fp)
 400a40c:	10806604 	addi	r2,r2,408
 400a410:	1085883a 	add	r2,r2,r2
 400a414:	100b883a 	mov	r5,r2
 400a418:	e0bff903 	ldbu	r2,-28(fp)
 400a41c:	1004913a 	slli	r2,r2,4
 400a420:	108003d4 	ori	r2,r2,15
 400a424:	1009883a 	mov	r4,r2
 400a428:	1945883a 	add	r2,r3,r5
 400a42c:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(408 + i) * 2 + 1] = 0x01;
 400a430:	d0e00217 	ldw	r3,-32760(gp)
 400a434:	e0bff417 	ldw	r2,-48(fp)
 400a438:	10806604 	addi	r2,r2,408
 400a43c:	1085883a 	add	r2,r2,r2
 400a440:	10800044 	addi	r2,r2,1
 400a444:	1885883a 	add	r2,r3,r2
 400a448:	00c00044 	movi	r3,1
 400a44c:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(489 + i) * 2] = c1 << 4 | 15;
 400a450:	d0e00217 	ldw	r3,-32760(gp)
 400a454:	e0bff417 	ldw	r2,-48(fp)
 400a458:	10807a44 	addi	r2,r2,489
 400a45c:	1085883a 	add	r2,r2,r2
 400a460:	100b883a 	mov	r5,r2
 400a464:	e0bff903 	ldbu	r2,-28(fp)
 400a468:	1004913a 	slli	r2,r2,4
 400a46c:	108003d4 	ori	r2,r2,15
 400a470:	1009883a 	mov	r4,r2
 400a474:	1945883a 	add	r2,r3,r5
 400a478:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(489 + i) * 2 + 1] = 0x01;
 400a47c:	d0e00217 	ldw	r3,-32760(gp)
 400a480:	e0bff417 	ldw	r2,-48(fp)
 400a484:	10807a44 	addi	r2,r2,489
 400a488:	1085883a 	add	r2,r2,r2
 400a48c:	10800044 	addi	r2,r2,1
 400a490:	1885883a 	add	r2,r3,r2
 400a494:	00c00044 	movi	r3,1
 400a498:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(322 + i) * 2 + 1] = 0x02;
			vga_ctrl->VRAM[(324 + 40 * i) * 2] = c2 << 4 | 15;
			vga_ctrl->VRAM[(324 + 40 * i) * 2 + 1] = 0x02;
		}
		//E
		for(int i = 0; i < 4; i++){
 400a49c:	e0bff417 	ldw	r2,-48(fp)
 400a4a0:	10800044 	addi	r2,r2,1
 400a4a4:	e0bff415 	stw	r2,-48(fp)
 400a4a8:	e0bff417 	ldw	r2,-48(fp)
 400a4ac:	10800110 	cmplti	r2,r2,4
 400a4b0:	103faf1e 	bne	r2,zero,400a370 <__alt_mem_onchip_memory2_0+0xfc0051b0>
			vga_ctrl->VRAM[(408 + i) * 2] = c1 << 4 | 15;
			vga_ctrl->VRAM[(408 + i) * 2 + 1] = 0x01;
			vga_ctrl->VRAM[(489 + i) * 2] = c1 << 4 | 15;
			vga_ctrl->VRAM[(489 + i) * 2 + 1] = 0x01;
		}
		vga_ctrl->VRAM[488 * 2] = c1 << 4 | 15;
 400a4b4:	d0a00217 	ldw	r2,-32760(gp)
 400a4b8:	e0fff903 	ldbu	r3,-28(fp)
 400a4bc:	1806913a 	slli	r3,r3,4
 400a4c0:	18c003d4 	ori	r3,r3,15
 400a4c4:	10c0f405 	stb	r3,976(r2)
		vga_ctrl->VRAM[488 * 2 + 1] = 0x01;
 400a4c8:	d0a00217 	ldw	r2,-32760(gp)
 400a4cc:	00c00044 	movi	r3,1
 400a4d0:	10c0f445 	stb	r3,977(r2)
		//T
		for(int i = 0; i < 5; i++){
 400a4d4:	e03ff515 	stw	zero,-44(fp)
 400a4d8:	00002806 	br	400a57c <startScreen+0x3e0>
			vga_ctrl->VRAM[(334 + i) * 2] = c2 << 4 | 15;
 400a4dc:	d0e00217 	ldw	r3,-32760(gp)
 400a4e0:	e0bff517 	ldw	r2,-44(fp)
 400a4e4:	10805384 	addi	r2,r2,334
 400a4e8:	1085883a 	add	r2,r2,r2
 400a4ec:	100b883a 	mov	r5,r2
 400a4f0:	e0bff943 	ldbu	r2,-27(fp)
 400a4f4:	1004913a 	slli	r2,r2,4
 400a4f8:	108003d4 	ori	r2,r2,15
 400a4fc:	1009883a 	mov	r4,r2
 400a500:	1945883a 	add	r2,r3,r5
 400a504:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(334 + i) * 2 + 1] = 0x02;
 400a508:	d0e00217 	ldw	r3,-32760(gp)
 400a50c:	e0bff517 	ldw	r2,-44(fp)
 400a510:	10805384 	addi	r2,r2,334
 400a514:	1085883a 	add	r2,r2,r2
 400a518:	10800044 	addi	r2,r2,1
 400a51c:	1885883a 	add	r2,r3,r2
 400a520:	00c00084 	movi	r3,2
 400a524:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(336 + 40 * i) * 2] = c2 << 4 | 15;
 400a528:	d4200217 	ldw	r16,-32760(gp)
 400a52c:	01401404 	movi	r5,80
 400a530:	e13ff517 	ldw	r4,-44(fp)
 400a534:	400dcd40 	call	400dcd4 <__mulsi3>
 400a538:	1080a804 	addi	r2,r2,672
 400a53c:	e0fff943 	ldbu	r3,-27(fp)
 400a540:	1806913a 	slli	r3,r3,4
 400a544:	18c003d4 	ori	r3,r3,15
 400a548:	8085883a 	add	r2,r16,r2
 400a54c:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(336 + 40 * i) * 2 + 1] = 0x02;
 400a550:	d4200217 	ldw	r16,-32760(gp)
 400a554:	01401404 	movi	r5,80
 400a558:	e13ff517 	ldw	r4,-44(fp)
 400a55c:	400dcd40 	call	400dcd4 <__mulsi3>
 400a560:	1080a844 	addi	r2,r2,673
 400a564:	8085883a 	add	r2,r16,r2
 400a568:	00c00084 	movi	r3,2
 400a56c:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(489 + i) * 2 + 1] = 0x01;
		}
		vga_ctrl->VRAM[488 * 2] = c1 << 4 | 15;
		vga_ctrl->VRAM[488 * 2 + 1] = 0x01;
		//T
		for(int i = 0; i < 5; i++){
 400a570:	e0bff517 	ldw	r2,-44(fp)
 400a574:	10800044 	addi	r2,r2,1
 400a578:	e0bff515 	stw	r2,-44(fp)
 400a57c:	e0bff517 	ldw	r2,-44(fp)
 400a580:	10800150 	cmplti	r2,r2,5
 400a584:	103fd51e 	bne	r2,zero,400a4dc <__alt_mem_onchip_memory2_0+0xfc00531c>
			vga_ctrl->VRAM[(334 + i) * 2 + 1] = 0x02;
			vga_ctrl->VRAM[(336 + 40 * i) * 2] = c2 << 4 | 15;
			vga_ctrl->VRAM[(336 + 40 * i) * 2 + 1] = 0x02;
		}
		//R
		for(int i = 0; i < 4; i++){
 400a588:	e03ff615 	stw	zero,-40(fp)
 400a58c:	00003b06 	br	400a67c <startScreen+0x4e0>
			vga_ctrl->VRAM[(340 + i) * 2] = c1 << 4 | 15;
 400a590:	d0e00217 	ldw	r3,-32760(gp)
 400a594:	e0bff617 	ldw	r2,-40(fp)
 400a598:	10805504 	addi	r2,r2,340
 400a59c:	1085883a 	add	r2,r2,r2
 400a5a0:	100b883a 	mov	r5,r2
 400a5a4:	e0bff903 	ldbu	r2,-28(fp)
 400a5a8:	1004913a 	slli	r2,r2,4
 400a5ac:	108003d4 	ori	r2,r2,15
 400a5b0:	1009883a 	mov	r4,r2
 400a5b4:	1945883a 	add	r2,r3,r5
 400a5b8:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(340 + i) * 2 + 1] = 0x02;
 400a5bc:	d0e00217 	ldw	r3,-32760(gp)
 400a5c0:	e0bff617 	ldw	r2,-40(fp)
 400a5c4:	10805504 	addi	r2,r2,340
 400a5c8:	1085883a 	add	r2,r2,r2
 400a5cc:	10800044 	addi	r2,r2,1
 400a5d0:	1885883a 	add	r2,r3,r2
 400a5d4:	00c00084 	movi	r3,2
 400a5d8:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(420 + i) * 2] = c1 << 4 | 15;
 400a5dc:	d0e00217 	ldw	r3,-32760(gp)
 400a5e0:	e0bff617 	ldw	r2,-40(fp)
 400a5e4:	10806904 	addi	r2,r2,420
 400a5e8:	1085883a 	add	r2,r2,r2
 400a5ec:	100b883a 	mov	r5,r2
 400a5f0:	e0bff903 	ldbu	r2,-28(fp)
 400a5f4:	1004913a 	slli	r2,r2,4
 400a5f8:	108003d4 	ori	r2,r2,15
 400a5fc:	1009883a 	mov	r4,r2
 400a600:	1945883a 	add	r2,r3,r5
 400a604:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(420 + i) * 2 + 1] = 0x02;
 400a608:	d0e00217 	ldw	r3,-32760(gp)
 400a60c:	e0bff617 	ldw	r2,-40(fp)
 400a610:	10806904 	addi	r2,r2,420
 400a614:	1085883a 	add	r2,r2,r2
 400a618:	10800044 	addi	r2,r2,1
 400a61c:	1885883a 	add	r2,r3,r2
 400a620:	00c00084 	movi	r3,2
 400a624:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(380 + 40 * i) * 2] = c1 << 4 | 15;
 400a628:	d4200217 	ldw	r16,-32760(gp)
 400a62c:	01401404 	movi	r5,80
 400a630:	e13ff617 	ldw	r4,-40(fp)
 400a634:	400dcd40 	call	400dcd4 <__mulsi3>
 400a638:	1080be04 	addi	r2,r2,760
 400a63c:	e0fff903 	ldbu	r3,-28(fp)
 400a640:	1806913a 	slli	r3,r3,4
 400a644:	18c003d4 	ori	r3,r3,15
 400a648:	8085883a 	add	r2,r16,r2
 400a64c:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(380 + 40 * i) * 2 + 1] = 0x02;
 400a650:	d4200217 	ldw	r16,-32760(gp)
 400a654:	01401404 	movi	r5,80
 400a658:	e13ff617 	ldw	r4,-40(fp)
 400a65c:	400dcd40 	call	400dcd4 <__mulsi3>
 400a660:	1080be44 	addi	r2,r2,761
 400a664:	8085883a 	add	r2,r16,r2
 400a668:	00c00084 	movi	r3,2
 400a66c:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(334 + i) * 2 + 1] = 0x02;
			vga_ctrl->VRAM[(336 + 40 * i) * 2] = c2 << 4 | 15;
			vga_ctrl->VRAM[(336 + 40 * i) * 2 + 1] = 0x02;
		}
		//R
		for(int i = 0; i < 4; i++){
 400a670:	e0bff617 	ldw	r2,-40(fp)
 400a674:	10800044 	addi	r2,r2,1
 400a678:	e0bff615 	stw	r2,-40(fp)
 400a67c:	e0bff617 	ldw	r2,-40(fp)
 400a680:	10800110 	cmplti	r2,r2,4
 400a684:	103fc21e 	bne	r2,zero,400a590 <__alt_mem_onchip_memory2_0+0xfc0053d0>
			vga_ctrl->VRAM[(420 + i) * 2] = c1 << 4 | 15;
			vga_ctrl->VRAM[(420 + i) * 2 + 1] = 0x02;
			vga_ctrl->VRAM[(380 + 40 * i) * 2] = c1 << 4 | 15;
			vga_ctrl->VRAM[(380 + 40 * i) * 2 + 1] = 0x02;
		}
		vga_ctrl->VRAM[384 * 2] = c1 << 4 | 15;
 400a688:	d0a00217 	ldw	r2,-32760(gp)
 400a68c:	e0fff903 	ldbu	r3,-28(fp)
 400a690:	1806913a 	slli	r3,r3,4
 400a694:	18c003d4 	ori	r3,r3,15
 400a698:	10c0c005 	stb	r3,768(r2)
		vga_ctrl->VRAM[384 * 2 + 1] = 0x02;
 400a69c:	d0a00217 	ldw	r2,-32760(gp)
 400a6a0:	00c00084 	movi	r3,2
 400a6a4:	10c0c045 	stb	r3,769(r2)
		vga_ctrl->VRAM[464 * 2] = c1 << 4 | 15;
 400a6a8:	d0a00217 	ldw	r2,-32760(gp)
 400a6ac:	e0fff903 	ldbu	r3,-28(fp)
 400a6b0:	1806913a 	slli	r3,r3,4
 400a6b4:	18c003d4 	ori	r3,r3,15
 400a6b8:	10c0e805 	stb	r3,928(r2)
		vga_ctrl->VRAM[464 * 2 + 1] = 0x02;
 400a6bc:	d0a00217 	ldw	r2,-32760(gp)
 400a6c0:	00c00084 	movi	r3,2
 400a6c4:	10c0e845 	stb	r3,929(r2)
		vga_ctrl->VRAM[504 * 2] = c1 << 4 | 15;
 400a6c8:	d0a00217 	ldw	r2,-32760(gp)
 400a6cc:	e0fff903 	ldbu	r3,-28(fp)
 400a6d0:	1806913a 	slli	r3,r3,4
 400a6d4:	18c003d4 	ori	r3,r3,15
 400a6d8:	10c0fc05 	stb	r3,1008(r2)
		vga_ctrl->VRAM[504 * 2 + 1] = 0x02;
 400a6dc:	d0a00217 	ldw	r2,-32760(gp)
 400a6e0:	00c00084 	movi	r3,2
 400a6e4:	10c0fc45 	stb	r3,1009(r2)
		//I
		for(int i = 0; i < 5; i++){
 400a6e8:	e03ff715 	stw	zero,-36(fp)
 400a6ec:	00003b06 	br	400a7dc <startScreen+0x640>
			vga_ctrl->VRAM[(346 + i) * 2] = c2 << 4 | 15;
 400a6f0:	d0e00217 	ldw	r3,-32760(gp)
 400a6f4:	e0bff717 	ldw	r2,-36(fp)
 400a6f8:	10805684 	addi	r2,r2,346
 400a6fc:	1085883a 	add	r2,r2,r2
 400a700:	100b883a 	mov	r5,r2
 400a704:	e0bff943 	ldbu	r2,-27(fp)
 400a708:	1004913a 	slli	r2,r2,4
 400a70c:	108003d4 	ori	r2,r2,15
 400a710:	1009883a 	mov	r4,r2
 400a714:	1945883a 	add	r2,r3,r5
 400a718:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(346 + i) * 2 + 1] = 0x02;
 400a71c:	d0e00217 	ldw	r3,-32760(gp)
 400a720:	e0bff717 	ldw	r2,-36(fp)
 400a724:	10805684 	addi	r2,r2,346
 400a728:	1085883a 	add	r2,r2,r2
 400a72c:	10800044 	addi	r2,r2,1
 400a730:	1885883a 	add	r2,r3,r2
 400a734:	00c00084 	movi	r3,2
 400a738:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(348 + 40 * i) * 2] = c2 << 4 | 15;
 400a73c:	d4200217 	ldw	r16,-32760(gp)
 400a740:	01401404 	movi	r5,80
 400a744:	e13ff717 	ldw	r4,-36(fp)
 400a748:	400dcd40 	call	400dcd4 <__mulsi3>
 400a74c:	1080ae04 	addi	r2,r2,696
 400a750:	e0fff943 	ldbu	r3,-27(fp)
 400a754:	1806913a 	slli	r3,r3,4
 400a758:	18c003d4 	ori	r3,r3,15
 400a75c:	8085883a 	add	r2,r16,r2
 400a760:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(348 + 40 * i) * 2 + 1] = 0x02;
 400a764:	d4200217 	ldw	r16,-32760(gp)
 400a768:	01401404 	movi	r5,80
 400a76c:	e13ff717 	ldw	r4,-36(fp)
 400a770:	400dcd40 	call	400dcd4 <__mulsi3>
 400a774:	1080ae44 	addi	r2,r2,697
 400a778:	8085883a 	add	r2,r16,r2
 400a77c:	00c00084 	movi	r3,2
 400a780:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(506 + i) * 2] = c2 << 4 | 15;
 400a784:	d0e00217 	ldw	r3,-32760(gp)
 400a788:	e0bff717 	ldw	r2,-36(fp)
 400a78c:	10807e84 	addi	r2,r2,506
 400a790:	1085883a 	add	r2,r2,r2
 400a794:	100b883a 	mov	r5,r2
 400a798:	e0bff943 	ldbu	r2,-27(fp)
 400a79c:	1004913a 	slli	r2,r2,4
 400a7a0:	108003d4 	ori	r2,r2,15
 400a7a4:	1009883a 	mov	r4,r2
 400a7a8:	1945883a 	add	r2,r3,r5
 400a7ac:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(506 + i) * 2 + 1] = 0x02;
 400a7b0:	d0e00217 	ldw	r3,-32760(gp)
 400a7b4:	e0bff717 	ldw	r2,-36(fp)
 400a7b8:	10807e84 	addi	r2,r2,506
 400a7bc:	1085883a 	add	r2,r2,r2
 400a7c0:	10800044 	addi	r2,r2,1
 400a7c4:	1885883a 	add	r2,r3,r2
 400a7c8:	00c00084 	movi	r3,2
 400a7cc:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[464 * 2] = c1 << 4 | 15;
		vga_ctrl->VRAM[464 * 2 + 1] = 0x02;
		vga_ctrl->VRAM[504 * 2] = c1 << 4 | 15;
		vga_ctrl->VRAM[504 * 2 + 1] = 0x02;
		//I
		for(int i = 0; i < 5; i++){
 400a7d0:	e0bff717 	ldw	r2,-36(fp)
 400a7d4:	10800044 	addi	r2,r2,1
 400a7d8:	e0bff715 	stw	r2,-36(fp)
 400a7dc:	e0bff717 	ldw	r2,-36(fp)
 400a7e0:	10800150 	cmplti	r2,r2,5
 400a7e4:	103fc21e 	bne	r2,zero,400a6f0 <__alt_mem_onchip_memory2_0+0xfc005530>
			vga_ctrl->VRAM[(348 + 40 * i) * 2 + 1] = 0x02;
			vga_ctrl->VRAM[(506 + i) * 2] = c2 << 4 | 15;
			vga_ctrl->VRAM[(506 + i) * 2 + 1] = 0x02;
		}
		//S
		for(int i = 0; i < 5; i++){
 400a7e8:	e03ff815 	stw	zero,-32(fp)
 400a7ec:	00003c06 	br	400a8e0 <startScreen+0x744>
			vga_ctrl->VRAM[(352 + i) * 2] = c1 << 4 | 15;
 400a7f0:	d0e00217 	ldw	r3,-32760(gp)
 400a7f4:	e0bff817 	ldw	r2,-32(fp)
 400a7f8:	10805804 	addi	r2,r2,352
 400a7fc:	1085883a 	add	r2,r2,r2
 400a800:	100b883a 	mov	r5,r2
 400a804:	e0bff903 	ldbu	r2,-28(fp)
 400a808:	1004913a 	slli	r2,r2,4
 400a80c:	108003d4 	ori	r2,r2,15
 400a810:	1009883a 	mov	r4,r2
 400a814:	1945883a 	add	r2,r3,r5
 400a818:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(352 + i) * 2 + 1] = 0x01;
 400a81c:	d0e00217 	ldw	r3,-32760(gp)
 400a820:	e0bff817 	ldw	r2,-32(fp)
 400a824:	10805804 	addi	r2,r2,352
 400a828:	1085883a 	add	r2,r2,r2
 400a82c:	10800044 	addi	r2,r2,1
 400a830:	1885883a 	add	r2,r3,r2
 400a834:	00c00044 	movi	r3,1
 400a838:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(432 + i) * 2] = c1 << 4 | 15;
 400a83c:	d0e00217 	ldw	r3,-32760(gp)
 400a840:	e0bff817 	ldw	r2,-32(fp)
 400a844:	10806c04 	addi	r2,r2,432
 400a848:	1085883a 	add	r2,r2,r2
 400a84c:	100b883a 	mov	r5,r2
 400a850:	e0bff903 	ldbu	r2,-28(fp)
 400a854:	1004913a 	slli	r2,r2,4
 400a858:	108003d4 	ori	r2,r2,15
 400a85c:	1009883a 	mov	r4,r2
 400a860:	1945883a 	add	r2,r3,r5
 400a864:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(432 + i) * 2 + 1] = 0x01;
 400a868:	d0e00217 	ldw	r3,-32760(gp)
 400a86c:	e0bff817 	ldw	r2,-32(fp)
 400a870:	10806c04 	addi	r2,r2,432
 400a874:	1085883a 	add	r2,r2,r2
 400a878:	10800044 	addi	r2,r2,1
 400a87c:	1885883a 	add	r2,r3,r2
 400a880:	00c00044 	movi	r3,1
 400a884:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(512 + i) * 2] = c1 << 4 | 15;
 400a888:	d0e00217 	ldw	r3,-32760(gp)
 400a88c:	e0bff817 	ldw	r2,-32(fp)
 400a890:	10808004 	addi	r2,r2,512
 400a894:	1085883a 	add	r2,r2,r2
 400a898:	100b883a 	mov	r5,r2
 400a89c:	e0bff903 	ldbu	r2,-28(fp)
 400a8a0:	1004913a 	slli	r2,r2,4
 400a8a4:	108003d4 	ori	r2,r2,15
 400a8a8:	1009883a 	mov	r4,r2
 400a8ac:	1945883a 	add	r2,r3,r5
 400a8b0:	11000005 	stb	r4,0(r2)
			vga_ctrl->VRAM[(512 + i) * 2 + 1] = 0x01;
 400a8b4:	d0e00217 	ldw	r3,-32760(gp)
 400a8b8:	e0bff817 	ldw	r2,-32(fp)
 400a8bc:	10808004 	addi	r2,r2,512
 400a8c0:	1085883a 	add	r2,r2,r2
 400a8c4:	10800044 	addi	r2,r2,1
 400a8c8:	1885883a 	add	r2,r3,r2
 400a8cc:	00c00044 	movi	r3,1
 400a8d0:	10c00005 	stb	r3,0(r2)
			vga_ctrl->VRAM[(348 + 40 * i) * 2 + 1] = 0x02;
			vga_ctrl->VRAM[(506 + i) * 2] = c2 << 4 | 15;
			vga_ctrl->VRAM[(506 + i) * 2 + 1] = 0x02;
		}
		//S
		for(int i = 0; i < 5; i++){
 400a8d4:	e0bff817 	ldw	r2,-32(fp)
 400a8d8:	10800044 	addi	r2,r2,1
 400a8dc:	e0bff815 	stw	r2,-32(fp)
 400a8e0:	e0bff817 	ldw	r2,-32(fp)
 400a8e4:	10800150 	cmplti	r2,r2,5
 400a8e8:	103fc11e 	bne	r2,zero,400a7f0 <__alt_mem_onchip_memory2_0+0xfc005630>
			vga_ctrl->VRAM[(432 + i) * 2] = c1 << 4 | 15;
			vga_ctrl->VRAM[(432 + i) * 2 + 1] = 0x01;
			vga_ctrl->VRAM[(512 + i) * 2] = c1 << 4 | 15;
			vga_ctrl->VRAM[(512 + i) * 2 + 1] = 0x01;
		}
		vga_ctrl->VRAM[392 * 2] = c1 << 4 | 15;
 400a8ec:	d0a00217 	ldw	r2,-32760(gp)
 400a8f0:	e0fff903 	ldbu	r3,-28(fp)
 400a8f4:	1806913a 	slli	r3,r3,4
 400a8f8:	18c003d4 	ori	r3,r3,15
 400a8fc:	10c0c405 	stb	r3,784(r2)
		vga_ctrl->VRAM[392 * 2 + 1] = 0x01;
 400a900:	d0a00217 	ldw	r2,-32760(gp)
 400a904:	00c00044 	movi	r3,1
 400a908:	10c0c445 	stb	r3,785(r2)
		vga_ctrl->VRAM[476 * 2] = c1 << 4 | 15;
 400a90c:	d0a00217 	ldw	r2,-32760(gp)
 400a910:	e0fff903 	ldbu	r3,-28(fp)
 400a914:	1806913a 	slli	r3,r3,4
 400a918:	18c003d4 	ori	r3,r3,15
 400a91c:	10c0ee05 	stb	r3,952(r2)
		vga_ctrl->VRAM[476 * 2 + 1] = 0x01;
 400a920:	d0a00217 	ldw	r2,-32760(gp)
 400a924:	00c00044 	movi	r3,1
 400a928:	10c0ee45 	stb	r3,953(r2)
		//P
		vga_ctrl->VRAM[654 * 2] = 15 << 4 | 0;
 400a92c:	d0a00217 	ldw	r2,-32760(gp)
 400a930:	00fffc04 	movi	r3,-16
 400a934:	10c14705 	stb	r3,1308(r2)
		vga_ctrl->VRAM[654 * 2 + 1] = 0x2f;
 400a938:	d0a00217 	ldw	r2,-32760(gp)
 400a93c:	00c00bc4 	movi	r3,47
 400a940:	10c14745 	stb	r3,1309(r2)
		//R
		vga_ctrl->VRAM[655 * 2] = 15 << 4 | 0;
 400a944:	d0a00217 	ldw	r2,-32760(gp)
 400a948:	00fffc04 	movi	r3,-16
 400a94c:	10c14785 	stb	r3,1310(r2)
		vga_ctrl->VRAM[655 * 2 + 1] = 0x31;
 400a950:	d0a00217 	ldw	r2,-32760(gp)
 400a954:	00c00c44 	movi	r3,49
 400a958:	10c147c5 	stb	r3,1311(r2)
		//E
		vga_ctrl->VRAM[656 * 2] = 15 << 4 | 0;
 400a95c:	d0a00217 	ldw	r2,-32760(gp)
 400a960:	00fffc04 	movi	r3,-16
 400a964:	10c14805 	stb	r3,1312(r2)
		vga_ctrl->VRAM[656 * 2 + 1] = 0x24;
 400a968:	d0a00217 	ldw	r2,-32760(gp)
 400a96c:	00c00904 	movi	r3,36
 400a970:	10c14845 	stb	r3,1313(r2)
		//S
		vga_ctrl->VRAM[657 * 2] = 15 << 4 | 0;
 400a974:	d0a00217 	ldw	r2,-32760(gp)
 400a978:	00fffc04 	movi	r3,-16
 400a97c:	10c14885 	stb	r3,1314(r2)
		vga_ctrl->VRAM[657 * 2 + 1] = 0x32;
 400a980:	d0a00217 	ldw	r2,-32760(gp)
 400a984:	00c00c84 	movi	r3,50
 400a988:	10c148c5 	stb	r3,1315(r2)
		//S
		vga_ctrl->VRAM[658 * 2] = 15 << 4 | 0;
 400a98c:	d0a00217 	ldw	r2,-32760(gp)
 400a990:	00fffc04 	movi	r3,-16
 400a994:	10c14905 	stb	r3,1316(r2)
		vga_ctrl->VRAM[658 * 2 + 1] = 0x32;
 400a998:	d0a00217 	ldw	r2,-32760(gp)
 400a99c:	00c00c84 	movi	r3,50
 400a9a0:	10c14945 	stb	r3,1317(r2)
		//E
		vga_ctrl->VRAM[660 * 2] = 15 << 4 | 0;
 400a9a4:	d0a00217 	ldw	r2,-32760(gp)
 400a9a8:	00fffc04 	movi	r3,-16
 400a9ac:	10c14a05 	stb	r3,1320(r2)
		vga_ctrl->VRAM[660 * 2 + 1] = 0x24;
 400a9b0:	d0a00217 	ldw	r2,-32760(gp)
 400a9b4:	00c00904 	movi	r3,36
 400a9b8:	10c14a45 	stb	r3,1321(r2)
		//N
		vga_ctrl->VRAM[661 * 2] = 15 << 4 | 0;
 400a9bc:	d0a00217 	ldw	r2,-32760(gp)
 400a9c0:	00fffc04 	movi	r3,-16
 400a9c4:	10c14a85 	stb	r3,1322(r2)
		vga_ctrl->VRAM[661 * 2 + 1] = 0x2d;
 400a9c8:	d0a00217 	ldw	r2,-32760(gp)
 400a9cc:	00c00b44 	movi	r3,45
 400a9d0:	10c14ac5 	stb	r3,1323(r2)
		//T
		vga_ctrl->VRAM[662 * 2] = 15 << 4 | 0;
 400a9d4:	d0a00217 	ldw	r2,-32760(gp)
 400a9d8:	00fffc04 	movi	r3,-16
 400a9dc:	10c14b05 	stb	r3,1324(r2)
		vga_ctrl->VRAM[662 * 2 + 1] = 0x33;
 400a9e0:	d0a00217 	ldw	r2,-32760(gp)
 400a9e4:	00c00cc4 	movi	r3,51
 400a9e8:	10c14b45 	stb	r3,1325(r2)
		//E
		vga_ctrl->VRAM[663 * 2] = 15 << 4 | 0;
 400a9ec:	d0a00217 	ldw	r2,-32760(gp)
 400a9f0:	00fffc04 	movi	r3,-16
 400a9f4:	10c14b85 	stb	r3,1326(r2)
		vga_ctrl->VRAM[663 * 2 + 1] = 0x24;
 400a9f8:	d0a00217 	ldw	r2,-32760(gp)
 400a9fc:	00c00904 	movi	r3,36
 400aa00:	10c14bc5 	stb	r3,1327(r2)
		//R
		vga_ctrl->VRAM[664 * 2] = 15 << 4 | 0;
 400aa04:	d0a00217 	ldw	r2,-32760(gp)
 400aa08:	00fffc04 	movi	r3,-16
 400aa0c:	10c14c05 	stb	r3,1328(r2)
		vga_ctrl->VRAM[664 * 2 + 1] = 0x31;
 400aa10:	d0a00217 	ldw	r2,-32760(gp)
 400aa14:	00c00c44 	movi	r3,49
 400aa18:	10c14c45 	stb	r3,1329(r2)
		if(count2 % 200 == 0){
 400aa1c:	e0bff217 	ldw	r2,-56(fp)
 400aa20:	01403204 	movi	r5,200
 400aa24:	1009883a 	mov	r4,r2
 400aa28:	400dba40 	call	400dba4 <__modsi3>
 400aa2c:	1000031e 	bne	r2,zero,400aa3c <startScreen+0x8a0>
			count++;
 400aa30:	e0bff117 	ldw	r2,-60(fp)
 400aa34:	10800044 	addi	r2,r2,1
 400aa38:	e0bff115 	stw	r2,-60(fp)
		}
		count2++;
 400aa3c:	e0bff217 	ldw	r2,-56(fp)
 400aa40:	10800044 	addi	r2,r2,1
 400aa44:	e0bff215 	stw	r2,-56(fp)
void startScreen(){
    alt_u8 color1[10] = {1, 2, 5, 1, 12, 10, 4, 1, 9, 4}; //level color palette sets
    alt_u8 color2[10] = {5, 10, 13, 2, 10, 9, 8, 4, 12, 14};
    int count = 0;
    int count2 = 0;
	while(keycode != 40){
 400aa48:	d0a7f917 	ldw	r2,-24604(gp)
 400aa4c:	10800a18 	cmpnei	r2,r2,40
 400aa50:	103e021e 	bne	r2,zero,400a25c <__alt_mem_onchip_memory2_0+0xfc00509c>
		if(count2 % 200 == 0){
			count++;
		}
		count2++;
	}
}
 400aa54:	0001883a 	nop
 400aa58:	e6ffff04 	addi	sp,fp,-4
 400aa5c:	dfc00217 	ldw	ra,8(sp)
 400aa60:	df000117 	ldw	fp,4(sp)
 400aa64:	dc000017 	ldw	r16,0(sp)
 400aa68:	dec00304 	addi	sp,sp,12
 400aa6c:	f800283a 	ret

0400aa70 <clearScreen>:

void clearScreen(){
 400aa70:	defffe04 	addi	sp,sp,-8
 400aa74:	df000115 	stw	fp,4(sp)
 400aa78:	df000104 	addi	fp,sp,4
	for(int i = 0; i < 1200; i++){
 400aa7c:	e03fff15 	stw	zero,-4(fp)
 400aa80:	00000e06 	br	400aabc <clearScreen+0x4c>
		vga_ctrl->VRAM[i * 2] = 0;
 400aa84:	d0e00217 	ldw	r3,-32760(gp)
 400aa88:	e0bfff17 	ldw	r2,-4(fp)
 400aa8c:	1085883a 	add	r2,r2,r2
 400aa90:	1885883a 	add	r2,r3,r2
 400aa94:	10000005 	stb	zero,0(r2)
		vga_ctrl->VRAM[i * 2 + 1] = 0;
 400aa98:	d0e00217 	ldw	r3,-32760(gp)
 400aa9c:	e0bfff17 	ldw	r2,-4(fp)
 400aaa0:	1085883a 	add	r2,r2,r2
 400aaa4:	10800044 	addi	r2,r2,1
 400aaa8:	1885883a 	add	r2,r3,r2
 400aaac:	10000005 	stb	zero,0(r2)
		count2++;
	}
}

void clearScreen(){
	for(int i = 0; i < 1200; i++){
 400aab0:	e0bfff17 	ldw	r2,-4(fp)
 400aab4:	10800044 	addi	r2,r2,1
 400aab8:	e0bfff15 	stw	r2,-4(fp)
 400aabc:	e0bfff17 	ldw	r2,-4(fp)
 400aac0:	10812c10 	cmplti	r2,r2,1200
 400aac4:	103fef1e 	bne	r2,zero,400aa84 <__alt_mem_onchip_memory2_0+0xfc0058c4>
		vga_ctrl->VRAM[i * 2] = 0;
		vga_ctrl->VRAM[i * 2 + 1] = 0;
	}
}
 400aac8:	0001883a 	nop
 400aacc:	e037883a 	mov	sp,fp
 400aad0:	df000017 	ldw	fp,0(sp)
 400aad4:	dec00104 	addi	sp,sp,4
 400aad8:	f800283a 	ret

0400aadc <endGame>:

void endGame(){
 400aadc:	defffc04 	addi	sp,sp,-16
 400aae0:	dfc00315 	stw	ra,12(sp)
 400aae4:	df000215 	stw	fp,8(sp)
 400aae8:	df000204 	addi	fp,sp,8
	for(int i = 0; i < 10; i++){ //blink 5 times
 400aaec:	e03ffe15 	stw	zero,-8(fp)
 400aaf0:	00004c06 	br	400ac24 <endGame+0x148>
		alt_u8 color;
		if(i % 2 == 0){
 400aaf4:	e0bffe17 	ldw	r2,-8(fp)
 400aaf8:	1080004c 	andi	r2,r2,1
 400aafc:	1000031e 	bne	r2,zero,400ab0c <endGame+0x30>
			color = 4;
 400ab00:	00800104 	movi	r2,4
 400ab04:	e0bfff05 	stb	r2,-4(fp)
 400ab08:	00000106 	br	400ab10 <endGame+0x34>
		}
		else{
			color = 0;
 400ab0c:	e03fff05 	stb	zero,-4(fp)
		}
		//G
		vga_ctrl->VRAM[95 * 2] = color << 4 | 0;
 400ab10:	d0a00217 	ldw	r2,-32760(gp)
 400ab14:	e0ffff03 	ldbu	r3,-4(fp)
 400ab18:	1806913a 	slli	r3,r3,4
 400ab1c:	10c02f85 	stb	r3,190(r2)
		vga_ctrl->VRAM[95 * 2 + 1] = 0x26;
 400ab20:	d0a00217 	ldw	r2,-32760(gp)
 400ab24:	00c00984 	movi	r3,38
 400ab28:	10c02fc5 	stb	r3,191(r2)
		//A
		vga_ctrl->VRAM[96 * 2] = color << 4 | 0;
 400ab2c:	d0a00217 	ldw	r2,-32760(gp)
 400ab30:	e0ffff03 	ldbu	r3,-4(fp)
 400ab34:	1806913a 	slli	r3,r3,4
 400ab38:	10c03005 	stb	r3,192(r2)
		vga_ctrl->VRAM[96 * 2 + 1] = 0x20;
 400ab3c:	d0a00217 	ldw	r2,-32760(gp)
 400ab40:	00c00804 	movi	r3,32
 400ab44:	10c03045 	stb	r3,193(r2)
		//M
		vga_ctrl->VRAM[97 * 2] = color << 4 | 0;
 400ab48:	d0a00217 	ldw	r2,-32760(gp)
 400ab4c:	e0ffff03 	ldbu	r3,-4(fp)
 400ab50:	1806913a 	slli	r3,r3,4
 400ab54:	10c03085 	stb	r3,194(r2)
		vga_ctrl->VRAM[97 * 2 + 1] = 0x2c;
 400ab58:	d0a00217 	ldw	r2,-32760(gp)
 400ab5c:	00c00b04 	movi	r3,44
 400ab60:	10c030c5 	stb	r3,195(r2)
		//E
		vga_ctrl->VRAM[98 * 2] = color << 4 | 0;
 400ab64:	d0a00217 	ldw	r2,-32760(gp)
 400ab68:	e0ffff03 	ldbu	r3,-4(fp)
 400ab6c:	1806913a 	slli	r3,r3,4
 400ab70:	10c03105 	stb	r3,196(r2)
		vga_ctrl->VRAM[98 * 2 + 1] = 0x24;
 400ab74:	d0a00217 	ldw	r2,-32760(gp)
 400ab78:	00c00904 	movi	r3,36
 400ab7c:	10c03145 	stb	r3,197(r2)
		//O
		vga_ctrl->VRAM[100 * 2] = color << 4 | 0;
 400ab80:	d0a00217 	ldw	r2,-32760(gp)
 400ab84:	e0ffff03 	ldbu	r3,-4(fp)
 400ab88:	1806913a 	slli	r3,r3,4
 400ab8c:	10c03205 	stb	r3,200(r2)
		vga_ctrl->VRAM[100 * 2 + 1] = 0x2e;
 400ab90:	d0a00217 	ldw	r2,-32760(gp)
 400ab94:	00c00b84 	movi	r3,46
 400ab98:	10c03245 	stb	r3,201(r2)
		//V
		vga_ctrl->VRAM[101 * 2] = color << 4 | 0;
 400ab9c:	d0a00217 	ldw	r2,-32760(gp)
 400aba0:	e0ffff03 	ldbu	r3,-4(fp)
 400aba4:	1806913a 	slli	r3,r3,4
 400aba8:	10c03285 	stb	r3,202(r2)
		vga_ctrl->VRAM[101 * 2 + 1] = 0x35;
 400abac:	d0a00217 	ldw	r2,-32760(gp)
 400abb0:	00c00d44 	movi	r3,53
 400abb4:	10c032c5 	stb	r3,203(r2)
		//E
		vga_ctrl->VRAM[102 * 2] = color << 4 | 0;
 400abb8:	d0a00217 	ldw	r2,-32760(gp)
 400abbc:	e0ffff03 	ldbu	r3,-4(fp)
 400abc0:	1806913a 	slli	r3,r3,4
 400abc4:	10c03305 	stb	r3,204(r2)
		vga_ctrl->VRAM[102 * 2 + 1] = 0x24;
 400abc8:	d0a00217 	ldw	r2,-32760(gp)
 400abcc:	00c00904 	movi	r3,36
 400abd0:	10c03345 	stb	r3,205(r2)
		//R
		vga_ctrl->VRAM[103 * 2] = color << 4 | 0;
 400abd4:	d0a00217 	ldw	r2,-32760(gp)
 400abd8:	e0ffff03 	ldbu	r3,-4(fp)
 400abdc:	1806913a 	slli	r3,r3,4
 400abe0:	10c03385 	stb	r3,206(r2)
		vga_ctrl->VRAM[103 * 2 + 1] = 0x31;
 400abe4:	d0a00217 	ldw	r2,-32760(gp)
 400abe8:	00c00c44 	movi	r3,49
 400abec:	10c033c5 	stb	r3,207(r2)
		//!
		vga_ctrl->VRAM[104 * 2] = color << 4 | 0;
 400abf0:	d0a00217 	ldw	r2,-32760(gp)
 400abf4:	e0ffff03 	ldbu	r3,-4(fp)
 400abf8:	1806913a 	slli	r3,r3,4
 400abfc:	10c03405 	stb	r3,208(r2)
		vga_ctrl->VRAM[104 * 2 + 1] = 0x45;
 400ac00:	d0a00217 	ldw	r2,-32760(gp)
 400ac04:	00c01144 	movi	r3,69
 400ac08:	10c03445 	stb	r3,209(r2)
		usleep(100000);
 400ac0c:	010000b4 	movhi	r4,2
 400ac10:	2121a804 	addi	r4,r4,-31072
 400ac14:	401b98c0 	call	401b98c <usleep>
		vga_ctrl->VRAM[i * 2 + 1] = 0;
	}
}

void endGame(){
	for(int i = 0; i < 10; i++){ //blink 5 times
 400ac18:	e0bffe17 	ldw	r2,-8(fp)
 400ac1c:	10800044 	addi	r2,r2,1
 400ac20:	e0bffe15 	stw	r2,-8(fp)
 400ac24:	e0bffe17 	ldw	r2,-8(fp)
 400ac28:	10800290 	cmplti	r2,r2,10
 400ac2c:	103fb11e 	bne	r2,zero,400aaf4 <__alt_mem_onchip_memory2_0+0xfc005934>
		//!
		vga_ctrl->VRAM[104 * 2] = color << 4 | 0;
		vga_ctrl->VRAM[104 * 2 + 1] = 0x45;
		usleep(100000);
	}
}
 400ac30:	0001883a 	nop
 400ac34:	e037883a 	mov	sp,fp
 400ac38:	dfc00117 	ldw	ra,4(sp)
 400ac3c:	df000017 	ldw	fp,0(sp)
 400ac40:	dec00204 	addi	sp,sp,8
 400ac44:	f800283a 	ret

0400ac48 <chooseLevel>:

int chooseLevel(){
 400ac48:	defff804 	addi	sp,sp,-32
 400ac4c:	dfc00715 	stw	ra,28(sp)
 400ac50:	df000615 	stw	fp,24(sp)
 400ac54:	dc000515 	stw	r16,20(sp)
 400ac58:	df000604 	addi	fp,sp,24
	//draw level & words
	//draw top left corner
	vga_ctrl->VRAM[786 * 2] = 11 << 4 | 0;
 400ac5c:	d0a00217 	ldw	r2,-32760(gp)
 400ac60:	00ffec04 	movi	r3,-80
 400ac64:	10c18905 	stb	r3,1572(r2)
	vga_ctrl->VRAM[786 * 2 + 1] = 0x0b;
 400ac68:	d0a00217 	ldw	r2,-32760(gp)
 400ac6c:	00c002c4 	movi	r3,11
 400ac70:	10c18945 	stb	r3,1573(r2)
	//draw top wall
	for(int i = 0; i < 7; i++){
 400ac74:	e03ffa15 	stw	zero,-24(fp)
 400ac78:	00001206 	br	400acc4 <chooseLevel+0x7c>
		vga_ctrl->VRAM[(787 + i) * 2] = 11 << 4 | 0;
 400ac7c:	d0e00217 	ldw	r3,-32760(gp)
 400ac80:	e0bffa17 	ldw	r2,-24(fp)
 400ac84:	1080c4c4 	addi	r2,r2,787
 400ac88:	1085883a 	add	r2,r2,r2
 400ac8c:	1885883a 	add	r2,r3,r2
 400ac90:	00ffec04 	movi	r3,-80
 400ac94:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(787 + i) * 2 + 1] = 0x0c;
 400ac98:	d0e00217 	ldw	r3,-32760(gp)
 400ac9c:	e0bffa17 	ldw	r2,-24(fp)
 400aca0:	1080c4c4 	addi	r2,r2,787
 400aca4:	1085883a 	add	r2,r2,r2
 400aca8:	10800044 	addi	r2,r2,1
 400acac:	1885883a 	add	r2,r3,r2
 400acb0:	00c00304 	movi	r3,12
 400acb4:	10c00005 	stb	r3,0(r2)
	//draw level & words
	//draw top left corner
	vga_ctrl->VRAM[786 * 2] = 11 << 4 | 0;
	vga_ctrl->VRAM[786 * 2 + 1] = 0x0b;
	//draw top wall
	for(int i = 0; i < 7; i++){
 400acb8:	e0bffa17 	ldw	r2,-24(fp)
 400acbc:	10800044 	addi	r2,r2,1
 400acc0:	e0bffa15 	stw	r2,-24(fp)
 400acc4:	e0bffa17 	ldw	r2,-24(fp)
 400acc8:	108001d0 	cmplti	r2,r2,7
 400accc:	103feb1e 	bne	r2,zero,400ac7c <__alt_mem_onchip_memory2_0+0xfc005abc>
		vga_ctrl->VRAM[(787 + i) * 2] = 11 << 4 | 0;
		vga_ctrl->VRAM[(787 + i) * 2 + 1] = 0x0c;
	}
	//draw top right corner
	vga_ctrl->VRAM[794 * 2] = 11 << 4 | 0;
 400acd0:	d0a00217 	ldw	r2,-32760(gp)
 400acd4:	00ffec04 	movi	r3,-80
 400acd8:	10c18d05 	stb	r3,1588(r2)
	vga_ctrl->VRAM[794 * 2 + 1] = 0x0d;
 400acdc:	d0a00217 	ldw	r2,-32760(gp)
 400ace0:	00c00344 	movi	r3,13
 400ace4:	10c18d45 	stb	r3,1589(r2)
	//draw right wall
	for(int i = 0; i < 4; i++){
 400ace8:	e03ffb15 	stw	zero,-20(fp)
 400acec:	00001306 	br	400ad3c <chooseLevel+0xf4>
		vga_ctrl->VRAM[(834 + i * 40) * 2] = 11 << 4 | 0;
 400acf0:	d4200217 	ldw	r16,-32760(gp)
 400acf4:	01401404 	movi	r5,80
 400acf8:	e13ffb17 	ldw	r4,-20(fp)
 400acfc:	400dcd40 	call	400dcd4 <__mulsi3>
 400ad00:	1081a104 	addi	r2,r2,1668
 400ad04:	8085883a 	add	r2,r16,r2
 400ad08:	00ffec04 	movi	r3,-80
 400ad0c:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(834 + i * 40) * 2 + 1] = 0x0e;
 400ad10:	d4200217 	ldw	r16,-32760(gp)
 400ad14:	01401404 	movi	r5,80
 400ad18:	e13ffb17 	ldw	r4,-20(fp)
 400ad1c:	400dcd40 	call	400dcd4 <__mulsi3>
 400ad20:	1081a144 	addi	r2,r2,1669
 400ad24:	8085883a 	add	r2,r16,r2
 400ad28:	00c00384 	movi	r3,14
 400ad2c:	10c00005 	stb	r3,0(r2)
	}
	//draw top right corner
	vga_ctrl->VRAM[794 * 2] = 11 << 4 | 0;
	vga_ctrl->VRAM[794 * 2 + 1] = 0x0d;
	//draw right wall
	for(int i = 0; i < 4; i++){
 400ad30:	e0bffb17 	ldw	r2,-20(fp)
 400ad34:	10800044 	addi	r2,r2,1
 400ad38:	e0bffb15 	stw	r2,-20(fp)
 400ad3c:	e0bffb17 	ldw	r2,-20(fp)
 400ad40:	10800110 	cmplti	r2,r2,4
 400ad44:	103fea1e 	bne	r2,zero,400acf0 <__alt_mem_onchip_memory2_0+0xfc005b30>
		vga_ctrl->VRAM[(834 + i * 40) * 2] = 11 << 4 | 0;
		vga_ctrl->VRAM[(834 + i * 40) * 2 + 1] = 0x0e;
	}
	//draw bottom right corner
	vga_ctrl->VRAM[994 * 2] = 11 << 4 | 0;
 400ad48:	d0a00217 	ldw	r2,-32760(gp)
 400ad4c:	00ffec04 	movi	r3,-80
 400ad50:	10c1f105 	stb	r3,1988(r2)
	vga_ctrl->VRAM[994 * 2 + 1] = 0x0f;
 400ad54:	d0a00217 	ldw	r2,-32760(gp)
 400ad58:	00c003c4 	movi	r3,15
 400ad5c:	10c1f145 	stb	r3,1989(r2)
	//draw bottom wall
	for(int i = 0; i < 7; i++){
 400ad60:	e03ffc15 	stw	zero,-16(fp)
 400ad64:	00001206 	br	400adb0 <chooseLevel+0x168>
		vga_ctrl->VRAM[(987 + i) * 2] = 11 << 4 | 0;
 400ad68:	d0e00217 	ldw	r3,-32760(gp)
 400ad6c:	e0bffc17 	ldw	r2,-16(fp)
 400ad70:	1080f6c4 	addi	r2,r2,987
 400ad74:	1085883a 	add	r2,r2,r2
 400ad78:	1885883a 	add	r2,r3,r2
 400ad7c:	00ffec04 	movi	r3,-80
 400ad80:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(987 + i) * 2 + 1] = 0x10;
 400ad84:	d0e00217 	ldw	r3,-32760(gp)
 400ad88:	e0bffc17 	ldw	r2,-16(fp)
 400ad8c:	1080f6c4 	addi	r2,r2,987
 400ad90:	1085883a 	add	r2,r2,r2
 400ad94:	10800044 	addi	r2,r2,1
 400ad98:	1885883a 	add	r2,r3,r2
 400ad9c:	00c00404 	movi	r3,16
 400ada0:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom right corner
	vga_ctrl->VRAM[994 * 2] = 11 << 4 | 0;
	vga_ctrl->VRAM[994 * 2 + 1] = 0x0f;
	//draw bottom wall
	for(int i = 0; i < 7; i++){
 400ada4:	e0bffc17 	ldw	r2,-16(fp)
 400ada8:	10800044 	addi	r2,r2,1
 400adac:	e0bffc15 	stw	r2,-16(fp)
 400adb0:	e0bffc17 	ldw	r2,-16(fp)
 400adb4:	108001d0 	cmplti	r2,r2,7
 400adb8:	103feb1e 	bne	r2,zero,400ad68 <__alt_mem_onchip_memory2_0+0xfc005ba8>
		vga_ctrl->VRAM[(987 + i) * 2] = 11 << 4 | 0;
		vga_ctrl->VRAM[(987 + i) * 2 + 1] = 0x10;
	}
	//draw bottom left corner
	vga_ctrl->VRAM[986 * 2] = 11 << 4 | 0;
 400adbc:	d0a00217 	ldw	r2,-32760(gp)
 400adc0:	00ffec04 	movi	r3,-80
 400adc4:	10c1ed05 	stb	r3,1972(r2)
	vga_ctrl->VRAM[986 * 2 + 1] = 0x11;
 400adc8:	d0a00217 	ldw	r2,-32760(gp)
 400adcc:	00c00444 	movi	r3,17
 400add0:	10c1ed45 	stb	r3,1973(r2)
	//draw left wall
	for(int i = 0; i < 4; i++){
 400add4:	e03ffd15 	stw	zero,-12(fp)
 400add8:	00001306 	br	400ae28 <chooseLevel+0x1e0>
		vga_ctrl->VRAM[(826 + i * 40) * 2] = 11 << 4 | 0;
 400addc:	d4200217 	ldw	r16,-32760(gp)
 400ade0:	01401404 	movi	r5,80
 400ade4:	e13ffd17 	ldw	r4,-12(fp)
 400ade8:	400dcd40 	call	400dcd4 <__mulsi3>
 400adec:	10819d04 	addi	r2,r2,1652
 400adf0:	8085883a 	add	r2,r16,r2
 400adf4:	00ffec04 	movi	r3,-80
 400adf8:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(826 + i * 40) * 2 + 1] = 0x12;
 400adfc:	d4200217 	ldw	r16,-32760(gp)
 400ae00:	01401404 	movi	r5,80
 400ae04:	e13ffd17 	ldw	r4,-12(fp)
 400ae08:	400dcd40 	call	400dcd4 <__mulsi3>
 400ae0c:	10819d44 	addi	r2,r2,1653
 400ae10:	8085883a 	add	r2,r16,r2
 400ae14:	00c00484 	movi	r3,18
 400ae18:	10c00005 	stb	r3,0(r2)
	}
	//draw bottom left corner
	vga_ctrl->VRAM[986 * 2] = 11 << 4 | 0;
	vga_ctrl->VRAM[986 * 2 + 1] = 0x11;
	//draw left wall
	for(int i = 0; i < 4; i++){
 400ae1c:	e0bffd17 	ldw	r2,-12(fp)
 400ae20:	10800044 	addi	r2,r2,1
 400ae24:	e0bffd15 	stw	r2,-12(fp)
 400ae28:	e0bffd17 	ldw	r2,-12(fp)
 400ae2c:	10800110 	cmplti	r2,r2,4
 400ae30:	103fea1e 	bne	r2,zero,400addc <__alt_mem_onchip_memory2_0+0xfc005c1c>
		vga_ctrl->VRAM[(826 + i * 40) * 2] = 11 << 4 | 0;
		vga_ctrl->VRAM[(826 + i * 40) * 2 + 1] = 0x12;
	}
	//L
	vga_ctrl->VRAM[868 * 2] = 15 << 4 | 0;
 400ae34:	d0a00217 	ldw	r2,-32760(gp)
 400ae38:	00fffc04 	movi	r3,-16
 400ae3c:	10c1b205 	stb	r3,1736(r2)
	vga_ctrl->VRAM[868 * 2 + 1] = 0x2b;
 400ae40:	d0a00217 	ldw	r2,-32760(gp)
 400ae44:	00c00ac4 	movi	r3,43
 400ae48:	10c1b245 	stb	r3,1737(r2)
	//E
	vga_ctrl->VRAM[869 * 2] = 15 << 4 | 0;
 400ae4c:	d0a00217 	ldw	r2,-32760(gp)
 400ae50:	00fffc04 	movi	r3,-16
 400ae54:	10c1b285 	stb	r3,1738(r2)
	vga_ctrl->VRAM[869 * 2 + 1] = 0x24;
 400ae58:	d0a00217 	ldw	r2,-32760(gp)
 400ae5c:	00c00904 	movi	r3,36
 400ae60:	10c1b2c5 	stb	r3,1739(r2)
	//V
	vga_ctrl->VRAM[870 * 2] = 15 << 4 | 0;
 400ae64:	d0a00217 	ldw	r2,-32760(gp)
 400ae68:	00fffc04 	movi	r3,-16
 400ae6c:	10c1b305 	stb	r3,1740(r2)
	vga_ctrl->VRAM[870 * 2 + 1] = 0x35;
 400ae70:	d0a00217 	ldw	r2,-32760(gp)
 400ae74:	00c00d44 	movi	r3,53
 400ae78:	10c1b345 	stb	r3,1741(r2)
	//E
	vga_ctrl->VRAM[871 * 2] = 15 << 4 | 0;
 400ae7c:	d0a00217 	ldw	r2,-32760(gp)
 400ae80:	00fffc04 	movi	r3,-16
 400ae84:	10c1b385 	stb	r3,1742(r2)
	vga_ctrl->VRAM[871 * 2 + 1] = 0x24;
 400ae88:	d0a00217 	ldw	r2,-32760(gp)
 400ae8c:	00c00904 	movi	r3,36
 400ae90:	10c1b3c5 	stb	r3,1743(r2)
	//L
	vga_ctrl->VRAM[872 * 2] = 15 << 4 | 0;
 400ae94:	d0a00217 	ldw	r2,-32760(gp)
 400ae98:	00fffc04 	movi	r3,-16
 400ae9c:	10c1b405 	stb	r3,1744(r2)
	vga_ctrl->VRAM[872 * 2 + 1] = 0x2b;
 400aea0:	d0a00217 	ldw	r2,-32760(gp)
 400aea4:	00c00ac4 	movi	r3,43
 400aea8:	10c1b445 	stb	r3,1745(r2)
	int startLevel = 0;
 400aeac:	e03ffe15 	stw	zero,-8(fp)
	drawLevel(0);
 400aeb0:	0009883a 	mov	r4,zero
 400aeb4:	4008cdc0 	call	4008cdc <drawLevel>
	usleep(100000);
 400aeb8:	010000b4 	movhi	r4,2
 400aebc:	2121a804 	addi	r4,r4,-31072
 400aec0:	401b98c0 	call	401b98c <usleep>
	keycode = keyboardDriver(keycode);
 400aec4:	d0a7f917 	ldw	r2,-24604(gp)
 400aec8:	1009883a 	mov	r4,r2
 400aecc:	400ba780 	call	400ba78 <keyboardDriver>
 400aed0:	d0a7f915 	stw	r2,-24604(gp)
	while(keycode != 40){
 400aed4:	00001d06 	br	400af4c <chooseLevel+0x304>
		keycode = keyboardDriver(keycode);
 400aed8:	d0a7f917 	ldw	r2,-24604(gp)
 400aedc:	1009883a 	mov	r4,r2
 400aee0:	400ba780 	call	400ba78 <keyboardDriver>
 400aee4:	d0a7f915 	stw	r2,-24604(gp)
		if(keycode == 82){
 400aee8:	d0a7f917 	ldw	r2,-24604(gp)
 400aeec:	10801498 	cmpnei	r2,r2,82
 400aef0:	10000a1e 	bne	r2,zero,400af1c <chooseLevel+0x2d4>
			if(startLevel < 19){
 400aef4:	e0bffe17 	ldw	r2,-8(fp)
 400aef8:	108004c8 	cmpgei	r2,r2,19
 400aefc:	1000071e 	bne	r2,zero,400af1c <chooseLevel+0x2d4>
				startLevel++;
 400af00:	e0bffe17 	ldw	r2,-8(fp)
 400af04:	10800044 	addi	r2,r2,1
 400af08:	e0bffe15 	stw	r2,-8(fp)
				drawLevel(startLevel);
 400af0c:	e13ffe17 	ldw	r4,-8(fp)
 400af10:	4008cdc0 	call	4008cdc <drawLevel>
				usleep(25000);
 400af14:	01186a04 	movi	r4,25000
 400af18:	401b98c0 	call	401b98c <usleep>
			}
		}
		if(keycode == 81){
 400af1c:	d0a7f917 	ldw	r2,-24604(gp)
 400af20:	10801458 	cmpnei	r2,r2,81
 400af24:	1000091e 	bne	r2,zero,400af4c <chooseLevel+0x304>
			if(startLevel > 0){
 400af28:	e0bffe17 	ldw	r2,-8(fp)
 400af2c:	0080070e 	bge	zero,r2,400af4c <chooseLevel+0x304>
				startLevel--;
 400af30:	e0bffe17 	ldw	r2,-8(fp)
 400af34:	10bfffc4 	addi	r2,r2,-1
 400af38:	e0bffe15 	stw	r2,-8(fp)
				drawLevel(startLevel);
 400af3c:	e13ffe17 	ldw	r4,-8(fp)
 400af40:	4008cdc0 	call	4008cdc <drawLevel>
				usleep(25000);
 400af44:	01186a04 	movi	r4,25000
 400af48:	401b98c0 	call	401b98c <usleep>
	vga_ctrl->VRAM[872 * 2 + 1] = 0x2b;
	int startLevel = 0;
	drawLevel(0);
	usleep(100000);
	keycode = keyboardDriver(keycode);
	while(keycode != 40){
 400af4c:	d0a7f917 	ldw	r2,-24604(gp)
 400af50:	10800a18 	cmpnei	r2,r2,40
 400af54:	103fe01e 	bne	r2,zero,400aed8 <__alt_mem_onchip_memory2_0+0xfc005d18>
				drawLevel(startLevel);
				usleep(25000);
			}
		}
	}
	return startLevel;
 400af58:	e0bffe17 	ldw	r2,-8(fp)
}
 400af5c:	e6ffff04 	addi	sp,fp,-4
 400af60:	dfc00217 	ldw	ra,8(sp)
 400af64:	df000117 	ldw	fp,4(sp)
 400af68:	dc000017 	ldw	r16,0(sp)
 400af6c:	dec00304 	addi	sp,sp,12
 400af70:	f800283a 	ret

0400af74 <drawHighScore>:

void drawHighScore(){
 400af74:	defffa04 	addi	sp,sp,-24
 400af78:	dfc00515 	stw	ra,20(sp)
 400af7c:	df000415 	stw	fp,16(sp)
 400af80:	df000404 	addi	fp,sp,16
	//H
	vga_ctrl->VRAM[1049 * 2] = 15 << 4 | 0;
 400af84:	d0a00217 	ldw	r2,-32760(gp)
 400af88:	00fffc04 	movi	r3,-16
 400af8c:	10c20c85 	stb	r3,2098(r2)
	vga_ctrl->VRAM[1049 * 2 + 1] = 0x27;
 400af90:	d0a00217 	ldw	r2,-32760(gp)
 400af94:	00c009c4 	movi	r3,39
 400af98:	10c20cc5 	stb	r3,2099(r2)
	//I
	vga_ctrl->VRAM[1050 * 2] = 15 << 4 | 0;
 400af9c:	d0a00217 	ldw	r2,-32760(gp)
 400afa0:	00fffc04 	movi	r3,-16
 400afa4:	10c20d05 	stb	r3,2100(r2)
	vga_ctrl->VRAM[1050 * 2 + 1] = 0x28;
 400afa8:	d0a00217 	ldw	r2,-32760(gp)
 400afac:	00c00a04 	movi	r3,40
 400afb0:	10c20d45 	stb	r3,2101(r2)
	//G
	vga_ctrl->VRAM[1051 * 2] = 15 << 4 | 0;
 400afb4:	d0a00217 	ldw	r2,-32760(gp)
 400afb8:	00fffc04 	movi	r3,-16
 400afbc:	10c20d85 	stb	r3,2102(r2)
	vga_ctrl->VRAM[1051 * 2 + 1] = 0x26;
 400afc0:	d0a00217 	ldw	r2,-32760(gp)
 400afc4:	00c00984 	movi	r3,38
 400afc8:	10c20dc5 	stb	r3,2103(r2)
	//H
	vga_ctrl->VRAM[1052 * 2] = 15 << 4 | 0;
 400afcc:	d0a00217 	ldw	r2,-32760(gp)
 400afd0:	00fffc04 	movi	r3,-16
 400afd4:	10c20e05 	stb	r3,2104(r2)
	vga_ctrl->VRAM[1052 * 2 + 1] = 0x27;
 400afd8:	d0a00217 	ldw	r2,-32760(gp)
 400afdc:	00c009c4 	movi	r3,39
 400afe0:	10c20e45 	stb	r3,2105(r2)
	//S
	vga_ctrl->VRAM[1053 * 2] = 15 << 4 | 0;
 400afe4:	d0a00217 	ldw	r2,-32760(gp)
 400afe8:	00fffc04 	movi	r3,-16
 400afec:	10c20e85 	stb	r3,2106(r2)
	vga_ctrl->VRAM[1053 * 2 + 1] = 0x32;
 400aff0:	d0a00217 	ldw	r2,-32760(gp)
 400aff4:	00c00c84 	movi	r3,50
 400aff8:	10c20ec5 	stb	r3,2107(r2)
	//C
	vga_ctrl->VRAM[1054 * 2] = 15 << 4 | 0;
 400affc:	d0a00217 	ldw	r2,-32760(gp)
 400b000:	00fffc04 	movi	r3,-16
 400b004:	10c20f05 	stb	r3,2108(r2)
	vga_ctrl->VRAM[1054 * 2 + 1] = 0x22;
 400b008:	d0a00217 	ldw	r2,-32760(gp)
 400b00c:	00c00884 	movi	r3,34
 400b010:	10c20f45 	stb	r3,2109(r2)
	//O
	vga_ctrl->VRAM[1055 * 2] = 15 << 4 | 0;
 400b014:	d0a00217 	ldw	r2,-32760(gp)
 400b018:	00fffc04 	movi	r3,-16
 400b01c:	10c20f85 	stb	r3,2110(r2)
	vga_ctrl->VRAM[1055 * 2 + 1] = 0x2e;
 400b020:	d0a00217 	ldw	r2,-32760(gp)
 400b024:	00c00b84 	movi	r3,46
 400b028:	10c20fc5 	stb	r3,2111(r2)
	//R
	vga_ctrl->VRAM[1056 * 2] = 15 << 4 | 0;
 400b02c:	d0a00217 	ldw	r2,-32760(gp)
 400b030:	00fffc04 	movi	r3,-16
 400b034:	10c21005 	stb	r3,2112(r2)
	vga_ctrl->VRAM[1056 * 2 + 1] = 0x31;
 400b038:	d0a00217 	ldw	r2,-32760(gp)
 400b03c:	00c00c44 	movi	r3,49
 400b040:	10c21045 	stb	r3,2113(r2)
	//E
	vga_ctrl->VRAM[1057 * 2] = 15 << 4 | 0;
 400b044:	d0a00217 	ldw	r2,-32760(gp)
 400b048:	00fffc04 	movi	r3,-16
 400b04c:	10c21085 	stb	r3,2114(r2)
	vga_ctrl->VRAM[1057 * 2 + 1] = 0x24;
 400b050:	d0a00217 	ldw	r2,-32760(gp)
 400b054:	00c00904 	movi	r3,36
 400b058:	10c210c5 	stb	r3,2115(r2)
	//:
	vga_ctrl->VRAM[1058 * 2] = 15 << 4 | 0;
 400b05c:	d0a00217 	ldw	r2,-32760(gp)
 400b060:	00fffc04 	movi	r3,-16
 400b064:	10c21105 	stb	r3,2116(r2)
	vga_ctrl->VRAM[1058 * 2 + 1] = 0x44;
 400b068:	d0a00217 	ldw	r2,-32760(gp)
 400b06c:	00c01104 	movi	r3,68
 400b070:	10c21145 	stb	r3,2117(r2)
	//name
	for(int i = 0; i < 3; i++){
 400b074:	e03ffc15 	stw	zero,-16(fp)
 400b078:	00001506 	br	400b0d0 <drawHighScore+0x15c>
		vga_ctrl->VRAM[(1060 + i) * 2] = 15 << 4 | 0;
 400b07c:	d0e00217 	ldw	r3,-32760(gp)
 400b080:	e0bffc17 	ldw	r2,-16(fp)
 400b084:	10810904 	addi	r2,r2,1060
 400b088:	1085883a 	add	r2,r2,r2
 400b08c:	1885883a 	add	r2,r3,r2
 400b090:	00fffc04 	movi	r3,-16
 400b094:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(1060 + i) * 2 + 1] = scorer[i];
 400b098:	d1200217 	ldw	r4,-32760(gp)
 400b09c:	e0bffc17 	ldw	r2,-16(fp)
 400b0a0:	10810904 	addi	r2,r2,1060
 400b0a4:	1085883a 	add	r2,r2,r2
 400b0a8:	10800044 	addi	r2,r2,1
 400b0ac:	e17ffc17 	ldw	r5,-16(fp)
 400b0b0:	d0e7fa04 	addi	r3,gp,-24600
 400b0b4:	28c7883a 	add	r3,r5,r3
 400b0b8:	18c00003 	ldbu	r3,0(r3)
 400b0bc:	2085883a 	add	r2,r4,r2
 400b0c0:	10c00005 	stb	r3,0(r2)
	vga_ctrl->VRAM[1057 * 2 + 1] = 0x24;
	//:
	vga_ctrl->VRAM[1058 * 2] = 15 << 4 | 0;
	vga_ctrl->VRAM[1058 * 2 + 1] = 0x44;
	//name
	for(int i = 0; i < 3; i++){
 400b0c4:	e0bffc17 	ldw	r2,-16(fp)
 400b0c8:	10800044 	addi	r2,r2,1
 400b0cc:	e0bffc15 	stw	r2,-16(fp)
 400b0d0:	e0bffc17 	ldw	r2,-16(fp)
 400b0d4:	108000d0 	cmplti	r2,r2,3
 400b0d8:	103fe81e 	bne	r2,zero,400b07c <__alt_mem_onchip_memory2_0+0xfc005ebc>
		vga_ctrl->VRAM[(1060 + i) * 2] = 15 << 4 | 0;
		vga_ctrl->VRAM[(1060 + i) * 2 + 1] = scorer[i];
	}
	//number
	int temp = highscore;
 400b0dc:	d0a7fb17 	ldw	r2,-24596(gp)
 400b0e0:	e0bffd15 	stw	r2,-12(fp)
	for(int i = 0; i < 7; i++){
 400b0e4:	e03ffe15 	stw	zero,-8(fp)
 400b0e8:	00001506 	br	400b140 <drawHighScore+0x1cc>
		int dig = temp % 10;
 400b0ec:	e0bffd17 	ldw	r2,-12(fp)
 400b0f0:	01400284 	movi	r5,10
 400b0f4:	1009883a 	mov	r4,r2
 400b0f8:	400dba40 	call	400dba4 <__modsi3>
 400b0fc:	e0bfff15 	stw	r2,-4(fp)
		drawDigit(dig, 1070 - i, 15, 0);
 400b100:	00c10b84 	movi	r3,1070
 400b104:	e0bffe17 	ldw	r2,-8(fp)
 400b108:	1885c83a 	sub	r2,r3,r2
 400b10c:	000f883a 	mov	r7,zero
 400b110:	018003c4 	movi	r6,15
 400b114:	100b883a 	mov	r5,r2
 400b118:	e13fff17 	ldw	r4,-4(fp)
 400b11c:	4008b900 	call	4008b90 <drawDigit>
		temp /= 10;
 400b120:	e0bffd17 	ldw	r2,-12(fp)
 400b124:	01400284 	movi	r5,10
 400b128:	1009883a 	mov	r4,r2
 400b12c:	400db200 	call	400db20 <__divsi3>
 400b130:	e0bffd15 	stw	r2,-12(fp)
		vga_ctrl->VRAM[(1060 + i) * 2] = 15 << 4 | 0;
		vga_ctrl->VRAM[(1060 + i) * 2 + 1] = scorer[i];
	}
	//number
	int temp = highscore;
	for(int i = 0; i < 7; i++){
 400b134:	e0bffe17 	ldw	r2,-8(fp)
 400b138:	10800044 	addi	r2,r2,1
 400b13c:	e0bffe15 	stw	r2,-8(fp)
 400b140:	e0bffe17 	ldw	r2,-8(fp)
 400b144:	108001d0 	cmplti	r2,r2,7
 400b148:	103fe81e 	bne	r2,zero,400b0ec <__alt_mem_onchip_memory2_0+0xfc005f2c>
		int dig = temp % 10;
		drawDigit(dig, 1070 - i, 15, 0);
		temp /= 10;
	}
}
 400b14c:	0001883a 	nop
 400b150:	e037883a 	mov	sp,fp
 400b154:	dfc00117 	ldw	ra,4(sp)
 400b158:	df000017 	ldw	fp,0(sp)
 400b15c:	dec00204 	addi	sp,sp,8
 400b160:	f800283a 	ret

0400b164 <drawPause>:

void drawPause(){
 400b164:	deffff04 	addi	sp,sp,-4
 400b168:	df000015 	stw	fp,0(sp)
 400b16c:	d839883a 	mov	fp,sp
	//P
	vga_ctrl->VRAM[657 * 2] = 15 << 4 | 0;
 400b170:	d0a00217 	ldw	r2,-32760(gp)
 400b174:	00fffc04 	movi	r3,-16
 400b178:	10c14885 	stb	r3,1314(r2)
	vga_ctrl->VRAM[657 * 2 + 1] = 0x2f;
 400b17c:	d0a00217 	ldw	r2,-32760(gp)
 400b180:	00c00bc4 	movi	r3,47
 400b184:	10c148c5 	stb	r3,1315(r2)
	//A
	vga_ctrl->VRAM[658 * 2] = 15 << 4 | 0;
 400b188:	d0a00217 	ldw	r2,-32760(gp)
 400b18c:	00fffc04 	movi	r3,-16
 400b190:	10c14905 	stb	r3,1316(r2)
	vga_ctrl->VRAM[658 * 2 + 1] = 0x20;
 400b194:	d0a00217 	ldw	r2,-32760(gp)
 400b198:	00c00804 	movi	r3,32
 400b19c:	10c14945 	stb	r3,1317(r2)
	//U
	vga_ctrl->VRAM[659 * 2] = 15 << 4 | 0;
 400b1a0:	d0a00217 	ldw	r2,-32760(gp)
 400b1a4:	00fffc04 	movi	r3,-16
 400b1a8:	10c14985 	stb	r3,1318(r2)
	vga_ctrl->VRAM[659 * 2 + 1] = 0x34;
 400b1ac:	d0a00217 	ldw	r2,-32760(gp)
 400b1b0:	00c00d04 	movi	r3,52
 400b1b4:	10c149c5 	stb	r3,1319(r2)
	//S
	vga_ctrl->VRAM[660 * 2] = 15 << 4 | 0;
 400b1b8:	d0a00217 	ldw	r2,-32760(gp)
 400b1bc:	00fffc04 	movi	r3,-16
 400b1c0:	10c14a05 	stb	r3,1320(r2)
	vga_ctrl->VRAM[660 * 2 + 1] = 0x32;
 400b1c4:	d0a00217 	ldw	r2,-32760(gp)
 400b1c8:	00c00c84 	movi	r3,50
 400b1cc:	10c14a45 	stb	r3,1321(r2)
	//E
	vga_ctrl->VRAM[661 * 2] = 15 << 4 | 0;
 400b1d0:	d0a00217 	ldw	r2,-32760(gp)
 400b1d4:	00fffc04 	movi	r3,-16
 400b1d8:	10c14a85 	stb	r3,1322(r2)
	vga_ctrl->VRAM[661 * 2 + 1] = 0x24;
 400b1dc:	d0a00217 	ldw	r2,-32760(gp)
 400b1e0:	00c00904 	movi	r3,36
 400b1e4:	10c14ac5 	stb	r3,1323(r2)
	//D
	vga_ctrl->VRAM[662 * 2] = 15 << 4 | 0;
 400b1e8:	d0a00217 	ldw	r2,-32760(gp)
 400b1ec:	00fffc04 	movi	r3,-16
 400b1f0:	10c14b05 	stb	r3,1324(r2)
	vga_ctrl->VRAM[662 * 2 + 1] = 0x23;
 400b1f4:	d0a00217 	ldw	r2,-32760(gp)
 400b1f8:	00c008c4 	movi	r3,35
 400b1fc:	10c14b45 	stb	r3,1325(r2)
}
 400b200:	0001883a 	nop
 400b204:	e037883a 	mov	sp,fp
 400b208:	df000017 	ldw	fp,0(sp)
 400b20c:	dec00104 	addi	sp,sp,4
 400b210:	f800283a 	ret

0400b214 <unpause>:

void unpause(){
 400b214:	defffe04 	addi	sp,sp,-8
 400b218:	df000115 	stw	fp,4(sp)
 400b21c:	df000104 	addi	fp,sp,4
	for(int i = 0; i < 6; i++){
 400b220:	e03fff15 	stw	zero,-4(fp)
 400b224:	00001006 	br	400b268 <unpause+0x54>
		vga_ctrl->VRAM[(657 + i) * 2] = 0 << 4 | 0;
 400b228:	d0e00217 	ldw	r3,-32760(gp)
 400b22c:	e0bfff17 	ldw	r2,-4(fp)
 400b230:	1080a444 	addi	r2,r2,657
 400b234:	1085883a 	add	r2,r2,r2
 400b238:	1885883a 	add	r2,r3,r2
 400b23c:	10000005 	stb	zero,0(r2)
		vga_ctrl->VRAM[(657 + i) * 2 + 1] = 0x0;
 400b240:	d0e00217 	ldw	r3,-32760(gp)
 400b244:	e0bfff17 	ldw	r2,-4(fp)
 400b248:	1080a444 	addi	r2,r2,657
 400b24c:	1085883a 	add	r2,r2,r2
 400b250:	10800044 	addi	r2,r2,1
 400b254:	1885883a 	add	r2,r3,r2
 400b258:	10000005 	stb	zero,0(r2)
	vga_ctrl->VRAM[662 * 2] = 15 << 4 | 0;
	vga_ctrl->VRAM[662 * 2 + 1] = 0x23;
}

void unpause(){
	for(int i = 0; i < 6; i++){
 400b25c:	e0bfff17 	ldw	r2,-4(fp)
 400b260:	10800044 	addi	r2,r2,1
 400b264:	e0bfff15 	stw	r2,-4(fp)
 400b268:	e0bfff17 	ldw	r2,-4(fp)
 400b26c:	10800190 	cmplti	r2,r2,6
 400b270:	103fed1e 	bne	r2,zero,400b228 <__alt_mem_onchip_memory2_0+0xfc006068>
		vga_ctrl->VRAM[(657 + i) * 2] = 0 << 4 | 0;
		vga_ctrl->VRAM[(657 + i) * 2 + 1] = 0x0;
	}
}
 400b274:	0001883a 	nop
 400b278:	e037883a 	mov	sp,fp
 400b27c:	df000017 	ldw	fp,0(sp)
 400b280:	dec00104 	addi	sp,sp,4
 400b284:	f800283a 	ret

0400b288 <enterHighScore>:

void enterHighScore(){
 400b288:	defffb04 	addi	sp,sp,-20
 400b28c:	dfc00415 	stw	ra,16(sp)
 400b290:	df000315 	stw	fp,12(sp)
 400b294:	df000304 	addi	fp,sp,12
	//clear name
	for(int i = 0; i < 3; i++){
 400b298:	e03ffd15 	stw	zero,-12(fp)
 400b29c:	00000806 	br	400b2c0 <enterHighScore+0x38>
		scorer[i] = 0x20;
 400b2a0:	e0fffd17 	ldw	r3,-12(fp)
 400b2a4:	d0a7fa04 	addi	r2,gp,-24600
 400b2a8:	1885883a 	add	r2,r3,r2
 400b2ac:	00c00804 	movi	r3,32
 400b2b0:	10c00005 	stb	r3,0(r2)
	}
}

void enterHighScore(){
	//clear name
	for(int i = 0; i < 3; i++){
 400b2b4:	e0bffd17 	ldw	r2,-12(fp)
 400b2b8:	10800044 	addi	r2,r2,1
 400b2bc:	e0bffd15 	stw	r2,-12(fp)
 400b2c0:	e0bffd17 	ldw	r2,-12(fp)
 400b2c4:	108000d0 	cmplti	r2,r2,3
 400b2c8:	103ff51e 	bne	r2,zero,400b2a0 <__alt_mem_onchip_memory2_0+0xfc0060e0>
		scorer[i] = 0x20;
	}
	drawHighScore();
 400b2cc:	400af740 	call	400af74 <drawHighScore>
	//N
	vga_ctrl->VRAM[1045 * 2] = 15 << 4 | 0;
 400b2d0:	d0a00217 	ldw	r2,-32760(gp)
 400b2d4:	00fffc04 	movi	r3,-16
 400b2d8:	10c20a85 	stb	r3,2090(r2)
	vga_ctrl->VRAM[1045 * 2 + 1] = 0x2d;
 400b2dc:	d0a00217 	ldw	r2,-32760(gp)
 400b2e0:	00c00b44 	movi	r3,45
 400b2e4:	10c20ac5 	stb	r3,2091(r2)
	//E
	vga_ctrl->VRAM[1046 * 2] = 15 << 4 | 0;
 400b2e8:	d0a00217 	ldw	r2,-32760(gp)
 400b2ec:	00fffc04 	movi	r3,-16
 400b2f0:	10c20b05 	stb	r3,2092(r2)
	vga_ctrl->VRAM[1046 * 2 + 1] = 0x24;
 400b2f4:	d0a00217 	ldw	r2,-32760(gp)
 400b2f8:	00c00904 	movi	r3,36
 400b2fc:	10c20b45 	stb	r3,2093(r2)
	//W
	vga_ctrl->VRAM[1047 * 2] = 15 << 4 | 0;
 400b300:	d0a00217 	ldw	r2,-32760(gp)
 400b304:	00fffc04 	movi	r3,-16
 400b308:	10c20b85 	stb	r3,2094(r2)
	vga_ctrl->VRAM[1047 * 2 + 1] = 0x36;
 400b30c:	d0a00217 	ldw	r2,-32760(gp)
 400b310:	00c00d84 	movi	r3,54
 400b314:	10c20bc5 	stb	r3,2095(r2)

	//arrows
	for(int i = 0; i < 3; i++){
 400b318:	e03ffe15 	stw	zero,-8(fp)
 400b31c:	00002106 	br	400b3a4 <enterHighScore+0x11c>
		vga_ctrl->VRAM[(1020 + i) * 2] = 15 << 4 | 0;
 400b320:	d0e00217 	ldw	r3,-32760(gp)
 400b324:	e0bffe17 	ldw	r2,-8(fp)
 400b328:	1080ff04 	addi	r2,r2,1020
 400b32c:	1085883a 	add	r2,r2,r2
 400b330:	1885883a 	add	r2,r3,r2
 400b334:	00fffc04 	movi	r3,-16
 400b338:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(1020 + i) * 2 + 1] = 0x47;
 400b33c:	d0e00217 	ldw	r3,-32760(gp)
 400b340:	e0bffe17 	ldw	r2,-8(fp)
 400b344:	1080ff04 	addi	r2,r2,1020
 400b348:	1085883a 	add	r2,r2,r2
 400b34c:	10800044 	addi	r2,r2,1
 400b350:	1885883a 	add	r2,r3,r2
 400b354:	00c011c4 	movi	r3,71
 400b358:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(1100 + i) * 2] = 15 << 4 | 0;
 400b35c:	d0e00217 	ldw	r3,-32760(gp)
 400b360:	e0bffe17 	ldw	r2,-8(fp)
 400b364:	10811304 	addi	r2,r2,1100
 400b368:	1085883a 	add	r2,r2,r2
 400b36c:	1885883a 	add	r2,r3,r2
 400b370:	00fffc04 	movi	r3,-16
 400b374:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(1100 + i) * 2 + 1] = 0x48;
 400b378:	d0e00217 	ldw	r3,-32760(gp)
 400b37c:	e0bffe17 	ldw	r2,-8(fp)
 400b380:	10811304 	addi	r2,r2,1100
 400b384:	1085883a 	add	r2,r2,r2
 400b388:	10800044 	addi	r2,r2,1
 400b38c:	1885883a 	add	r2,r3,r2
 400b390:	00c01204 	movi	r3,72
 400b394:	10c00005 	stb	r3,0(r2)
	//W
	vga_ctrl->VRAM[1047 * 2] = 15 << 4 | 0;
	vga_ctrl->VRAM[1047 * 2 + 1] = 0x36;

	//arrows
	for(int i = 0; i < 3; i++){
 400b398:	e0bffe17 	ldw	r2,-8(fp)
 400b39c:	10800044 	addi	r2,r2,1
 400b3a0:	e0bffe15 	stw	r2,-8(fp)
 400b3a4:	e0bffe17 	ldw	r2,-8(fp)
 400b3a8:	108000d0 	cmplti	r2,r2,3
 400b3ac:	103fdc1e 	bne	r2,zero,400b320 <__alt_mem_onchip_memory2_0+0xfc006160>
		vga_ctrl->VRAM[(1020 + i) * 2] = 15 << 4 | 0;
		vga_ctrl->VRAM[(1020 + i) * 2 + 1] = 0x47;
		vga_ctrl->VRAM[(1100 + i) * 2] = 15 << 4 | 0;
		vga_ctrl->VRAM[(1100 + i) * 2 + 1] = 0x48;
	}
	int current = 0;
 400b3b0:	e03fff15 	stw	zero,-4(fp)
	while(keycode != 40){
 400b3b4:	00005b06 	br	400b524 <enterHighScore+0x29c>
		keycode = keyboardDriver(keycode);
 400b3b8:	d0a7f917 	ldw	r2,-24604(gp)
 400b3bc:	1009883a 	mov	r4,r2
 400b3c0:	400ba780 	call	400ba78 <keyboardDriver>
 400b3c4:	d0a7f915 	stw	r2,-24604(gp)
		vga_ctrl->VRAM[(1100 + current) * 2 + 1] = 0x49; //draw current editing line
 400b3c8:	d0e00217 	ldw	r3,-32760(gp)
 400b3cc:	e0bfff17 	ldw	r2,-4(fp)
 400b3d0:	10811304 	addi	r2,r2,1100
 400b3d4:	1085883a 	add	r2,r2,r2
 400b3d8:	10800044 	addi	r2,r2,1
 400b3dc:	1885883a 	add	r2,r3,r2
 400b3e0:	00c01244 	movi	r3,73
 400b3e4:	10c00005 	stb	r3,0(r2)
		if(keycode == 81 && scorer[current] <= 0x46){ //handle scroll forward
 400b3e8:	d0a7f917 	ldw	r2,-24604(gp)
 400b3ec:	10801458 	cmpnei	r2,r2,81
 400b3f0:	1000121e 	bne	r2,zero,400b43c <enterHighScore+0x1b4>
 400b3f4:	e0ffff17 	ldw	r3,-4(fp)
 400b3f8:	d0a7fa04 	addi	r2,gp,-24600
 400b3fc:	1885883a 	add	r2,r3,r2
 400b400:	10800003 	ldbu	r2,0(r2)
 400b404:	10803fcc 	andi	r2,r2,255
 400b408:	108011e8 	cmpgeui	r2,r2,71
 400b40c:	10000b1e 	bne	r2,zero,400b43c <enterHighScore+0x1b4>
			scorer[current] += 1;
 400b410:	e0ffff17 	ldw	r3,-4(fp)
 400b414:	d0a7fa04 	addi	r2,gp,-24600
 400b418:	1885883a 	add	r2,r3,r2
 400b41c:	10800003 	ldbu	r2,0(r2)
 400b420:	10800044 	addi	r2,r2,1
 400b424:	1009883a 	mov	r4,r2
 400b428:	e0ffff17 	ldw	r3,-4(fp)
 400b42c:	d0a7fa04 	addi	r2,gp,-24600
 400b430:	1885883a 	add	r2,r3,r2
 400b434:	11000005 	stb	r4,0(r2)
 400b438:	00003706 	br	400b518 <enterHighScore+0x290>
		}
		else if(keycode == 82 && scorer[current] >= 0x20){ //handle scroll backward
 400b43c:	d0a7f917 	ldw	r2,-24604(gp)
 400b440:	10801498 	cmpnei	r2,r2,82
 400b444:	1000121e 	bne	r2,zero,400b490 <enterHighScore+0x208>
 400b448:	e0ffff17 	ldw	r3,-4(fp)
 400b44c:	d0a7fa04 	addi	r2,gp,-24600
 400b450:	1885883a 	add	r2,r3,r2
 400b454:	10800003 	ldbu	r2,0(r2)
 400b458:	10803fcc 	andi	r2,r2,255
 400b45c:	10800830 	cmpltui	r2,r2,32
 400b460:	10000b1e 	bne	r2,zero,400b490 <enterHighScore+0x208>
			scorer[current] -= 1;
 400b464:	e0ffff17 	ldw	r3,-4(fp)
 400b468:	d0a7fa04 	addi	r2,gp,-24600
 400b46c:	1885883a 	add	r2,r3,r2
 400b470:	10800003 	ldbu	r2,0(r2)
 400b474:	10bfffc4 	addi	r2,r2,-1
 400b478:	1009883a 	mov	r4,r2
 400b47c:	e0ffff17 	ldw	r3,-4(fp)
 400b480:	d0a7fa04 	addi	r2,gp,-24600
 400b484:	1885883a 	add	r2,r3,r2
 400b488:	11000005 	stb	r4,0(r2)
 400b48c:	00002206 	br	400b518 <enterHighScore+0x290>
		}
		else if(keycode == 80 && current > 0){ //handle move left
 400b490:	d0a7f917 	ldw	r2,-24604(gp)
 400b494:	10801418 	cmpnei	r2,r2,80
 400b498:	10000e1e 	bne	r2,zero,400b4d4 <enterHighScore+0x24c>
 400b49c:	e0bfff17 	ldw	r2,-4(fp)
 400b4a0:	00800c0e 	bge	zero,r2,400b4d4 <enterHighScore+0x24c>
			vga_ctrl->VRAM[(1100 + current) * 2 + 1] = 0x48;
 400b4a4:	d0e00217 	ldw	r3,-32760(gp)
 400b4a8:	e0bfff17 	ldw	r2,-4(fp)
 400b4ac:	10811304 	addi	r2,r2,1100
 400b4b0:	1085883a 	add	r2,r2,r2
 400b4b4:	10800044 	addi	r2,r2,1
 400b4b8:	1885883a 	add	r2,r3,r2
 400b4bc:	00c01204 	movi	r3,72
 400b4c0:	10c00005 	stb	r3,0(r2)
			current -= 1;
 400b4c4:	e0bfff17 	ldw	r2,-4(fp)
 400b4c8:	10bfffc4 	addi	r2,r2,-1
 400b4cc:	e0bfff15 	stw	r2,-4(fp)
 400b4d0:	00001106 	br	400b518 <enterHighScore+0x290>
		}
		else if(keycode == 79 && current < 2){ //handle move right
 400b4d4:	d0a7f917 	ldw	r2,-24604(gp)
 400b4d8:	108013d8 	cmpnei	r2,r2,79
 400b4dc:	10000e1e 	bne	r2,zero,400b518 <enterHighScore+0x290>
 400b4e0:	e0bfff17 	ldw	r2,-4(fp)
 400b4e4:	10800088 	cmpgei	r2,r2,2
 400b4e8:	10000b1e 	bne	r2,zero,400b518 <enterHighScore+0x290>
			vga_ctrl->VRAM[(1100 + current) * 2 + 1] = 0x48;
 400b4ec:	d0e00217 	ldw	r3,-32760(gp)
 400b4f0:	e0bfff17 	ldw	r2,-4(fp)
 400b4f4:	10811304 	addi	r2,r2,1100
 400b4f8:	1085883a 	add	r2,r2,r2
 400b4fc:	10800044 	addi	r2,r2,1
 400b500:	1885883a 	add	r2,r3,r2
 400b504:	00c01204 	movi	r3,72
 400b508:	10c00005 	stb	r3,0(r2)
			current += 1;
 400b50c:	e0bfff17 	ldw	r2,-4(fp)
 400b510:	10800044 	addi	r2,r2,1
 400b514:	e0bfff15 	stw	r2,-4(fp)
		}
		drawHighScore(); //redraw score name
 400b518:	400af740 	call	400af74 <drawHighScore>
		usleep(20000);
 400b51c:	01138804 	movi	r4,20000
 400b520:	401b98c0 	call	401b98c <usleep>
		vga_ctrl->VRAM[(1020 + i) * 2 + 1] = 0x47;
		vga_ctrl->VRAM[(1100 + i) * 2] = 15 << 4 | 0;
		vga_ctrl->VRAM[(1100 + i) * 2 + 1] = 0x48;
	}
	int current = 0;
	while(keycode != 40){
 400b524:	d0a7f917 	ldw	r2,-24604(gp)
 400b528:	10800a18 	cmpnei	r2,r2,40
 400b52c:	103fa21e 	bne	r2,zero,400b3b8 <__alt_mem_onchip_memory2_0+0xfc0061f8>
			current += 1;
		}
		drawHighScore(); //redraw score name
		usleep(20000);
	}
	usleep(20000);
 400b530:	01138804 	movi	r4,20000
 400b534:	401b98c0 	call	401b98c <usleep>
	keycode = 0; //clear keycode
 400b538:	d027f915 	stw	zero,-24604(gp)
}
 400b53c:	0001883a 	nop
 400b540:	e037883a 	mov	sp,fp
 400b544:	dfc00117 	ldw	ra,4(sp)
 400b548:	df000017 	ldw	fp,0(sp)
 400b54c:	dec00204 	addi	sp,sp,8
 400b550:	f800283a 	ret

0400b554 <GetDriverandReport>:

extern HID_DEVICE hid_device;
static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
 400b554:	defff604 	addi	sp,sp,-40
 400b558:	dfc00915 	stw	ra,36(sp)
 400b55c:	df000815 	stw	fp,32(sp)
 400b560:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 400b564:	00bfffc4 	movi	r2,-1
 400b568:	e0bffd45 	stb	r2,-11(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 400b56c:	010100b4 	movhi	r4,1026
 400b570:	2136f404 	addi	r4,r4,-9264
 400b574:	400fe500 	call	400fe50 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 400b578:	00800044 	movi	r2,1
 400b57c:	e0bffd05 	stb	r2,-12(fp)
 400b580:	00001f06 	br	400b600 <GetDriverandReport+0xac>
		tpl_ptr = GetDevtable(i);
 400b584:	e0bffd03 	ldbu	r2,-12(fp)
 400b588:	1009883a 	mov	r4,r2
 400b58c:	400d9f00 	call	400d9f0 <GetDevtable>
 400b590:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 400b594:	e0bffe17 	ldw	r2,-8(fp)
 400b598:	10800017 	ldw	r2,0(r2)
 400b59c:	10001526 	beq	r2,zero,400b5f4 <GetDriverandReport+0xa0>
			printf("Device: %d", i);
 400b5a0:	e0bffd03 	ldbu	r2,-12(fp)
 400b5a4:	100b883a 	mov	r5,r2
 400b5a8:	010100b4 	movhi	r4,1026
 400b5ac:	2136fd04 	addi	r4,r4,-9228
 400b5b0:	400fd540 	call	400fd54 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 400b5b4:	e0bffe17 	ldw	r2,-8(fp)
 400b5b8:	10800103 	ldbu	r2,4(r2)
 400b5bc:	10c03fcc 	andi	r3,r2,255
 400b5c0:	008100b4 	movhi	r2,1026
 400b5c4:	10b6f004 	addi	r2,r2,-9280
 400b5c8:	18c7883a 	add	r3,r3,r3
 400b5cc:	18c7883a 	add	r3,r3,r3
 400b5d0:	10c5883a 	add	r2,r2,r3
 400b5d4:	10800017 	ldw	r2,0(r2)
 400b5d8:	100b883a 	mov	r5,r2
 400b5dc:	010100b4 	movhi	r4,1026
 400b5e0:	21370004 	addi	r4,r4,-9216
 400b5e4:	400fd540 	call	400fd54 <printf>
			device = tpl_ptr->devclass;
 400b5e8:	e0bffe17 	ldw	r2,-8(fp)
 400b5ec:	10800103 	ldbu	r2,4(r2)
 400b5f0:	e0bffd45 	stb	r2,-11(fp)
	BYTE device = 0xFF;
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
	for (i = 1; i < USB_NUMDEVICES; i++) {
 400b5f4:	e0bffd03 	ldbu	r2,-12(fp)
 400b5f8:	10800044 	addi	r2,r2,1
 400b5fc:	e0bffd05 	stb	r2,-12(fp)
 400b600:	e0bffd03 	ldbu	r2,-12(fp)
 400b604:	10800230 	cmpltui	r2,r2,8
 400b608:	103fde1e 	bne	r2,zero,400b584 <__alt_mem_onchip_memory2_0+0xfc0063c4>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
			device = tpl_ptr->devclass;
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 400b60c:	d0a00303 	ldbu	r2,-32756(gp)
 400b610:	11003fcc 	andi	r4,r2,255
 400b614:	d0a7fc43 	ldbu	r2,-24591(gp)
 400b618:	10803fcc 	andi	r2,r2,255
 400b61c:	e0ffff44 	addi	r3,fp,-3
 400b620:	d8c00415 	stw	r3,16(sp)
 400b624:	00c00044 	movi	r3,1
 400b628:	d8c00315 	stw	r3,12(sp)
 400b62c:	d8800215 	stw	r2,8(sp)
 400b630:	d8000115 	stw	zero,4(sp)
 400b634:	d8000015 	stw	zero,0(sp)
 400b638:	01c00084 	movi	r7,2
 400b63c:	01802844 	movi	r6,161
 400b640:	000b883a 	mov	r5,zero
 400b644:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400b648:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 400b64c:	e0bfff03 	ldbu	r2,-4(fp)
 400b650:	10000926 	beq	r2,zero,400b678 <GetDriverandReport+0x124>
		printf("GetIdle Error. Error code: ");
 400b654:	010100b4 	movhi	r4,1026
 400b658:	21370204 	addi	r4,r4,-9208
 400b65c:	400fd540 	call	400fd54 <printf>
		printf("%x \n", rcode);
 400b660:	e0bfff03 	ldbu	r2,-4(fp)
 400b664:	100b883a 	mov	r5,r2
 400b668:	010100b4 	movhi	r4,1026
 400b66c:	21370904 	addi	r4,r4,-9180
 400b670:	400fd540 	call	400fd54 <printf>
 400b674:	00000906 	br	400b69c <GetDriverandReport+0x148>
	} else {
		printf("Update rate: ");
 400b678:	010100b4 	movhi	r4,1026
 400b67c:	21370b04 	addi	r4,r4,-9172
 400b680:	400fd540 	call	400fd54 <printf>
		printf("%x \n", tmpbyte);
 400b684:	e0bfff43 	ldbu	r2,-3(fp)
 400b688:	10803fcc 	andi	r2,r2,255
 400b68c:	100b883a 	mov	r5,r2
 400b690:	010100b4 	movhi	r4,1026
 400b694:	21370904 	addi	r4,r4,-9180
 400b698:	400fd540 	call	400fd54 <printf>
	}
	printf("Protocol: ");
 400b69c:	010100b4 	movhi	r4,1026
 400b6a0:	21370f04 	addi	r4,r4,-9156
 400b6a4:	400fd540 	call	400fd54 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 400b6a8:	d0a00303 	ldbu	r2,-32756(gp)
 400b6ac:	11003fcc 	andi	r4,r2,255
 400b6b0:	d0a7fc43 	ldbu	r2,-24591(gp)
 400b6b4:	10803fcc 	andi	r2,r2,255
 400b6b8:	e0ffff44 	addi	r3,fp,-3
 400b6bc:	d8c00415 	stw	r3,16(sp)
 400b6c0:	00c00044 	movi	r3,1
 400b6c4:	d8c00315 	stw	r3,12(sp)
 400b6c8:	d8800215 	stw	r2,8(sp)
 400b6cc:	d8000115 	stw	zero,4(sp)
 400b6d0:	d8000015 	stw	zero,0(sp)
 400b6d4:	01c000c4 	movi	r7,3
 400b6d8:	01802844 	movi	r6,161
 400b6dc:	000b883a 	mov	r5,zero
 400b6e0:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400b6e4:	e0bfff05 	stb	r2,-4(fp)
	if (rcode) {   //error handling
 400b6e8:	e0bfff03 	ldbu	r2,-4(fp)
 400b6ec:	10000926 	beq	r2,zero,400b714 <GetDriverandReport+0x1c0>
		printf("GetProto Error. Error code ");
 400b6f0:	010100b4 	movhi	r4,1026
 400b6f4:	21371204 	addi	r4,r4,-9144
 400b6f8:	400fd540 	call	400fd54 <printf>
		printf("%x \n", rcode);
 400b6fc:	e0bfff03 	ldbu	r2,-4(fp)
 400b700:	100b883a 	mov	r5,r2
 400b704:	010100b4 	movhi	r4,1026
 400b708:	21370904 	addi	r4,r4,-9180
 400b70c:	400fd540 	call	400fd54 <printf>
 400b710:	00000606 	br	400b72c <GetDriverandReport+0x1d8>
	} else {
		printf("%d \n", tmpbyte);
 400b714:	e0bfff43 	ldbu	r2,-3(fp)
 400b718:	10803fcc 	andi	r2,r2,255
 400b71c:	100b883a 	mov	r5,r2
 400b720:	010100b4 	movhi	r4,1026
 400b724:	21371904 	addi	r4,r4,-9116
 400b728:	400fd540 	call	400fd54 <printf>
	}
	return device;
 400b72c:	e0bffd43 	ldbu	r2,-11(fp)
}
 400b730:	e037883a 	mov	sp,fp
 400b734:	dfc00117 	ldw	ra,4(sp)
 400b738:	df000017 	ldw	fp,0(sp)
 400b73c:	dec00204 	addi	sp,sp,8
 400b740:	f800283a 	ret

0400b744 <setLED>:

void setLED(int LED) {
 400b744:	defffe04 	addi	sp,sp,-8
 400b748:	df000115 	stw	fp,4(sp)
 400b74c:	df000104 	addi	fp,sp,4
 400b750:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 400b754:	00820034 	movhi	r2,2048
 400b758:	10945404 	addi	r2,r2,20816
 400b75c:	10c00037 	ldwio	r3,0(r2)
 400b760:	01000044 	movi	r4,1
 400b764:	e0bfff17 	ldw	r2,-4(fp)
 400b768:	2084983a 	sll	r2,r4,r2
 400b76c:	1886b03a 	or	r3,r3,r2
 400b770:	00820034 	movhi	r2,2048
 400b774:	10945404 	addi	r2,r2,20816
 400b778:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 400b77c:	0001883a 	nop
 400b780:	e037883a 	mov	sp,fp
 400b784:	df000017 	ldw	fp,0(sp)
 400b788:	dec00104 	addi	sp,sp,4
 400b78c:	f800283a 	ret

0400b790 <clearLED>:

void clearLED(int LED) {
 400b790:	defffe04 	addi	sp,sp,-8
 400b794:	df000115 	stw	fp,4(sp)
 400b798:	df000104 	addi	fp,sp,4
 400b79c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 400b7a0:	00820034 	movhi	r2,2048
 400b7a4:	10945404 	addi	r2,r2,20816
 400b7a8:	10c00037 	ldwio	r3,0(r2)
 400b7ac:	01000044 	movi	r4,1
 400b7b0:	e0bfff17 	ldw	r2,-4(fp)
 400b7b4:	2084983a 	sll	r2,r4,r2
 400b7b8:	0084303a 	nor	r2,zero,r2
 400b7bc:	1886703a 	and	r3,r3,r2
 400b7c0:	00820034 	movhi	r2,2048
 400b7c4:	10945404 	addi	r2,r2,20816
 400b7c8:	10c00035 	stwio	r3,0(r2)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 400b7cc:	0001883a 	nop
 400b7d0:	e037883a 	mov	sp,fp
 400b7d4:	df000017 	ldw	fp,0(sp)
 400b7d8:	dec00104 	addi	sp,sp,4
 400b7dc:	f800283a 	ret

0400b7e0 <printSignedHex0>:

void printSignedHex0(signed char value) {
 400b7e0:	defffc04 	addi	sp,sp,-16
 400b7e4:	dfc00315 	stw	ra,12(sp)
 400b7e8:	df000215 	stw	fp,8(sp)
 400b7ec:	df000204 	addi	fp,sp,8
 400b7f0:	2005883a 	mov	r2,r4
 400b7f4:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 400b7f8:	e03ffe05 	stb	zero,-8(fp)
	BYTE ones = 0;
 400b7fc:	e03ffe45 	stb	zero,-7(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400b800:	00820034 	movhi	r2,2048
 400b804:	10945804 	addi	r2,r2,20832
 400b808:	10800037 	ldwio	r2,0(r2)
 400b80c:	e0bffe8d 	sth	r2,-6(fp)
	if (value < 0) {
 400b810:	e0bfff07 	ldb	r2,-4(fp)
 400b814:	1000060e 	bge	r2,zero,400b830 <printSignedHex0+0x50>
		setLED(11);
 400b818:	010002c4 	movi	r4,11
 400b81c:	400b7440 	call	400b744 <setLED>
		value = -value;
 400b820:	e0bfff03 	ldbu	r2,-4(fp)
 400b824:	0085c83a 	sub	r2,zero,r2
 400b828:	e0bfff05 	stb	r2,-4(fp)
 400b82c:	00000206 	br	400b838 <printSignedHex0+0x58>
	} else {
		clearLED(11);
 400b830:	010002c4 	movi	r4,11
 400b834:	400b7900 	call	400b790 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 400b838:	e0bfff03 	ldbu	r2,-4(fp)
 400b83c:	108018c4 	addi	r2,r2,99
 400b840:	10803fcc 	andi	r2,r2,255
 400b844:	108031f0 	cmpltui	r2,r2,199
 400b848:	1000031e 	bne	r2,zero,400b858 <printSignedHex0+0x78>
		setLED(13);
 400b84c:	01000344 	movi	r4,13
 400b850:	400b7440 	call	400b744 <setLED>
 400b854:	00000206 	br	400b860 <printSignedHex0+0x80>
	else
		clearLED(13);
 400b858:	01000344 	movi	r4,13
 400b85c:	400b7900 	call	400b790 <clearLED>

	value = value % 100;
 400b860:	e0bfff07 	ldb	r2,-4(fp)
 400b864:	01401904 	movi	r5,100
 400b868:	1009883a 	mov	r4,r2
 400b86c:	400dba40 	call	400dba4 <__modsi3>
 400b870:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 400b874:	e0bfff07 	ldb	r2,-4(fp)
 400b878:	01400284 	movi	r5,10
 400b87c:	1009883a 	mov	r4,r2
 400b880:	400db200 	call	400db20 <__divsi3>
 400b884:	e0bffe05 	stb	r2,-8(fp)
	ones = value % 10;
 400b888:	e0bfff07 	ldb	r2,-4(fp)
 400b88c:	01400284 	movi	r5,10
 400b890:	1009883a 	mov	r4,r2
 400b894:	400dba40 	call	400dba4 <__modsi3>
 400b898:	e0bffe45 	stb	r2,-7(fp)

	pio_val &= 0x00FF;
 400b89c:	e0bffe8b 	ldhu	r2,-6(fp)
 400b8a0:	10803fcc 	andi	r2,r2,255
 400b8a4:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (tens << 12);
 400b8a8:	e0bffe03 	ldbu	r2,-8(fp)
 400b8ac:	1004933a 	slli	r2,r2,12
 400b8b0:	1007883a 	mov	r3,r2
 400b8b4:	e0bffe8b 	ldhu	r2,-6(fp)
 400b8b8:	1884b03a 	or	r2,r3,r2
 400b8bc:	e0bffe8d 	sth	r2,-6(fp)
	pio_val |= (ones << 8);
 400b8c0:	e0bffe43 	ldbu	r2,-7(fp)
 400b8c4:	1004923a 	slli	r2,r2,8
 400b8c8:	1007883a 	mov	r3,r2
 400b8cc:	e0bffe8b 	ldhu	r2,-6(fp)
 400b8d0:	1884b03a 	or	r2,r3,r2
 400b8d4:	e0bffe8d 	sth	r2,-6(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 400b8d8:	e0fffe8b 	ldhu	r3,-6(fp)
 400b8dc:	00820034 	movhi	r2,2048
 400b8e0:	10945804 	addi	r2,r2,20832
 400b8e4:	10c00035 	stwio	r3,0(r2)
}
 400b8e8:	0001883a 	nop
 400b8ec:	e037883a 	mov	sp,fp
 400b8f0:	dfc00117 	ldw	ra,4(sp)
 400b8f4:	df000017 	ldw	fp,0(sp)
 400b8f8:	dec00204 	addi	sp,sp,8
 400b8fc:	f800283a 	ret

0400b900 <printSignedHex1>:

void printSignedHex1(signed char value) {
 400b900:	defffb04 	addi	sp,sp,-20
 400b904:	dfc00415 	stw	ra,16(sp)
 400b908:	df000315 	stw	fp,12(sp)
 400b90c:	df000304 	addi	fp,sp,12
 400b910:	2005883a 	mov	r2,r4
 400b914:	e0bfff05 	stb	r2,-4(fp)
	BYTE tens = 0;
 400b918:	e03ffd05 	stb	zero,-12(fp)
	BYTE ones = 0;
 400b91c:	e03ffd45 	stb	zero,-11(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 400b920:	00820034 	movhi	r2,2048
 400b924:	10945804 	addi	r2,r2,20832
 400b928:	10800037 	ldwio	r2,0(r2)
 400b92c:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 400b930:	e0bfff07 	ldb	r2,-4(fp)
 400b934:	1000060e 	bge	r2,zero,400b950 <printSignedHex1+0x50>
		setLED(10);
 400b938:	01000284 	movi	r4,10
 400b93c:	400b7440 	call	400b744 <setLED>
		value = -value;
 400b940:	e0bfff03 	ldbu	r2,-4(fp)
 400b944:	0085c83a 	sub	r2,zero,r2
 400b948:	e0bfff05 	stb	r2,-4(fp)
 400b94c:	00000206 	br	400b958 <printSignedHex1+0x58>
	} else {
		clearLED(10);
 400b950:	01000284 	movi	r4,10
 400b954:	400b7900 	call	400b790 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 400b958:	e0bfff03 	ldbu	r2,-4(fp)
 400b95c:	108018c4 	addi	r2,r2,99
 400b960:	10803fcc 	andi	r2,r2,255
 400b964:	108031f0 	cmpltui	r2,r2,199
 400b968:	1000031e 	bne	r2,zero,400b978 <printSignedHex1+0x78>
		setLED(12);
 400b96c:	01000304 	movi	r4,12
 400b970:	400b7440 	call	400b744 <setLED>
 400b974:	00000206 	br	400b980 <printSignedHex1+0x80>
	else
		clearLED(12);
 400b978:	01000304 	movi	r4,12
 400b97c:	400b7900 	call	400b790 <clearLED>

	value = value % 100;
 400b980:	e0bfff07 	ldb	r2,-4(fp)
 400b984:	01401904 	movi	r5,100
 400b988:	1009883a 	mov	r4,r2
 400b98c:	400dba40 	call	400dba4 <__modsi3>
 400b990:	e0bfff05 	stb	r2,-4(fp)
	tens = value / 10;
 400b994:	e0bfff07 	ldb	r2,-4(fp)
 400b998:	01400284 	movi	r5,10
 400b99c:	1009883a 	mov	r4,r2
 400b9a0:	400db200 	call	400db20 <__divsi3>
 400b9a4:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 400b9a8:	e0bfff07 	ldb	r2,-4(fp)
 400b9ac:	01400284 	movi	r5,10
 400b9b0:	1009883a 	mov	r4,r2
 400b9b4:	400dba40 	call	400dba4 <__modsi3>
 400b9b8:	e0bffd45 	stb	r2,-11(fp)
	tens = value / 10;
 400b9bc:	e0bfff07 	ldb	r2,-4(fp)
 400b9c0:	01400284 	movi	r5,10
 400b9c4:	1009883a 	mov	r4,r2
 400b9c8:	400db200 	call	400db20 <__divsi3>
 400b9cc:	e0bffd05 	stb	r2,-12(fp)
	ones = value % 10;
 400b9d0:	e0bfff07 	ldb	r2,-4(fp)
 400b9d4:	01400284 	movi	r5,10
 400b9d8:	1009883a 	mov	r4,r2
 400b9dc:	400dba40 	call	400dba4 <__modsi3>
 400b9e0:	e0bffd45 	stb	r2,-11(fp)

	pio_val &= 0xFF00;
 400b9e4:	e0bffe17 	ldw	r2,-8(fp)
 400b9e8:	10bfc00c 	andi	r2,r2,65280
 400b9ec:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 400b9f0:	e0bffd03 	ldbu	r2,-12(fp)
 400b9f4:	1004913a 	slli	r2,r2,4
 400b9f8:	1007883a 	mov	r3,r2
 400b9fc:	e0bffe17 	ldw	r2,-8(fp)
 400ba00:	10c4b03a 	or	r2,r2,r3
 400ba04:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 400ba08:	e0bffd43 	ldbu	r2,-11(fp)
 400ba0c:	e0fffe17 	ldw	r3,-8(fp)
 400ba10:	1884b03a 	or	r2,r3,r2
 400ba14:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 400ba18:	e0fffe17 	ldw	r3,-8(fp)
 400ba1c:	00820034 	movhi	r2,2048
 400ba20:	10945804 	addi	r2,r2,20832
 400ba24:	10c00035 	stwio	r3,0(r2)
}
 400ba28:	0001883a 	nop
 400ba2c:	e037883a 	mov	sp,fp
 400ba30:	dfc00117 	ldw	ra,4(sp)
 400ba34:	df000017 	ldw	fp,0(sp)
 400ba38:	dec00204 	addi	sp,sp,8
 400ba3c:	f800283a 	ret

0400ba40 <setKeycode>:

void setKeycode(WORD keycode)
{
 400ba40:	defffe04 	addi	sp,sp,-8
 400ba44:	df000115 	stw	fp,4(sp)
 400ba48:	df000104 	addi	fp,sp,4
 400ba4c:	2005883a 	mov	r2,r4
 400ba50:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
 400ba54:	e0ffff0b 	ldhu	r3,-4(fp)
 400ba58:	00820034 	movhi	r2,2048
 400ba5c:	10946804 	addi	r2,r2,20896
 400ba60:	10c00035 	stwio	r3,0(r2)
}
 400ba64:	0001883a 	nop
 400ba68:	e037883a 	mov	sp,fp
 400ba6c:	df000017 	ldw	fp,0(sp)
 400ba70:	dec00104 	addi	sp,sp,4
 400ba74:	f800283a 	ret

0400ba78 <keyboardDriver>:
int keyboardDriver(int key) {
 400ba78:	defffa04 	addi	sp,sp,-24
 400ba7c:	dfc00515 	stw	ra,20(sp)
 400ba80:	df000415 	stw	fp,16(sp)
 400ba84:	df000404 	addi	fp,sp,16
 400ba88:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	BOOT_KBD_REPORT kbdbuf;
	WORD keycode;
	MAX3421E_Task();
 400ba8c:	400ca640 	call	400ca64 <MAX3421E_Task>
	USB_Task();
 400ba90:	400d2600 	call	400d260 <USB_Task>
	//run keyboard debug polling
	rcode = kbdPoll(&kbdbuf);
 400ba94:	e0bffc44 	addi	r2,fp,-15
 400ba98:	1009883a 	mov	r4,r2
 400ba9c:	400c3a80 	call	400c3a8 <kbdPoll>
 400baa0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {
 400baa4:	e0bffc03 	ldbu	r2,-16(fp)
 400baa8:	10000226 	beq	r2,zero,400bab4 <keyboardDriver+0x3c>
		return key;
 400baac:	e0bfff17 	ldw	r2,-4(fp)
 400bab0:	00000206 	br	400babc <keyboardDriver+0x44>
	}
	return (int)kbdbuf.keycode[0];
 400bab4:	e0bffcc3 	ldbu	r2,-13(fp)
 400bab8:	10803fcc 	andi	r2,r2,255
}
 400babc:	e037883a 	mov	sp,fp
 400bac0:	dfc00117 	ldw	ra,4(sp)
 400bac4:	df000017 	ldw	fp,0(sp)
 400bac8:	dec00204 	addi	sp,sp,8
 400bacc:	f800283a 	ret

0400bad0 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 400bad0:	defff204 	addi	sp,sp,-56
 400bad4:	dfc00d15 	stw	ra,52(sp)
 400bad8:	df000c15 	stw	fp,48(sp)
 400badc:	df000c04 	addi	fp,sp,48
 400bae0:	2005883a 	mov	r2,r4
 400bae4:	e17fff15 	stw	r5,-4(fp)
 400bae8:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 400baec:	008100b4 	movhi	r2,1026
 400baf0:	1088c804 	addi	r2,r2,8992
 400baf4:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 400baf8:	008100b4 	movhi	r2,1026
 400bafc:	1088c804 	addi	r2,r2,8992
 400bb00:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 400bb04:	e0fffe03 	ldbu	r3,-8(fp)
 400bb08:	008100b4 	movhi	r2,1026
 400bb0c:	1088c804 	addi	r2,r2,8992
 400bb10:	d8800415 	stw	r2,16(sp)
 400bb14:	00800244 	movi	r2,9
 400bb18:	d8800315 	stw	r2,12(sp)
 400bb1c:	d8000215 	stw	zero,8(sp)
 400bb20:	00800084 	movi	r2,2
 400bb24:	d8800115 	stw	r2,4(sp)
 400bb28:	d8000015 	stw	zero,0(sp)
 400bb2c:	01c00184 	movi	r7,6
 400bb30:	01802004 	movi	r6,128
 400bb34:	000b883a 	mov	r5,zero
 400bb38:	1809883a 	mov	r4,r3
 400bb3c:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400bb40:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 400bb44:	e0bffc03 	ldbu	r2,-16(fp)
 400bb48:	10000226 	beq	r2,zero,400bb54 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 400bb4c:	0005883a 	mov	r2,zero
 400bb50:	0000dc06 	br	400bec4 <HIDMProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 400bb54:	e0bffa17 	ldw	r2,-24(fp)
 400bb58:	1080008b 	ldhu	r2,2(r2)
 400bb5c:	10bfffcc 	andi	r2,r2,65535
 400bb60:	10804070 	cmpltui	r2,r2,257
 400bb64:	1000031e 	bne	r2,zero,400bb74 <HIDMProbe+0xa4>
		total_length = 256;
 400bb68:	00804004 	movi	r2,256
 400bb6c:	e0bff90d 	sth	r2,-28(fp)
 400bb70:	00000306 	br	400bb80 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 400bb74:	e0bffa17 	ldw	r2,-24(fp)
 400bb78:	1080008b 	ldhu	r2,2(r2)
 400bb7c:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 400bb80:	e13ffe03 	ldbu	r4,-8(fp)
 400bb84:	e0fff90b 	ldhu	r3,-28(fp)
 400bb88:	008100b4 	movhi	r2,1026
 400bb8c:	1088c804 	addi	r2,r2,8992
 400bb90:	d8800415 	stw	r2,16(sp)
 400bb94:	d8c00315 	stw	r3,12(sp)
 400bb98:	d8000215 	stw	zero,8(sp)
 400bb9c:	00800084 	movi	r2,2
 400bba0:	d8800115 	stw	r2,4(sp)
 400bba4:	d8000015 	stw	zero,0(sp)
 400bba8:	01c00184 	movi	r7,6
 400bbac:	01802004 	movi	r6,128
 400bbb0:	000b883a 	mov	r5,zero
 400bbb4:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400bbb8:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 400bbbc:	e0bffc03 	ldbu	r2,-16(fp)
 400bbc0:	10000226 	beq	r2,zero,400bbcc <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 400bbc4:	0005883a 	mov	r2,zero
 400bbc8:	0000be06 	br	400bec4 <HIDMProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 400bbcc:	e0bffa17 	ldw	r2,-24(fp)
 400bbd0:	10800143 	ldbu	r2,5(r2)
 400bbd4:	e0bffc45 	stb	r2,-15(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 400bbd8:	0000b306 	br	400bea8 <HIDMProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 400bbdc:	e0bffa17 	ldw	r2,-24(fp)
 400bbe0:	10800043 	ldbu	r2,1(r2)
 400bbe4:	10803fcc 	andi	r2,r2,255
 400bbe8:	10800120 	cmpeqi	r2,r2,4
 400bbec:	1000091e 	bne	r2,zero,400bc14 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400bbf0:	e0bffa17 	ldw	r2,-24(fp)
 400bbf4:	10800003 	ldbu	r2,0(r2)
 400bbf8:	10803fcc 	andi	r2,r2,255
 400bbfc:	e0fffb17 	ldw	r3,-20(fp)
 400bc00:	1885883a 	add	r2,r3,r2
 400bc04:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 400bc08:	e0bffb17 	ldw	r2,-20(fp)
 400bc0c:	e0bffa15 	stw	r2,-24(fp)
 400bc10:	0000a506 	br	400bea8 <HIDMProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 400bc14:	e0bffa17 	ldw	r2,-24(fp)
 400bc18:	10800143 	ldbu	r2,5(r2)
 400bc1c:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 400bc20:	e0bffa17 	ldw	r2,-24(fp)
 400bc24:	10800183 	ldbu	r2,6(r2)
 400bc28:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 400bc2c:	e0bffa17 	ldw	r2,-24(fp)
 400bc30:	108001c3 	ldbu	r2,7(r2)
 400bc34:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 400bc38:	e0bffc83 	ldbu	r2,-14(fp)
 400bc3c:	108000d8 	cmpnei	r2,r2,3
 400bc40:	1000971e 	bne	r2,zero,400bea0 <HIDMProbe+0x3d0>
 400bc44:	e0bffcc3 	ldbu	r2,-13(fp)
 400bc48:	10800058 	cmpnei	r2,r2,1
 400bc4c:	1000941e 	bne	r2,zero,400bea0 <HIDMProbe+0x3d0>
					&& protocol == HID_PROTOCOL_MOUSE) {
 400bc50:	e0bffd03 	ldbu	r2,-12(fp)
 400bc54:	10800098 	cmpnei	r2,r2,2
 400bc58:	1000911e 	bne	r2,zero,400bea0 <HIDMProbe+0x3d0>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 400bc5c:	e0fffe03 	ldbu	r3,-8(fp)
 400bc60:	008100b4 	movhi	r2,1026
 400bc64:	10890804 	addi	r2,r2,9248
 400bc68:	180690fa 	slli	r3,r3,3
 400bc6c:	10c5883a 	add	r2,r2,r3
 400bc70:	10800104 	addi	r2,r2,4
 400bc74:	00c00084 	movi	r3,2
 400bc78:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 400bc7c:	e0fffe03 	ldbu	r3,-8(fp)
 400bc80:	008100b4 	movhi	r2,1026
 400bc84:	10890804 	addi	r2,r2,9248
 400bc88:	180690fa 	slli	r3,r3,3
 400bc8c:	10c5883a 	add	r2,r2,r3
 400bc90:	10800017 	ldw	r2,0(r2)
 400bc94:	1080008b 	ldhu	r2,2(r2)
 400bc98:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 400bc9c:	400c2e00 	call	400c2e0 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 400bca0:	e0fffe03 	ldbu	r3,-8(fp)
 400bca4:	008100b4 	movhi	r2,1026
 400bca8:	10890804 	addi	r2,r2,9248
 400bcac:	180690fa 	slli	r3,r3,3
 400bcb0:	10c7883a 	add	r3,r2,r3
 400bcb4:	008100b4 	movhi	r2,1026
 400bcb8:	1087ec04 	addi	r2,r2,8112
 400bcbc:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 400bcc0:	e0fffe03 	ldbu	r3,-8(fp)
 400bcc4:	008100b4 	movhi	r2,1026
 400bcc8:	10890804 	addi	r2,r2,9248
 400bccc:	180690fa 	slli	r3,r3,3
 400bcd0:	10c5883a 	add	r2,r2,r3
 400bcd4:	10800017 	ldw	r2,0(r2)
 400bcd8:	e0fffd43 	ldbu	r3,-11(fp)
 400bcdc:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 400bce0:	e0bffa17 	ldw	r2,-24(fp)
 400bce4:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_M;                  //device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
				hid_device.interface =
 400bce8:	d0a7fc45 	stb	r2,-24591(gp)
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
 400bcec:	e0bffe03 	ldbu	r2,-8(fp)
 400bcf0:	d0a7fc05 	stb	r2,-24592(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400bcf4:	e0bffa17 	ldw	r2,-24(fp)
 400bcf8:	10800003 	ldbu	r2,0(r2)
 400bcfc:	10803fcc 	andi	r2,r2,255
 400bd00:	e0fffb17 	ldw	r3,-20(fp)
 400bd04:	1885883a 	add	r2,r3,r2
 400bd08:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 400bd0c:	e0bffb17 	ldw	r2,-20(fp)
 400bd10:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 400bd14:	00005b06 	br	400be84 <HIDMProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 400bd18:	e0bffa17 	ldw	r2,-24(fp)
 400bd1c:	10800043 	ldbu	r2,1(r2)
 400bd20:	10803fcc 	andi	r2,r2,255
 400bd24:	10800160 	cmpeqi	r2,r2,5
 400bd28:	1000091e 	bne	r2,zero,400bd50 <HIDMProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400bd2c:	e0bffa17 	ldw	r2,-24(fp)
 400bd30:	10800003 	ldbu	r2,0(r2)
 400bd34:	10803fcc 	andi	r2,r2,255
 400bd38:	e0fffb17 	ldw	r3,-20(fp)
 400bd3c:	1885883a 	add	r2,r3,r2
 400bd40:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 400bd44:	e0bffb17 	ldw	r2,-20(fp)
 400bd48:	e0bffa15 	stw	r2,-24(fp)
 400bd4c:	00004d06 	br	400be84 <HIDMProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 400bd50:	e0fffe03 	ldbu	r3,-8(fp)
 400bd54:	008100b4 	movhi	r2,1026
 400bd58:	10890804 	addi	r2,r2,9248
 400bd5c:	180690fa 	slli	r3,r3,3
 400bd60:	10c5883a 	add	r2,r2,r3
 400bd64:	10800017 	ldw	r2,0(r2)
 400bd68:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 400bd6c:	e0fffa17 	ldw	r3,-24(fp)
 400bd70:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 400bd74:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 400bd78:	e0fffe03 	ldbu	r3,-8(fp)
 400bd7c:	008100b4 	movhi	r2,1026
 400bd80:	10890804 	addi	r2,r2,9248
 400bd84:	180690fa 	slli	r3,r3,3
 400bd88:	10c5883a 	add	r2,r2,r3
 400bd8c:	10800017 	ldw	r2,0(r2)
 400bd90:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 400bd94:	e0fffa17 	ldw	r3,-24(fp)
 400bd98:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 400bd9c:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 400bda0:	e0fffe03 	ldbu	r3,-8(fp)
 400bda4:	008100b4 	movhi	r2,1026
 400bda8:	10890804 	addi	r2,r2,9248
 400bdac:	180690fa 	slli	r3,r3,3
 400bdb0:	10c5883a 	add	r2,r2,r3
 400bdb4:	10800017 	ldw	r2,0(r2)
 400bdb8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 400bdbc:	e0fffa17 	ldw	r3,-24(fp)
 400bdc0:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 400bdc4:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 400bdc8:	e0fffe03 	ldbu	r3,-8(fp)
 400bdcc:	008100b4 	movhi	r2,1026
 400bdd0:	10890804 	addi	r2,r2,9248
 400bdd4:	180690fa 	slli	r3,r3,3
 400bdd8:	10c5883a 	add	r2,r2,r3
 400bddc:	10800017 	ldw	r2,0(r2)
 400bde0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 400bde4:	e0fffa17 	ldw	r3,-24(fp)
 400bde8:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 400bdec:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 400bdf0:	e0fffe03 	ldbu	r3,-8(fp)
 400bdf4:	e0bffc43 	ldbu	r2,-15(fp)
 400bdf8:	d8000415 	stw	zero,16(sp)
 400bdfc:	d8000315 	stw	zero,12(sp)
 400be00:	d8000215 	stw	zero,8(sp)
 400be04:	d8000115 	stw	zero,4(sp)
 400be08:	d8800015 	stw	r2,0(sp)
 400be0c:	01c00244 	movi	r7,9
 400be10:	000d883a 	mov	r6,zero
 400be14:	000b883a 	mov	r5,zero
 400be18:	1809883a 	mov	r4,r3
 400be1c:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400be20:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 400be24:	e0bffc03 	ldbu	r2,-16(fp)
 400be28:	10000226 	beq	r2,zero,400be34 <HIDMProbe+0x364>
							return (FALSE);
 400be2c:	0005883a 	mov	r2,zero
 400be30:	00002406 	br	400bec4 <HIDMProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 400be34:	e0fffe03 	ldbu	r3,-8(fp)
 400be38:	d0a7fc43 	ldbu	r2,-24591(gp)
 400be3c:	10803fcc 	andi	r2,r2,255
 400be40:	d8000415 	stw	zero,16(sp)
 400be44:	d8000315 	stw	zero,12(sp)
 400be48:	d8800215 	stw	r2,8(sp)
 400be4c:	d8000115 	stw	zero,4(sp)
 400be50:	d8000015 	stw	zero,0(sp)
 400be54:	01c002c4 	movi	r7,11
 400be58:	01800844 	movi	r6,33
 400be5c:	000b883a 	mov	r5,zero
 400be60:	1809883a 	mov	r4,r3
 400be64:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400be68:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 400be6c:	e0bffc03 	ldbu	r2,-16(fp)
 400be70:	10000226 	beq	r2,zero,400be7c <HIDMProbe+0x3ac>
							return (FALSE);
 400be74:	0005883a 	mov	r2,zero
 400be78:	00001206 	br	400bec4 <HIDMProbe+0x3f4>
						} else {
							return (TRUE);
 400be7c:	00800044 	movi	r2,1
 400be80:	00001006 	br	400bec4 <HIDMProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
				hid_device.addr = addr;
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 400be84:	e0fff90b 	ldhu	r3,-28(fp)
 400be88:	008100b4 	movhi	r2,1026
 400be8c:	1088c804 	addi	r2,r2,8992
 400be90:	1885883a 	add	r2,r3,r2
 400be94:	e0fffb17 	ldw	r3,-20(fp)
 400be98:	18bf9f36 	bltu	r3,r2,400bd18 <__alt_mem_onchip_memory2_0+0xfc006b58>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 400be9c:	00000206 	br	400bea8 <HIDMProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 400bea0:	0005883a 	mov	r2,zero
 400bea4:	00000706 	br	400bec4 <HIDMProbe+0x3f4>
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 400bea8:	e0fff90b 	ldhu	r3,-28(fp)
 400beac:	008100b4 	movhi	r2,1026
 400beb0:	1088c804 	addi	r2,r2,8992
 400beb4:	1885883a 	add	r2,r3,r2
 400beb8:	e0fffb17 	ldw	r3,-20(fp)
 400bebc:	18bf4736 	bltu	r3,r2,400bbdc <__alt_mem_onchip_memory2_0+0xfc006a1c>
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 400bec0:	0005883a 	mov	r2,zero
}
 400bec4:	e037883a 	mov	sp,fp
 400bec8:	dfc00117 	ldw	ra,4(sp)
 400becc:	df000017 	ldw	fp,0(sp)
 400bed0:	dec00204 	addi	sp,sp,8
 400bed4:	f800283a 	ret

0400bed8 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 400bed8:	defff204 	addi	sp,sp,-56
 400bedc:	dfc00d15 	stw	ra,52(sp)
 400bee0:	df000c15 	stw	fp,48(sp)
 400bee4:	df000c04 	addi	fp,sp,48
 400bee8:	2005883a 	mov	r2,r4
 400beec:	e17fff15 	stw	r5,-4(fp)
 400bef0:	e0bffe05 	stb	r2,-8(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 400bef4:	008100b4 	movhi	r2,1026
 400bef8:	1088c804 	addi	r2,r2,8992
 400befc:	e0bffa15 	stw	r2,-24(fp)
	BYTE* byte_ptr = bigbuf;
 400bf00:	008100b4 	movhi	r2,1026
 400bf04:	1088c804 	addi	r2,r2,8992
 400bf08:	e0bffb15 	stw	r2,-20(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 400bf0c:	e0fffe03 	ldbu	r3,-8(fp)
 400bf10:	008100b4 	movhi	r2,1026
 400bf14:	1088c804 	addi	r2,r2,8992
 400bf18:	d8800415 	stw	r2,16(sp)
 400bf1c:	00800244 	movi	r2,9
 400bf20:	d8800315 	stw	r2,12(sp)
 400bf24:	d8000215 	stw	zero,8(sp)
 400bf28:	00800084 	movi	r2,2
 400bf2c:	d8800115 	stw	r2,4(sp)
 400bf30:	d8000015 	stw	zero,0(sp)
 400bf34:	01c00184 	movi	r7,6
 400bf38:	01802004 	movi	r6,128
 400bf3c:	000b883a 	mov	r5,zero
 400bf40:	1809883a 	mov	r4,r3
 400bf44:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400bf48:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling           
 400bf4c:	e0bffc03 	ldbu	r2,-16(fp)
 400bf50:	10000226 	beq	r2,zero,400bf5c <HIDKProbe+0x84>
		return (FALSE);
 400bf54:	0005883a 	mov	r2,zero
 400bf58:	0000dc06 	br	400c2cc <HIDKProbe+0x3f4>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 400bf5c:	e0bffa17 	ldw	r2,-24(fp)
 400bf60:	1080008b 	ldhu	r2,2(r2)
 400bf64:	10bfffcc 	andi	r2,r2,65535
 400bf68:	10804070 	cmpltui	r2,r2,257
 400bf6c:	1000031e 	bne	r2,zero,400bf7c <HIDKProbe+0xa4>
		total_length = 256;
 400bf70:	00804004 	movi	r2,256
 400bf74:	e0bff90d 	sth	r2,-28(fp)
 400bf78:	00000306 	br	400bf88 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 400bf7c:	e0bffa17 	ldw	r2,-24(fp)
 400bf80:	1080008b 	ldhu	r2,2(r2)
 400bf84:	e0bff90d 	sth	r2,-28(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 400bf88:	e13ffe03 	ldbu	r4,-8(fp)
 400bf8c:	e0fff90b 	ldhu	r3,-28(fp)
 400bf90:	008100b4 	movhi	r2,1026
 400bf94:	1088c804 	addi	r2,r2,8992
 400bf98:	d8800415 	stw	r2,16(sp)
 400bf9c:	d8c00315 	stw	r3,12(sp)
 400bfa0:	d8000215 	stw	zero,8(sp)
 400bfa4:	00800084 	movi	r2,2
 400bfa8:	d8800115 	stw	r2,4(sp)
 400bfac:	d8000015 	stw	zero,0(sp)
 400bfb0:	01c00184 	movi	r7,6
 400bfb4:	01802004 	movi	r6,128
 400bfb8:	000b883a 	mov	r5,zero
 400bfbc:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400bfc0:	e0bffc05 	stb	r2,-16(fp)
	if (rcode) {   //error handling
 400bfc4:	e0bffc03 	ldbu	r2,-16(fp)
 400bfc8:	10000226 	beq	r2,zero,400bfd4 <HIDKProbe+0xfc>
		return (FALSE);
 400bfcc:	0005883a 	mov	r2,zero
 400bfd0:	0000be06 	br	400c2cc <HIDKProbe+0x3f4>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 400bfd4:	e0bffa17 	ldw	r2,-24(fp)
 400bfd8:	10800143 	ldbu	r2,5(r2)
 400bfdc:	e0bffc45 	stb	r2,-15(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 400bfe0:	0000b306 	br	400c2b0 <HIDKProbe+0x3d8>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 400bfe4:	e0bffa17 	ldw	r2,-24(fp)
 400bfe8:	10800043 	ldbu	r2,1(r2)
 400bfec:	10803fcc 	andi	r2,r2,255
 400bff0:	10800120 	cmpeqi	r2,r2,4
 400bff4:	1000091e 	bne	r2,zero,400c01c <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400bff8:	e0bffa17 	ldw	r2,-24(fp)
 400bffc:	10800003 	ldbu	r2,0(r2)
 400c000:	10803fcc 	andi	r2,r2,255
 400c004:	e0fffb17 	ldw	r3,-20(fp)
 400c008:	1885883a 	add	r2,r3,r2
 400c00c:	e0bffb15 	stw	r2,-20(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 400c010:	e0bffb17 	ldw	r2,-20(fp)
 400c014:	e0bffa15 	stw	r2,-24(fp)
 400c018:	0000a506 	br	400c2b0 <HIDKProbe+0x3d8>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 400c01c:	e0bffa17 	ldw	r2,-24(fp)
 400c020:	10800143 	ldbu	r2,5(r2)
 400c024:	e0bffc85 	stb	r2,-14(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 400c028:	e0bffa17 	ldw	r2,-24(fp)
 400c02c:	10800183 	ldbu	r2,6(r2)
 400c030:	e0bffcc5 	stb	r2,-13(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 400c034:	e0bffa17 	ldw	r2,-24(fp)
 400c038:	108001c3 	ldbu	r2,7(r2)
 400c03c:	e0bffd05 	stb	r2,-12(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 400c040:	e0bffc83 	ldbu	r2,-14(fp)
 400c044:	108000d8 	cmpnei	r2,r2,3
 400c048:	1000971e 	bne	r2,zero,400c2a8 <HIDKProbe+0x3d0>
 400c04c:	e0bffcc3 	ldbu	r2,-13(fp)
 400c050:	10800058 	cmpnei	r2,r2,1
 400c054:	1000941e 	bne	r2,zero,400c2a8 <HIDKProbe+0x3d0>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 400c058:	e0bffd03 	ldbu	r2,-12(fp)
 400c05c:	10800058 	cmpnei	r2,r2,1
 400c060:	1000911e 	bne	r2,zero,400c2a8 <HIDKProbe+0x3d0>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 400c064:	e0fffe03 	ldbu	r3,-8(fp)
 400c068:	008100b4 	movhi	r2,1026
 400c06c:	10890804 	addi	r2,r2,9248
 400c070:	180690fa 	slli	r3,r3,3
 400c074:	10c5883a 	add	r2,r2,r3
 400c078:	10800104 	addi	r2,r2,4
 400c07c:	00c00044 	movi	r3,1
 400c080:	10c00005 	stb	r3,0(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 400c084:	e0fffe03 	ldbu	r3,-8(fp)
 400c088:	008100b4 	movhi	r2,1026
 400c08c:	10890804 	addi	r2,r2,9248
 400c090:	180690fa 	slli	r3,r3,3
 400c094:	10c5883a 	add	r2,r2,r3
 400c098:	10800017 	ldw	r2,0(r2)
 400c09c:	1080008b 	ldhu	r2,2(r2)
 400c0a0:	e0bffd45 	stb	r2,-11(fp)
				HID_init();                         //initialize data structures
 400c0a4:	400c2e00 	call	400c2e0 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 400c0a8:	e0fffe03 	ldbu	r3,-8(fp)
 400c0ac:	008100b4 	movhi	r2,1026
 400c0b0:	10890804 	addi	r2,r2,9248
 400c0b4:	180690fa 	slli	r3,r3,3
 400c0b8:	10c7883a 	add	r3,r2,r3
 400c0bc:	008100b4 	movhi	r2,1026
 400c0c0:	1087ec04 	addi	r2,r2,8112
 400c0c4:	18800015 	stw	r2,0(r3)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 400c0c8:	e0fffe03 	ldbu	r3,-8(fp)
 400c0cc:	008100b4 	movhi	r2,1026
 400c0d0:	10890804 	addi	r2,r2,9248
 400c0d4:	180690fa 	slli	r3,r3,3
 400c0d8:	10c5883a 	add	r2,r2,r3
 400c0dc:	10800017 	ldw	r2,0(r2)
 400c0e0:	e0fffd43 	ldbu	r3,-11(fp)
 400c0e4:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 400c0e8:	e0bffa17 	ldw	r2,-24(fp)
 400c0ec:	10800083 	ldbu	r2,2(r2)
				devtable[addr].devclass = HID_K;             //fill device class
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
				HID_init();                         //initialize data structures
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
				hid_device.interface =
 400c0f0:	d0a7fc45 	stb	r2,-24591(gp)
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
 400c0f4:	e0bffe03 	ldbu	r2,-8(fp)
 400c0f8:	d0a7fc05 	stb	r2,-24592(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 400c0fc:	e0bffa17 	ldw	r2,-24(fp)
 400c100:	10800003 	ldbu	r2,0(r2)
 400c104:	10803fcc 	andi	r2,r2,255
 400c108:	e0fffb17 	ldw	r3,-20(fp)
 400c10c:	1885883a 	add	r2,r3,r2
 400c110:	e0bffb15 	stw	r2,-20(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 400c114:	e0bffb17 	ldw	r2,-20(fp)
 400c118:	e0bffa15 	stw	r2,-24(fp)
				while (byte_ptr < bigbuf + total_length) {
 400c11c:	00005b06 	br	400c28c <HIDKProbe+0x3b4>
					if (data_ptr->descr.config.bDescriptorType
 400c120:	e0bffa17 	ldw	r2,-24(fp)
 400c124:	10800043 	ldbu	r2,1(r2)
 400c128:	10803fcc 	andi	r2,r2,255
 400c12c:	10800160 	cmpeqi	r2,r2,5
 400c130:	1000091e 	bne	r2,zero,400c158 <HIDKProbe+0x280>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 400c134:	e0bffa17 	ldw	r2,-24(fp)
 400c138:	10800003 	ldbu	r2,0(r2)
 400c13c:	10803fcc 	andi	r2,r2,255
 400c140:	e0fffb17 	ldw	r3,-20(fp)
 400c144:	1885883a 	add	r2,r3,r2
 400c148:	e0bffb15 	stw	r2,-20(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 400c14c:	e0bffb17 	ldw	r2,-20(fp)
 400c150:	e0bffa15 	stw	r2,-24(fp)
 400c154:	00004d06 	br	400c28c <HIDKProbe+0x3b4>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 400c158:	e0fffe03 	ldbu	r3,-8(fp)
 400c15c:	008100b4 	movhi	r2,1026
 400c160:	10890804 	addi	r2,r2,9248
 400c164:	180690fa 	slli	r3,r3,3
 400c168:	10c5883a 	add	r2,r2,r3
 400c16c:	10800017 	ldw	r2,0(r2)
 400c170:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 400c174:	e0fffa17 	ldw	r3,-24(fp)
 400c178:	18c00083 	ldbu	r3,2(r3)
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 400c17c:	10c00005 	stb	r3,0(r2)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 400c180:	e0fffe03 	ldbu	r3,-8(fp)
 400c184:	008100b4 	movhi	r2,1026
 400c188:	10890804 	addi	r2,r2,9248
 400c18c:	180690fa 	slli	r3,r3,3
 400c190:	10c5883a 	add	r2,r2,r3
 400c194:	10800017 	ldw	r2,0(r2)
 400c198:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 400c19c:	e0fffa17 	ldw	r3,-24(fp)
 400c1a0:	18c000c3 	ldbu	r3,3(r3)
						data_ptr = (USB_DESCR*) byte_ptr;
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
 400c1a4:	10c00045 	stb	r3,1(r2)
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 400c1a8:	e0fffe03 	ldbu	r3,-8(fp)
 400c1ac:	008100b4 	movhi	r2,1026
 400c1b0:	10890804 	addi	r2,r2,9248
 400c1b4:	180690fa 	slli	r3,r3,3
 400c1b8:	10c5883a 	add	r2,r2,r3
 400c1bc:	10800017 	ldw	r2,0(r2)
 400c1c0:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 400c1c4:	e0fffa17 	ldw	r3,-24(fp)
 400c1c8:	18c0010b 	ldhu	r3,4(r3)
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
 400c1cc:	10c0008d 	sth	r3,2(r2)
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 400c1d0:	e0fffe03 	ldbu	r3,-8(fp)
 400c1d4:	008100b4 	movhi	r2,1026
 400c1d8:	10890804 	addi	r2,r2,9248
 400c1dc:	180690fa 	slli	r3,r3,3
 400c1e0:	10c5883a 	add	r2,r2,r3
 400c1e4:	10800017 	ldw	r2,0(r2)
 400c1e8:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 400c1ec:	e0fffa17 	ldw	r3,-24(fp)
 400c1f0:	18c00183 	ldbu	r3,6(r3)
								data_ptr->descr.endpoint.bEndpointAddress;
						devtable[addr].epinfo[1].Attr =
								data_ptr->descr.endpoint.bmAttributes;
						devtable[addr].epinfo[1].MaxPktSize =
								data_ptr->descr.endpoint.wMaxPacketSize;
						devtable[addr].epinfo[1].Interval =
 400c1f4:	10c00105 	stb	r3,4(r2)
								data_ptr->descr.endpoint.bInterval;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 400c1f8:	e0fffe03 	ldbu	r3,-8(fp)
 400c1fc:	e0bffc43 	ldbu	r2,-15(fp)
 400c200:	d8000415 	stw	zero,16(sp)
 400c204:	d8000315 	stw	zero,12(sp)
 400c208:	d8000215 	stw	zero,8(sp)
 400c20c:	d8000115 	stw	zero,4(sp)
 400c210:	d8800015 	stw	r2,0(sp)
 400c214:	01c00244 	movi	r7,9
 400c218:	000d883a 	mov	r6,zero
 400c21c:	000b883a 	mov	r5,zero
 400c220:	1809883a 	mov	r4,r3
 400c224:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400c228:	e0bffc05 	stb	r2,-16(fp)
						if (rcode) {   //error handling
 400c22c:	e0bffc03 	ldbu	r2,-16(fp)
 400c230:	10000226 	beq	r2,zero,400c23c <HIDKProbe+0x364>
							return (FALSE);
 400c234:	0005883a 	mov	r2,zero
 400c238:	00002406 	br	400c2cc <HIDKProbe+0x3f4>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 400c23c:	e0fffe03 	ldbu	r3,-8(fp)
 400c240:	d0a7fc43 	ldbu	r2,-24591(gp)
 400c244:	10803fcc 	andi	r2,r2,255
 400c248:	d8000415 	stw	zero,16(sp)
 400c24c:	d8000315 	stw	zero,12(sp)
 400c250:	d8800215 	stw	r2,8(sp)
 400c254:	d8000115 	stw	zero,4(sp)
 400c258:	d8000015 	stw	zero,0(sp)
 400c25c:	01c002c4 	movi	r7,11
 400c260:	01800844 	movi	r6,33
 400c264:	000b883a 	mov	r5,zero
 400c268:	1809883a 	mov	r4,r3
 400c26c:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400c270:	e0bffc05 	stb	r2,-16(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 400c274:	e0bffc03 	ldbu	r2,-16(fp)
 400c278:	10000226 	beq	r2,zero,400c284 <HIDKProbe+0x3ac>
							return (FALSE);
 400c27c:	0005883a 	mov	r2,zero
 400c280:	00001206 	br	400c2cc <HIDKProbe+0x3f4>
						} else {
							return (TRUE);
 400c284:	00800044 	movi	r2,1
 400c288:	00001006 	br	400c2cc <HIDKProbe+0x3f4>
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
				hid_device.addr = addr;                        //fill in address
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
				data_ptr = (USB_DESCR*) byte_ptr;
				while (byte_ptr < bigbuf + total_length) {
 400c28c:	e0fff90b 	ldhu	r3,-28(fp)
 400c290:	008100b4 	movhi	r2,1026
 400c294:	1088c804 	addi	r2,r2,8992
 400c298:	1885883a 	add	r2,r3,r2
 400c29c:	e0fffb17 	ldw	r3,-20(fp)
 400c2a0:	18bf9f36 	bltu	r3,r2,400c120 <__alt_mem_onchip_memory2_0+0xfc006f60>
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 400c2a4:	00000206 	br	400c2b0 <HIDKProbe+0x3d8>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 400c2a8:	0005883a 	mov	r2,zero
 400c2ac:	00000706 	br	400c2cc <HIDKProbe+0x3f4>
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
	if (rcode) {   //error handling
		return (FALSE);
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 400c2b0:	e0fff90b 	ldhu	r3,-28(fp)
 400c2b4:	008100b4 	movhi	r2,1026
 400c2b8:	1088c804 	addi	r2,r2,8992
 400c2bc:	1885883a 	add	r2,r3,r2
 400c2c0:	e0fffb17 	ldw	r3,-20(fp)
 400c2c4:	18bf4736 	bltu	r3,r2,400bfe4 <__alt_mem_onchip_memory2_0+0xfc006e24>
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 400c2c8:	0005883a 	mov	r2,zero
}
 400c2cc:	e037883a 	mov	sp,fp
 400c2d0:	dfc00117 	ldw	ra,4(sp)
 400c2d4:	df000017 	ldw	fp,0(sp)
 400c2d8:	dec00204 	addi	sp,sp,8
 400c2dc:	f800283a 	ret

0400c2e0 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 400c2e0:	deffff04 	addi	sp,sp,-4
 400c2e4:	df000015 	stw	fp,0(sp)
 400c2e8:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 400c2ec:	008100b4 	movhi	r2,1026
 400c2f0:	1087ec04 	addi	r2,r2,8112
 400c2f4:	00c01004 	movi	r3,64
 400c2f8:	10c00345 	stb	r3,13(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 400c2fc:	008100b4 	movhi	r2,1026
 400c300:	1087ec04 	addi	r2,r2,8112
 400c304:	00c00404 	movi	r3,16
 400c308:	10c00385 	stb	r3,14(r2)
}
 400c30c:	0001883a 	nop
 400c310:	e037883a 	mov	sp,fp
 400c314:	df000017 	ldw	fp,0(sp)
 400c318:	dec00104 	addi	sp,sp,4
 400c31c:	f800283a 	ret

0400c320 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 400c320:	defffb04 	addi	sp,sp,-20
 400c324:	dfc00415 	stw	ra,16(sp)
 400c328:	df000315 	stw	fp,12(sp)
 400c32c:	df000304 	addi	fp,sp,12
 400c330:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 400c334:	d0a7fc03 	ldbu	r2,-24592(gp)
 400c338:	10803fcc 	andi	r2,r2,255
 400c33c:	100b883a 	mov	r5,r2
 400c340:	01003804 	movi	r4,224
 400c344:	400c4fc0 	call	400c4fc <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 400c348:	d0a7fc03 	ldbu	r2,-24592(gp)
 400c34c:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 400c350:	d0a7fc03 	ldbu	r2,-24592(gp)
 400c354:	10c03fcc 	andi	r3,r2,255
 400c358:	008100b4 	movhi	r2,1026
 400c35c:	10890804 	addi	r2,r2,9248
 400c360:	180690fa 	slli	r3,r3,3
 400c364:	10c5883a 	add	r2,r2,r3
 400c368:	10800017 	ldw	r2,0(r2)
 400c36c:	10800204 	addi	r2,r2,8
 400c370:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 400c374:	10803fcc 	andi	r2,r2,255
 400c378:	d8800015 	stw	r2,0(sp)
 400c37c:	e1ffff17 	ldw	r7,-4(fp)
 400c380:	01800204 	movi	r6,8
 400c384:	01400044 	movi	r5,1
 400c388:	400d0140 	call	400d014 <XferInTransfer>
 400c38c:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 400c390:	e0bffe03 	ldbu	r2,-8(fp)
}
 400c394:	e037883a 	mov	sp,fp
 400c398:	dfc00117 	ldw	ra,4(sp)
 400c39c:	df000017 	ldw	fp,0(sp)
 400c3a0:	dec00204 	addi	sp,sp,8
 400c3a4:	f800283a 	ret

0400c3a8 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 400c3a8:	defffb04 	addi	sp,sp,-20
 400c3ac:	dfc00415 	stw	ra,16(sp)
 400c3b0:	df000315 	stw	fp,12(sp)
 400c3b4:	df000304 	addi	fp,sp,12
 400c3b8:	e13fff15 	stw	r4,-4(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 400c3bc:	d0a7fc03 	ldbu	r2,-24592(gp)
 400c3c0:	10803fcc 	andi	r2,r2,255
 400c3c4:	100b883a 	mov	r5,r2
 400c3c8:	01003804 	movi	r4,224
 400c3cc:	400c4fc0 	call	400c4fc <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 400c3d0:	d0a7fc03 	ldbu	r2,-24592(gp)
 400c3d4:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 400c3d8:	d0a7fc03 	ldbu	r2,-24592(gp)
 400c3dc:	10c03fcc 	andi	r3,r2,255
 400c3e0:	008100b4 	movhi	r2,1026
 400c3e4:	10890804 	addi	r2,r2,9248
 400c3e8:	180690fa 	slli	r3,r3,3
 400c3ec:	10c5883a 	add	r2,r2,r3
 400c3f0:	10800017 	ldw	r2,0(r2)
 400c3f4:	10800204 	addi	r2,r2,8
 400c3f8:	1080008b 	ldhu	r2,2(r2)
}
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 400c3fc:	10803fcc 	andi	r2,r2,255
 400c400:	d8800015 	stw	r2,0(sp)
 400c404:	e1ffff17 	ldw	r7,-4(fp)
 400c408:	01800204 	movi	r6,8
 400c40c:	01400044 	movi	r5,1
 400c410:	400d0140 	call	400d014 <XferInTransfer>
 400c414:	e0bffe05 	stb	r2,-8(fp)
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
	return (rcode);
 400c418:	e0bffe03 	ldbu	r2,-8(fp)
}
 400c41c:	e037883a 	mov	sp,fp
 400c420:	dfc00117 	ldw	ra,4(sp)
 400c424:	df000017 	ldw	fp,0(sp)
 400c428:	dec00204 	addi	sp,sp,8
 400c42c:	f800283a 	ret

0400c430 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 400c430:	defffb04 	addi	sp,sp,-20
 400c434:	df000415 	stw	fp,16(sp)
 400c438:	df000404 	addi	fp,sp,16
 400c43c:	2007883a 	mov	r3,r4
 400c440:	2805883a 	mov	r2,r5
 400c444:	e1bffe15 	stw	r6,-8(fp)
 400c448:	e1ffff15 	stw	r7,-4(fp)
 400c44c:	e0fffc05 	stb	r3,-16(fp)
 400c450:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 400c454:	0005883a 	mov	r2,zero
}
 400c458:	e037883a 	mov	sp,fp
 400c45c:	df000017 	ldw	fp,0(sp)
 400c460:	dec00104 	addi	sp,sp,4
 400c464:	f800283a 	ret

0400c468 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 400c468:	defffb04 	addi	sp,sp,-20
 400c46c:	df000415 	stw	fp,16(sp)
 400c470:	df000404 	addi	fp,sp,16
 400c474:	2007883a 	mov	r3,r4
 400c478:	2805883a 	mov	r2,r5
 400c47c:	e1bffe15 	stw	r6,-8(fp)
 400c480:	e1ffff15 	stw	r7,-4(fp)
 400c484:	e0fffc05 	stb	r3,-16(fp)
 400c488:	e0bffd05 	stb	r2,-12(fp)
	return (FALSE);
 400c48c:	0005883a 	mov	r2,zero
}
 400c490:	e037883a 	mov	sp,fp
 400c494:	df000017 	ldw	fp,0(sp)
 400c498:	dec00104 	addi	sp,sp,4
 400c49c:	f800283a 	ret

0400c4a0 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 400c4a0:	defffc04 	addi	sp,sp,-16
 400c4a4:	df000315 	stw	fp,12(sp)
 400c4a8:	df000304 	addi	fp,sp,12
 400c4ac:	2807883a 	mov	r3,r5
 400c4b0:	3005883a 	mov	r2,r6
 400c4b4:	e13ffd05 	stb	r4,-12(fp)
 400c4b8:	e0fffe05 	stb	r3,-8(fp)
 400c4bc:	e0bfff05 	stb	r2,-4(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 400c4c0:	0001883a 	nop
 400c4c4:	e037883a 	mov	sp,fp
 400c4c8:	df000017 	ldw	fp,0(sp)
 400c4cc:	dec00104 	addi	sp,sp,4
 400c4d0:	f800283a 	ret

0400c4d4 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 400c4d4:	defffe04 	addi	sp,sp,-8
 400c4d8:	df000115 	stw	fp,4(sp)
 400c4dc:	df000104 	addi	fp,sp,4
 400c4e0:	2005883a 	mov	r2,r4
 400c4e4:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 400c4e8:	0001883a 	nop
 400c4ec:	e037883a 	mov	sp,fp
 400c4f0:	df000017 	ldw	fp,0(sp)
 400c4f4:	dec00104 	addi	sp,sp,4
 400c4f8:	f800283a 	ret

0400c4fc <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 400c4fc:	defff704 	addi	sp,sp,-36
 400c500:	dfc00815 	stw	ra,32(sp)
 400c504:	df000715 	stw	fp,28(sp)
 400c508:	df000704 	addi	fp,sp,28
 400c50c:	2007883a 	mov	r3,r4
 400c510:	2805883a 	mov	r2,r5
 400c514:	e0fffe05 	stb	r3,-8(fp)
 400c518:	e0bfff05 	stb	r2,-4(fp)
	//write reg + 2 via SPI
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	BYTE regc = reg + 2;
 400c51c:	e0bffe03 	ldbu	r2,-8(fp)
 400c520:	10800084 	addi	r2,r2,2
 400c524:	e0bffd05 	stb	r2,-12(fp)
	int return_code = alt_avalon_spi_command(SPI_BASE, 0, 1, &regc, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 400c528:	e0fffd04 	addi	r3,fp,-12
 400c52c:	00800044 	movi	r2,1
 400c530:	d8800215 	stw	r2,8(sp)
 400c534:	d8000115 	stw	zero,4(sp)
 400c538:	d8000015 	stw	zero,0(sp)
 400c53c:	180f883a 	mov	r7,r3
 400c540:	01800044 	movi	r6,1
 400c544:	000b883a 	mov	r5,zero
 400c548:	01020034 	movhi	r4,2048
 400c54c:	21142804 	addi	r4,r4,20640
 400c550:	401c6340 	call	401c634 <alt_avalon_spi_command>
 400c554:	e0bffc15 	stw	r2,-16(fp)
	return_code = alt_avalon_spi_command(SPI_BASE, 0, 1, &val, 0, NULL, 0);
 400c558:	e0bfff04 	addi	r2,fp,-4
 400c55c:	d8000215 	stw	zero,8(sp)
 400c560:	d8000115 	stw	zero,4(sp)
 400c564:	d8000015 	stw	zero,0(sp)
 400c568:	100f883a 	mov	r7,r2
 400c56c:	01800044 	movi	r6,1
 400c570:	000b883a 	mov	r5,zero
 400c574:	01020034 	movhi	r4,2048
 400c578:	21142804 	addi	r4,r4,20640
 400c57c:	401c6340 	call	401c634 <alt_avalon_spi_command>
 400c580:	e0bffc15 	stw	r2,-16(fp)
	if(return_code < 0){
 400c584:	e0bffc17 	ldw	r2,-16(fp)
 400c588:	1000040e 	bge	r2,zero,400c59c <MAXreg_wr+0xa0>
		printf("MAXreg_wr error");
 400c58c:	010100b4 	movhi	r4,1026
 400c590:	21371b04 	addi	r4,r4,-9108
 400c594:	400fd540 	call	400fd54 <printf>
	}
	return;
 400c598:	0001883a 	nop
 400c59c:	0001883a 	nop
}
 400c5a0:	e037883a 	mov	sp,fp
 400c5a4:	dfc00117 	ldw	ra,4(sp)
 400c5a8:	df000017 	ldw	fp,0(sp)
 400c5ac:	dec00204 	addi	sp,sp,8
 400c5b0:	f800283a 	ret

0400c5b4 <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 400c5b4:	defff604 	addi	sp,sp,-40
 400c5b8:	dfc00915 	stw	ra,36(sp)
 400c5bc:	df000815 	stw	fp,32(sp)
 400c5c0:	df000804 	addi	fp,sp,32
 400c5c4:	2007883a 	mov	r3,r4
 400c5c8:	2805883a 	mov	r2,r5
 400c5cc:	e1bfff15 	stw	r6,-4(fp)
 400c5d0:	e0fffd05 	stb	r3,-12(fp)
 400c5d4:	e0bffe05 	stb	r2,-8(fp)
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	BYTE regc = reg + 2;
 400c5d8:	e0bffd03 	ldbu	r2,-12(fp)
 400c5dc:	10800084 	addi	r2,r2,2
 400c5e0:	e0bffc05 	stb	r2,-16(fp)
	int return_code = alt_avalon_spi_command(SPI_BASE, 0, 1, &regc, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 400c5e4:	e0fffc04 	addi	r3,fp,-16
 400c5e8:	00800044 	movi	r2,1
 400c5ec:	d8800215 	stw	r2,8(sp)
 400c5f0:	d8000115 	stw	zero,4(sp)
 400c5f4:	d8000015 	stw	zero,0(sp)
 400c5f8:	180f883a 	mov	r7,r3
 400c5fc:	01800044 	movi	r6,1
 400c600:	000b883a 	mov	r5,zero
 400c604:	01020034 	movhi	r4,2048
 400c608:	21142804 	addi	r4,r4,20640
 400c60c:	401c6340 	call	401c634 <alt_avalon_spi_command>
 400c610:	e0bffb15 	stw	r2,-20(fp)
	return_code = alt_avalon_spi_command(SPI_BASE, 0, nbytes, data, 0, NULL, 0);
 400c614:	e0bffe03 	ldbu	r2,-8(fp)
 400c618:	d8000215 	stw	zero,8(sp)
 400c61c:	d8000115 	stw	zero,4(sp)
 400c620:	d8000015 	stw	zero,0(sp)
 400c624:	e1ffff17 	ldw	r7,-4(fp)
 400c628:	100d883a 	mov	r6,r2
 400c62c:	000b883a 	mov	r5,zero
 400c630:	01020034 	movhi	r4,2048
 400c634:	21142804 	addi	r4,r4,20640
 400c638:	401c6340 	call	401c634 <alt_avalon_spi_command>
 400c63c:	e0bffb15 	stw	r2,-20(fp)
	if(return_code < 0){
 400c640:	e0bffb17 	ldw	r2,-20(fp)
 400c644:	1000030e 	bge	r2,zero,400c654 <MAXbytes_wr+0xa0>
		printf("MAXreg_wr error");
 400c648:	010100b4 	movhi	r4,1026
 400c64c:	21371b04 	addi	r4,r4,-9108
 400c650:	400fd540 	call	400fd54 <printf>
	}
	return data + nbytes;
 400c654:	e0bffe03 	ldbu	r2,-8(fp)
 400c658:	e0ffff17 	ldw	r3,-4(fp)
 400c65c:	1885883a 	add	r2,r3,r2
}
 400c660:	e037883a 	mov	sp,fp
 400c664:	dfc00117 	ldw	ra,4(sp)
 400c668:	df000017 	ldw	fp,0(sp)
 400c66c:	dec00204 	addi	sp,sp,8
 400c670:	f800283a 	ret

0400c674 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 400c674:	defff804 	addi	sp,sp,-32
 400c678:	dfc00715 	stw	ra,28(sp)
 400c67c:	df000615 	stw	fp,24(sp)
 400c680:	df000604 	addi	fp,sp,24
 400c684:	2005883a 	mov	r2,r4
 400c688:	e0bfff05 	stb	r2,-4(fp)
	//read val via SPI
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	BYTE ret = 0;
 400c68c:	e03ffe05 	stb	zero,-8(fp)
	int return_code = alt_avalon_spi_command(SPI_BASE, 0, 1, &reg, 1, &ret, 0);
 400c690:	e0ffff04 	addi	r3,fp,-4
 400c694:	d8000215 	stw	zero,8(sp)
 400c698:	e0bffe04 	addi	r2,fp,-8
 400c69c:	d8800115 	stw	r2,4(sp)
 400c6a0:	00800044 	movi	r2,1
 400c6a4:	d8800015 	stw	r2,0(sp)
 400c6a8:	180f883a 	mov	r7,r3
 400c6ac:	01800044 	movi	r6,1
 400c6b0:	000b883a 	mov	r5,zero
 400c6b4:	01020034 	movhi	r4,2048
 400c6b8:	21142804 	addi	r4,r4,20640
 400c6bc:	401c6340 	call	401c634 <alt_avalon_spi_command>
 400c6c0:	e0bffd15 	stw	r2,-12(fp)
	if(return_code < 0){
 400c6c4:	e0bffd17 	ldw	r2,-12(fp)
 400c6c8:	1000030e 	bge	r2,zero,400c6d8 <MAXreg_rd+0x64>
		printf("MAXreg_rd error");
 400c6cc:	010100b4 	movhi	r4,1026
 400c6d0:	21371f04 	addi	r4,r4,-9092
 400c6d4:	400fd540 	call	400fd54 <printf>
	}
	return ret;
 400c6d8:	e0bffe03 	ldbu	r2,-8(fp)
}
 400c6dc:	e037883a 	mov	sp,fp
 400c6e0:	dfc00117 	ldw	ra,4(sp)
 400c6e4:	df000017 	ldw	fp,0(sp)
 400c6e8:	dec00204 	addi	sp,sp,8
 400c6ec:	f800283a 	ret

0400c6f0 <MAXbytes_rd>:

//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 400c6f0:	defff704 	addi	sp,sp,-36
 400c6f4:	dfc00815 	stw	ra,32(sp)
 400c6f8:	df000715 	stw	fp,28(sp)
 400c6fc:	df000704 	addi	fp,sp,28
 400c700:	2007883a 	mov	r3,r4
 400c704:	2805883a 	mov	r2,r5
 400c708:	e1bfff15 	stw	r6,-4(fp)
 400c70c:	e0fffd05 	stb	r3,-12(fp)
 400c710:	e0bffe05 	stb	r2,-8(fp)
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	int return_code = alt_avalon_spi_command(SPI_BASE, 0, 1, &reg, nbytes, data, 0);
 400c714:	e0bffe03 	ldbu	r2,-8(fp)
 400c718:	e13ffd04 	addi	r4,fp,-12
 400c71c:	d8000215 	stw	zero,8(sp)
 400c720:	e0ffff17 	ldw	r3,-4(fp)
 400c724:	d8c00115 	stw	r3,4(sp)
 400c728:	d8800015 	stw	r2,0(sp)
 400c72c:	200f883a 	mov	r7,r4
 400c730:	01800044 	movi	r6,1
 400c734:	000b883a 	mov	r5,zero
 400c738:	01020034 	movhi	r4,2048
 400c73c:	21142804 	addi	r4,r4,20640
 400c740:	401c6340 	call	401c634 <alt_avalon_spi_command>
 400c744:	e0bffc15 	stw	r2,-16(fp)
	if(return_code < 0){
 400c748:	e0bffc17 	ldw	r2,-16(fp)
 400c74c:	1000030e 	bge	r2,zero,400c75c <MAXbytes_rd+0x6c>
		printf("MAXbytes_rd error");
 400c750:	010100b4 	movhi	r4,1026
 400c754:	21372304 	addi	r4,r4,-9076
 400c758:	400fd540 	call	400fd54 <printf>
	}
	return data + nbytes;
 400c75c:	e0bffe03 	ldbu	r2,-8(fp)
 400c760:	e0ffff17 	ldw	r3,-4(fp)
 400c764:	1885883a 	add	r2,r3,r2
}
 400c768:	e037883a 	mov	sp,fp
 400c76c:	dfc00117 	ldw	ra,4(sp)
 400c770:	df000017 	ldw	fp,0(sp)
 400c774:	dec00204 	addi	sp,sp,8
 400c778:	f800283a 	ret

0400c77c <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 400c77c:	defffd04 	addi	sp,sp,-12
 400c780:	dfc00215 	stw	ra,8(sp)
 400c784:	df000115 	stw	fp,4(sp)
 400c788:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 400c78c:	0007883a 	mov	r3,zero
 400c790:	00820034 	movhi	r2,2048
 400c794:	10945c04 	addi	r2,r2,20848
 400c798:	10c00035 	stwio	r3,0(r2)
	usleep(1000000);
 400c79c:	010003f4 	movhi	r4,15
 400c7a0:	21109004 	addi	r4,r4,16960
 400c7a4:	401b98c0 	call	401b98c <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 400c7a8:	00c00044 	movi	r3,1
 400c7ac:	00820034 	movhi	r2,2048
 400c7b0:	10945c04 	addi	r2,r2,20848
 400c7b4:	10c00035 	stwio	r3,0(r2)
	BYTE tmp = 0;
 400c7b8:	e03fff05 	stb	zero,-4(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 400c7bc:	01400804 	movi	r5,32
 400c7c0:	01001e04 	movi	r4,120
 400c7c4:	400c4fc0 	call	400c4fc <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 400c7c8:	000b883a 	mov	r5,zero
 400c7cc:	01001e04 	movi	r4,120
 400c7d0:	400c4fc0 	call	400c4fc <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 400c7d4:	00000806 	br	400c7f8 <MAX3421E_reset+0x7c>
		tmp++;                                      //timeout after 256 attempts
 400c7d8:	e0bfff03 	ldbu	r2,-4(fp)
 400c7dc:	10800044 	addi	r2,r2,1
 400c7e0:	e0bfff05 	stb	r2,-4(fp)
		if (tmp == 0) {
 400c7e4:	e0bfff03 	ldbu	r2,-4(fp)
 400c7e8:	1000031e 	bne	r2,zero,400c7f8 <MAX3421E_reset+0x7c>
			printf("reset timeout!");
 400c7ec:	010100b4 	movhi	r4,1026
 400c7f0:	21372804 	addi	r4,r4,-9056
 400c7f4:	400fd540 	call	400fd54 <printf>
	usleep(1000000);
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
	BYTE tmp = 0;
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 400c7f8:	01001a04 	movi	r4,104
 400c7fc:	400c6740 	call	400c674 <MAXreg_rd>
 400c800:	10803fcc 	andi	r2,r2,255
 400c804:	1080004c 	andi	r2,r2,1
 400c808:	103ff326 	beq	r2,zero,400c7d8 <__alt_mem_onchip_memory2_0+0xfc007618>
		tmp++;                                      //timeout after 256 attempts
		if (tmp == 0) {
			printf("reset timeout!");
		}
	}
}
 400c80c:	0001883a 	nop
 400c810:	e037883a 	mov	sp,fp
 400c814:	dfc00117 	ldw	ra,4(sp)
 400c818:	df000017 	ldw	fp,0(sp)
 400c81c:	dec00204 	addi	sp,sp,8
 400c820:	f800283a 	ret

0400c824 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 400c824:	defffe04 	addi	sp,sp,-8
 400c828:	df000115 	stw	fp,4(sp)
 400c82c:	df000104 	addi	fp,sp,4
 400c830:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 400c834:	00800044 	movi	r2,1
}
 400c838:	e037883a 	mov	sp,fp
 400c83c:	df000017 	ldw	fp,0(sp)
 400c840:	dec00104 	addi	sp,sp,4
 400c844:	f800283a 	ret

0400c848 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 400c848:	defffd04 	addi	sp,sp,-12
 400c84c:	dfc00215 	stw	ra,8(sp)
 400c850:	df000115 	stw	fp,4(sp)
 400c854:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 400c858:	01003e04 	movi	r4,248
 400c85c:	400c6740 	call	400c674 <MAXreg_rd>
 400c860:	e0bfff05 	stb	r2,-4(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 400c864:	e0ffff03 	ldbu	r3,-4(fp)
 400c868:	00bff004 	movi	r2,-64
 400c86c:	1884703a 	and	r2,r3,r2
 400c870:	e0bfff05 	stb	r2,-4(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 400c874:	e0bfff03 	ldbu	r2,-4(fp)
 400c878:	10c01020 	cmpeqi	r3,r2,64
 400c87c:	1800221e 	bne	r3,zero,400c908 <MAX_busprobe+0xc0>
 400c880:	10c01048 	cmpgei	r3,r2,65
 400c884:	1800021e 	bne	r3,zero,400c890 <MAX_busprobe+0x48>
 400c888:	10003b26 	beq	r2,zero,400c978 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 400c88c:	00004a06 	br	400c9b8 <MAX_busprobe+0x170>

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
 400c890:	10c02020 	cmpeqi	r3,r2,128
 400c894:	1800031e 	bne	r3,zero,400c8a4 <MAX_busprobe+0x5c>
 400c898:	10803020 	cmpeqi	r2,r2,192
 400c89c:	1000331e 	bne	r2,zero,400c96c <MAX_busprobe+0x124>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 400c8a0:	00004506 	br	400c9b8 <MAX_busprobe+0x170>
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte

	switch (bus_sample) {                   //start full-speed or low-speed host
	case ( bmJSTATUS):
		/*kludgy*/
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 400c8a4:	d0a00603 	ldbu	r2,-32744(gp)
 400c8a8:	10803fcc 	andi	r2,r2,255
 400c8ac:	108004e0 	cmpeqi	r2,r2,19
 400c8b0:	10003e1e 	bne	r2,zero,400c9ac <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 400c8b4:	01003604 	movi	r4,216
 400c8b8:	400c6740 	call	400c674 <MAXreg_rd>
 400c8bc:	10803fcc 	andi	r2,r2,255
 400c8c0:	1080008c 	andi	r2,r2,2
 400c8c4:	1000071e 	bne	r2,zero,400c8e4 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 400c8c8:	01403244 	movi	r5,201
 400c8cc:	01003604 	movi	r4,216
 400c8d0:	400c4fc0 	call	400c4fc <MAXreg_wr>
				printf("Starting in full speed\n");
 400c8d4:	010100b4 	movhi	r4,1026
 400c8d8:	21372c04 	addi	r4,r4,-9040
 400c8dc:	400fe500 	call	400fe50 <puts>
 400c8e0:	00000606 	br	400c8fc <MAX_busprobe+0xb4>
			} else {
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 400c8e4:	014032c4 	movi	r5,203
 400c8e8:	01003604 	movi	r4,216
 400c8ec:	400c4fc0 	call	400c4fc <MAXreg_wr>
				printf("Starting in low speed\n");
 400c8f0:	010100b4 	movhi	r4,1026
 400c8f4:	21373204 	addi	r4,r4,-9016
 400c8f8:	400fe500 	call	400fe50 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 400c8fc:	00800404 	movi	r2,16
 400c900:	d0a00605 	stb	r2,-32744(gp)
		}
		break;
 400c904:	00002906 	br	400c9ac <MAX_busprobe+0x164>
	case ( bmKSTATUS):
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 400c908:	d0a00603 	ldbu	r2,-32744(gp)
 400c90c:	10803fcc 	andi	r2,r2,255
 400c910:	108004e0 	cmpeqi	r2,r2,19
 400c914:	1000271e 	bne	r2,zero,400c9b4 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 400c918:	01003604 	movi	r4,216
 400c91c:	400c6740 	call	400c674 <MAXreg_rd>
 400c920:	10803fcc 	andi	r2,r2,255
 400c924:	1080008c 	andi	r2,r2,2
 400c928:	1000071e 	bne	r2,zero,400c948 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 400c92c:	014032c4 	movi	r5,203
 400c930:	01003604 	movi	r4,216
 400c934:	400c4fc0 	call	400c4fc <MAXreg_wr>
				printf("Starting in low speed\n");
 400c938:	010100b4 	movhi	r4,1026
 400c93c:	21373204 	addi	r4,r4,-9016
 400c940:	400fe500 	call	400fe50 <puts>
 400c944:	00000606 	br	400c960 <MAX_busprobe+0x118>
			} else {
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 400c948:	01403244 	movi	r5,201
 400c94c:	01003604 	movi	r4,216
 400c950:	400c4fc0 	call	400c4fc <MAXreg_wr>
				printf("Starting in full speed\n");
 400c954:	010100b4 	movhi	r4,1026
 400c958:	21372c04 	addi	r4,r4,-9040
 400c95c:	400fe500 	call	400fe50 <puts>
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 400c960:	00800404 	movi	r2,16
 400c964:	d0a00605 	stb	r2,-32744(gp)
		}
		break;
 400c968:	00001206 	br	400c9b4 <MAX_busprobe+0x16c>
	case ( bmSE1):              //illegal state
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 400c96c:	00800104 	movi	r2,4
 400c970:	d0a00605 	stb	r2,-32744(gp)
		break;
 400c974:	00001006 	br	400c9b8 <MAX_busprobe+0x170>
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 400c978:	d0a00603 	ldbu	r2,-32744(gp)
 400c97c:	10803fcc 	andi	r2,r2,255
 400c980:	10803c0c 	andi	r2,r2,240
 400c984:	10000326 	beq	r2,zero,400c994 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 400c988:	00800044 	movi	r2,1
 400c98c:	d0a00605 	stb	r2,-32744(gp)
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
 400c990:	00000906 	br	400c9b8 <MAX_busprobe+0x170>
		break;
	case ( bmSE0):              //disconnected state
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
		else {
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 400c994:	01403244 	movi	r5,201
 400c998:	01003604 	movi	r4,216
 400c99c:	400c4fc0 	call	400c4fc <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 400c9a0:	008000c4 	movi	r2,3
 400c9a4:	d0a00605 	stb	r2,-32744(gp)
		}
		break;
 400c9a8:	00000306 	br	400c9b8 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
				printf("Starting in low speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 400c9ac:	0001883a 	nop
 400c9b0:	00000106 	br	400c9b8 <MAX_busprobe+0x170>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
				printf("Starting in full speed\n");
			}
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
		}
		break;
 400c9b4:	0001883a 	nop
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 400c9b8:	0001883a 	nop
 400c9bc:	e037883a 	mov	sp,fp
 400c9c0:	dfc00117 	ldw	ra,4(sp)
 400c9c4:	df000017 	ldw	fp,0(sp)
 400c9c8:	dec00204 	addi	sp,sp,8
 400c9cc:	f800283a 	ret

0400c9d0 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 400c9d0:	defffe04 	addi	sp,sp,-8
 400c9d4:	dfc00115 	stw	ra,4(sp)
 400c9d8:	df000015 	stw	fp,0(sp)
 400c9dc:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 400c9e0:	01400684 	movi	r5,26
 400c9e4:	01002204 	movi	r4,136
 400c9e8:	400c4fc0 	call	400c4fc <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 400c9ec:	400c77c0 	call	400c77c <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 400c9f0:	0009883a 	mov	r4,zero
 400c9f4:	400c8240 	call	400c824 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 400c9f8:	01402004 	movi	r5,128
 400c9fc:	01002e04 	movi	r4,184
 400ca00:	400c4fc0 	call	400c4fc <MAXreg_wr>
	Vbus_power( ON);
 400ca04:	01000044 	movi	r4,1
 400ca08:	400c8240 	call	400c824 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 400ca0c:	01403444 	movi	r5,209
 400ca10:	01003604 	movi	r4,216
 400ca14:	400c4fc0 	call	400c4fc <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 400ca18:	01400804 	movi	r5,32
 400ca1c:	01003404 	movi	r4,208
 400ca20:	400c4fc0 	call	400c4fc <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 400ca24:	01400104 	movi	r5,4
 400ca28:	01003a04 	movi	r4,232
 400ca2c:	400c4fc0 	call	400c4fc <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 400ca30:	400c8480 	call	400c848 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 400ca34:	01400804 	movi	r5,32
 400ca38:	01003204 	movi	r4,200
 400ca3c:	400c4fc0 	call	400c4fc <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 400ca40:	01400044 	movi	r5,1
 400ca44:	01002004 	movi	r4,128
 400ca48:	400c4fc0 	call	400c4fc <MAXreg_wr>
}
 400ca4c:	0001883a 	nop
 400ca50:	e037883a 	mov	sp,fp
 400ca54:	dfc00117 	ldw	ra,4(sp)
 400ca58:	df000017 	ldw	fp,0(sp)
 400ca5c:	dec00204 	addi	sp,sp,8
 400ca60:	f800283a 	ret

0400ca64 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 400ca64:	defffe04 	addi	sp,sp,-8
 400ca68:	dfc00115 	stw	ra,4(sp)
 400ca6c:	df000015 	stw	fp,0(sp)
 400ca70:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 400ca74:	00820034 	movhi	r2,2048
 400ca78:	10946404 	addi	r2,r2,20880
 400ca7c:	10800037 	ldwio	r2,0(r2)
 400ca80:	1000041e 	bne	r2,zero,400ca94 <MAX3421E_Task+0x30>
		printf("MAX interrupt\n\r");
 400ca84:	010100b4 	movhi	r4,1026
 400ca88:	21373804 	addi	r4,r4,-8992
 400ca8c:	400fd540 	call	400fd54 <printf>
		MaxIntHandler();
 400ca90:	400cad00 	call	400cad0 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 400ca94:	00820034 	movhi	r2,2048
 400ca98:	10946004 	addi	r2,r2,20864
 400ca9c:	10800037 	ldwio	r2,0(r2)
 400caa0:	10800058 	cmpnei	r2,r2,1
 400caa4:	1000041e 	bne	r2,zero,400cab8 <MAX3421E_Task+0x54>
		printf("GPX interrupt\n\r");
 400caa8:	010100b4 	movhi	r4,1026
 400caac:	21373c04 	addi	r4,r4,-8976
 400cab0:	400fd540 	call	400fd54 <printf>
		MaxGpxHandler();
 400cab4:	400cb9c0 	call	400cb9c <MaxGpxHandler>
	}
}
 400cab8:	0001883a 	nop
 400cabc:	e037883a 	mov	sp,fp
 400cac0:	dfc00117 	ldw	ra,4(sp)
 400cac4:	df000017 	ldw	fp,0(sp)
 400cac8:	dec00204 	addi	sp,sp,8
 400cacc:	f800283a 	ret

0400cad0 <MaxIntHandler>:

void MaxIntHandler(void) {
 400cad0:	defffd04 	addi	sp,sp,-12
 400cad4:	dfc00215 	stw	ra,8(sp)
 400cad8:	df000115 	stw	fp,4(sp)
 400cadc:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 400cae0:	e03fff05 	stb	zero,-4(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 400cae4:	01003204 	movi	r4,200
 400cae8:	400c6740 	call	400c674 <MAXreg_rd>
 400caec:	e0bfff45 	stb	r2,-3(fp)
	printf("IRQ: %x\n", HIRQ);
 400caf0:	e0bfff43 	ldbu	r2,-3(fp)
 400caf4:	100b883a 	mov	r5,r2
 400caf8:	010100b4 	movhi	r4,1026
 400cafc:	21374004 	addi	r4,r4,-8960
 400cb00:	400fd540 	call	400fd54 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 400cb04:	e0bfff43 	ldbu	r2,-3(fp)
 400cb08:	1080100c 	andi	r2,r2,64
 400cb0c:	10000326 	beq	r2,zero,400cb1c <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 400cb10:	e0bfff03 	ldbu	r2,-4(fp)
 400cb14:	10801014 	ori	r2,r2,64
 400cb18:	e0bfff05 	stb	r2,-4(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 400cb1c:	e0bfff43 	ldbu	r2,-3(fp)
 400cb20:	1080080c 	andi	r2,r2,32
 400cb24:	10000426 	beq	r2,zero,400cb38 <MaxIntHandler+0x68>
		MAX_busprobe();
 400cb28:	400c8480 	call	400c848 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 400cb2c:	e0bfff03 	ldbu	r2,-4(fp)
 400cb30:	10800814 	ori	r2,r2,32
 400cb34:	e0bfff05 	stb	r2,-4(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 400cb38:	e0bfff43 	ldbu	r2,-3(fp)
 400cb3c:	1080020c 	andi	r2,r2,8
 400cb40:	10000326 	beq	r2,zero,400cb50 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 400cb44:	000b883a 	mov	r5,zero
 400cb48:	01000e04 	movi	r4,56
 400cb4c:	400c4fc0 	call	400c4fc <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 400cb50:	e0bfff43 	ldbu	r2,-3(fp)
 400cb54:	1080004c 	andi	r2,r2,1
 400cb58:	10000626 	beq	r2,zero,400cb74 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 400cb5c:	d0a00603 	ldbu	r2,-32744(gp)
 400cb60:	10800044 	addi	r2,r2,1
 400cb64:	d0a00605 	stb	r2,-32744(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 400cb68:	e0bfff03 	ldbu	r2,-4(fp)
 400cb6c:	10800054 	ori	r2,r2,1
 400cb70:	e0bfff05 	stb	r2,-4(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 400cb74:	e0bfff03 	ldbu	r2,-4(fp)
 400cb78:	100b883a 	mov	r5,r2
 400cb7c:	01003204 	movi	r4,200
 400cb80:	400c4fc0 	call	400c4fc <MAXreg_wr>
}
 400cb84:	0001883a 	nop
 400cb88:	e037883a 	mov	sp,fp
 400cb8c:	dfc00117 	ldw	ra,4(sp)
 400cb90:	df000017 	ldw	fp,0(sp)
 400cb94:	dec00204 	addi	sp,sp,8
 400cb98:	f800283a 	ret

0400cb9c <MaxGpxHandler>:

void MaxGpxHandler(void) {
 400cb9c:	defffd04 	addi	sp,sp,-12
 400cba0:	dfc00215 	stw	ra,8(sp)
 400cba4:	df000115 	stw	fp,4(sp)
 400cba8:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 400cbac:	01002c04 	movi	r4,176
 400cbb0:	400c6740 	call	400c674 <MAXreg_rd>
 400cbb4:	e0bfff05 	stb	r2,-4(fp)
}
 400cbb8:	0001883a 	nop
 400cbbc:	e037883a 	mov	sp,fp
 400cbc0:	dfc00117 	ldw	ra,4(sp)
 400cbc4:	df000017 	ldw	fp,0(sp)
 400cbc8:	dec00204 	addi	sp,sp,8
 400cbcc:	f800283a 	ret

0400cbd0 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 400cbd0:	defff104 	addi	sp,sp,-60
 400cbd4:	dfc00e15 	stw	ra,56(sp)
 400cbd8:	df000d15 	stw	fp,52(sp)
 400cbdc:	df000d04 	addi	fp,sp,52
 400cbe0:	2015883a 	mov	r10,r4
 400cbe4:	2813883a 	mov	r9,r5
 400cbe8:	3011883a 	mov	r8,r6
 400cbec:	380d883a 	mov	r6,r7
 400cbf0:	e1400217 	ldw	r5,8(fp)
 400cbf4:	e1000317 	ldw	r4,12(fp)
 400cbf8:	e0c00417 	ldw	r3,16(fp)
 400cbfc:	e0800517 	ldw	r2,20(fp)
 400cc00:	e2bff805 	stb	r10,-32(fp)
 400cc04:	e27ff905 	stb	r9,-28(fp)
 400cc08:	e23ffa05 	stb	r8,-24(fp)
 400cc0c:	e1bffb05 	stb	r6,-20(fp)
 400cc10:	e17ffc05 	stb	r5,-16(fp)
 400cc14:	e13ffd05 	stb	r4,-12(fp)
 400cc18:	e0fffe0d 	sth	r3,-8(fp)
 400cc1c:	e0bfff0d 	sth	r2,-4(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 400cc20:	e03ff415 	stw	zero,-48(fp)
 BYTE datastage = 1; //request data stage present or absent
 400cc24:	00800044 	movi	r2,1
 400cc28:	e0bff505 	stb	r2,-44(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 400cc2c:	e0800617 	ldw	r2,24(fp)
 400cc30:	1000011e 	bne	r2,zero,400cc38 <XferCtrlReq+0x68>
        datastage = 0;
 400cc34:	e03ff505 	stb	zero,-44(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 400cc38:	e0bff803 	ldbu	r2,-32(fp)
 400cc3c:	100b883a 	mov	r5,r2
 400cc40:	01003804 	movi	r4,224
 400cc44:	400c4fc0 	call	400c4fc <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 400cc48:	e0bffa03 	ldbu	r2,-24(fp)
 400cc4c:	10803fcc 	andi	r2,r2,255
 400cc50:	1080201c 	xori	r2,r2,128
 400cc54:	10bfe004 	addi	r2,r2,-128
 400cc58:	1000020e 	bge	r2,zero,400cc64 <XferCtrlReq+0x94>
        direction = TRUE;                   		//determine request direction
 400cc5c:	00800044 	movi	r2,1
 400cc60:	e0bff415 	stw	r2,-48(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 400cc64:	e0bffa03 	ldbu	r2,-24(fp)
 400cc68:	e0bff585 	stb	r2,-42(fp)
    setup_pkt.bRequest = bRequest;
 400cc6c:	e0bffb03 	ldbu	r2,-20(fp)
 400cc70:	e0bff5c5 	stb	r2,-41(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 400cc74:	e0bffc03 	ldbu	r2,-16(fp)
 400cc78:	e0bff605 	stb	r2,-40(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 400cc7c:	e0bffd03 	ldbu	r2,-12(fp)
 400cc80:	e0bff645 	stb	r2,-39(fp)
    setup_pkt.wIndex = wInd;
 400cc84:	e0bffe0b 	ldhu	r2,-8(fp)
 400cc88:	e0bff68d 	sth	r2,-38(fp)
    setup_pkt.wLength = nbytes;
 400cc8c:	e0bfff0b 	ldhu	r2,-4(fp)
 400cc90:	e0bff70d 	sth	r2,-36(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 400cc94:	e0bff584 	addi	r2,fp,-42
 400cc98:	100d883a 	mov	r6,r2
 400cc9c:	01400204 	movi	r5,8
 400cca0:	01000804 	movi	r4,32
 400cca4:	400c5b40 	call	400c5b4 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 400cca8:	e0bff903 	ldbu	r2,-28(fp)
 400ccac:	100b883a 	mov	r5,r2
 400ccb0:	01000404 	movi	r4,16
 400ccb4:	400ce780 	call	400ce78 <XferDispatchPkt>
 400ccb8:	e0bff545 	stb	r2,-43(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 400ccbc:	e0bff543 	ldbu	r2,-43(fp)
 400ccc0:	10000226 	beq	r2,zero,400cccc <XferCtrlReq+0xfc>
        return( rcode );
 400ccc4:	e0bff543 	ldbu	r2,-43(fp)
 400ccc8:	00000f06 	br	400cd08 <XferCtrlReq+0x138>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 400cccc:	e0bff503 	ldbu	r2,-44(fp)
 400ccd0:	1085883a 	add	r2,r2,r2
 400ccd4:	1087883a 	add	r3,r2,r2
 400ccd8:	d0a00404 	addi	r2,gp,-32752
 400ccdc:	1885883a 	add	r2,r3,r2
 400cce0:	10800017 	ldw	r2,0(r2)
 400cce4:	e13ff803 	ldbu	r4,-32(fp)
 400cce8:	e17ff903 	ldbu	r5,-28(fp)
 400ccec:	e1bfff0b 	ldhu	r6,-4(fp)
 400ccf0:	e0fff417 	ldw	r3,-48(fp)
 400ccf4:	d8c00015 	stw	r3,0(sp)
 400ccf8:	e1c00617 	ldw	r7,24(fp)
 400ccfc:	103ee83a 	callr	r2
 400cd00:	e0bff545 	stb	r2,-43(fp)
    return( rcode );
 400cd04:	e0bff543 	ldbu	r2,-43(fp)
}
 400cd08:	e037883a 	mov	sp,fp
 400cd0c:	dfc00117 	ldw	ra,4(sp)
 400cd10:	df000017 	ldw	fp,0(sp)
 400cd14:	dec00204 	addi	sp,sp,8
 400cd18:	f800283a 	ret

0400cd1c <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 400cd1c:	defff804 	addi	sp,sp,-32
 400cd20:	dfc00715 	stw	ra,28(sp)
 400cd24:	df000615 	stw	fp,24(sp)
 400cd28:	df000604 	addi	fp,sp,24
 400cd2c:	2807883a 	mov	r3,r5
 400cd30:	3005883a 	mov	r2,r6
 400cd34:	e1ffff15 	stw	r7,-4(fp)
 400cd38:	e13ffc05 	stb	r4,-16(fp)
 400cd3c:	e0fffd05 	stb	r3,-12(fp)
 400cd40:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 400cd44:	e0800217 	ldw	r2,8(fp)
 400cd48:	10002826 	beq	r2,zero,400cdec <XferCtrlData+0xd0>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 400cd4c:	e0fffc03 	ldbu	r3,-16(fp)
 400cd50:	008100b4 	movhi	r2,1026
 400cd54:	10890804 	addi	r2,r2,9248
 400cd58:	180690fa 	slli	r3,r3,3
 400cd5c:	10c5883a 	add	r2,r2,r3
 400cd60:	10c00017 	ldw	r3,0(r2)
 400cd64:	e0bffd03 	ldbu	r2,-12(fp)
 400cd68:	100490fa 	slli	r2,r2,3
 400cd6c:	1885883a 	add	r2,r3,r2
 400cd70:	00c00804 	movi	r3,32
 400cd74:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 400cd78:	e13ffc03 	ldbu	r4,-16(fp)
 400cd7c:	e17ffd03 	ldbu	r5,-12(fp)
 400cd80:	e1bffe0b 	ldhu	r6,-8(fp)
 400cd84:	e0fffc03 	ldbu	r3,-16(fp)
 400cd88:	008100b4 	movhi	r2,1026
 400cd8c:	10890804 	addi	r2,r2,9248
 400cd90:	180690fa 	slli	r3,r3,3
 400cd94:	10c5883a 	add	r2,r2,r3
 400cd98:	10c00017 	ldw	r3,0(r2)
 400cd9c:	e0bffd03 	ldbu	r2,-12(fp)
 400cda0:	100490fa 	slli	r2,r2,3
 400cda4:	1885883a 	add	r2,r3,r2
 400cda8:	1080008b 	ldhu	r2,2(r2)
 400cdac:	10803fcc 	andi	r2,r2,255
 400cdb0:	d8800015 	stw	r2,0(sp)
 400cdb4:	e1ffff17 	ldw	r7,-4(fp)
 400cdb8:	400d0140 	call	400d014 <XferInTransfer>
 400cdbc:	e0bffb05 	stb	r2,-20(fp)
        if( rcode ) {
 400cdc0:	e0bffb03 	ldbu	r2,-20(fp)
 400cdc4:	10000226 	beq	r2,zero,400cdd0 <XferCtrlData+0xb4>
        return( rcode );
 400cdc8:	e0bffb03 	ldbu	r2,-20(fp)
 400cdcc:	00000806 	br	400cdf0 <XferCtrlData+0xd4>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 400cdd0:	e0bffd03 	ldbu	r2,-12(fp)
 400cdd4:	100b883a 	mov	r5,r2
 400cdd8:	01002804 	movi	r4,160
 400cddc:	400ce780 	call	400ce78 <XferDispatchPkt>
 400cde0:	e0bffb05 	stb	r2,-20(fp)
        return( rcode );
 400cde4:	e0bffb03 	ldbu	r2,-20(fp)
 400cde8:	00000106 	br	400cdf0 <XferCtrlData+0xd4>
    }
    else {              //OUT not implemented
        return( 0xff );
 400cdec:	00bfffc4 	movi	r2,-1
    }
}
 400cdf0:	e037883a 	mov	sp,fp
 400cdf4:	dfc00117 	ldw	ra,4(sp)
 400cdf8:	df000017 	ldw	fp,0(sp)
 400cdfc:	dec00204 	addi	sp,sp,8
 400ce00:	f800283a 	ret

0400ce04 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 400ce04:	defff904 	addi	sp,sp,-28
 400ce08:	dfc00615 	stw	ra,24(sp)
 400ce0c:	df000515 	stw	fp,20(sp)
 400ce10:	df000504 	addi	fp,sp,20
 400ce14:	2807883a 	mov	r3,r5
 400ce18:	3005883a 	mov	r2,r6
 400ce1c:	e1ffff15 	stw	r7,-4(fp)
 400ce20:	e13ffc05 	stb	r4,-16(fp)
 400ce24:	e0fffd05 	stb	r3,-12(fp)
 400ce28:	e0bffe0d 	sth	r2,-8(fp)
  BYTE rcode;
    if( direction ) { //GET
 400ce2c:	e0800217 	ldw	r2,8(fp)
 400ce30:	10000626 	beq	r2,zero,400ce4c <XferCtrlND+0x48>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 400ce34:	e0bffd03 	ldbu	r2,-12(fp)
 400ce38:	100b883a 	mov	r5,r2
 400ce3c:	01002804 	movi	r4,160
 400ce40:	400ce780 	call	400ce78 <XferDispatchPkt>
 400ce44:	e0bffb05 	stb	r2,-20(fp)
 400ce48:	00000506 	br	400ce60 <XferCtrlND+0x5c>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 400ce4c:	e0bffd03 	ldbu	r2,-12(fp)
 400ce50:	100b883a 	mov	r5,r2
 400ce54:	01002004 	movi	r4,128
 400ce58:	400ce780 	call	400ce78 <XferDispatchPkt>
 400ce5c:	e0bffb05 	stb	r2,-20(fp)
    }
    return( rcode );
 400ce60:	e0bffb03 	ldbu	r2,-20(fp)
}
 400ce64:	e037883a 	mov	sp,fp
 400ce68:	dfc00117 	ldw	ra,4(sp)
 400ce6c:	df000017 	ldw	fp,0(sp)
 400ce70:	dec00204 	addi	sp,sp,8
 400ce74:	f800283a 	ret

0400ce78 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 400ce78:	defff804 	addi	sp,sp,-32
 400ce7c:	dfc00715 	stw	ra,28(sp)
 400ce80:	df000615 	stw	fp,24(sp)
 400ce84:	df000604 	addi	fp,sp,24
 400ce88:	2007883a 	mov	r3,r4
 400ce8c:	2805883a 	mov	r2,r5
 400ce90:	e0fffe05 	stb	r3,-8(fp)
 400ce94:	e0bfff05 	stb	r2,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400ce98:	d0a81117 	ldw	r2,-24508(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 400ce9c:	0140fa04 	movi	r5,1000
 400cea0:	1009883a 	mov	r4,r2
 400cea4:	400dcd40 	call	400dcd4 <__mulsi3>
 400cea8:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400ceac:	d0a81017 	ldw	r2,-24512(gp)
 400ceb0:	100b883a 	mov	r5,r2
 400ceb4:	1809883a 	mov	r4,r3
 400ceb8:	400dc180 	call	400dc18 <__udivsi3>
 400cebc:	1084e204 	addi	r2,r2,5000
 400cec0:	e0bffc15 	stw	r2,-16(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 400cec4:	e03ffa45 	stb	zero,-23(fp)
 BYTE nak_count = 0;
 400cec8:	e03ffa85 	stb	zero,-22(fp)

 	 for(int i = 0; i < 5; i++) {
 400cecc:	e03ffb15 	stw	zero,-20(fp)
 400ced0:	00004306 	br	400cfe0 <XferDispatchPkt+0x168>
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 400ced4:	e0fffe03 	ldbu	r3,-8(fp)
 400ced8:	e0bfff03 	ldbu	r2,-4(fp)
 400cedc:	1884b03a 	or	r2,r3,r2
 400cee0:	10803fcc 	andi	r2,r2,255
 400cee4:	100b883a 	mov	r5,r2
 400cee8:	01003c04 	movi	r4,240
 400ceec:	400c4fc0 	call	400c4fc <MAXreg_wr>
        rcode = 0xff;
 400cef0:	00bfffc4 	movi	r2,-1
 400cef4:	e0bffa05 	stb	r2,-24(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 400cef8:	00000d06 	br	400cf30 <XferDispatchPkt+0xb8>
            tmpdata = MAXreg_rd( rHIRQ );
 400cefc:	01003204 	movi	r4,200
 400cf00:	400c6740 	call	400c674 <MAXreg_rd>
 400cf04:	e0bffd05 	stb	r2,-12(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 400cf08:	e0bffd03 	ldbu	r2,-12(fp)
 400cf0c:	10803fcc 	andi	r2,r2,255
 400cf10:	1080201c 	xori	r2,r2,128
 400cf14:	10bfe004 	addi	r2,r2,-128
 400cf18:	1000050e 	bge	r2,zero,400cf30 <XferDispatchPkt+0xb8>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 400cf1c:	01402004 	movi	r5,128
 400cf20:	01003204 	movi	r4,200
 400cf24:	400c4fc0 	call	400c4fc <MAXreg_wr>
                rcode = 0x00;
 400cf28:	e03ffa05 	stb	zero,-24(fp)
                break;
 400cf2c:	00000c06 	br	400cf60 <XferDispatchPkt+0xe8>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400cf30:	d0a81117 	ldw	r2,-24508(gp)
 BYTE nak_count = 0;

 	 for(int i = 0; i < 5; i++) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
        rcode = 0xff;
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 400cf34:	0140fa04 	movi	r5,1000
 400cf38:	1009883a 	mov	r4,r2
 400cf3c:	400dcd40 	call	400dcd4 <__mulsi3>
 400cf40:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400cf44:	d0a81017 	ldw	r2,-24512(gp)
 400cf48:	100b883a 	mov	r5,r2
 400cf4c:	1809883a 	mov	r4,r3
 400cf50:	400dc180 	call	400dc18 <__udivsi3>
 400cf54:	1007883a 	mov	r3,r2
 400cf58:	e0bffc17 	ldw	r2,-16(fp)
 400cf5c:	18bfe736 	bltu	r3,r2,400cefc <__alt_mem_onchip_memory2_0+0xfc007d3c>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
                rcode = 0x00;
                break;
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 400cf60:	e0bffa03 	ldbu	r2,-24(fp)
 400cf64:	10000226 	beq	r2,zero,400cf70 <XferDispatchPkt+0xf8>
            return( rcode );
 400cf68:	e0bffa03 	ldbu	r2,-24(fp)
 400cf6c:	00002406 	br	400d000 <XferDispatchPkt+0x188>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 400cf70:	01003e04 	movi	r4,248
 400cf74:	400c6740 	call	400c674 <MAXreg_rd>
 400cf78:	108003cc 	andi	r2,r2,15
 400cf7c:	e0bffa05 	stb	r2,-24(fp)
        if( rcode == hrNAK ) {
 400cf80:	e0bffa03 	ldbu	r2,-24(fp)
 400cf84:	10800118 	cmpnei	r2,r2,4
 400cf88:	1000071e 	bne	r2,zero,400cfa8 <XferDispatchPkt+0x130>
            nak_count++;
 400cf8c:	e0bffa83 	ldbu	r2,-22(fp)
 400cf90:	10800044 	addi	r2,r2,1
 400cf94:	e0bffa85 	stb	r2,-22(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 400cf98:	e0bffa83 	ldbu	r2,-22(fp)
 400cf9c:	10803218 	cmpnei	r2,r2,200
 400cfa0:	10000b1e 	bne	r2,zero,400cfd0 <XferDispatchPkt+0x158>
                break;
 400cfa4:	00001506 	br	400cffc <XferDispatchPkt+0x184>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 400cfa8:	e0bffa03 	ldbu	r2,-24(fp)
 400cfac:	10800398 	cmpnei	r2,r2,14
 400cfb0:	10000f1e 	bne	r2,zero,400cff0 <XferDispatchPkt+0x178>
            retry_count++;
 400cfb4:	e0bffa43 	ldbu	r2,-23(fp)
 400cfb8:	10800044 	addi	r2,r2,1
 400cfbc:	e0bffa45 	stb	r2,-23(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 400cfc0:	e0bffa47 	ldb	r2,-23(fp)
 400cfc4:	108000d8 	cmpnei	r2,r2,3
 400cfc8:	10000b26 	beq	r2,zero,400cff8 <XferDispatchPkt+0x180>
                break;
            }
            else {
                continue;
 400cfcc:	00000106 	br	400cfd4 <XferDispatchPkt+0x15c>
            nak_count++;
            if( nak_count == USB_NAK_LIMIT ) {
                break;
            }
            else {
                continue;
 400cfd0:	0001883a 	nop
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 BYTE nak_count = 0;

 	 for(int i = 0; i < 5; i++) {
 400cfd4:	e0bffb17 	ldw	r2,-20(fp)
 400cfd8:	10800044 	addi	r2,r2,1
 400cfdc:	e0bffb15 	stw	r2,-20(fp)
 400cfe0:	e0bffb17 	ldw	r2,-20(fp)
 400cfe4:	10800150 	cmplti	r2,r2,5
 400cfe8:	103fba1e 	bne	r2,zero,400ced4 <__alt_mem_onchip_memory2_0+0xfc007d14>
 400cfec:	00000306 	br	400cffc <XferDispatchPkt+0x184>
            }
            else {
                continue;
            }
        }
        else break;
 400cff0:	0001883a 	nop
 400cff4:	00000106 	br	400cffc <XferDispatchPkt+0x184>
            }
        }
        if( rcode == hrTIMEOUT ) {
            retry_count++;
            if( retry_count == USB_RETRY_LIMIT ) {
                break;
 400cff8:	0001883a 	nop
                continue;
            }
        }
        else break;
    }//while( 1 )
    return( rcode );
 400cffc:	e0bffa03 	ldbu	r2,-24(fp)
}
 400d000:	e037883a 	mov	sp,fp
 400d004:	dfc00117 	ldw	ra,4(sp)
 400d008:	df000017 	ldw	fp,0(sp)
 400d00c:	dec00204 	addi	sp,sp,8
 400d010:	f800283a 	ret

0400d014 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 400d014:	defff604 	addi	sp,sp,-40
 400d018:	dfc00915 	stw	ra,36(sp)
 400d01c:	df000815 	stw	fp,32(sp)
 400d020:	df000804 	addi	fp,sp,32
 400d024:	2011883a 	mov	r8,r4
 400d028:	2809883a 	mov	r4,r5
 400d02c:	3007883a 	mov	r3,r6
 400d030:	e1fffe15 	stw	r7,-8(fp)
 400d034:	e0800217 	ldw	r2,8(fp)
 400d038:	e23ffb05 	stb	r8,-20(fp)
 400d03c:	e13ffc05 	stb	r4,-16(fp)
 400d040:	e0fffd0d 	sth	r3,-12(fp)
 400d044:	e0bfff05 	stb	r2,-4(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 400d048:	e03ff80d 	sth	zero,-32(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 400d04c:	e0fffb03 	ldbu	r3,-20(fp)
 400d050:	008100b4 	movhi	r2,1026
 400d054:	10890804 	addi	r2,r2,9248
 400d058:	180690fa 	slli	r3,r3,3
 400d05c:	10c5883a 	add	r2,r2,r3
 400d060:	10c00017 	ldw	r3,0(r2)
 400d064:	e0bffc03 	ldbu	r2,-16(fp)
 400d068:	100490fa 	slli	r2,r2,3
 400d06c:	1885883a 	add	r2,r3,r2
 400d070:	10800183 	ldbu	r2,6(r2)
 400d074:	10803fcc 	andi	r2,r2,255
 400d078:	100b883a 	mov	r5,r2
 400d07c:	01003a04 	movi	r4,232
 400d080:	400c4fc0 	call	400c4fc <MAXreg_wr>
    for(int i = 0; i < 5; i++) { // use a 'return' to exit this loop
 400d084:	e03ff915 	stw	zero,-28(fp)
 400d088:	00004706 	br	400d1a8 <XferInTransfer+0x194>
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 400d08c:	e0bffc03 	ldbu	r2,-16(fp)
 400d090:	100b883a 	mov	r5,r2
 400d094:	0009883a 	mov	r4,zero
 400d098:	400ce780 	call	400ce78 <XferDispatchPkt>
 400d09c:	e0bffa05 	stb	r2,-24(fp)
        if( rcode ) {
 400d0a0:	e0bffa03 	ldbu	r2,-24(fp)
 400d0a4:	10000226 	beq	r2,zero,400d0b0 <XferInTransfer+0x9c>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 400d0a8:	e0bffa03 	ldbu	r2,-24(fp)
 400d0ac:	00004106 	br	400d1b4 <XferInTransfer+0x1a0>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 400d0b0:	01003204 	movi	r4,200
 400d0b4:	400c6740 	call	400c674 <MAXreg_rd>
 400d0b8:	10803fcc 	andi	r2,r2,255
 400d0bc:	1080010c 	andi	r2,r2,4
 400d0c0:	1000021e 	bne	r2,zero,400d0cc <XferInTransfer+0xb8>
            return ( 0xf0 );                            //receive error
 400d0c4:	00bffc04 	movi	r2,-16
 400d0c8:	00003a06 	br	400d1b4 <XferInTransfer+0x1a0>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 400d0cc:	01000c04 	movi	r4,48
 400d0d0:	400c6740 	call	400c674 <MAXreg_rd>
 400d0d4:	e0bffa45 	stb	r2,-23(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 400d0d8:	e0bffa43 	ldbu	r2,-23(fp)
 400d0dc:	e1bffe17 	ldw	r6,-8(fp)
 400d0e0:	100b883a 	mov	r5,r2
 400d0e4:	01000204 	movi	r4,8
 400d0e8:	400c6f00 	call	400c6f0 <MAXbytes_rd>
 400d0ec:	e0bffe15 	stw	r2,-8(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 400d0f0:	01400104 	movi	r5,4
 400d0f4:	01003204 	movi	r4,200
 400d0f8:	400c4fc0 	call	400c4fc <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 400d0fc:	e0fffa43 	ldbu	r3,-23(fp)
 400d100:	e0bff80b 	ldhu	r2,-32(fp)
 400d104:	1885883a 	add	r2,r3,r2
 400d108:	e0bff80d 	sth	r2,-32(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 400d10c:	e0fffa43 	ldbu	r3,-23(fp)
 400d110:	e0bfff03 	ldbu	r2,-4(fp)
 400d114:	18800336 	bltu	r3,r2,400d124 <XferInTransfer+0x110>
 400d118:	e0fff80b 	ldhu	r3,-32(fp)
 400d11c:	e0bffd0b 	ldhu	r2,-12(fp)
 400d120:	18801e36 	bltu	r3,r2,400d19c <XferInTransfer+0x188>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 400d124:	01003e04 	movi	r4,248
 400d128:	400c6740 	call	400c674 <MAXreg_rd>
 400d12c:	10803fcc 	andi	r2,r2,255
 400d130:	1080040c 	andi	r2,r2,16
 400d134:	10000c26 	beq	r2,zero,400d168 <XferInTransfer+0x154>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 400d138:	e0fffb03 	ldbu	r3,-20(fp)
 400d13c:	008100b4 	movhi	r2,1026
 400d140:	10890804 	addi	r2,r2,9248
 400d144:	180690fa 	slli	r3,r3,3
 400d148:	10c5883a 	add	r2,r2,r3
 400d14c:	10c00017 	ldw	r3,0(r2)
 400d150:	e0bffc03 	ldbu	r2,-16(fp)
 400d154:	100490fa 	slli	r2,r2,3
 400d158:	1885883a 	add	r2,r3,r2
 400d15c:	00c00804 	movi	r3,32
 400d160:	10c00185 	stb	r3,6(r2)
 400d164:	00000b06 	br	400d194 <XferInTransfer+0x180>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 400d168:	e0fffb03 	ldbu	r3,-20(fp)
 400d16c:	008100b4 	movhi	r2,1026
 400d170:	10890804 	addi	r2,r2,9248
 400d174:	180690fa 	slli	r3,r3,3
 400d178:	10c5883a 	add	r2,r2,r3
 400d17c:	10c00017 	ldw	r3,0(r2)
 400d180:	e0bffc03 	ldbu	r2,-16(fp)
 400d184:	100490fa 	slli	r2,r2,3
 400d188:	1885883a 	add	r2,r3,r2
 400d18c:	00c00404 	movi	r3,16
 400d190:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 400d194:	0005883a 	mov	r2,zero
 400d198:	00000606 	br	400d1b4 <XferInTransfer+0x1a0>
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
    for(int i = 0; i < 5; i++) { // use a 'return' to exit this loop
 400d19c:	e0bff917 	ldw	r2,-28(fp)
 400d1a0:	10800044 	addi	r2,r2,1
 400d1a4:	e0bff915 	stw	r2,-28(fp)
 400d1a8:	e0bff917 	ldw	r2,-28(fp)
 400d1ac:	10800150 	cmplti	r2,r2,5
 400d1b0:	103fb61e 	bne	r2,zero,400d08c <__alt_mem_onchip_memory2_0+0xfc007ecc>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
            }
            return( 0 );
        }
  }//while( 1 )
}
 400d1b4:	e037883a 	mov	sp,fp
 400d1b8:	dfc00117 	ldw	ra,4(sp)
 400d1bc:	df000017 	ldw	fp,0(sp)
 400d1c0:	dec00204 	addi	sp,sp,8
 400d1c4:	f800283a 	ret

0400d1c8 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 400d1c8:	defffe04 	addi	sp,sp,-8
 400d1cc:	df000115 	stw	fp,4(sp)
 400d1d0:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 400d1d4:	e03fff05 	stb	zero,-4(fp)
 400d1d8:	00001006 	br	400d21c <USB_init+0x54>
        devtable[ i ].epinfo = NULL;       //clear device table
 400d1dc:	e0ffff03 	ldbu	r3,-4(fp)
 400d1e0:	008100b4 	movhi	r2,1026
 400d1e4:	10890804 	addi	r2,r2,9248
 400d1e8:	180690fa 	slli	r3,r3,3
 400d1ec:	10c5883a 	add	r2,r2,r3
 400d1f0:	10000015 	stw	zero,0(r2)
        devtable[ i ].devclass = 0;
 400d1f4:	e0ffff03 	ldbu	r3,-4(fp)
 400d1f8:	008100b4 	movhi	r2,1026
 400d1fc:	10890804 	addi	r2,r2,9248
 400d200:	180690fa 	slli	r3,r3,3
 400d204:	10c5883a 	add	r2,r2,r3
 400d208:	10800104 	addi	r2,r2,4
 400d20c:	10000005 	stb	zero,0(r2)
}
/* initialization of USB data structures */
void USB_init( void )
{
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 400d210:	e0bfff03 	ldbu	r2,-4(fp)
 400d214:	10800044 	addi	r2,r2,1
 400d218:	e0bfff05 	stb	r2,-4(fp)
 400d21c:	e0bfff03 	ldbu	r2,-4(fp)
 400d220:	10800270 	cmpltui	r2,r2,9
 400d224:	103fed1e 	bne	r2,zero,400d1dc <__alt_mem_onchip_memory2_0+0xfc00801c>
        devtable[ i ].epinfo = NULL;       //clear device table
        devtable[ i ].devclass = 0;
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 400d228:	008100b4 	movhi	r2,1026
 400d22c:	10890804 	addi	r2,r2,9248
 400d230:	d0e7fd04 	addi	r3,gp,-24588
 400d234:	10c00015 	stw	r3,0(r2)
    dev0ep.MaxPktSize = 0;
 400d238:	d027fd8d 	sth	zero,-24586(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 400d23c:	00801004 	movi	r2,64
 400d240:	d0a7fe45 	stb	r2,-24583(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 400d244:	00800404 	movi	r2,16
 400d248:	d0a7fe85 	stb	r2,-24582(gp)
}
 400d24c:	0001883a 	nop
 400d250:	e037883a 	mov	sp,fp
 400d254:	df000017 	ldw	fp,0(sp)
 400d258:	dec00104 	addi	sp,sp,4
 400d25c:	f800283a 	ret

0400d260 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 400d260:	deffb204 	addi	sp,sp,-312
 400d264:	dfc04d15 	stw	ra,308(sp)
 400d268:	df004c15 	stw	fp,304(sp)
 400d26c:	dc004b15 	stw	r16,300(sp)
 400d270:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 400d274:	d0a00603 	ldbu	r2,-32744(gp)
 400d278:	10803fcc 	andi	r2,r2,255
 400d27c:	10803c0c 	andi	r2,r2,240
 400d280:	10c00820 	cmpeqi	r3,r2,32
 400d284:	1801121e 	bne	r3,zero,400d6d0 <USB_Task+0x470>
 400d288:	10c00848 	cmpgei	r3,r2,33
 400d28c:	1800041e 	bne	r3,zero,400d2a0 <USB_Task+0x40>
 400d290:	10000a26 	beq	r2,zero,400d2bc <USB_Task+0x5c>
 400d294:	10800420 	cmpeqi	r2,r2,16
 400d298:	10001b1e 	bne	r2,zero,400d308 <USB_Task+0xa8>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 400d29c:	00017a06 	br	400d888 <USB_Task+0x628>
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 400d2a0:	10c01020 	cmpeqi	r3,r2,64
 400d2a4:	18016f1e 	bne	r3,zero,400d864 <USB_Task+0x604>
 400d2a8:	10c03fe0 	cmpeqi	r3,r2,255
 400d2ac:	18016f1e 	bne	r3,zero,400d86c <USB_Task+0x60c>
 400d2b0:	10800c20 	cmpeqi	r2,r2,48
 400d2b4:	1001441e 	bne	r2,zero,400d7c8 <USB_Task+0x568>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 400d2b8:	00017306 	br	400d888 <USB_Task+0x628>
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
 400d2bc:	d0a00603 	ldbu	r2,-32744(gp)
 400d2c0:	10803fcc 	andi	r2,r2,255
 400d2c4:	10c000e0 	cmpeqi	r3,r2,3
 400d2c8:	1800091e 	bne	r3,zero,400d2f0 <USB_Task+0x90>
 400d2cc:	10c00120 	cmpeqi	r3,r2,4
 400d2d0:	18000b1e 	bne	r3,zero,400d300 <USB_Task+0xa0>
 400d2d4:	10800060 	cmpeqi	r2,r2,1
 400d2d8:	1000011e 	bne	r2,zero,400d2e0 <USB_Task+0x80>
                    break;
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 400d2dc:	00016a06 	br	400d888 <USB_Task+0x628>
        /* Detached state - when nothing is connected to ( or just disconnected from) USB bus   */
        case( USB_STATE_DETACHED ):
            switch( usb_task_state ) {
                case( USB_DETACHED_SUBSTATE_INITIALIZE ):
                    /* cleanup device data structures */
                    USB_init();
 400d2e0:	400d1c80 	call	400d1c8 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 400d2e4:	008000c4 	movi	r2,3
 400d2e8:	d0a00605 	stb	r2,-32744(gp)
                    break;
 400d2ec:	00000506 	br	400d304 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE ):
                    /* Do nothing */
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 400d2f0:	01400104 	movi	r5,4
 400d2f4:	01003a04 	movi	r4,232
 400d2f8:	400c4fc0 	call	400c4fc <MAXreg_wr>
                    break;
 400d2fc:	00000106 	br	400d304 <USB_Task+0xa4>
                case( USB_DETACHED_SUBSTATE_ILLEGAL ):
                    /* don't know what to do yet */
                    break;
 400d300:	0001883a 	nop
            }//switch( usb_task_state )
            break;//( USB_STATE_DETACHED ):
 400d304:	00016006 	br	400d888 <USB_Task+0x628>
            /**/
        case( USB_STATE_ATTACHED ):                     //prepare for enumeration
            switch( usb_task_state ) {
 400d308:	d0a00603 	ldbu	r2,-32744(gp)
 400d30c:	10803fcc 	andi	r2,r2,255
 400d310:	10bffc04 	addi	r2,r2,-16
 400d314:	10c001a8 	cmpgeui	r3,r2,6
 400d318:	1801561e 	bne	r3,zero,400d874 <USB_Task+0x614>
 400d31c:	100690ba 	slli	r3,r2,2
 400d320:	00810074 	movhi	r2,1025
 400d324:	10b4cd04 	addi	r2,r2,-11468
 400d328:	1885883a 	add	r2,r3,r2
 400d32c:	10800017 	ldw	r2,0(r2)
 400d330:	1000683a 	jmp	r2
 400d334:	0400d34c 	andi	r16,zero,845
 400d338:	0400d384 	movi	r16,846
 400d33c:	0400d3c0 	call	400d3c <__reset-0x3bff2c4>
 400d340:	0400d3e4 	muli	r16,zero,847
 400d344:	0400d424 	muli	r16,zero,848
 400d348:	0400d438 	rdprs	r16,zero,848
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400d34c:	d0a81117 	ldw	r2,-24508(gp)
                case( USB_STATE_ATTACHED ):
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 400d350:	0140fa04 	movi	r5,1000
 400d354:	1009883a 	mov	r4,r2
 400d358:	400dcd40 	call	400dcd4 <__mulsi3>
 400d35c:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400d360:	d0a81017 	ldw	r2,-24512(gp)
 400d364:	100b883a 	mov	r5,r2
 400d368:	1809883a 	mov	r4,r3
 400d36c:	400dc180 	call	400dc18 <__udivsi3>
 400d370:	10803204 	addi	r2,r2,200
 400d374:	d0a80015 	stw	r2,-24576(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 400d378:	00800444 	movi	r2,17
 400d37c:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_STATE_ATTACHED )
 400d380:	0000d206 	br	400d6cc <USB_Task+0x46c>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400d384:	d0a81117 	ldw	r2,-24508(gp)
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 400d388:	0140fa04 	movi	r5,1000
 400d38c:	1009883a 	mov	r4,r2
 400d390:	400dcd40 	call	400dcd4 <__mulsi3>
 400d394:	1007883a 	mov	r3,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400d398:	d0a81017 	ldw	r2,-24512(gp)
 400d39c:	100b883a 	mov	r5,r2
 400d3a0:	1809883a 	mov	r4,r3
 400d3a4:	400dc180 	call	400dc18 <__udivsi3>
 400d3a8:	1007883a 	mov	r3,r2
 400d3ac:	d0a80017 	ldw	r2,-24576(gp)
 400d3b0:	10c0c32e 	bgeu	r2,r3,400d6c0 <USB_Task+0x460>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 400d3b4:	00800484 	movi	r2,18
 400d3b8:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 400d3bc:	0000c006 	br	400d6c0 <USB_Task+0x460>
                case( USB_ATTACHED_SUBSTATE_RESET_DEVICE ):
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 400d3c0:	01400044 	movi	r5,1
 400d3c4:	01003204 	movi	r4,200
 400d3c8:	400c4fc0 	call	400c4fc <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 400d3cc:	01400044 	movi	r5,1
 400d3d0:	01003a04 	movi	r4,232
 400d3d4:	400c4fc0 	call	400c4fc <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 400d3d8:	008004c4 	movi	r2,19
 400d3dc:	d0a00605 	stb	r2,-32744(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 400d3e0:	0000ba06 	br	400d6cc <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE ):                  //wait for bus reset and first SOF
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 400d3e4:	01003a04 	movi	r4,232
 400d3e8:	400c6740 	call	400c674 <MAXreg_rd>
 400d3ec:	10803fcc 	andi	r2,r2,255
 400d3f0:	1080004c 	andi	r2,r2,1
 400d3f4:	1000b41e 	bne	r2,zero,400d6c8 <USB_Task+0x468>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 400d3f8:	01003604 	movi	r4,216
 400d3fc:	400c6740 	call	400c674 <MAXreg_rd>
 400d400:	10800214 	ori	r2,r2,8
 400d404:	e0bfb945 	stb	r2,-283(fp)
                        MAXreg_wr( rMODE, tmpdata );
 400d408:	e0bfb943 	ldbu	r2,-283(fp)
 400d40c:	100b883a 	mov	r5,r2
 400d410:	01003604 	movi	r4,216
 400d414:	400c4fc0 	call	400c4fc <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 400d418:	00800504 	movi	r2,20
 400d41c:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 400d420:	0000a906 	br	400d6c8 <USB_Task+0x468>
                case( USB_ATTACHED_SUBSTATE_WAIT_SOF ):
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 400d424:	01003204 	movi	r4,200
 400d428:	400c6740 	call	400c674 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 400d42c:	00800544 	movi	r2,21
 400d430:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 400d434:	0000a506 	br	400d6cc <USB_Task+0x46c>
                case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):   //send request for first 8 bytes of device descriptor
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 400d438:	008100b4 	movhi	r2,1026
 400d43c:	10890804 	addi	r2,r2,9248
 400d440:	10800017 	ldw	r2,0(r2)
 400d444:	00c00204 	movi	r3,8
 400d448:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 400d44c:	e0bfba04 	addi	r2,fp,-280
 400d450:	d8800415 	stw	r2,16(sp)
 400d454:	00800204 	movi	r2,8
 400d458:	d8800315 	stw	r2,12(sp)
 400d45c:	d8000215 	stw	zero,8(sp)
 400d460:	00800044 	movi	r2,1
 400d464:	d8800115 	stw	r2,4(sp)
 400d468:	d8000015 	stw	zero,0(sp)
 400d46c:	01c00184 	movi	r7,6
 400d470:	01802004 	movi	r6,128
 400d474:	000b883a 	mov	r5,zero
 400d478:	0009883a 	mov	r4,zero
 400d47c:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400d480:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 400d484:	e0bfb983 	ldbu	r2,-282(fp)
 400d488:	1000861e 	bne	r2,zero,400d6a4 <USB_Task+0x444>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 400d48c:	008100b4 	movhi	r2,1026
 400d490:	10890804 	addi	r2,r2,9248
 400d494:	10800017 	ldw	r2,0(r2)
 400d498:	e0ffbbc3 	ldbu	r3,-273(fp)
 400d49c:	18c03fcc 	andi	r3,r3,255
 400d4a0:	10c0008d 	sth	r3,2(r2)

                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 400d4a4:	e0bfba03 	ldbu	r2,-280(fp)
 400d4a8:	10803fcc 	andi	r2,r2,255
 400d4ac:	e0ffba04 	addi	r3,fp,-280
 400d4b0:	d8c00415 	stw	r3,16(sp)
 400d4b4:	d8800315 	stw	r2,12(sp)
 400d4b8:	d8000215 	stw	zero,8(sp)
 400d4bc:	00800044 	movi	r2,1
 400d4c0:	d8800115 	stw	r2,4(sp)
 400d4c4:	d8000015 	stw	zero,0(sp)
 400d4c8:	01c00184 	movi	r7,6
 400d4cc:	01802004 	movi	r6,128
 400d4d0:	000b883a 	mov	r5,zero
 400d4d4:	0009883a 	mov	r4,zero
 400d4d8:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400d4dc:	e0bfb985 	stb	r2,-282(fp)
                        //pull the string descriptor for the product if it exists
            			//hackish, store this somewhere
                        if (buf.iManufacturer != 0)
 400d4e0:	e0bfbd83 	ldbu	r2,-266(fp)
 400d4e4:	10803fcc 	andi	r2,r2,255
 400d4e8:	10003426 	beq	r2,zero,400d5bc <USB_Task+0x35c>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 400d4ec:	e0bfbd83 	ldbu	r2,-266(fp)
 400d4f0:	10803fcc 	andi	r2,r2,255
 400d4f4:	e0ffbe84 	addi	r3,fp,-262
 400d4f8:	d8c00415 	stw	r3,16(sp)
 400d4fc:	00c00084 	movi	r3,2
 400d500:	d8c00315 	stw	r3,12(sp)
 400d504:	00c10244 	movi	r3,1033
 400d508:	d8c00215 	stw	r3,8(sp)
 400d50c:	00c000c4 	movi	r3,3
 400d510:	d8c00115 	stw	r3,4(sp)
 400d514:	d8800015 	stw	r2,0(sp)
 400d518:	01c00184 	movi	r7,6
 400d51c:	01802004 	movi	r6,128
 400d520:	000b883a 	mov	r5,zero
 400d524:	0009883a 	mov	r4,zero
 400d528:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400d52c:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 400d530:	e0bfbd83 	ldbu	r2,-266(fp)
 400d534:	10803fcc 	andi	r2,r2,255
 400d538:	e0ffbe83 	ldbu	r3,-262(fp)
 400d53c:	18c03fcc 	andi	r3,r3,255
 400d540:	e13fbe84 	addi	r4,fp,-262
 400d544:	d9000415 	stw	r4,16(sp)
 400d548:	d8c00315 	stw	r3,12(sp)
 400d54c:	00c10244 	movi	r3,1033
 400d550:	d8c00215 	stw	r3,8(sp)
 400d554:	00c000c4 	movi	r3,3
 400d558:	d8c00115 	stw	r3,4(sp)
 400d55c:	d8800015 	stw	r2,0(sp)
 400d560:	01c00184 	movi	r7,6
 400d564:	01802004 	movi	r6,128
 400d568:	000b883a 	mov	r5,zero
 400d56c:	0009883a 	mov	r4,zero
 400d570:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400d574:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 400d578:	e0bfbd83 	ldbu	r2,-266(fp)
 400d57c:	14003fcc 	andi	r16,r2,255
 400d580:	e0bfbe83 	ldbu	r2,-262(fp)
 400d584:	10803fcc 	andi	r2,r2,255
 400d588:	1004d07a 	srli	r2,r2,1
 400d58c:	10bfffc4 	addi	r2,r2,-1
 400d590:	10c03fcc 	andi	r3,r2,255
 400d594:	e0bfbe84 	addi	r2,fp,-262
 400d598:	10800084 	addi	r2,r2,2
 400d59c:	180b883a 	mov	r5,r3
 400d5a0:	1009883a 	mov	r4,r2
 400d5a4:	400da280 	call	400da28 <ConvUTF8ToStr>
 400d5a8:	100d883a 	mov	r6,r2
 400d5ac:	800b883a 	mov	r5,r16
 400d5b0:	010100b4 	movhi	r4,1026
 400d5b4:	21374304 	addi	r4,r4,-8948
 400d5b8:	400fd540 	call	400fd54 <printf>
                		}
                		if (buf.iProduct != 0)
 400d5bc:	e0bfbdc3 	ldbu	r2,-265(fp)
 400d5c0:	10803fcc 	andi	r2,r2,255
 400d5c4:	10003426 	beq	r2,zero,400d698 <USB_Task+0x438>
                		{
                        	USB_STRING_DESCRIPTOR strDesc;
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 400d5c8:	e0bfbdc3 	ldbu	r2,-265(fp)
 400d5cc:	10803fcc 	andi	r2,r2,255
 400d5d0:	e0ffbe84 	addi	r3,fp,-262
 400d5d4:	d8c00415 	stw	r3,16(sp)
 400d5d8:	00c00084 	movi	r3,2
 400d5dc:	d8c00315 	stw	r3,12(sp)
 400d5e0:	00c10244 	movi	r3,1033
 400d5e4:	d8c00215 	stw	r3,8(sp)
 400d5e8:	00c000c4 	movi	r3,3
 400d5ec:	d8c00115 	stw	r3,4(sp)
 400d5f0:	d8800015 	stw	r2,0(sp)
 400d5f4:	01c00184 	movi	r7,6
 400d5f8:	01802004 	movi	r6,128
 400d5fc:	000b883a 	mov	r5,zero
 400d600:	0009883a 	mov	r4,zero
 400d604:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400d608:	e0bfb985 	stb	r2,-282(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 400d60c:	e0bfbdc3 	ldbu	r2,-265(fp)
 400d610:	10803fcc 	andi	r2,r2,255
 400d614:	e0ffbe83 	ldbu	r3,-262(fp)
 400d618:	18c03fcc 	andi	r3,r3,255
 400d61c:	e13fbe84 	addi	r4,fp,-262
 400d620:	d9000415 	stw	r4,16(sp)
 400d624:	d8c00315 	stw	r3,12(sp)
 400d628:	00c10244 	movi	r3,1033
 400d62c:	d8c00215 	stw	r3,8(sp)
 400d630:	00c000c4 	movi	r3,3
 400d634:	d8c00115 	stw	r3,4(sp)
 400d638:	d8800015 	stw	r2,0(sp)
 400d63c:	01c00184 	movi	r7,6
 400d640:	01802004 	movi	r6,128
 400d644:	000b883a 	mov	r5,zero
 400d648:	0009883a 	mov	r4,zero
 400d64c:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400d650:	e0bfb985 	stb	r2,-282(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 400d654:	e0bfbdc3 	ldbu	r2,-265(fp)
 400d658:	14003fcc 	andi	r16,r2,255
 400d65c:	e0bfbe83 	ldbu	r2,-262(fp)
 400d660:	10803fcc 	andi	r2,r2,255
 400d664:	1004d07a 	srli	r2,r2,1
 400d668:	10bfffc4 	addi	r2,r2,-1
 400d66c:	10c03fcc 	andi	r3,r2,255
 400d670:	e0bfbe84 	addi	r2,fp,-262
 400d674:	10800084 	addi	r2,r2,2
 400d678:	180b883a 	mov	r5,r3
 400d67c:	1009883a 	mov	r4,r2
 400d680:	400da280 	call	400da28 <ConvUTF8ToStr>
 400d684:	100d883a 	mov	r6,r2
 400d688:	800b883a 	mov	r5,r16
 400d68c:	010100b4 	movhi	r4,1026
 400d690:	21374904 	addi	r4,r4,-8924
 400d694:	400fd540 	call	400fd54 <printf>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;
 400d698:	00800804 	movi	r2,32
 400d69c:	d0a00605 	stb	r2,-32744(gp)
                    else {
                        usb_error = rcode;
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 400d6a0:	00000a06 	br	400d6cc <USB_Task+0x46c>
                		}
                        usb_task_state = USB_STATE_ADDRESSING;

                    }
                    else {
                        usb_error = rcode;
 400d6a4:	e0bfb983 	ldbu	r2,-282(fp)
 400d6a8:	d0a80145 	stb	r2,-24571(gp)
                        last_usb_task_state = usb_task_state;
 400d6ac:	d0a00603 	ldbu	r2,-32744(gp)
 400d6b0:	d0a7ff05 	stb	r2,-24580(gp)
                        usb_task_state = USB_STATE_ERROR;
 400d6b4:	00bfffc4 	movi	r2,-1
 400d6b8:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 400d6bc:	00000306 	br	400d6cc <USB_Task+0x46c>
                    break;//case( USB_STATE_ATTACHED )
                case( USB_ATTACHED_SUBSTATE_SETTLE ):   //waiting for settle timer to expire
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 400d6c0:	0001883a 	nop
 400d6c4:	00006b06 	br	400d874 <USB_Task+0x614>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
                        MAXreg_wr( rMODE, tmpdata );
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 400d6c8:	0001883a 	nop
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 400d6cc:	00006906 	br	400d874 <USB_Task+0x614>
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 400d6d0:	00800044 	movi	r2,1
 400d6d4:	e0bfb905 	stb	r2,-284(fp)
 400d6d8:	00002d06 	br	400d790 <USB_Task+0x530>
                if( devtable[ i ].epinfo == NULL ) {
 400d6dc:	e0ffb903 	ldbu	r3,-284(fp)
 400d6e0:	008100b4 	movhi	r2,1026
 400d6e4:	10890804 	addi	r2,r2,9248
 400d6e8:	180690fa 	slli	r3,r3,3
 400d6ec:	10c5883a 	add	r2,r2,r3
 400d6f0:	10800017 	ldw	r2,0(r2)
 400d6f4:	1000231e 	bne	r2,zero,400d784 <USB_Task+0x524>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 400d6f8:	e13fb903 	ldbu	r4,-284(fp)
 400d6fc:	008100b4 	movhi	r2,1026
 400d700:	10890804 	addi	r2,r2,9248
 400d704:	10c00017 	ldw	r3,0(r2)
 400d708:	008100b4 	movhi	r2,1026
 400d70c:	10890804 	addi	r2,r2,9248
 400d710:	200890fa 	slli	r4,r4,3
 400d714:	1105883a 	add	r2,r2,r4
 400d718:	10c00015 	stw	r3,0(r2)
                    //devtable[ i ].epinfo->MaxPktSize = devtable[ 0 ].epinfo->MaxPktSize;  //copy uninitialized device record to have correct MaxPktSize
                    rcode = XferSetAddr( 0, 0, i );
 400d71c:	e0bfb903 	ldbu	r2,-284(fp)
 400d720:	d8000415 	stw	zero,16(sp)
 400d724:	d8000315 	stw	zero,12(sp)
 400d728:	d8000215 	stw	zero,8(sp)
 400d72c:	d8000115 	stw	zero,4(sp)
 400d730:	d8800015 	stw	r2,0(sp)
 400d734:	01c00144 	movi	r7,5
 400d738:	000d883a 	mov	r6,zero
 400d73c:	000b883a 	mov	r5,zero
 400d740:	0009883a 	mov	r4,zero
 400d744:	400cbd00 	call	400cbd0 <XferCtrlReq>
 400d748:	e0bfb985 	stb	r2,-282(fp)
                    if( rcode == 0 ) {
 400d74c:	e0bfb983 	ldbu	r2,-282(fp)
 400d750:	1000051e 	bne	r2,zero,400d768 <USB_Task+0x508>
                        tmp_addr = i;
 400d754:	e0bfb903 	ldbu	r2,-284(fp)
 400d758:	d0a80105 	stb	r2,-24572(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 400d75c:	00800c04 	movi	r2,48
 400d760:	d0a00605 	stb	r2,-32744(gp)
                    else {
                        usb_error = rcode;          //set address error
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 400d764:	00000d06 	br	400d79c <USB_Task+0x53c>
                    if( rcode == 0 ) {
                        tmp_addr = i;
                        usb_task_state = USB_STATE_CONFIGURING;
                    }
                    else {
                        usb_error = rcode;          //set address error
 400d768:	e0bfb983 	ldbu	r2,-282(fp)
 400d76c:	d0a80145 	stb	r2,-24571(gp)
                        last_usb_task_state = usb_task_state;
 400d770:	d0a00603 	ldbu	r2,-32744(gp)
 400d774:	d0a7ff05 	stb	r2,-24580(gp)
                        usb_task_state = USB_STATE_ERROR;
 400d778:	00bfffc4 	movi	r2,-1
 400d77c:	d0a00605 	stb	r2,-32744(gp)
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
 400d780:	00000606 	br	400d79c <USB_Task+0x53c>
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
        case( USB_STATE_ADDRESSING ):   //give device an address
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 400d784:	e0bfb903 	ldbu	r2,-284(fp)
 400d788:	10800044 	addi	r2,r2,1
 400d78c:	e0bfb905 	stb	r2,-284(fp)
 400d790:	e0bfb903 	ldbu	r2,-284(fp)
 400d794:	10800230 	cmpltui	r2,r2,8
 400d798:	103fd01e 	bne	r2,zero,400d6dc <__alt_mem_onchip_memory2_0+0xfc00851c>
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;  //break if address assigned or error occurred during address assignment attempt
                }
            }
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 400d79c:	d0a00603 	ldbu	r2,-32744(gp)
 400d7a0:	10803fcc 	andi	r2,r2,255
 400d7a4:	10800818 	cmpnei	r2,r2,32
 400d7a8:	1000341e 	bne	r2,zero,400d87c <USB_Task+0x61c>
                usb_error = 0xfe;
 400d7ac:	00bfff84 	movi	r2,-2
 400d7b0:	d0a80145 	stb	r2,-24571(gp)
                last_usb_task_state = usb_task_state;
 400d7b4:	d0a00603 	ldbu	r2,-32744(gp)
 400d7b8:	d0a7ff05 	stb	r2,-24580(gp)
                usb_task_state = USB_STATE_ERROR;
 400d7bc:	00bfffc4 	movi	r2,-1
 400d7c0:	d0a00605 	stb	r2,-32744(gp)
            }
            break;//case ( USB_STATE_ADDRESSING )
 400d7c4:	00002d06 	br	400d87c <USB_Task+0x61c>
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 400d7c8:	e03fb905 	stb	zero,-284(fp)
 400d7cc:	00001706 	br	400d82c <USB_Task+0x5cc>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 400d7d0:	e0bfb903 	ldbu	r2,-284(fp)
 400d7d4:	040100b4 	movhi	r16,1026
 400d7d8:	84392104 	addi	r16,r16,-7036
 400d7dc:	01400304 	movi	r5,12
 400d7e0:	1009883a 	mov	r4,r2
 400d7e4:	400dcd40 	call	400dcd4 <__mulsi3>
 400d7e8:	8085883a 	add	r2,r16,r2
 400d7ec:	10800017 	ldw	r2,0(r2)
 400d7f0:	d0e80103 	ldbu	r3,-24572(gp)
 400d7f4:	18c03fcc 	andi	r3,r3,255
 400d7f8:	000b883a 	mov	r5,zero
 400d7fc:	1809883a 	mov	r4,r3
 400d800:	103ee83a 	callr	r2
 400d804:	e0bfb985 	stb	r2,-282(fp)
                if( rcode == TRUE ) {
 400d808:	e0bfb983 	ldbu	r2,-282(fp)
 400d80c:	10800058 	cmpnei	r2,r2,1
 400d810:	1000031e 	bne	r2,zero,400d820 <USB_Task+0x5c0>
			        usb_task_state = USB_STATE_RUNNING;
 400d814:	00801004 	movi	r2,64
 400d818:	d0a00605 	stb	r2,-32744(gp)
                    break;
 400d81c:	00000606 	br	400d838 <USB_Task+0x5d8>
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
        case( USB_STATE_CONFIGURING ):              //checking for driver
			//run device class probes until one returns TRUE
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 400d820:	e0bfb903 	ldbu	r2,-284(fp)
 400d824:	10800044 	addi	r2,r2,1
 400d828:	e0bfb905 	stb	r2,-284(fp)
 400d82c:	e0bfb903 	ldbu	r2,-284(fp)
 400d830:	10800130 	cmpltui	r2,r2,4
 400d834:	103fe61e 	bne	r2,zero,400d7d0 <__alt_mem_onchip_memory2_0+0xfc008610>
                if( rcode == TRUE ) {
			        usb_task_state = USB_STATE_RUNNING;
                    break;
                }
            }
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 400d838:	d0a00603 	ldbu	r2,-32744(gp)
 400d83c:	10803fcc 	andi	r2,r2,255
 400d840:	10800c18 	cmpnei	r2,r2,48
 400d844:	10000f1e 	bne	r2,zero,400d884 <USB_Task+0x624>
                usb_error = 0xfd;
 400d848:	00bfff44 	movi	r2,-3
 400d84c:	d0a80145 	stb	r2,-24571(gp)
                last_usb_task_state = usb_task_state;
 400d850:	d0a00603 	ldbu	r2,-32744(gp)
 400d854:	d0a7ff05 	stb	r2,-24580(gp)
                usb_task_state = USB_STATE_ERROR;
 400d858:	00bfffc4 	movi	r2,-1
 400d85c:	d0a00605 	stb	r2,-32744(gp)
            }
            break;//( USB_STATE_CONFIGURING )
 400d860:	00000806 	br	400d884 <USB_Task+0x624>
        case( USB_STATE_RUNNING ):
          //vTaskDelay( LED_RATE );
            break;//( USB_STATE_RUNNING )
 400d864:	0001883a 	nop
 400d868:	00000706 	br	400d888 <USB_Task+0x628>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
 400d86c:	0001883a 	nop
 400d870:	00000506 	br	400d888 <USB_Task+0x628>
                        last_usb_task_state = usb_task_state;
                        usb_task_state = USB_STATE_ERROR;
                    }
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
            }//switch( usb_task_state )
            break;//case ( USB_STATE_ATTACHED )
 400d874:	0001883a 	nop
 400d878:	00000306 	br	400d888 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
                usb_error = 0xfe;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//case ( USB_STATE_ADDRESSING )
 400d87c:	0001883a 	nop
 400d880:	00000106 	br	400d888 <USB_Task+0x628>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
                usb_error = 0xfd;
                last_usb_task_state = usb_task_state;
                usb_task_state = USB_STATE_ERROR;
            }
            break;//( USB_STATE_CONFIGURING )
 400d884:	0001883a 	nop
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
    }//switch( usb_task_state & STATE_MASK )
}
 400d888:	0001883a 	nop
 400d88c:	e6ffff04 	addi	sp,fp,-4
 400d890:	dfc00217 	ldw	ra,8(sp)
 400d894:	df000117 	ldw	fp,4(sp)
 400d898:	dc000017 	ldw	r16,0(sp)
 400d89c:	dec00304 	addi	sp,sp,12
 400d8a0:	f800283a 	ret

0400d8a4 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 400d8a4:	defffd04 	addi	sp,sp,-12
 400d8a8:	df000215 	stw	fp,8(sp)
 400d8ac:	df000204 	addi	fp,sp,8
 400d8b0:	2005883a 	mov	r2,r4
 400d8b4:	e17fff15 	stw	r5,-4(fp)
 400d8b8:	e0bffe05 	stb	r2,-8(fp)
    return( FALSE );
 400d8bc:	0005883a 	mov	r2,zero
}
 400d8c0:	e037883a 	mov	sp,fp
 400d8c4:	df000017 	ldw	fp,0(sp)
 400d8c8:	dec00104 	addi	sp,sp,4
 400d8cc:	f800283a 	ret

0400d8d0 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 400d8d0:	defffb04 	addi	sp,sp,-20
 400d8d4:	df000415 	stw	fp,16(sp)
 400d8d8:	df000404 	addi	fp,sp,16
 400d8dc:	2007883a 	mov	r3,r4
 400d8e0:	2805883a 	mov	r2,r5
 400d8e4:	e1bffe15 	stw	r6,-8(fp)
 400d8e8:	e1ffff15 	stw	r7,-4(fp)
 400d8ec:	e0fffc05 	stb	r3,-16(fp)
 400d8f0:	e0bffd05 	stb	r2,-12(fp)

	return( FALSE );
 400d8f4:	0005883a 	mov	r2,zero

}
 400d8f8:	e037883a 	mov	sp,fp
 400d8fc:	df000017 	ldw	fp,0(sp)
 400d900:	dec00104 	addi	sp,sp,4
 400d904:	f800283a 	ret

0400d908 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 400d908:	defffd04 	addi	sp,sp,-12
 400d90c:	df000215 	stw	fp,8(sp)
 400d910:	df000204 	addi	fp,sp,8
 400d914:	2005883a 	mov	r2,r4
 400d918:	e17fff15 	stw	r5,-4(fp)
 400d91c:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 400d920:	0005883a 	mov	r2,zero

}
 400d924:	e037883a 	mov	sp,fp
 400d928:	df000017 	ldw	fp,0(sp)
 400d92c:	dec00104 	addi	sp,sp,4
 400d930:	f800283a 	ret

0400d934 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 400d934:	defffb04 	addi	sp,sp,-20
 400d938:	df000415 	stw	fp,16(sp)
 400d93c:	df000404 	addi	fp,sp,16
 400d940:	2007883a 	mov	r3,r4
 400d944:	2805883a 	mov	r2,r5
 400d948:	e1bffe15 	stw	r6,-8(fp)
 400d94c:	e1ffff15 	stw	r7,-4(fp)
 400d950:	e0fffc05 	stb	r3,-16(fp)
 400d954:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 400d958:	0005883a 	mov	r2,zero
}
 400d95c:	e037883a 	mov	sp,fp
 400d960:	df000017 	ldw	fp,0(sp)
 400d964:	dec00104 	addi	sp,sp,4
 400d968:	f800283a 	ret

0400d96c <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 400d96c:	defffd04 	addi	sp,sp,-12
 400d970:	df000215 	stw	fp,8(sp)
 400d974:	df000204 	addi	fp,sp,8
 400d978:	2005883a 	mov	r2,r4
 400d97c:	e17fff15 	stw	r5,-4(fp)
 400d980:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 400d984:	0005883a 	mov	r2,zero
}
 400d988:	e037883a 	mov	sp,fp
 400d98c:	df000017 	ldw	fp,0(sp)
 400d990:	dec00104 	addi	sp,sp,4
 400d994:	f800283a 	ret

0400d998 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 400d998:	defffb04 	addi	sp,sp,-20
 400d99c:	df000415 	stw	fp,16(sp)
 400d9a0:	df000404 	addi	fp,sp,16
 400d9a4:	2007883a 	mov	r3,r4
 400d9a8:	2805883a 	mov	r2,r5
 400d9ac:	e1bffe15 	stw	r6,-8(fp)
 400d9b0:	e1ffff15 	stw	r7,-4(fp)
 400d9b4:	e0fffc05 	stb	r3,-16(fp)
 400d9b8:	e0bffd05 	stb	r2,-12(fp)
	return( FALSE );
 400d9bc:	0005883a 	mov	r2,zero
}
 400d9c0:	e037883a 	mov	sp,fp
 400d9c4:	df000017 	ldw	fp,0(sp)
 400d9c8:	dec00104 	addi	sp,sp,4
 400d9cc:	f800283a 	ret

0400d9d0 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 400d9d0:	deffff04 	addi	sp,sp,-4
 400d9d4:	df000015 	stw	fp,0(sp)
 400d9d8:	d839883a 	mov	fp,sp
    return( usb_task_state );
 400d9dc:	d0a00603 	ldbu	r2,-32744(gp)
}
 400d9e0:	e037883a 	mov	sp,fp
 400d9e4:	df000017 	ldw	fp,0(sp)
 400d9e8:	dec00104 	addi	sp,sp,4
 400d9ec:	f800283a 	ret

0400d9f0 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 400d9f0:	defffe04 	addi	sp,sp,-8
 400d9f4:	df000115 	stw	fp,4(sp)
 400d9f8:	df000104 	addi	fp,sp,4
 400d9fc:	2005883a 	mov	r2,r4
 400da00:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 400da04:	e0bfff03 	ldbu	r2,-4(fp)
 400da08:	100690fa 	slli	r3,r2,3
 400da0c:	008100b4 	movhi	r2,1026
 400da10:	10890804 	addi	r2,r2,9248
 400da14:	1885883a 	add	r2,r3,r2
}
 400da18:	e037883a 	mov	sp,fp
 400da1c:	df000017 	ldw	fp,0(sp)
 400da20:	dec00104 	addi	sp,sp,4
 400da24:	f800283a 	ret

0400da28 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 400da28:	defffc04 	addi	sp,sp,-16
 400da2c:	df000315 	stw	fp,12(sp)
 400da30:	df000304 	addi	fp,sp,12
 400da34:	e13ffe15 	stw	r4,-8(fp)
 400da38:	2805883a 	mov	r2,r5
 400da3c:	e0bfff05 	stb	r2,-4(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 400da40:	e03ffd05 	stb	zero,-12(fp)
 400da44:	00000d06 	br	400da7c <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 400da48:	e0bffd03 	ldbu	r2,-12(fp)
 400da4c:	e0fffe17 	ldw	r3,-8(fp)
 400da50:	1887883a 	add	r3,r3,r2
 400da54:	e0bffd03 	ldbu	r2,-12(fp)
 400da58:	1085883a 	add	r2,r2,r2
 400da5c:	1009883a 	mov	r4,r2
 400da60:	e0bffe17 	ldw	r2,-8(fp)
 400da64:	1105883a 	add	r2,r2,r4
 400da68:	10800003 	ldbu	r2,0(r2)
 400da6c:	18800005 	stb	r2,0(r3)
}

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
	BYTE i;
	for (i = 0; i < length; i++)
 400da70:	e0bffd03 	ldbu	r2,-12(fp)
 400da74:	10800044 	addi	r2,r2,1
 400da78:	e0bffd05 	stb	r2,-12(fp)
 400da7c:	e0fffd03 	ldbu	r3,-12(fp)
 400da80:	e0bfff03 	ldbu	r2,-4(fp)
 400da84:	18bff036 	bltu	r3,r2,400da48 <__alt_mem_onchip_memory2_0+0xfc008888>
	{
		utf8[i] = utf8[2*i];
	}
	utf8[length] = 0x00;
 400da88:	e0bfff03 	ldbu	r2,-4(fp)
 400da8c:	e0fffe17 	ldw	r3,-8(fp)
 400da90:	1885883a 	add	r2,r3,r2
 400da94:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 400da98:	e0bffe17 	ldw	r2,-8(fp)
}
 400da9c:	e037883a 	mov	sp,fp
 400daa0:	df000017 	ldw	fp,0(sp)
 400daa4:	dec00104 	addi	sp,sp,4
 400daa8:	f800283a 	ret

0400daac <__fixunsdfsi>:
 400daac:	defffd04 	addi	sp,sp,-12
 400dab0:	000d883a 	mov	r6,zero
 400dab4:	01d07834 	movhi	r7,16864
 400dab8:	dc400115 	stw	r17,4(sp)
 400dabc:	dc000015 	stw	r16,0(sp)
 400dac0:	dfc00215 	stw	ra,8(sp)
 400dac4:	2023883a 	mov	r17,r4
 400dac8:	2821883a 	mov	r16,r5
 400dacc:	400e6cc0 	call	400e6cc <__gedf2>
 400dad0:	1000080e 	bge	r2,zero,400daf4 <__fixunsdfsi+0x48>
 400dad4:	8809883a 	mov	r4,r17
 400dad8:	800b883a 	mov	r5,r16
 400dadc:	400fa040 	call	400fa04 <__fixdfsi>
 400dae0:	dfc00217 	ldw	ra,8(sp)
 400dae4:	dc400117 	ldw	r17,4(sp)
 400dae8:	dc000017 	ldw	r16,0(sp)
 400daec:	dec00304 	addi	sp,sp,12
 400daf0:	f800283a 	ret
 400daf4:	000d883a 	mov	r6,zero
 400daf8:	01d07834 	movhi	r7,16864
 400dafc:	8809883a 	mov	r4,r17
 400db00:	800b883a 	mov	r5,r16
 400db04:	400f1080 	call	400f108 <__subdf3>
 400db08:	180b883a 	mov	r5,r3
 400db0c:	1009883a 	mov	r4,r2
 400db10:	400fa040 	call	400fa04 <__fixdfsi>
 400db14:	00e00034 	movhi	r3,32768
 400db18:	10c5883a 	add	r2,r2,r3
 400db1c:	003ff006 	br	400dae0 <__alt_mem_onchip_memory2_0+0xfc008920>

0400db20 <__divsi3>:
 400db20:	20001b16 	blt	r4,zero,400db90 <__divsi3+0x70>
 400db24:	000f883a 	mov	r7,zero
 400db28:	28001616 	blt	r5,zero,400db84 <__divsi3+0x64>
 400db2c:	200d883a 	mov	r6,r4
 400db30:	29001a2e 	bgeu	r5,r4,400db9c <__divsi3+0x7c>
 400db34:	00800804 	movi	r2,32
 400db38:	00c00044 	movi	r3,1
 400db3c:	00000106 	br	400db44 <__divsi3+0x24>
 400db40:	10000d26 	beq	r2,zero,400db78 <__divsi3+0x58>
 400db44:	294b883a 	add	r5,r5,r5
 400db48:	10bfffc4 	addi	r2,r2,-1
 400db4c:	18c7883a 	add	r3,r3,r3
 400db50:	293ffb36 	bltu	r5,r4,400db40 <__alt_mem_onchip_memory2_0+0xfc008980>
 400db54:	0005883a 	mov	r2,zero
 400db58:	18000726 	beq	r3,zero,400db78 <__divsi3+0x58>
 400db5c:	0005883a 	mov	r2,zero
 400db60:	31400236 	bltu	r6,r5,400db6c <__divsi3+0x4c>
 400db64:	314dc83a 	sub	r6,r6,r5
 400db68:	10c4b03a 	or	r2,r2,r3
 400db6c:	1806d07a 	srli	r3,r3,1
 400db70:	280ad07a 	srli	r5,r5,1
 400db74:	183ffa1e 	bne	r3,zero,400db60 <__alt_mem_onchip_memory2_0+0xfc0089a0>
 400db78:	38000126 	beq	r7,zero,400db80 <__divsi3+0x60>
 400db7c:	0085c83a 	sub	r2,zero,r2
 400db80:	f800283a 	ret
 400db84:	014bc83a 	sub	r5,zero,r5
 400db88:	39c0005c 	xori	r7,r7,1
 400db8c:	003fe706 	br	400db2c <__alt_mem_onchip_memory2_0+0xfc00896c>
 400db90:	0109c83a 	sub	r4,zero,r4
 400db94:	01c00044 	movi	r7,1
 400db98:	003fe306 	br	400db28 <__alt_mem_onchip_memory2_0+0xfc008968>
 400db9c:	00c00044 	movi	r3,1
 400dba0:	003fee06 	br	400db5c <__alt_mem_onchip_memory2_0+0xfc00899c>

0400dba4 <__modsi3>:
 400dba4:	20001716 	blt	r4,zero,400dc04 <__modsi3+0x60>
 400dba8:	000f883a 	mov	r7,zero
 400dbac:	2005883a 	mov	r2,r4
 400dbb0:	28001216 	blt	r5,zero,400dbfc <__modsi3+0x58>
 400dbb4:	2900162e 	bgeu	r5,r4,400dc10 <__modsi3+0x6c>
 400dbb8:	01800804 	movi	r6,32
 400dbbc:	00c00044 	movi	r3,1
 400dbc0:	00000106 	br	400dbc8 <__modsi3+0x24>
 400dbc4:	30000a26 	beq	r6,zero,400dbf0 <__modsi3+0x4c>
 400dbc8:	294b883a 	add	r5,r5,r5
 400dbcc:	31bfffc4 	addi	r6,r6,-1
 400dbd0:	18c7883a 	add	r3,r3,r3
 400dbd4:	293ffb36 	bltu	r5,r4,400dbc4 <__alt_mem_onchip_memory2_0+0xfc008a04>
 400dbd8:	18000526 	beq	r3,zero,400dbf0 <__modsi3+0x4c>
 400dbdc:	1806d07a 	srli	r3,r3,1
 400dbe0:	11400136 	bltu	r2,r5,400dbe8 <__modsi3+0x44>
 400dbe4:	1145c83a 	sub	r2,r2,r5
 400dbe8:	280ad07a 	srli	r5,r5,1
 400dbec:	183ffb1e 	bne	r3,zero,400dbdc <__alt_mem_onchip_memory2_0+0xfc008a1c>
 400dbf0:	38000126 	beq	r7,zero,400dbf8 <__modsi3+0x54>
 400dbf4:	0085c83a 	sub	r2,zero,r2
 400dbf8:	f800283a 	ret
 400dbfc:	014bc83a 	sub	r5,zero,r5
 400dc00:	003fec06 	br	400dbb4 <__alt_mem_onchip_memory2_0+0xfc0089f4>
 400dc04:	0109c83a 	sub	r4,zero,r4
 400dc08:	01c00044 	movi	r7,1
 400dc0c:	003fe706 	br	400dbac <__alt_mem_onchip_memory2_0+0xfc0089ec>
 400dc10:	00c00044 	movi	r3,1
 400dc14:	003ff106 	br	400dbdc <__alt_mem_onchip_memory2_0+0xfc008a1c>

0400dc18 <__udivsi3>:
 400dc18:	200d883a 	mov	r6,r4
 400dc1c:	2900152e 	bgeu	r5,r4,400dc74 <__udivsi3+0x5c>
 400dc20:	28001416 	blt	r5,zero,400dc74 <__udivsi3+0x5c>
 400dc24:	00800804 	movi	r2,32
 400dc28:	00c00044 	movi	r3,1
 400dc2c:	00000206 	br	400dc38 <__udivsi3+0x20>
 400dc30:	10000e26 	beq	r2,zero,400dc6c <__udivsi3+0x54>
 400dc34:	28000516 	blt	r5,zero,400dc4c <__udivsi3+0x34>
 400dc38:	294b883a 	add	r5,r5,r5
 400dc3c:	10bfffc4 	addi	r2,r2,-1
 400dc40:	18c7883a 	add	r3,r3,r3
 400dc44:	293ffa36 	bltu	r5,r4,400dc30 <__alt_mem_onchip_memory2_0+0xfc008a70>
 400dc48:	18000826 	beq	r3,zero,400dc6c <__udivsi3+0x54>
 400dc4c:	0005883a 	mov	r2,zero
 400dc50:	31400236 	bltu	r6,r5,400dc5c <__udivsi3+0x44>
 400dc54:	314dc83a 	sub	r6,r6,r5
 400dc58:	10c4b03a 	or	r2,r2,r3
 400dc5c:	1806d07a 	srli	r3,r3,1
 400dc60:	280ad07a 	srli	r5,r5,1
 400dc64:	183ffa1e 	bne	r3,zero,400dc50 <__alt_mem_onchip_memory2_0+0xfc008a90>
 400dc68:	f800283a 	ret
 400dc6c:	0005883a 	mov	r2,zero
 400dc70:	f800283a 	ret
 400dc74:	00c00044 	movi	r3,1
 400dc78:	003ff406 	br	400dc4c <__alt_mem_onchip_memory2_0+0xfc008a8c>

0400dc7c <__umodsi3>:
 400dc7c:	2005883a 	mov	r2,r4
 400dc80:	2900122e 	bgeu	r5,r4,400dccc <__umodsi3+0x50>
 400dc84:	28001116 	blt	r5,zero,400dccc <__umodsi3+0x50>
 400dc88:	01800804 	movi	r6,32
 400dc8c:	00c00044 	movi	r3,1
 400dc90:	00000206 	br	400dc9c <__umodsi3+0x20>
 400dc94:	30000c26 	beq	r6,zero,400dcc8 <__umodsi3+0x4c>
 400dc98:	28000516 	blt	r5,zero,400dcb0 <__umodsi3+0x34>
 400dc9c:	294b883a 	add	r5,r5,r5
 400dca0:	31bfffc4 	addi	r6,r6,-1
 400dca4:	18c7883a 	add	r3,r3,r3
 400dca8:	293ffa36 	bltu	r5,r4,400dc94 <__alt_mem_onchip_memory2_0+0xfc008ad4>
 400dcac:	18000626 	beq	r3,zero,400dcc8 <__umodsi3+0x4c>
 400dcb0:	1806d07a 	srli	r3,r3,1
 400dcb4:	11400136 	bltu	r2,r5,400dcbc <__umodsi3+0x40>
 400dcb8:	1145c83a 	sub	r2,r2,r5
 400dcbc:	280ad07a 	srli	r5,r5,1
 400dcc0:	183ffb1e 	bne	r3,zero,400dcb0 <__alt_mem_onchip_memory2_0+0xfc008af0>
 400dcc4:	f800283a 	ret
 400dcc8:	f800283a 	ret
 400dccc:	00c00044 	movi	r3,1
 400dcd0:	003ff706 	br	400dcb0 <__alt_mem_onchip_memory2_0+0xfc008af0>

0400dcd4 <__mulsi3>:
 400dcd4:	0005883a 	mov	r2,zero
 400dcd8:	20000726 	beq	r4,zero,400dcf8 <__mulsi3+0x24>
 400dcdc:	20c0004c 	andi	r3,r4,1
 400dce0:	2008d07a 	srli	r4,r4,1
 400dce4:	18000126 	beq	r3,zero,400dcec <__mulsi3+0x18>
 400dce8:	1145883a 	add	r2,r2,r5
 400dcec:	294b883a 	add	r5,r5,r5
 400dcf0:	203ffa1e 	bne	r4,zero,400dcdc <__alt_mem_onchip_memory2_0+0xfc008b1c>
 400dcf4:	f800283a 	ret
 400dcf8:	f800283a 	ret

0400dcfc <__divdf3>:
 400dcfc:	defff004 	addi	sp,sp,-64
 400dd00:	dc800815 	stw	r18,32(sp)
 400dd04:	2824d53a 	srli	r18,r5,20
 400dd08:	dd800c15 	stw	r22,48(sp)
 400dd0c:	282cd7fa 	srli	r22,r5,31
 400dd10:	dc000615 	stw	r16,24(sp)
 400dd14:	04000434 	movhi	r16,16
 400dd18:	843fffc4 	addi	r16,r16,-1
 400dd1c:	dfc00f15 	stw	ra,60(sp)
 400dd20:	df000e15 	stw	fp,56(sp)
 400dd24:	ddc00d15 	stw	r23,52(sp)
 400dd28:	dd400b15 	stw	r21,44(sp)
 400dd2c:	dd000a15 	stw	r20,40(sp)
 400dd30:	dcc00915 	stw	r19,36(sp)
 400dd34:	dc400715 	stw	r17,28(sp)
 400dd38:	9481ffcc 	andi	r18,r18,2047
 400dd3c:	2c20703a 	and	r16,r5,r16
 400dd40:	b2003fcc 	andi	r8,r22,255
 400dd44:	90006126 	beq	r18,zero,400decc <__divdf3+0x1d0>
 400dd48:	0081ffc4 	movi	r2,2047
 400dd4c:	202b883a 	mov	r21,r4
 400dd50:	90803726 	beq	r18,r2,400de30 <__divdf3+0x134>
 400dd54:	80800434 	orhi	r2,r16,16
 400dd58:	100490fa 	slli	r2,r2,3
 400dd5c:	2020d77a 	srli	r16,r4,29
 400dd60:	202a90fa 	slli	r21,r4,3
 400dd64:	94bf0044 	addi	r18,r18,-1023
 400dd68:	80a0b03a 	or	r16,r16,r2
 400dd6c:	0013883a 	mov	r9,zero
 400dd70:	000b883a 	mov	r5,zero
 400dd74:	3806d53a 	srli	r3,r7,20
 400dd78:	382ed7fa 	srli	r23,r7,31
 400dd7c:	04400434 	movhi	r17,16
 400dd80:	8c7fffc4 	addi	r17,r17,-1
 400dd84:	18c1ffcc 	andi	r3,r3,2047
 400dd88:	3029883a 	mov	r20,r6
 400dd8c:	3c62703a 	and	r17,r7,r17
 400dd90:	bf003fcc 	andi	fp,r23,255
 400dd94:	18006e26 	beq	r3,zero,400df50 <__divdf3+0x254>
 400dd98:	0081ffc4 	movi	r2,2047
 400dd9c:	18806626 	beq	r3,r2,400df38 <__divdf3+0x23c>
 400dda0:	88800434 	orhi	r2,r17,16
 400dda4:	100490fa 	slli	r2,r2,3
 400dda8:	3022d77a 	srli	r17,r6,29
 400ddac:	302890fa 	slli	r20,r6,3
 400ddb0:	18ff0044 	addi	r3,r3,-1023
 400ddb4:	88a2b03a 	or	r17,r17,r2
 400ddb8:	000f883a 	mov	r7,zero
 400ddbc:	b5e6f03a 	xor	r19,r22,r23
 400ddc0:	3a4cb03a 	or	r6,r7,r9
 400ddc4:	008003c4 	movi	r2,15
 400ddc8:	9809883a 	mov	r4,r19
 400ddcc:	90c7c83a 	sub	r3,r18,r3
 400ddd0:	9cc03fcc 	andi	r19,r19,255
 400ddd4:	11809636 	bltu	r2,r6,400e030 <__divdf3+0x334>
 400ddd8:	300c90ba 	slli	r6,r6,2
 400dddc:	00810074 	movhi	r2,1025
 400dde0:	10b77c04 	addi	r2,r2,-8720
 400dde4:	308d883a 	add	r6,r6,r2
 400dde8:	30800017 	ldw	r2,0(r6)
 400ddec:	1000683a 	jmp	r2
 400ddf0:	0400e030 	cmpltui	r16,zero,896
 400ddf4:	0400de68 	cmpgeui	r16,zero,889
 400ddf8:	0400e020 	cmpeqi	r16,zero,896
 400ddfc:	0400de5c 	xori	r16,zero,889
 400de00:	0400e020 	cmpeqi	r16,zero,896
 400de04:	0400dff4 	movhi	r16,895
 400de08:	0400e020 	cmpeqi	r16,zero,896
 400de0c:	0400de5c 	xori	r16,zero,889
 400de10:	0400de68 	cmpgeui	r16,zero,889
 400de14:	0400de68 	cmpgeui	r16,zero,889
 400de18:	0400dff4 	movhi	r16,895
 400de1c:	0400de5c 	xori	r16,zero,889
 400de20:	0400de4c 	andi	r16,zero,889
 400de24:	0400de4c 	andi	r16,zero,889
 400de28:	0400de4c 	andi	r16,zero,889
 400de2c:	0400e3b8 	rdprs	r16,zero,910
 400de30:	2404b03a 	or	r2,r4,r16
 400de34:	10006c1e 	bne	r2,zero,400dfe8 <__divdf3+0x2ec>
 400de38:	02400204 	movi	r9,8
 400de3c:	0021883a 	mov	r16,zero
 400de40:	002b883a 	mov	r21,zero
 400de44:	01400084 	movi	r5,2
 400de48:	003fca06 	br	400dd74 <__alt_mem_onchip_memory2_0+0xfc008bb4>
 400de4c:	8023883a 	mov	r17,r16
 400de50:	a829883a 	mov	r20,r21
 400de54:	4039883a 	mov	fp,r8
 400de58:	280f883a 	mov	r7,r5
 400de5c:	00800084 	movi	r2,2
 400de60:	3881601e 	bne	r7,r2,400e3e4 <__divdf3+0x6e8>
 400de64:	e027883a 	mov	r19,fp
 400de68:	9900004c 	andi	r4,r19,1
 400de6c:	0081ffc4 	movi	r2,2047
 400de70:	0021883a 	mov	r16,zero
 400de74:	002b883a 	mov	r21,zero
 400de78:	1004953a 	slli	r2,r2,20
 400de7c:	20c03fcc 	andi	r3,r4,255
 400de80:	01400434 	movhi	r5,16
 400de84:	297fffc4 	addi	r5,r5,-1
 400de88:	180697fa 	slli	r3,r3,31
 400de8c:	8160703a 	and	r16,r16,r5
 400de90:	80a0b03a 	or	r16,r16,r2
 400de94:	80c6b03a 	or	r3,r16,r3
 400de98:	a805883a 	mov	r2,r21
 400de9c:	dfc00f17 	ldw	ra,60(sp)
 400dea0:	df000e17 	ldw	fp,56(sp)
 400dea4:	ddc00d17 	ldw	r23,52(sp)
 400dea8:	dd800c17 	ldw	r22,48(sp)
 400deac:	dd400b17 	ldw	r21,44(sp)
 400deb0:	dd000a17 	ldw	r20,40(sp)
 400deb4:	dcc00917 	ldw	r19,36(sp)
 400deb8:	dc800817 	ldw	r18,32(sp)
 400debc:	dc400717 	ldw	r17,28(sp)
 400dec0:	dc000617 	ldw	r16,24(sp)
 400dec4:	dec01004 	addi	sp,sp,64
 400dec8:	f800283a 	ret
 400decc:	2404b03a 	or	r2,r4,r16
 400ded0:	2023883a 	mov	r17,r4
 400ded4:	10003f26 	beq	r2,zero,400dfd4 <__divdf3+0x2d8>
 400ded8:	80015e26 	beq	r16,zero,400e454 <__divdf3+0x758>
 400dedc:	8009883a 	mov	r4,r16
 400dee0:	d9800215 	stw	r6,8(sp)
 400dee4:	d9c00515 	stw	r7,20(sp)
 400dee8:	da000415 	stw	r8,16(sp)
 400deec:	400fb2c0 	call	400fb2c <__clzsi2>
 400def0:	d9800217 	ldw	r6,8(sp)
 400def4:	d9c00517 	ldw	r7,20(sp)
 400def8:	da000417 	ldw	r8,16(sp)
 400defc:	113ffd44 	addi	r4,r2,-11
 400df00:	00c00704 	movi	r3,28
 400df04:	19014f16 	blt	r3,r4,400e444 <__divdf3+0x748>
 400df08:	00c00744 	movi	r3,29
 400df0c:	157ffe04 	addi	r21,r2,-8
 400df10:	1907c83a 	sub	r3,r3,r4
 400df14:	8560983a 	sll	r16,r16,r21
 400df18:	88c6d83a 	srl	r3,r17,r3
 400df1c:	8d6a983a 	sll	r21,r17,r21
 400df20:	1c20b03a 	or	r16,r3,r16
 400df24:	1080fcc4 	addi	r2,r2,1011
 400df28:	00a5c83a 	sub	r18,zero,r2
 400df2c:	0013883a 	mov	r9,zero
 400df30:	000b883a 	mov	r5,zero
 400df34:	003f8f06 	br	400dd74 <__alt_mem_onchip_memory2_0+0xfc008bb4>
 400df38:	3444b03a 	or	r2,r6,r17
 400df3c:	1000231e 	bne	r2,zero,400dfcc <__divdf3+0x2d0>
 400df40:	0023883a 	mov	r17,zero
 400df44:	0029883a 	mov	r20,zero
 400df48:	01c00084 	movi	r7,2
 400df4c:	003f9b06 	br	400ddbc <__alt_mem_onchip_memory2_0+0xfc008bfc>
 400df50:	3444b03a 	or	r2,r6,r17
 400df54:	10001926 	beq	r2,zero,400dfbc <__divdf3+0x2c0>
 400df58:	88014b26 	beq	r17,zero,400e488 <__divdf3+0x78c>
 400df5c:	8809883a 	mov	r4,r17
 400df60:	d9400115 	stw	r5,4(sp)
 400df64:	d9800215 	stw	r6,8(sp)
 400df68:	da000415 	stw	r8,16(sp)
 400df6c:	da400315 	stw	r9,12(sp)
 400df70:	400fb2c0 	call	400fb2c <__clzsi2>
 400df74:	d9400117 	ldw	r5,4(sp)
 400df78:	d9800217 	ldw	r6,8(sp)
 400df7c:	da000417 	ldw	r8,16(sp)
 400df80:	da400317 	ldw	r9,12(sp)
 400df84:	113ffd44 	addi	r4,r2,-11
 400df88:	00c00704 	movi	r3,28
 400df8c:	19013a16 	blt	r3,r4,400e478 <__divdf3+0x77c>
 400df90:	00c00744 	movi	r3,29
 400df94:	153ffe04 	addi	r20,r2,-8
 400df98:	1907c83a 	sub	r3,r3,r4
 400df9c:	8d22983a 	sll	r17,r17,r20
 400dfa0:	30c6d83a 	srl	r3,r6,r3
 400dfa4:	3528983a 	sll	r20,r6,r20
 400dfa8:	1c62b03a 	or	r17,r3,r17
 400dfac:	1080fcc4 	addi	r2,r2,1011
 400dfb0:	0087c83a 	sub	r3,zero,r2
 400dfb4:	000f883a 	mov	r7,zero
 400dfb8:	003f8006 	br	400ddbc <__alt_mem_onchip_memory2_0+0xfc008bfc>
 400dfbc:	0023883a 	mov	r17,zero
 400dfc0:	0029883a 	mov	r20,zero
 400dfc4:	01c00044 	movi	r7,1
 400dfc8:	003f7c06 	br	400ddbc <__alt_mem_onchip_memory2_0+0xfc008bfc>
 400dfcc:	01c000c4 	movi	r7,3
 400dfd0:	003f7a06 	br	400ddbc <__alt_mem_onchip_memory2_0+0xfc008bfc>
 400dfd4:	02400104 	movi	r9,4
 400dfd8:	0021883a 	mov	r16,zero
 400dfdc:	002b883a 	mov	r21,zero
 400dfe0:	01400044 	movi	r5,1
 400dfe4:	003f6306 	br	400dd74 <__alt_mem_onchip_memory2_0+0xfc008bb4>
 400dfe8:	02400304 	movi	r9,12
 400dfec:	014000c4 	movi	r5,3
 400dff0:	003f6006 	br	400dd74 <__alt_mem_onchip_memory2_0+0xfc008bb4>
 400dff4:	04000434 	movhi	r16,16
 400dff8:	0009883a 	mov	r4,zero
 400dffc:	843fffc4 	addi	r16,r16,-1
 400e000:	057fffc4 	movi	r21,-1
 400e004:	0081ffc4 	movi	r2,2047
 400e008:	003f9b06 	br	400de78 <__alt_mem_onchip_memory2_0+0xfc008cb8>
 400e00c:	00c00044 	movi	r3,1
 400e010:	1887c83a 	sub	r3,r3,r2
 400e014:	01000e04 	movi	r4,56
 400e018:	20c1530e 	bge	r4,r3,400e568 <__divdf3+0x86c>
 400e01c:	9900004c 	andi	r4,r19,1
 400e020:	0005883a 	mov	r2,zero
 400e024:	0021883a 	mov	r16,zero
 400e028:	002b883a 	mov	r21,zero
 400e02c:	003f9206 	br	400de78 <__alt_mem_onchip_memory2_0+0xfc008cb8>
 400e030:	8c012e36 	bltu	r17,r16,400e4ec <__divdf3+0x7f0>
 400e034:	84412c26 	beq	r16,r17,400e4e8 <__divdf3+0x7ec>
 400e038:	a82f883a 	mov	r23,r21
 400e03c:	18ffffc4 	addi	r3,r3,-1
 400e040:	002b883a 	mov	r21,zero
 400e044:	a004d63a 	srli	r2,r20,24
 400e048:	8822923a 	slli	r17,r17,8
 400e04c:	a028923a 	slli	r20,r20,8
 400e050:	8009883a 	mov	r4,r16
 400e054:	88acb03a 	or	r22,r17,r2
 400e058:	dd000015 	stw	r20,0(sp)
 400e05c:	b028d43a 	srli	r20,r22,16
 400e060:	d8c00215 	stw	r3,8(sp)
 400e064:	b4bfffcc 	andi	r18,r22,65535
 400e068:	a00b883a 	mov	r5,r20
 400e06c:	400dc180 	call	400dc18 <__udivsi3>
 400e070:	100b883a 	mov	r5,r2
 400e074:	9009883a 	mov	r4,r18
 400e078:	1023883a 	mov	r17,r2
 400e07c:	400dcd40 	call	400dcd4 <__mulsi3>
 400e080:	8009883a 	mov	r4,r16
 400e084:	a00b883a 	mov	r5,r20
 400e088:	1039883a 	mov	fp,r2
 400e08c:	400dc7c0 	call	400dc7c <__umodsi3>
 400e090:	1004943a 	slli	r2,r2,16
 400e094:	b808d43a 	srli	r4,r23,16
 400e098:	d8c00217 	ldw	r3,8(sp)
 400e09c:	2084b03a 	or	r2,r4,r2
 400e0a0:	1700062e 	bgeu	r2,fp,400e0bc <__divdf3+0x3c0>
 400e0a4:	1585883a 	add	r2,r2,r22
 400e0a8:	893fffc4 	addi	r4,r17,-1
 400e0ac:	15811d36 	bltu	r2,r22,400e524 <__divdf3+0x828>
 400e0b0:	17011c2e 	bgeu	r2,fp,400e524 <__divdf3+0x828>
 400e0b4:	8c7fff84 	addi	r17,r17,-2
 400e0b8:	1585883a 	add	r2,r2,r22
 400e0bc:	1739c83a 	sub	fp,r2,fp
 400e0c0:	a00b883a 	mov	r5,r20
 400e0c4:	e009883a 	mov	r4,fp
 400e0c8:	d8c00215 	stw	r3,8(sp)
 400e0cc:	400dc180 	call	400dc18 <__udivsi3>
 400e0d0:	100b883a 	mov	r5,r2
 400e0d4:	9009883a 	mov	r4,r18
 400e0d8:	1021883a 	mov	r16,r2
 400e0dc:	400dcd40 	call	400dcd4 <__mulsi3>
 400e0e0:	a00b883a 	mov	r5,r20
 400e0e4:	e009883a 	mov	r4,fp
 400e0e8:	d8800415 	stw	r2,16(sp)
 400e0ec:	400dc7c0 	call	400dc7c <__umodsi3>
 400e0f0:	1004943a 	slli	r2,r2,16
 400e0f4:	da000417 	ldw	r8,16(sp)
 400e0f8:	bdffffcc 	andi	r23,r23,65535
 400e0fc:	b884b03a 	or	r2,r23,r2
 400e100:	d8c00217 	ldw	r3,8(sp)
 400e104:	1200062e 	bgeu	r2,r8,400e120 <__divdf3+0x424>
 400e108:	1585883a 	add	r2,r2,r22
 400e10c:	813fffc4 	addi	r4,r16,-1
 400e110:	15810236 	bltu	r2,r22,400e51c <__divdf3+0x820>
 400e114:	1201012e 	bgeu	r2,r8,400e51c <__divdf3+0x820>
 400e118:	843fff84 	addi	r16,r16,-2
 400e11c:	1585883a 	add	r2,r2,r22
 400e120:	8822943a 	slli	r17,r17,16
 400e124:	d9800017 	ldw	r6,0(sp)
 400e128:	1211c83a 	sub	r8,r2,r8
 400e12c:	8c22b03a 	or	r17,r17,r16
 400e130:	373fffcc 	andi	fp,r6,65535
 400e134:	8abfffcc 	andi	r10,r17,65535
 400e138:	8820d43a 	srli	r16,r17,16
 400e13c:	5009883a 	mov	r4,r10
 400e140:	e00b883a 	mov	r5,fp
 400e144:	302ed43a 	srli	r23,r6,16
 400e148:	d8c00215 	stw	r3,8(sp)
 400e14c:	da000415 	stw	r8,16(sp)
 400e150:	da800115 	stw	r10,4(sp)
 400e154:	400dcd40 	call	400dcd4 <__mulsi3>
 400e158:	800b883a 	mov	r5,r16
 400e15c:	e009883a 	mov	r4,fp
 400e160:	d8800515 	stw	r2,20(sp)
 400e164:	400dcd40 	call	400dcd4 <__mulsi3>
 400e168:	8009883a 	mov	r4,r16
 400e16c:	b80b883a 	mov	r5,r23
 400e170:	d8800315 	stw	r2,12(sp)
 400e174:	400dcd40 	call	400dcd4 <__mulsi3>
 400e178:	da800117 	ldw	r10,4(sp)
 400e17c:	b80b883a 	mov	r5,r23
 400e180:	1021883a 	mov	r16,r2
 400e184:	5009883a 	mov	r4,r10
 400e188:	400dcd40 	call	400dcd4 <__mulsi3>
 400e18c:	d9c00517 	ldw	r7,20(sp)
 400e190:	da400317 	ldw	r9,12(sp)
 400e194:	d8c00217 	ldw	r3,8(sp)
 400e198:	3808d43a 	srli	r4,r7,16
 400e19c:	1245883a 	add	r2,r2,r9
 400e1a0:	da000417 	ldw	r8,16(sp)
 400e1a4:	2085883a 	add	r2,r4,r2
 400e1a8:	1240022e 	bgeu	r2,r9,400e1b4 <__divdf3+0x4b8>
 400e1ac:	01000074 	movhi	r4,1
 400e1b0:	8121883a 	add	r16,r16,r4
 400e1b4:	1008d43a 	srli	r4,r2,16
 400e1b8:	1004943a 	slli	r2,r2,16
 400e1bc:	39ffffcc 	andi	r7,r7,65535
 400e1c0:	2409883a 	add	r4,r4,r16
 400e1c4:	11c5883a 	add	r2,r2,r7
 400e1c8:	4100bb36 	bltu	r8,r4,400e4b8 <__divdf3+0x7bc>
 400e1cc:	4100d726 	beq	r8,r4,400e52c <__divdf3+0x830>
 400e1d0:	4109c83a 	sub	r4,r8,r4
 400e1d4:	a8a1c83a 	sub	r16,r21,r2
 400e1d8:	ac2b803a 	cmpltu	r21,r21,r16
 400e1dc:	256bc83a 	sub	r21,r4,r21
 400e1e0:	b540d926 	beq	r22,r21,400e548 <__divdf3+0x84c>
 400e1e4:	a00b883a 	mov	r5,r20
 400e1e8:	a809883a 	mov	r4,r21
 400e1ec:	d8c00215 	stw	r3,8(sp)
 400e1f0:	400dc180 	call	400dc18 <__udivsi3>
 400e1f4:	100b883a 	mov	r5,r2
 400e1f8:	9009883a 	mov	r4,r18
 400e1fc:	d8800515 	stw	r2,20(sp)
 400e200:	400dcd40 	call	400dcd4 <__mulsi3>
 400e204:	a809883a 	mov	r4,r21
 400e208:	a00b883a 	mov	r5,r20
 400e20c:	d8800415 	stw	r2,16(sp)
 400e210:	400dc7c0 	call	400dc7c <__umodsi3>
 400e214:	1004943a 	slli	r2,r2,16
 400e218:	8008d43a 	srli	r4,r16,16
 400e21c:	da000417 	ldw	r8,16(sp)
 400e220:	d8c00217 	ldw	r3,8(sp)
 400e224:	2084b03a 	or	r2,r4,r2
 400e228:	d9c00517 	ldw	r7,20(sp)
 400e22c:	1200062e 	bgeu	r2,r8,400e248 <__divdf3+0x54c>
 400e230:	1585883a 	add	r2,r2,r22
 400e234:	393fffc4 	addi	r4,r7,-1
 400e238:	1580c536 	bltu	r2,r22,400e550 <__divdf3+0x854>
 400e23c:	1200c42e 	bgeu	r2,r8,400e550 <__divdf3+0x854>
 400e240:	39ffff84 	addi	r7,r7,-2
 400e244:	1585883a 	add	r2,r2,r22
 400e248:	122bc83a 	sub	r21,r2,r8
 400e24c:	a00b883a 	mov	r5,r20
 400e250:	a809883a 	mov	r4,r21
 400e254:	d8c00215 	stw	r3,8(sp)
 400e258:	d9c00515 	stw	r7,20(sp)
 400e25c:	400dc180 	call	400dc18 <__udivsi3>
 400e260:	9009883a 	mov	r4,r18
 400e264:	100b883a 	mov	r5,r2
 400e268:	d8800415 	stw	r2,16(sp)
 400e26c:	400dcd40 	call	400dcd4 <__mulsi3>
 400e270:	a809883a 	mov	r4,r21
 400e274:	a00b883a 	mov	r5,r20
 400e278:	1025883a 	mov	r18,r2
 400e27c:	400dc7c0 	call	400dc7c <__umodsi3>
 400e280:	1004943a 	slli	r2,r2,16
 400e284:	813fffcc 	andi	r4,r16,65535
 400e288:	d8c00217 	ldw	r3,8(sp)
 400e28c:	20a0b03a 	or	r16,r4,r2
 400e290:	d9c00517 	ldw	r7,20(sp)
 400e294:	da000417 	ldw	r8,16(sp)
 400e298:	8480062e 	bgeu	r16,r18,400e2b4 <__divdf3+0x5b8>
 400e29c:	85a1883a 	add	r16,r16,r22
 400e2a0:	40bfffc4 	addi	r2,r8,-1
 400e2a4:	8580ac36 	bltu	r16,r22,400e558 <__divdf3+0x85c>
 400e2a8:	8480ab2e 	bgeu	r16,r18,400e558 <__divdf3+0x85c>
 400e2ac:	423fff84 	addi	r8,r8,-2
 400e2b0:	85a1883a 	add	r16,r16,r22
 400e2b4:	3804943a 	slli	r2,r7,16
 400e2b8:	84a1c83a 	sub	r16,r16,r18
 400e2bc:	e009883a 	mov	r4,fp
 400e2c0:	1228b03a 	or	r20,r2,r8
 400e2c4:	a1ffffcc 	andi	r7,r20,65535
 400e2c8:	a024d43a 	srli	r18,r20,16
 400e2cc:	380b883a 	mov	r5,r7
 400e2d0:	d8c00215 	stw	r3,8(sp)
 400e2d4:	d9c00515 	stw	r7,20(sp)
 400e2d8:	400dcd40 	call	400dcd4 <__mulsi3>
 400e2dc:	900b883a 	mov	r5,r18
 400e2e0:	e009883a 	mov	r4,fp
 400e2e4:	102b883a 	mov	r21,r2
 400e2e8:	400dcd40 	call	400dcd4 <__mulsi3>
 400e2ec:	900b883a 	mov	r5,r18
 400e2f0:	b809883a 	mov	r4,r23
 400e2f4:	1039883a 	mov	fp,r2
 400e2f8:	400dcd40 	call	400dcd4 <__mulsi3>
 400e2fc:	d9c00517 	ldw	r7,20(sp)
 400e300:	b80b883a 	mov	r5,r23
 400e304:	1025883a 	mov	r18,r2
 400e308:	3809883a 	mov	r4,r7
 400e30c:	400dcd40 	call	400dcd4 <__mulsi3>
 400e310:	a808d43a 	srli	r4,r21,16
 400e314:	1705883a 	add	r2,r2,fp
 400e318:	d8c00217 	ldw	r3,8(sp)
 400e31c:	2085883a 	add	r2,r4,r2
 400e320:	1700022e 	bgeu	r2,fp,400e32c <__divdf3+0x630>
 400e324:	01000074 	movhi	r4,1
 400e328:	9125883a 	add	r18,r18,r4
 400e32c:	1008d43a 	srli	r4,r2,16
 400e330:	1004943a 	slli	r2,r2,16
 400e334:	ad7fffcc 	andi	r21,r21,65535
 400e338:	2489883a 	add	r4,r4,r18
 400e33c:	1545883a 	add	r2,r2,r21
 400e340:	81003836 	bltu	r16,r4,400e424 <__divdf3+0x728>
 400e344:	81003626 	beq	r16,r4,400e420 <__divdf3+0x724>
 400e348:	a5000054 	ori	r20,r20,1
 400e34c:	1880ffc4 	addi	r2,r3,1023
 400e350:	00bf2e0e 	bge	zero,r2,400e00c <__alt_mem_onchip_memory2_0+0xfc008e4c>
 400e354:	a10001cc 	andi	r4,r20,7
 400e358:	20000726 	beq	r4,zero,400e378 <__divdf3+0x67c>
 400e35c:	a10003cc 	andi	r4,r20,15
 400e360:	01400104 	movi	r5,4
 400e364:	21400426 	beq	r4,r5,400e378 <__divdf3+0x67c>
 400e368:	a149883a 	add	r4,r20,r5
 400e36c:	2529803a 	cmpltu	r20,r4,r20
 400e370:	8d23883a 	add	r17,r17,r20
 400e374:	2029883a 	mov	r20,r4
 400e378:	8900402c 	andhi	r4,r17,256
 400e37c:	20000426 	beq	r4,zero,400e390 <__divdf3+0x694>
 400e380:	18810004 	addi	r2,r3,1024
 400e384:	00ffc034 	movhi	r3,65280
 400e388:	18ffffc4 	addi	r3,r3,-1
 400e38c:	88e2703a 	and	r17,r17,r3
 400e390:	00c1ff84 	movi	r3,2046
 400e394:	18beb416 	blt	r3,r2,400de68 <__alt_mem_onchip_memory2_0+0xfc008ca8>
 400e398:	a028d0fa 	srli	r20,r20,3
 400e39c:	882a977a 	slli	r21,r17,29
 400e3a0:	8820927a 	slli	r16,r17,9
 400e3a4:	1081ffcc 	andi	r2,r2,2047
 400e3a8:	ad2ab03a 	or	r21,r21,r20
 400e3ac:	8020d33a 	srli	r16,r16,12
 400e3b0:	9900004c 	andi	r4,r19,1
 400e3b4:	003eb006 	br	400de78 <__alt_mem_onchip_memory2_0+0xfc008cb8>
 400e3b8:	8080022c 	andhi	r2,r16,8
 400e3bc:	10001226 	beq	r2,zero,400e408 <__divdf3+0x70c>
 400e3c0:	8880022c 	andhi	r2,r17,8
 400e3c4:	1000101e 	bne	r2,zero,400e408 <__divdf3+0x70c>
 400e3c8:	00800434 	movhi	r2,16
 400e3cc:	8c000234 	orhi	r16,r17,8
 400e3d0:	10bfffc4 	addi	r2,r2,-1
 400e3d4:	b809883a 	mov	r4,r23
 400e3d8:	80a0703a 	and	r16,r16,r2
 400e3dc:	a02b883a 	mov	r21,r20
 400e3e0:	003f0806 	br	400e004 <__alt_mem_onchip_memory2_0+0xfc008e44>
 400e3e4:	008000c4 	movi	r2,3
 400e3e8:	3880b126 	beq	r7,r2,400e6b0 <__divdf3+0x9b4>
 400e3ec:	00800044 	movi	r2,1
 400e3f0:	38805b1e 	bne	r7,r2,400e560 <__divdf3+0x864>
 400e3f4:	e009883a 	mov	r4,fp
 400e3f8:	0005883a 	mov	r2,zero
 400e3fc:	0021883a 	mov	r16,zero
 400e400:	002b883a 	mov	r21,zero
 400e404:	003e9c06 	br	400de78 <__alt_mem_onchip_memory2_0+0xfc008cb8>
 400e408:	00800434 	movhi	r2,16
 400e40c:	84000234 	orhi	r16,r16,8
 400e410:	10bfffc4 	addi	r2,r2,-1
 400e414:	b009883a 	mov	r4,r22
 400e418:	80a0703a 	and	r16,r16,r2
 400e41c:	003ef906 	br	400e004 <__alt_mem_onchip_memory2_0+0xfc008e44>
 400e420:	103fca26 	beq	r2,zero,400e34c <__alt_mem_onchip_memory2_0+0xfc00918c>
 400e424:	b421883a 	add	r16,r22,r16
 400e428:	a17fffc4 	addi	r5,r20,-1
 400e42c:	8580422e 	bgeu	r16,r22,400e538 <__divdf3+0x83c>
 400e430:	2829883a 	mov	r20,r5
 400e434:	813fc41e 	bne	r16,r4,400e348 <__alt_mem_onchip_memory2_0+0xfc009188>
 400e438:	d9800017 	ldw	r6,0(sp)
 400e43c:	30bfc21e 	bne	r6,r2,400e348 <__alt_mem_onchip_memory2_0+0xfc009188>
 400e440:	003fc206 	br	400e34c <__alt_mem_onchip_memory2_0+0xfc00918c>
 400e444:	143ff604 	addi	r16,r2,-40
 400e448:	8c20983a 	sll	r16,r17,r16
 400e44c:	002b883a 	mov	r21,zero
 400e450:	003eb406 	br	400df24 <__alt_mem_onchip_memory2_0+0xfc008d64>
 400e454:	d9800215 	stw	r6,8(sp)
 400e458:	d9c00515 	stw	r7,20(sp)
 400e45c:	da000415 	stw	r8,16(sp)
 400e460:	400fb2c0 	call	400fb2c <__clzsi2>
 400e464:	10800804 	addi	r2,r2,32
 400e468:	da000417 	ldw	r8,16(sp)
 400e46c:	d9c00517 	ldw	r7,20(sp)
 400e470:	d9800217 	ldw	r6,8(sp)
 400e474:	003ea106 	br	400defc <__alt_mem_onchip_memory2_0+0xfc008d3c>
 400e478:	147ff604 	addi	r17,r2,-40
 400e47c:	3462983a 	sll	r17,r6,r17
 400e480:	0029883a 	mov	r20,zero
 400e484:	003ec906 	br	400dfac <__alt_mem_onchip_memory2_0+0xfc008dec>
 400e488:	3009883a 	mov	r4,r6
 400e48c:	d9400115 	stw	r5,4(sp)
 400e490:	d9800215 	stw	r6,8(sp)
 400e494:	da000415 	stw	r8,16(sp)
 400e498:	da400315 	stw	r9,12(sp)
 400e49c:	400fb2c0 	call	400fb2c <__clzsi2>
 400e4a0:	10800804 	addi	r2,r2,32
 400e4a4:	da400317 	ldw	r9,12(sp)
 400e4a8:	da000417 	ldw	r8,16(sp)
 400e4ac:	d9800217 	ldw	r6,8(sp)
 400e4b0:	d9400117 	ldw	r5,4(sp)
 400e4b4:	003eb306 	br	400df84 <__alt_mem_onchip_memory2_0+0xfc008dc4>
 400e4b8:	d9800017 	ldw	r6,0(sp)
 400e4bc:	a9ab883a 	add	r21,r21,r6
 400e4c0:	a98b803a 	cmpltu	r5,r21,r6
 400e4c4:	2d8b883a 	add	r5,r5,r22
 400e4c8:	2a11883a 	add	r8,r5,r8
 400e4cc:	897fffc4 	addi	r5,r17,-1
 400e4d0:	b2000c2e 	bgeu	r22,r8,400e504 <__divdf3+0x808>
 400e4d4:	41003f36 	bltu	r8,r4,400e5d4 <__divdf3+0x8d8>
 400e4d8:	22006c26 	beq	r4,r8,400e68c <__divdf3+0x990>
 400e4dc:	4109c83a 	sub	r4,r8,r4
 400e4e0:	2823883a 	mov	r17,r5
 400e4e4:	003f3b06 	br	400e1d4 <__alt_mem_onchip_memory2_0+0xfc009014>
 400e4e8:	ad3ed336 	bltu	r21,r20,400e038 <__alt_mem_onchip_memory2_0+0xfc008e78>
 400e4ec:	a804d07a 	srli	r2,r21,1
 400e4f0:	802e97fa 	slli	r23,r16,31
 400e4f4:	a82a97fa 	slli	r21,r21,31
 400e4f8:	8020d07a 	srli	r16,r16,1
 400e4fc:	b8aeb03a 	or	r23,r23,r2
 400e500:	003ed006 	br	400e044 <__alt_mem_onchip_memory2_0+0xfc008e84>
 400e504:	b23ff51e 	bne	r22,r8,400e4dc <__alt_mem_onchip_memory2_0+0xfc00931c>
 400e508:	d9800017 	ldw	r6,0(sp)
 400e50c:	a9bff12e 	bgeu	r21,r6,400e4d4 <__alt_mem_onchip_memory2_0+0xfc009314>
 400e510:	b109c83a 	sub	r4,r22,r4
 400e514:	2823883a 	mov	r17,r5
 400e518:	003f2e06 	br	400e1d4 <__alt_mem_onchip_memory2_0+0xfc009014>
 400e51c:	2021883a 	mov	r16,r4
 400e520:	003eff06 	br	400e120 <__alt_mem_onchip_memory2_0+0xfc008f60>
 400e524:	2023883a 	mov	r17,r4
 400e528:	003ee406 	br	400e0bc <__alt_mem_onchip_memory2_0+0xfc008efc>
 400e52c:	a8bfe236 	bltu	r21,r2,400e4b8 <__alt_mem_onchip_memory2_0+0xfc0092f8>
 400e530:	0009883a 	mov	r4,zero
 400e534:	003f2706 	br	400e1d4 <__alt_mem_onchip_memory2_0+0xfc009014>
 400e538:	81002d36 	bltu	r16,r4,400e5f0 <__divdf3+0x8f4>
 400e53c:	24005626 	beq	r4,r16,400e698 <__divdf3+0x99c>
 400e540:	2829883a 	mov	r20,r5
 400e544:	003f8006 	br	400e348 <__alt_mem_onchip_memory2_0+0xfc009188>
 400e548:	053fffc4 	movi	r20,-1
 400e54c:	003f7f06 	br	400e34c <__alt_mem_onchip_memory2_0+0xfc00918c>
 400e550:	200f883a 	mov	r7,r4
 400e554:	003f3c06 	br	400e248 <__alt_mem_onchip_memory2_0+0xfc009088>
 400e558:	1011883a 	mov	r8,r2
 400e55c:	003f5506 	br	400e2b4 <__alt_mem_onchip_memory2_0+0xfc0090f4>
 400e560:	e027883a 	mov	r19,fp
 400e564:	003f7906 	br	400e34c <__alt_mem_onchip_memory2_0+0xfc00918c>
 400e568:	010007c4 	movi	r4,31
 400e56c:	20c02816 	blt	r4,r3,400e610 <__divdf3+0x914>
 400e570:	00800804 	movi	r2,32
 400e574:	10c5c83a 	sub	r2,r2,r3
 400e578:	888a983a 	sll	r5,r17,r2
 400e57c:	a0c8d83a 	srl	r4,r20,r3
 400e580:	a084983a 	sll	r2,r20,r2
 400e584:	88e2d83a 	srl	r17,r17,r3
 400e588:	2906b03a 	or	r3,r5,r4
 400e58c:	1004c03a 	cmpne	r2,r2,zero
 400e590:	1886b03a 	or	r3,r3,r2
 400e594:	188001cc 	andi	r2,r3,7
 400e598:	10000726 	beq	r2,zero,400e5b8 <__divdf3+0x8bc>
 400e59c:	188003cc 	andi	r2,r3,15
 400e5a0:	01000104 	movi	r4,4
 400e5a4:	11000426 	beq	r2,r4,400e5b8 <__divdf3+0x8bc>
 400e5a8:	1805883a 	mov	r2,r3
 400e5ac:	10c00104 	addi	r3,r2,4
 400e5b0:	1885803a 	cmpltu	r2,r3,r2
 400e5b4:	88a3883a 	add	r17,r17,r2
 400e5b8:	8880202c 	andhi	r2,r17,128
 400e5bc:	10002926 	beq	r2,zero,400e664 <__divdf3+0x968>
 400e5c0:	9900004c 	andi	r4,r19,1
 400e5c4:	00800044 	movi	r2,1
 400e5c8:	0021883a 	mov	r16,zero
 400e5cc:	002b883a 	mov	r21,zero
 400e5d0:	003e2906 	br	400de78 <__alt_mem_onchip_memory2_0+0xfc008cb8>
 400e5d4:	d9800017 	ldw	r6,0(sp)
 400e5d8:	8c7fff84 	addi	r17,r17,-2
 400e5dc:	a9ab883a 	add	r21,r21,r6
 400e5e0:	a98b803a 	cmpltu	r5,r21,r6
 400e5e4:	2d8b883a 	add	r5,r5,r22
 400e5e8:	2a11883a 	add	r8,r5,r8
 400e5ec:	003ef806 	br	400e1d0 <__alt_mem_onchip_memory2_0+0xfc009010>
 400e5f0:	d9800017 	ldw	r6,0(sp)
 400e5f4:	318f883a 	add	r7,r6,r6
 400e5f8:	398b803a 	cmpltu	r5,r7,r6
 400e5fc:	2d8d883a 	add	r6,r5,r22
 400e600:	81a1883a 	add	r16,r16,r6
 400e604:	a17fff84 	addi	r5,r20,-2
 400e608:	d9c00015 	stw	r7,0(sp)
 400e60c:	003f8806 	br	400e430 <__alt_mem_onchip_memory2_0+0xfc009270>
 400e610:	013ff844 	movi	r4,-31
 400e614:	2085c83a 	sub	r2,r4,r2
 400e618:	8888d83a 	srl	r4,r17,r2
 400e61c:	00800804 	movi	r2,32
 400e620:	18802126 	beq	r3,r2,400e6a8 <__divdf3+0x9ac>
 400e624:	04001004 	movi	r16,64
 400e628:	80c7c83a 	sub	r3,r16,r3
 400e62c:	88e0983a 	sll	r16,r17,r3
 400e630:	8504b03a 	or	r2,r16,r20
 400e634:	1004c03a 	cmpne	r2,r2,zero
 400e638:	2084b03a 	or	r2,r4,r2
 400e63c:	144001cc 	andi	r17,r2,7
 400e640:	88000d1e 	bne	r17,zero,400e678 <__divdf3+0x97c>
 400e644:	0021883a 	mov	r16,zero
 400e648:	102ad0fa 	srli	r21,r2,3
 400e64c:	9900004c 	andi	r4,r19,1
 400e650:	0005883a 	mov	r2,zero
 400e654:	ac6ab03a 	or	r21,r21,r17
 400e658:	003e0706 	br	400de78 <__alt_mem_onchip_memory2_0+0xfc008cb8>
 400e65c:	1007883a 	mov	r3,r2
 400e660:	0023883a 	mov	r17,zero
 400e664:	8820927a 	slli	r16,r17,9
 400e668:	1805883a 	mov	r2,r3
 400e66c:	8822977a 	slli	r17,r17,29
 400e670:	8020d33a 	srli	r16,r16,12
 400e674:	003ff406 	br	400e648 <__alt_mem_onchip_memory2_0+0xfc009488>
 400e678:	10c003cc 	andi	r3,r2,15
 400e67c:	01000104 	movi	r4,4
 400e680:	193ff626 	beq	r3,r4,400e65c <__alt_mem_onchip_memory2_0+0xfc00949c>
 400e684:	0023883a 	mov	r17,zero
 400e688:	003fc806 	br	400e5ac <__alt_mem_onchip_memory2_0+0xfc0093ec>
 400e68c:	a8bfd136 	bltu	r21,r2,400e5d4 <__alt_mem_onchip_memory2_0+0xfc009414>
 400e690:	2823883a 	mov	r17,r5
 400e694:	003fa606 	br	400e530 <__alt_mem_onchip_memory2_0+0xfc009370>
 400e698:	d9800017 	ldw	r6,0(sp)
 400e69c:	30bfd436 	bltu	r6,r2,400e5f0 <__alt_mem_onchip_memory2_0+0xfc009430>
 400e6a0:	2829883a 	mov	r20,r5
 400e6a4:	003f6406 	br	400e438 <__alt_mem_onchip_memory2_0+0xfc009278>
 400e6a8:	0021883a 	mov	r16,zero
 400e6ac:	003fe006 	br	400e630 <__alt_mem_onchip_memory2_0+0xfc009470>
 400e6b0:	00800434 	movhi	r2,16
 400e6b4:	8c000234 	orhi	r16,r17,8
 400e6b8:	10bfffc4 	addi	r2,r2,-1
 400e6bc:	e009883a 	mov	r4,fp
 400e6c0:	80a0703a 	and	r16,r16,r2
 400e6c4:	a02b883a 	mov	r21,r20
 400e6c8:	003e4e06 	br	400e004 <__alt_mem_onchip_memory2_0+0xfc008e44>

0400e6cc <__gedf2>:
 400e6cc:	2804d53a 	srli	r2,r5,20
 400e6d0:	3806d53a 	srli	r3,r7,20
 400e6d4:	02000434 	movhi	r8,16
 400e6d8:	423fffc4 	addi	r8,r8,-1
 400e6dc:	1081ffcc 	andi	r2,r2,2047
 400e6e0:	0241ffc4 	movi	r9,2047
 400e6e4:	2a14703a 	and	r10,r5,r8
 400e6e8:	18c1ffcc 	andi	r3,r3,2047
 400e6ec:	3a10703a 	and	r8,r7,r8
 400e6f0:	280ad7fa 	srli	r5,r5,31
 400e6f4:	380ed7fa 	srli	r7,r7,31
 400e6f8:	12401d26 	beq	r2,r9,400e770 <__gedf2+0xa4>
 400e6fc:	0241ffc4 	movi	r9,2047
 400e700:	1a401226 	beq	r3,r9,400e74c <__gedf2+0x80>
 400e704:	1000081e 	bne	r2,zero,400e728 <__gedf2+0x5c>
 400e708:	2296b03a 	or	r11,r4,r10
 400e70c:	5813003a 	cmpeq	r9,r11,zero
 400e710:	1800091e 	bne	r3,zero,400e738 <__gedf2+0x6c>
 400e714:	3218b03a 	or	r12,r6,r8
 400e718:	6000071e 	bne	r12,zero,400e738 <__gedf2+0x6c>
 400e71c:	0005883a 	mov	r2,zero
 400e720:	5800101e 	bne	r11,zero,400e764 <__gedf2+0x98>
 400e724:	f800283a 	ret
 400e728:	18000c1e 	bne	r3,zero,400e75c <__gedf2+0x90>
 400e72c:	3212b03a 	or	r9,r6,r8
 400e730:	48000c26 	beq	r9,zero,400e764 <__gedf2+0x98>
 400e734:	0013883a 	mov	r9,zero
 400e738:	39c03fcc 	andi	r7,r7,255
 400e73c:	48000826 	beq	r9,zero,400e760 <__gedf2+0x94>
 400e740:	38000926 	beq	r7,zero,400e768 <__gedf2+0x9c>
 400e744:	00800044 	movi	r2,1
 400e748:	f800283a 	ret
 400e74c:	3212b03a 	or	r9,r6,r8
 400e750:	483fec26 	beq	r9,zero,400e704 <__alt_mem_onchip_memory2_0+0xfc009544>
 400e754:	00bfff84 	movi	r2,-2
 400e758:	f800283a 	ret
 400e75c:	39c03fcc 	andi	r7,r7,255
 400e760:	29c00626 	beq	r5,r7,400e77c <__gedf2+0xb0>
 400e764:	283ff726 	beq	r5,zero,400e744 <__alt_mem_onchip_memory2_0+0xfc009584>
 400e768:	00bfffc4 	movi	r2,-1
 400e76c:	f800283a 	ret
 400e770:	2292b03a 	or	r9,r4,r10
 400e774:	483fe126 	beq	r9,zero,400e6fc <__alt_mem_onchip_memory2_0+0xfc00953c>
 400e778:	003ff606 	br	400e754 <__alt_mem_onchip_memory2_0+0xfc009594>
 400e77c:	18bff916 	blt	r3,r2,400e764 <__alt_mem_onchip_memory2_0+0xfc0095a4>
 400e780:	10c00316 	blt	r2,r3,400e790 <__gedf2+0xc4>
 400e784:	42bff736 	bltu	r8,r10,400e764 <__alt_mem_onchip_memory2_0+0xfc0095a4>
 400e788:	52000326 	beq	r10,r8,400e798 <__gedf2+0xcc>
 400e78c:	5200042e 	bgeu	r10,r8,400e7a0 <__gedf2+0xd4>
 400e790:	283fec1e 	bne	r5,zero,400e744 <__alt_mem_onchip_memory2_0+0xfc009584>
 400e794:	003ff406 	br	400e768 <__alt_mem_onchip_memory2_0+0xfc0095a8>
 400e798:	313ff236 	bltu	r6,r4,400e764 <__alt_mem_onchip_memory2_0+0xfc0095a4>
 400e79c:	21bffc36 	bltu	r4,r6,400e790 <__alt_mem_onchip_memory2_0+0xfc0095d0>
 400e7a0:	0005883a 	mov	r2,zero
 400e7a4:	f800283a 	ret

0400e7a8 <__ledf2>:
 400e7a8:	2804d53a 	srli	r2,r5,20
 400e7ac:	3810d53a 	srli	r8,r7,20
 400e7b0:	00c00434 	movhi	r3,16
 400e7b4:	18ffffc4 	addi	r3,r3,-1
 400e7b8:	1081ffcc 	andi	r2,r2,2047
 400e7bc:	0241ffc4 	movi	r9,2047
 400e7c0:	28d4703a 	and	r10,r5,r3
 400e7c4:	4201ffcc 	andi	r8,r8,2047
 400e7c8:	38c6703a 	and	r3,r7,r3
 400e7cc:	280ad7fa 	srli	r5,r5,31
 400e7d0:	380ed7fa 	srli	r7,r7,31
 400e7d4:	12401f26 	beq	r2,r9,400e854 <__ledf2+0xac>
 400e7d8:	0241ffc4 	movi	r9,2047
 400e7dc:	42401426 	beq	r8,r9,400e830 <__ledf2+0x88>
 400e7e0:	1000091e 	bne	r2,zero,400e808 <__ledf2+0x60>
 400e7e4:	2296b03a 	or	r11,r4,r10
 400e7e8:	5813003a 	cmpeq	r9,r11,zero
 400e7ec:	29403fcc 	andi	r5,r5,255
 400e7f0:	40000a1e 	bne	r8,zero,400e81c <__ledf2+0x74>
 400e7f4:	30d8b03a 	or	r12,r6,r3
 400e7f8:	6000081e 	bne	r12,zero,400e81c <__ledf2+0x74>
 400e7fc:	0005883a 	mov	r2,zero
 400e800:	5800111e 	bne	r11,zero,400e848 <__ledf2+0xa0>
 400e804:	f800283a 	ret
 400e808:	29403fcc 	andi	r5,r5,255
 400e80c:	40000c1e 	bne	r8,zero,400e840 <__ledf2+0x98>
 400e810:	30d2b03a 	or	r9,r6,r3
 400e814:	48000c26 	beq	r9,zero,400e848 <__ledf2+0xa0>
 400e818:	0013883a 	mov	r9,zero
 400e81c:	39c03fcc 	andi	r7,r7,255
 400e820:	48000826 	beq	r9,zero,400e844 <__ledf2+0x9c>
 400e824:	38001126 	beq	r7,zero,400e86c <__ledf2+0xc4>
 400e828:	00800044 	movi	r2,1
 400e82c:	f800283a 	ret
 400e830:	30d2b03a 	or	r9,r6,r3
 400e834:	483fea26 	beq	r9,zero,400e7e0 <__alt_mem_onchip_memory2_0+0xfc009620>
 400e838:	00800084 	movi	r2,2
 400e83c:	f800283a 	ret
 400e840:	39c03fcc 	andi	r7,r7,255
 400e844:	39400726 	beq	r7,r5,400e864 <__ledf2+0xbc>
 400e848:	2800081e 	bne	r5,zero,400e86c <__ledf2+0xc4>
 400e84c:	00800044 	movi	r2,1
 400e850:	f800283a 	ret
 400e854:	2292b03a 	or	r9,r4,r10
 400e858:	483fdf26 	beq	r9,zero,400e7d8 <__alt_mem_onchip_memory2_0+0xfc009618>
 400e85c:	00800084 	movi	r2,2
 400e860:	f800283a 	ret
 400e864:	4080030e 	bge	r8,r2,400e874 <__ledf2+0xcc>
 400e868:	383fef26 	beq	r7,zero,400e828 <__alt_mem_onchip_memory2_0+0xfc009668>
 400e86c:	00bfffc4 	movi	r2,-1
 400e870:	f800283a 	ret
 400e874:	123feb16 	blt	r2,r8,400e824 <__alt_mem_onchip_memory2_0+0xfc009664>
 400e878:	1abff336 	bltu	r3,r10,400e848 <__alt_mem_onchip_memory2_0+0xfc009688>
 400e87c:	50c00326 	beq	r10,r3,400e88c <__ledf2+0xe4>
 400e880:	50c0042e 	bgeu	r10,r3,400e894 <__ledf2+0xec>
 400e884:	283fe81e 	bne	r5,zero,400e828 <__alt_mem_onchip_memory2_0+0xfc009668>
 400e888:	003ff806 	br	400e86c <__alt_mem_onchip_memory2_0+0xfc0096ac>
 400e88c:	313fee36 	bltu	r6,r4,400e848 <__alt_mem_onchip_memory2_0+0xfc009688>
 400e890:	21bffc36 	bltu	r4,r6,400e884 <__alt_mem_onchip_memory2_0+0xfc0096c4>
 400e894:	0005883a 	mov	r2,zero
 400e898:	f800283a 	ret

0400e89c <__muldf3>:
 400e89c:	deffee04 	addi	sp,sp,-72
 400e8a0:	dd000c15 	stw	r20,48(sp)
 400e8a4:	2828d53a 	srli	r20,r5,20
 400e8a8:	ddc00f15 	stw	r23,60(sp)
 400e8ac:	282ed7fa 	srli	r23,r5,31
 400e8b0:	dc000815 	stw	r16,32(sp)
 400e8b4:	04000434 	movhi	r16,16
 400e8b8:	dcc00b15 	stw	r19,44(sp)
 400e8bc:	843fffc4 	addi	r16,r16,-1
 400e8c0:	dfc01115 	stw	ra,68(sp)
 400e8c4:	df001015 	stw	fp,64(sp)
 400e8c8:	dd800e15 	stw	r22,56(sp)
 400e8cc:	dd400d15 	stw	r21,52(sp)
 400e8d0:	dc800a15 	stw	r18,40(sp)
 400e8d4:	dc400915 	stw	r17,36(sp)
 400e8d8:	a501ffcc 	andi	r20,r20,2047
 400e8dc:	2c20703a 	and	r16,r5,r16
 400e8e0:	b827883a 	mov	r19,r23
 400e8e4:	ba403fcc 	andi	r9,r23,255
 400e8e8:	a0006026 	beq	r20,zero,400ea6c <__muldf3+0x1d0>
 400e8ec:	0081ffc4 	movi	r2,2047
 400e8f0:	202d883a 	mov	r22,r4
 400e8f4:	a0803626 	beq	r20,r2,400e9d0 <__muldf3+0x134>
 400e8f8:	84000434 	orhi	r16,r16,16
 400e8fc:	200ad77a 	srli	r5,r4,29
 400e900:	800490fa 	slli	r2,r16,3
 400e904:	202c90fa 	slli	r22,r4,3
 400e908:	a53f0044 	addi	r20,r20,-1023
 400e90c:	28a0b03a 	or	r16,r5,r2
 400e910:	002b883a 	mov	r21,zero
 400e914:	000b883a 	mov	r5,zero
 400e918:	3804d53a 	srli	r2,r7,20
 400e91c:	3838d7fa 	srli	fp,r7,31
 400e920:	04400434 	movhi	r17,16
 400e924:	8c7fffc4 	addi	r17,r17,-1
 400e928:	1081ffcc 	andi	r2,r2,2047
 400e92c:	3025883a 	mov	r18,r6
 400e930:	3c62703a 	and	r17,r7,r17
 400e934:	e2803fcc 	andi	r10,fp,255
 400e938:	10006d26 	beq	r2,zero,400eaf0 <__muldf3+0x254>
 400e93c:	00c1ffc4 	movi	r3,2047
 400e940:	10c06526 	beq	r2,r3,400ead8 <__muldf3+0x23c>
 400e944:	8c400434 	orhi	r17,r17,16
 400e948:	300ed77a 	srli	r7,r6,29
 400e94c:	880690fa 	slli	r3,r17,3
 400e950:	302490fa 	slli	r18,r6,3
 400e954:	10bf0044 	addi	r2,r2,-1023
 400e958:	38e2b03a 	or	r17,r7,r3
 400e95c:	000f883a 	mov	r7,zero
 400e960:	a087883a 	add	r3,r20,r2
 400e964:	010003c4 	movi	r4,15
 400e968:	3d44b03a 	or	r2,r7,r21
 400e96c:	e5ccf03a 	xor	r6,fp,r23
 400e970:	1a000044 	addi	r8,r3,1
 400e974:	20809b36 	bltu	r4,r2,400ebe4 <__muldf3+0x348>
 400e978:	100490ba 	slli	r2,r2,2
 400e97c:	01010074 	movhi	r4,1025
 400e980:	213a6404 	addi	r4,r4,-5744
 400e984:	1105883a 	add	r2,r2,r4
 400e988:	10800017 	ldw	r2,0(r2)
 400e98c:	1000683a 	jmp	r2
 400e990:	0400ebe4 	muli	r16,zero,943
 400e994:	0400e9f0 	cmpltui	r16,zero,935
 400e998:	0400e9f0 	cmpltui	r16,zero,935
 400e99c:	0400e9ec 	andhi	r16,zero,935
 400e9a0:	0400ebc0 	call	400ebc <__reset-0x3bff144>
 400e9a4:	0400ebc0 	call	400ebc <__reset-0x3bff144>
 400e9a8:	0400eba8 	cmpgeui	r16,zero,942
 400e9ac:	0400e9ec 	andhi	r16,zero,935
 400e9b0:	0400ebc0 	call	400ebc <__reset-0x3bff144>
 400e9b4:	0400eba8 	cmpgeui	r16,zero,942
 400e9b8:	0400ebc0 	call	400ebc <__reset-0x3bff144>
 400e9bc:	0400e9ec 	andhi	r16,zero,935
 400e9c0:	0400ebd0 	cmplti	r16,zero,943
 400e9c4:	0400ebd0 	cmplti	r16,zero,943
 400e9c8:	0400ebd0 	cmplti	r16,zero,943
 400e9cc:	0400ef30 	cmpltui	r16,zero,956
 400e9d0:	2404b03a 	or	r2,r4,r16
 400e9d4:	1000711e 	bne	r2,zero,400eb9c <__muldf3+0x300>
 400e9d8:	05400204 	movi	r21,8
 400e9dc:	0021883a 	mov	r16,zero
 400e9e0:	002d883a 	mov	r22,zero
 400e9e4:	01400084 	movi	r5,2
 400e9e8:	003fcb06 	br	400e918 <__alt_mem_onchip_memory2_0+0xfc009758>
 400e9ec:	500d883a 	mov	r6,r10
 400e9f0:	00800084 	movi	r2,2
 400e9f4:	38805926 	beq	r7,r2,400eb5c <__muldf3+0x2c0>
 400e9f8:	008000c4 	movi	r2,3
 400e9fc:	3881bb26 	beq	r7,r2,400f0ec <__muldf3+0x850>
 400ea00:	00800044 	movi	r2,1
 400ea04:	3881961e 	bne	r7,r2,400f060 <__muldf3+0x7c4>
 400ea08:	3027883a 	mov	r19,r6
 400ea0c:	0005883a 	mov	r2,zero
 400ea10:	0021883a 	mov	r16,zero
 400ea14:	002d883a 	mov	r22,zero
 400ea18:	1004953a 	slli	r2,r2,20
 400ea1c:	98c03fcc 	andi	r3,r19,255
 400ea20:	04400434 	movhi	r17,16
 400ea24:	8c7fffc4 	addi	r17,r17,-1
 400ea28:	180697fa 	slli	r3,r3,31
 400ea2c:	8460703a 	and	r16,r16,r17
 400ea30:	80a0b03a 	or	r16,r16,r2
 400ea34:	80c6b03a 	or	r3,r16,r3
 400ea38:	b005883a 	mov	r2,r22
 400ea3c:	dfc01117 	ldw	ra,68(sp)
 400ea40:	df001017 	ldw	fp,64(sp)
 400ea44:	ddc00f17 	ldw	r23,60(sp)
 400ea48:	dd800e17 	ldw	r22,56(sp)
 400ea4c:	dd400d17 	ldw	r21,52(sp)
 400ea50:	dd000c17 	ldw	r20,48(sp)
 400ea54:	dcc00b17 	ldw	r19,44(sp)
 400ea58:	dc800a17 	ldw	r18,40(sp)
 400ea5c:	dc400917 	ldw	r17,36(sp)
 400ea60:	dc000817 	ldw	r16,32(sp)
 400ea64:	dec01204 	addi	sp,sp,72
 400ea68:	f800283a 	ret
 400ea6c:	2404b03a 	or	r2,r4,r16
 400ea70:	202b883a 	mov	r21,r4
 400ea74:	10004426 	beq	r2,zero,400eb88 <__muldf3+0x2ec>
 400ea78:	80015126 	beq	r16,zero,400efc0 <__muldf3+0x724>
 400ea7c:	8009883a 	mov	r4,r16
 400ea80:	d9800715 	stw	r6,28(sp)
 400ea84:	d9c00215 	stw	r7,8(sp)
 400ea88:	da400415 	stw	r9,16(sp)
 400ea8c:	400fb2c0 	call	400fb2c <__clzsi2>
 400ea90:	d9800717 	ldw	r6,28(sp)
 400ea94:	d9c00217 	ldw	r7,8(sp)
 400ea98:	da400417 	ldw	r9,16(sp)
 400ea9c:	113ffd44 	addi	r4,r2,-11
 400eaa0:	00c00704 	movi	r3,28
 400eaa4:	19014216 	blt	r3,r4,400efb0 <__muldf3+0x714>
 400eaa8:	00c00744 	movi	r3,29
 400eaac:	15bffe04 	addi	r22,r2,-8
 400eab0:	1907c83a 	sub	r3,r3,r4
 400eab4:	85a0983a 	sll	r16,r16,r22
 400eab8:	a8c6d83a 	srl	r3,r21,r3
 400eabc:	adac983a 	sll	r22,r21,r22
 400eac0:	1c20b03a 	or	r16,r3,r16
 400eac4:	1080fcc4 	addi	r2,r2,1011
 400eac8:	00a9c83a 	sub	r20,zero,r2
 400eacc:	002b883a 	mov	r21,zero
 400ead0:	000b883a 	mov	r5,zero
 400ead4:	003f9006 	br	400e918 <__alt_mem_onchip_memory2_0+0xfc009758>
 400ead8:	3446b03a 	or	r3,r6,r17
 400eadc:	1800281e 	bne	r3,zero,400eb80 <__muldf3+0x2e4>
 400eae0:	0023883a 	mov	r17,zero
 400eae4:	0025883a 	mov	r18,zero
 400eae8:	01c00084 	movi	r7,2
 400eaec:	003f9c06 	br	400e960 <__alt_mem_onchip_memory2_0+0xfc0097a0>
 400eaf0:	3446b03a 	or	r3,r6,r17
 400eaf4:	18001e26 	beq	r3,zero,400eb70 <__muldf3+0x2d4>
 400eaf8:	88012126 	beq	r17,zero,400ef80 <__muldf3+0x6e4>
 400eafc:	8809883a 	mov	r4,r17
 400eb00:	d9400215 	stw	r5,8(sp)
 400eb04:	d9800715 	stw	r6,28(sp)
 400eb08:	da400415 	stw	r9,16(sp)
 400eb0c:	da800315 	stw	r10,12(sp)
 400eb10:	400fb2c0 	call	400fb2c <__clzsi2>
 400eb14:	d9400217 	ldw	r5,8(sp)
 400eb18:	d9800717 	ldw	r6,28(sp)
 400eb1c:	da400417 	ldw	r9,16(sp)
 400eb20:	da800317 	ldw	r10,12(sp)
 400eb24:	113ffd44 	addi	r4,r2,-11
 400eb28:	00c00704 	movi	r3,28
 400eb2c:	19011016 	blt	r3,r4,400ef70 <__muldf3+0x6d4>
 400eb30:	00c00744 	movi	r3,29
 400eb34:	14bffe04 	addi	r18,r2,-8
 400eb38:	1907c83a 	sub	r3,r3,r4
 400eb3c:	8ca2983a 	sll	r17,r17,r18
 400eb40:	30c6d83a 	srl	r3,r6,r3
 400eb44:	34a4983a 	sll	r18,r6,r18
 400eb48:	1c62b03a 	or	r17,r3,r17
 400eb4c:	1080fcc4 	addi	r2,r2,1011
 400eb50:	0085c83a 	sub	r2,zero,r2
 400eb54:	000f883a 	mov	r7,zero
 400eb58:	003f8106 	br	400e960 <__alt_mem_onchip_memory2_0+0xfc0097a0>
 400eb5c:	3027883a 	mov	r19,r6
 400eb60:	0081ffc4 	movi	r2,2047
 400eb64:	0021883a 	mov	r16,zero
 400eb68:	002d883a 	mov	r22,zero
 400eb6c:	003faa06 	br	400ea18 <__alt_mem_onchip_memory2_0+0xfc009858>
 400eb70:	0023883a 	mov	r17,zero
 400eb74:	0025883a 	mov	r18,zero
 400eb78:	01c00044 	movi	r7,1
 400eb7c:	003f7806 	br	400e960 <__alt_mem_onchip_memory2_0+0xfc0097a0>
 400eb80:	01c000c4 	movi	r7,3
 400eb84:	003f7606 	br	400e960 <__alt_mem_onchip_memory2_0+0xfc0097a0>
 400eb88:	05400104 	movi	r21,4
 400eb8c:	0021883a 	mov	r16,zero
 400eb90:	002d883a 	mov	r22,zero
 400eb94:	01400044 	movi	r5,1
 400eb98:	003f5f06 	br	400e918 <__alt_mem_onchip_memory2_0+0xfc009758>
 400eb9c:	05400304 	movi	r21,12
 400eba0:	014000c4 	movi	r5,3
 400eba4:	003f5c06 	br	400e918 <__alt_mem_onchip_memory2_0+0xfc009758>
 400eba8:	04000434 	movhi	r16,16
 400ebac:	0027883a 	mov	r19,zero
 400ebb0:	843fffc4 	addi	r16,r16,-1
 400ebb4:	05bfffc4 	movi	r22,-1
 400ebb8:	0081ffc4 	movi	r2,2047
 400ebbc:	003f9606 	br	400ea18 <__alt_mem_onchip_memory2_0+0xfc009858>
 400ebc0:	8023883a 	mov	r17,r16
 400ebc4:	b025883a 	mov	r18,r22
 400ebc8:	280f883a 	mov	r7,r5
 400ebcc:	003f8806 	br	400e9f0 <__alt_mem_onchip_memory2_0+0xfc009830>
 400ebd0:	8023883a 	mov	r17,r16
 400ebd4:	b025883a 	mov	r18,r22
 400ebd8:	480d883a 	mov	r6,r9
 400ebdc:	280f883a 	mov	r7,r5
 400ebe0:	003f8306 	br	400e9f0 <__alt_mem_onchip_memory2_0+0xfc009830>
 400ebe4:	b026d43a 	srli	r19,r22,16
 400ebe8:	902ed43a 	srli	r23,r18,16
 400ebec:	b5bfffcc 	andi	r22,r22,65535
 400ebf0:	94bfffcc 	andi	r18,r18,65535
 400ebf4:	b00b883a 	mov	r5,r22
 400ebf8:	9009883a 	mov	r4,r18
 400ebfc:	d8c00515 	stw	r3,20(sp)
 400ec00:	d9800715 	stw	r6,28(sp)
 400ec04:	da000615 	stw	r8,24(sp)
 400ec08:	400dcd40 	call	400dcd4 <__mulsi3>
 400ec0c:	980b883a 	mov	r5,r19
 400ec10:	9009883a 	mov	r4,r18
 400ec14:	1029883a 	mov	r20,r2
 400ec18:	400dcd40 	call	400dcd4 <__mulsi3>
 400ec1c:	b80b883a 	mov	r5,r23
 400ec20:	9809883a 	mov	r4,r19
 400ec24:	102b883a 	mov	r21,r2
 400ec28:	400dcd40 	call	400dcd4 <__mulsi3>
 400ec2c:	b809883a 	mov	r4,r23
 400ec30:	b00b883a 	mov	r5,r22
 400ec34:	1039883a 	mov	fp,r2
 400ec38:	400dcd40 	call	400dcd4 <__mulsi3>
 400ec3c:	a008d43a 	srli	r4,r20,16
 400ec40:	1545883a 	add	r2,r2,r21
 400ec44:	d8c00517 	ldw	r3,20(sp)
 400ec48:	2085883a 	add	r2,r4,r2
 400ec4c:	d9800717 	ldw	r6,28(sp)
 400ec50:	da000617 	ldw	r8,24(sp)
 400ec54:	1540022e 	bgeu	r2,r21,400ec60 <__muldf3+0x3c4>
 400ec58:	01000074 	movhi	r4,1
 400ec5c:	e139883a 	add	fp,fp,r4
 400ec60:	100e943a 	slli	r7,r2,16
 400ec64:	1004d43a 	srli	r2,r2,16
 400ec68:	882ad43a 	srli	r21,r17,16
 400ec6c:	a53fffcc 	andi	r20,r20,65535
 400ec70:	8c7fffcc 	andi	r17,r17,65535
 400ec74:	3d29883a 	add	r20,r7,r20
 400ec78:	b00b883a 	mov	r5,r22
 400ec7c:	8809883a 	mov	r4,r17
 400ec80:	d8c00515 	stw	r3,20(sp)
 400ec84:	d9800715 	stw	r6,28(sp)
 400ec88:	da000615 	stw	r8,24(sp)
 400ec8c:	dd000115 	stw	r20,4(sp)
 400ec90:	d8800015 	stw	r2,0(sp)
 400ec94:	400dcd40 	call	400dcd4 <__mulsi3>
 400ec98:	980b883a 	mov	r5,r19
 400ec9c:	8809883a 	mov	r4,r17
 400eca0:	d8800215 	stw	r2,8(sp)
 400eca4:	400dcd40 	call	400dcd4 <__mulsi3>
 400eca8:	9809883a 	mov	r4,r19
 400ecac:	a80b883a 	mov	r5,r21
 400ecb0:	1029883a 	mov	r20,r2
 400ecb4:	400dcd40 	call	400dcd4 <__mulsi3>
 400ecb8:	b00b883a 	mov	r5,r22
 400ecbc:	a809883a 	mov	r4,r21
 400ecc0:	d8800415 	stw	r2,16(sp)
 400ecc4:	400dcd40 	call	400dcd4 <__mulsi3>
 400ecc8:	d9c00217 	ldw	r7,8(sp)
 400eccc:	1505883a 	add	r2,r2,r20
 400ecd0:	d8c00517 	ldw	r3,20(sp)
 400ecd4:	3826d43a 	srli	r19,r7,16
 400ecd8:	d9800717 	ldw	r6,28(sp)
 400ecdc:	da000617 	ldw	r8,24(sp)
 400ece0:	9885883a 	add	r2,r19,r2
 400ece4:	da400417 	ldw	r9,16(sp)
 400ece8:	1500022e 	bgeu	r2,r20,400ecf4 <__muldf3+0x458>
 400ecec:	01000074 	movhi	r4,1
 400ecf0:	4913883a 	add	r9,r9,r4
 400ecf4:	1028d43a 	srli	r20,r2,16
 400ecf8:	1004943a 	slli	r2,r2,16
 400ecfc:	802cd43a 	srli	r22,r16,16
 400ed00:	843fffcc 	andi	r16,r16,65535
 400ed04:	3cffffcc 	andi	r19,r7,65535
 400ed08:	9009883a 	mov	r4,r18
 400ed0c:	800b883a 	mov	r5,r16
 400ed10:	a269883a 	add	r20,r20,r9
 400ed14:	d8c00515 	stw	r3,20(sp)
 400ed18:	d9800715 	stw	r6,28(sp)
 400ed1c:	da000615 	stw	r8,24(sp)
 400ed20:	14e7883a 	add	r19,r2,r19
 400ed24:	400dcd40 	call	400dcd4 <__mulsi3>
 400ed28:	9009883a 	mov	r4,r18
 400ed2c:	b00b883a 	mov	r5,r22
 400ed30:	d8800315 	stw	r2,12(sp)
 400ed34:	400dcd40 	call	400dcd4 <__mulsi3>
 400ed38:	b809883a 	mov	r4,r23
 400ed3c:	b00b883a 	mov	r5,r22
 400ed40:	d8800215 	stw	r2,8(sp)
 400ed44:	400dcd40 	call	400dcd4 <__mulsi3>
 400ed48:	b80b883a 	mov	r5,r23
 400ed4c:	8009883a 	mov	r4,r16
 400ed50:	d8800415 	stw	r2,16(sp)
 400ed54:	400dcd40 	call	400dcd4 <__mulsi3>
 400ed58:	da800317 	ldw	r10,12(sp)
 400ed5c:	d9c00217 	ldw	r7,8(sp)
 400ed60:	d9000017 	ldw	r4,0(sp)
 400ed64:	502ed43a 	srli	r23,r10,16
 400ed68:	11c5883a 	add	r2,r2,r7
 400ed6c:	24e5883a 	add	r18,r4,r19
 400ed70:	b885883a 	add	r2,r23,r2
 400ed74:	d8c00517 	ldw	r3,20(sp)
 400ed78:	d9800717 	ldw	r6,28(sp)
 400ed7c:	da000617 	ldw	r8,24(sp)
 400ed80:	da400417 	ldw	r9,16(sp)
 400ed84:	11c0022e 	bgeu	r2,r7,400ed90 <__muldf3+0x4f4>
 400ed88:	01000074 	movhi	r4,1
 400ed8c:	4913883a 	add	r9,r9,r4
 400ed90:	100ed43a 	srli	r7,r2,16
 400ed94:	1004943a 	slli	r2,r2,16
 400ed98:	55ffffcc 	andi	r23,r10,65535
 400ed9c:	3a53883a 	add	r9,r7,r9
 400eda0:	8809883a 	mov	r4,r17
 400eda4:	800b883a 	mov	r5,r16
 400eda8:	d8c00515 	stw	r3,20(sp)
 400edac:	d9800715 	stw	r6,28(sp)
 400edb0:	da000615 	stw	r8,24(sp)
 400edb4:	da400415 	stw	r9,16(sp)
 400edb8:	15ef883a 	add	r23,r2,r23
 400edbc:	400dcd40 	call	400dcd4 <__mulsi3>
 400edc0:	8809883a 	mov	r4,r17
 400edc4:	b00b883a 	mov	r5,r22
 400edc8:	d8800215 	stw	r2,8(sp)
 400edcc:	400dcd40 	call	400dcd4 <__mulsi3>
 400edd0:	b00b883a 	mov	r5,r22
 400edd4:	a809883a 	mov	r4,r21
 400edd8:	d8800315 	stw	r2,12(sp)
 400eddc:	400dcd40 	call	400dcd4 <__mulsi3>
 400ede0:	8009883a 	mov	r4,r16
 400ede4:	a80b883a 	mov	r5,r21
 400ede8:	1023883a 	mov	r17,r2
 400edec:	400dcd40 	call	400dcd4 <__mulsi3>
 400edf0:	d9c00217 	ldw	r7,8(sp)
 400edf4:	da800317 	ldw	r10,12(sp)
 400edf8:	d8c00517 	ldw	r3,20(sp)
 400edfc:	3808d43a 	srli	r4,r7,16
 400ee00:	1285883a 	add	r2,r2,r10
 400ee04:	d9800717 	ldw	r6,28(sp)
 400ee08:	2085883a 	add	r2,r4,r2
 400ee0c:	da000617 	ldw	r8,24(sp)
 400ee10:	da400417 	ldw	r9,16(sp)
 400ee14:	1280022e 	bgeu	r2,r10,400ee20 <__muldf3+0x584>
 400ee18:	01000074 	movhi	r4,1
 400ee1c:	8923883a 	add	r17,r17,r4
 400ee20:	1008943a 	slli	r4,r2,16
 400ee24:	39ffffcc 	andi	r7,r7,65535
 400ee28:	e4b9883a 	add	fp,fp,r18
 400ee2c:	21cf883a 	add	r7,r4,r7
 400ee30:	e4e7803a 	cmpltu	r19,fp,r19
 400ee34:	3d0f883a 	add	r7,r7,r20
 400ee38:	bf39883a 	add	fp,r23,fp
 400ee3c:	99c9883a 	add	r4,r19,r7
 400ee40:	e5ef803a 	cmpltu	r23,fp,r23
 400ee44:	490b883a 	add	r5,r9,r4
 400ee48:	1004d43a 	srli	r2,r2,16
 400ee4c:	b965883a 	add	r18,r23,r5
 400ee50:	24c9803a 	cmpltu	r4,r4,r19
 400ee54:	3d29803a 	cmpltu	r20,r7,r20
 400ee58:	a128b03a 	or	r20,r20,r4
 400ee5c:	95ef803a 	cmpltu	r23,r18,r23
 400ee60:	2a53803a 	cmpltu	r9,r5,r9
 400ee64:	a0a9883a 	add	r20,r20,r2
 400ee68:	4deeb03a 	or	r23,r9,r23
 400ee6c:	a5ef883a 	add	r23,r20,r23
 400ee70:	bc63883a 	add	r17,r23,r17
 400ee74:	e004927a 	slli	r2,fp,9
 400ee78:	d9000117 	ldw	r4,4(sp)
 400ee7c:	882e927a 	slli	r23,r17,9
 400ee80:	9022d5fa 	srli	r17,r18,23
 400ee84:	e038d5fa 	srli	fp,fp,23
 400ee88:	1104b03a 	or	r2,r2,r4
 400ee8c:	9024927a 	slli	r18,r18,9
 400ee90:	1004c03a 	cmpne	r2,r2,zero
 400ee94:	bc62b03a 	or	r17,r23,r17
 400ee98:	1738b03a 	or	fp,r2,fp
 400ee9c:	8880402c 	andhi	r2,r17,256
 400eea0:	e4a4b03a 	or	r18,fp,r18
 400eea4:	10000726 	beq	r2,zero,400eec4 <__muldf3+0x628>
 400eea8:	9006d07a 	srli	r3,r18,1
 400eeac:	880497fa 	slli	r2,r17,31
 400eeb0:	9480004c 	andi	r18,r18,1
 400eeb4:	8822d07a 	srli	r17,r17,1
 400eeb8:	1ca4b03a 	or	r18,r3,r18
 400eebc:	14a4b03a 	or	r18,r2,r18
 400eec0:	4007883a 	mov	r3,r8
 400eec4:	1880ffc4 	addi	r2,r3,1023
 400eec8:	0080460e 	bge	zero,r2,400efe4 <__muldf3+0x748>
 400eecc:	910001cc 	andi	r4,r18,7
 400eed0:	20000726 	beq	r4,zero,400eef0 <__muldf3+0x654>
 400eed4:	910003cc 	andi	r4,r18,15
 400eed8:	01400104 	movi	r5,4
 400eedc:	21400426 	beq	r4,r5,400eef0 <__muldf3+0x654>
 400eee0:	9149883a 	add	r4,r18,r5
 400eee4:	24a5803a 	cmpltu	r18,r4,r18
 400eee8:	8ca3883a 	add	r17,r17,r18
 400eeec:	2025883a 	mov	r18,r4
 400eef0:	8900402c 	andhi	r4,r17,256
 400eef4:	20000426 	beq	r4,zero,400ef08 <__muldf3+0x66c>
 400eef8:	18810004 	addi	r2,r3,1024
 400eefc:	00ffc034 	movhi	r3,65280
 400ef00:	18ffffc4 	addi	r3,r3,-1
 400ef04:	88e2703a 	and	r17,r17,r3
 400ef08:	00c1ff84 	movi	r3,2046
 400ef0c:	18bf1316 	blt	r3,r2,400eb5c <__alt_mem_onchip_memory2_0+0xfc00999c>
 400ef10:	882c977a 	slli	r22,r17,29
 400ef14:	9024d0fa 	srli	r18,r18,3
 400ef18:	8822927a 	slli	r17,r17,9
 400ef1c:	1081ffcc 	andi	r2,r2,2047
 400ef20:	b4acb03a 	or	r22,r22,r18
 400ef24:	8820d33a 	srli	r16,r17,12
 400ef28:	3027883a 	mov	r19,r6
 400ef2c:	003eba06 	br	400ea18 <__alt_mem_onchip_memory2_0+0xfc009858>
 400ef30:	8080022c 	andhi	r2,r16,8
 400ef34:	10000926 	beq	r2,zero,400ef5c <__muldf3+0x6c0>
 400ef38:	8880022c 	andhi	r2,r17,8
 400ef3c:	1000071e 	bne	r2,zero,400ef5c <__muldf3+0x6c0>
 400ef40:	00800434 	movhi	r2,16
 400ef44:	8c000234 	orhi	r16,r17,8
 400ef48:	10bfffc4 	addi	r2,r2,-1
 400ef4c:	e027883a 	mov	r19,fp
 400ef50:	80a0703a 	and	r16,r16,r2
 400ef54:	902d883a 	mov	r22,r18
 400ef58:	003f1706 	br	400ebb8 <__alt_mem_onchip_memory2_0+0xfc0099f8>
 400ef5c:	00800434 	movhi	r2,16
 400ef60:	84000234 	orhi	r16,r16,8
 400ef64:	10bfffc4 	addi	r2,r2,-1
 400ef68:	80a0703a 	and	r16,r16,r2
 400ef6c:	003f1206 	br	400ebb8 <__alt_mem_onchip_memory2_0+0xfc0099f8>
 400ef70:	147ff604 	addi	r17,r2,-40
 400ef74:	3462983a 	sll	r17,r6,r17
 400ef78:	0025883a 	mov	r18,zero
 400ef7c:	003ef306 	br	400eb4c <__alt_mem_onchip_memory2_0+0xfc00998c>
 400ef80:	3009883a 	mov	r4,r6
 400ef84:	d9400215 	stw	r5,8(sp)
 400ef88:	d9800715 	stw	r6,28(sp)
 400ef8c:	da400415 	stw	r9,16(sp)
 400ef90:	da800315 	stw	r10,12(sp)
 400ef94:	400fb2c0 	call	400fb2c <__clzsi2>
 400ef98:	10800804 	addi	r2,r2,32
 400ef9c:	da800317 	ldw	r10,12(sp)
 400efa0:	da400417 	ldw	r9,16(sp)
 400efa4:	d9800717 	ldw	r6,28(sp)
 400efa8:	d9400217 	ldw	r5,8(sp)
 400efac:	003edd06 	br	400eb24 <__alt_mem_onchip_memory2_0+0xfc009964>
 400efb0:	143ff604 	addi	r16,r2,-40
 400efb4:	ac20983a 	sll	r16,r21,r16
 400efb8:	002d883a 	mov	r22,zero
 400efbc:	003ec106 	br	400eac4 <__alt_mem_onchip_memory2_0+0xfc009904>
 400efc0:	d9800715 	stw	r6,28(sp)
 400efc4:	d9c00215 	stw	r7,8(sp)
 400efc8:	da400415 	stw	r9,16(sp)
 400efcc:	400fb2c0 	call	400fb2c <__clzsi2>
 400efd0:	10800804 	addi	r2,r2,32
 400efd4:	da400417 	ldw	r9,16(sp)
 400efd8:	d9c00217 	ldw	r7,8(sp)
 400efdc:	d9800717 	ldw	r6,28(sp)
 400efe0:	003eae06 	br	400ea9c <__alt_mem_onchip_memory2_0+0xfc0098dc>
 400efe4:	00c00044 	movi	r3,1
 400efe8:	1887c83a 	sub	r3,r3,r2
 400efec:	01000e04 	movi	r4,56
 400eff0:	20fe8516 	blt	r4,r3,400ea08 <__alt_mem_onchip_memory2_0+0xfc009848>
 400eff4:	010007c4 	movi	r4,31
 400eff8:	20c01b16 	blt	r4,r3,400f068 <__muldf3+0x7cc>
 400effc:	00800804 	movi	r2,32
 400f000:	10c5c83a 	sub	r2,r2,r3
 400f004:	888a983a 	sll	r5,r17,r2
 400f008:	90c8d83a 	srl	r4,r18,r3
 400f00c:	9084983a 	sll	r2,r18,r2
 400f010:	88e2d83a 	srl	r17,r17,r3
 400f014:	2906b03a 	or	r3,r5,r4
 400f018:	1004c03a 	cmpne	r2,r2,zero
 400f01c:	1886b03a 	or	r3,r3,r2
 400f020:	188001cc 	andi	r2,r3,7
 400f024:	10000726 	beq	r2,zero,400f044 <__muldf3+0x7a8>
 400f028:	188003cc 	andi	r2,r3,15
 400f02c:	01000104 	movi	r4,4
 400f030:	11000426 	beq	r2,r4,400f044 <__muldf3+0x7a8>
 400f034:	1805883a 	mov	r2,r3
 400f038:	10c00104 	addi	r3,r2,4
 400f03c:	1885803a 	cmpltu	r2,r3,r2
 400f040:	88a3883a 	add	r17,r17,r2
 400f044:	8880202c 	andhi	r2,r17,128
 400f048:	10001c26 	beq	r2,zero,400f0bc <__muldf3+0x820>
 400f04c:	3027883a 	mov	r19,r6
 400f050:	00800044 	movi	r2,1
 400f054:	0021883a 	mov	r16,zero
 400f058:	002d883a 	mov	r22,zero
 400f05c:	003e6e06 	br	400ea18 <__alt_mem_onchip_memory2_0+0xfc009858>
 400f060:	4007883a 	mov	r3,r8
 400f064:	003f9706 	br	400eec4 <__alt_mem_onchip_memory2_0+0xfc009d04>
 400f068:	017ff844 	movi	r5,-31
 400f06c:	2885c83a 	sub	r2,r5,r2
 400f070:	888ad83a 	srl	r5,r17,r2
 400f074:	00800804 	movi	r2,32
 400f078:	18801a26 	beq	r3,r2,400f0e4 <__muldf3+0x848>
 400f07c:	01001004 	movi	r4,64
 400f080:	20c7c83a 	sub	r3,r4,r3
 400f084:	88e2983a 	sll	r17,r17,r3
 400f088:	8ca4b03a 	or	r18,r17,r18
 400f08c:	9004c03a 	cmpne	r2,r18,zero
 400f090:	2884b03a 	or	r2,r5,r2
 400f094:	144001cc 	andi	r17,r2,7
 400f098:	88000d1e 	bne	r17,zero,400f0d0 <__muldf3+0x834>
 400f09c:	0021883a 	mov	r16,zero
 400f0a0:	102cd0fa 	srli	r22,r2,3
 400f0a4:	3027883a 	mov	r19,r6
 400f0a8:	0005883a 	mov	r2,zero
 400f0ac:	b46cb03a 	or	r22,r22,r17
 400f0b0:	003e5906 	br	400ea18 <__alt_mem_onchip_memory2_0+0xfc009858>
 400f0b4:	1007883a 	mov	r3,r2
 400f0b8:	0023883a 	mov	r17,zero
 400f0bc:	8820927a 	slli	r16,r17,9
 400f0c0:	1805883a 	mov	r2,r3
 400f0c4:	8822977a 	slli	r17,r17,29
 400f0c8:	8020d33a 	srli	r16,r16,12
 400f0cc:	003ff406 	br	400f0a0 <__alt_mem_onchip_memory2_0+0xfc009ee0>
 400f0d0:	10c003cc 	andi	r3,r2,15
 400f0d4:	01000104 	movi	r4,4
 400f0d8:	193ff626 	beq	r3,r4,400f0b4 <__alt_mem_onchip_memory2_0+0xfc009ef4>
 400f0dc:	0023883a 	mov	r17,zero
 400f0e0:	003fd506 	br	400f038 <__alt_mem_onchip_memory2_0+0xfc009e78>
 400f0e4:	0023883a 	mov	r17,zero
 400f0e8:	003fe706 	br	400f088 <__alt_mem_onchip_memory2_0+0xfc009ec8>
 400f0ec:	00800434 	movhi	r2,16
 400f0f0:	8c000234 	orhi	r16,r17,8
 400f0f4:	10bfffc4 	addi	r2,r2,-1
 400f0f8:	3027883a 	mov	r19,r6
 400f0fc:	80a0703a 	and	r16,r16,r2
 400f100:	902d883a 	mov	r22,r18
 400f104:	003eac06 	br	400ebb8 <__alt_mem_onchip_memory2_0+0xfc0099f8>

0400f108 <__subdf3>:
 400f108:	02000434 	movhi	r8,16
 400f10c:	423fffc4 	addi	r8,r8,-1
 400f110:	defffb04 	addi	sp,sp,-20
 400f114:	2a14703a 	and	r10,r5,r8
 400f118:	3812d53a 	srli	r9,r7,20
 400f11c:	3a10703a 	and	r8,r7,r8
 400f120:	2006d77a 	srli	r3,r4,29
 400f124:	3004d77a 	srli	r2,r6,29
 400f128:	dc000015 	stw	r16,0(sp)
 400f12c:	501490fa 	slli	r10,r10,3
 400f130:	2820d53a 	srli	r16,r5,20
 400f134:	401090fa 	slli	r8,r8,3
 400f138:	dc800215 	stw	r18,8(sp)
 400f13c:	dc400115 	stw	r17,4(sp)
 400f140:	dfc00415 	stw	ra,16(sp)
 400f144:	202290fa 	slli	r17,r4,3
 400f148:	dcc00315 	stw	r19,12(sp)
 400f14c:	4a41ffcc 	andi	r9,r9,2047
 400f150:	0101ffc4 	movi	r4,2047
 400f154:	2824d7fa 	srli	r18,r5,31
 400f158:	8401ffcc 	andi	r16,r16,2047
 400f15c:	50c6b03a 	or	r3,r10,r3
 400f160:	380ed7fa 	srli	r7,r7,31
 400f164:	408ab03a 	or	r5,r8,r2
 400f168:	300c90fa 	slli	r6,r6,3
 400f16c:	49009626 	beq	r9,r4,400f3c8 <__subdf3+0x2c0>
 400f170:	39c0005c 	xori	r7,r7,1
 400f174:	8245c83a 	sub	r2,r16,r9
 400f178:	3c807426 	beq	r7,r18,400f34c <__subdf3+0x244>
 400f17c:	0080af0e 	bge	zero,r2,400f43c <__subdf3+0x334>
 400f180:	48002a1e 	bne	r9,zero,400f22c <__subdf3+0x124>
 400f184:	2988b03a 	or	r4,r5,r6
 400f188:	20009a1e 	bne	r4,zero,400f3f4 <__subdf3+0x2ec>
 400f18c:	888001cc 	andi	r2,r17,7
 400f190:	10000726 	beq	r2,zero,400f1b0 <__subdf3+0xa8>
 400f194:	888003cc 	andi	r2,r17,15
 400f198:	01000104 	movi	r4,4
 400f19c:	11000426 	beq	r2,r4,400f1b0 <__subdf3+0xa8>
 400f1a0:	890b883a 	add	r5,r17,r4
 400f1a4:	2c63803a 	cmpltu	r17,r5,r17
 400f1a8:	1c47883a 	add	r3,r3,r17
 400f1ac:	2823883a 	mov	r17,r5
 400f1b0:	1880202c 	andhi	r2,r3,128
 400f1b4:	10005926 	beq	r2,zero,400f31c <__subdf3+0x214>
 400f1b8:	84000044 	addi	r16,r16,1
 400f1bc:	0081ffc4 	movi	r2,2047
 400f1c0:	8080be26 	beq	r16,r2,400f4bc <__subdf3+0x3b4>
 400f1c4:	017fe034 	movhi	r5,65408
 400f1c8:	297fffc4 	addi	r5,r5,-1
 400f1cc:	1946703a 	and	r3,r3,r5
 400f1d0:	1804977a 	slli	r2,r3,29
 400f1d4:	1806927a 	slli	r3,r3,9
 400f1d8:	8822d0fa 	srli	r17,r17,3
 400f1dc:	8401ffcc 	andi	r16,r16,2047
 400f1e0:	180ad33a 	srli	r5,r3,12
 400f1e4:	9100004c 	andi	r4,r18,1
 400f1e8:	1444b03a 	or	r2,r2,r17
 400f1ec:	80c1ffcc 	andi	r3,r16,2047
 400f1f0:	1820953a 	slli	r16,r3,20
 400f1f4:	20c03fcc 	andi	r3,r4,255
 400f1f8:	180897fa 	slli	r4,r3,31
 400f1fc:	00c00434 	movhi	r3,16
 400f200:	18ffffc4 	addi	r3,r3,-1
 400f204:	28c6703a 	and	r3,r5,r3
 400f208:	1c06b03a 	or	r3,r3,r16
 400f20c:	1906b03a 	or	r3,r3,r4
 400f210:	dfc00417 	ldw	ra,16(sp)
 400f214:	dcc00317 	ldw	r19,12(sp)
 400f218:	dc800217 	ldw	r18,8(sp)
 400f21c:	dc400117 	ldw	r17,4(sp)
 400f220:	dc000017 	ldw	r16,0(sp)
 400f224:	dec00504 	addi	sp,sp,20
 400f228:	f800283a 	ret
 400f22c:	0101ffc4 	movi	r4,2047
 400f230:	813fd626 	beq	r16,r4,400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f234:	29402034 	orhi	r5,r5,128
 400f238:	01000e04 	movi	r4,56
 400f23c:	2080a316 	blt	r4,r2,400f4cc <__subdf3+0x3c4>
 400f240:	010007c4 	movi	r4,31
 400f244:	2080c616 	blt	r4,r2,400f560 <__subdf3+0x458>
 400f248:	01000804 	movi	r4,32
 400f24c:	2089c83a 	sub	r4,r4,r2
 400f250:	2910983a 	sll	r8,r5,r4
 400f254:	308ed83a 	srl	r7,r6,r2
 400f258:	3108983a 	sll	r4,r6,r4
 400f25c:	2884d83a 	srl	r2,r5,r2
 400f260:	41ccb03a 	or	r6,r8,r7
 400f264:	2008c03a 	cmpne	r4,r4,zero
 400f268:	310cb03a 	or	r6,r6,r4
 400f26c:	898dc83a 	sub	r6,r17,r6
 400f270:	89a3803a 	cmpltu	r17,r17,r6
 400f274:	1887c83a 	sub	r3,r3,r2
 400f278:	1c47c83a 	sub	r3,r3,r17
 400f27c:	3023883a 	mov	r17,r6
 400f280:	1880202c 	andhi	r2,r3,128
 400f284:	10002326 	beq	r2,zero,400f314 <__subdf3+0x20c>
 400f288:	04c02034 	movhi	r19,128
 400f28c:	9cffffc4 	addi	r19,r19,-1
 400f290:	1ce6703a 	and	r19,r3,r19
 400f294:	98007a26 	beq	r19,zero,400f480 <__subdf3+0x378>
 400f298:	9809883a 	mov	r4,r19
 400f29c:	400fb2c0 	call	400fb2c <__clzsi2>
 400f2a0:	113ffe04 	addi	r4,r2,-8
 400f2a4:	00c007c4 	movi	r3,31
 400f2a8:	19007b16 	blt	r3,r4,400f498 <__subdf3+0x390>
 400f2ac:	00800804 	movi	r2,32
 400f2b0:	1105c83a 	sub	r2,r2,r4
 400f2b4:	8884d83a 	srl	r2,r17,r2
 400f2b8:	9906983a 	sll	r3,r19,r4
 400f2bc:	8922983a 	sll	r17,r17,r4
 400f2c0:	10c4b03a 	or	r2,r2,r3
 400f2c4:	24007816 	blt	r4,r16,400f4a8 <__subdf3+0x3a0>
 400f2c8:	2421c83a 	sub	r16,r4,r16
 400f2cc:	80c00044 	addi	r3,r16,1
 400f2d0:	010007c4 	movi	r4,31
 400f2d4:	20c09516 	blt	r4,r3,400f52c <__subdf3+0x424>
 400f2d8:	01400804 	movi	r5,32
 400f2dc:	28cbc83a 	sub	r5,r5,r3
 400f2e0:	88c8d83a 	srl	r4,r17,r3
 400f2e4:	8962983a 	sll	r17,r17,r5
 400f2e8:	114a983a 	sll	r5,r2,r5
 400f2ec:	10c6d83a 	srl	r3,r2,r3
 400f2f0:	8804c03a 	cmpne	r2,r17,zero
 400f2f4:	290ab03a 	or	r5,r5,r4
 400f2f8:	28a2b03a 	or	r17,r5,r2
 400f2fc:	0021883a 	mov	r16,zero
 400f300:	003fa206 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f304:	2090b03a 	or	r8,r4,r2
 400f308:	40018e26 	beq	r8,zero,400f944 <__subdf3+0x83c>
 400f30c:	1007883a 	mov	r3,r2
 400f310:	2023883a 	mov	r17,r4
 400f314:	888001cc 	andi	r2,r17,7
 400f318:	103f9e1e 	bne	r2,zero,400f194 <__alt_mem_onchip_memory2_0+0xfc009fd4>
 400f31c:	1804977a 	slli	r2,r3,29
 400f320:	8822d0fa 	srli	r17,r17,3
 400f324:	1810d0fa 	srli	r8,r3,3
 400f328:	9100004c 	andi	r4,r18,1
 400f32c:	1444b03a 	or	r2,r2,r17
 400f330:	00c1ffc4 	movi	r3,2047
 400f334:	80c02826 	beq	r16,r3,400f3d8 <__subdf3+0x2d0>
 400f338:	01400434 	movhi	r5,16
 400f33c:	297fffc4 	addi	r5,r5,-1
 400f340:	80e0703a 	and	r16,r16,r3
 400f344:	414a703a 	and	r5,r8,r5
 400f348:	003fa806 	br	400f1ec <__alt_mem_onchip_memory2_0+0xfc00a02c>
 400f34c:	0080630e 	bge	zero,r2,400f4dc <__subdf3+0x3d4>
 400f350:	48003026 	beq	r9,zero,400f414 <__subdf3+0x30c>
 400f354:	0101ffc4 	movi	r4,2047
 400f358:	813f8c26 	beq	r16,r4,400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f35c:	29402034 	orhi	r5,r5,128
 400f360:	01000e04 	movi	r4,56
 400f364:	2080a90e 	bge	r4,r2,400f60c <__subdf3+0x504>
 400f368:	298cb03a 	or	r6,r5,r6
 400f36c:	3012c03a 	cmpne	r9,r6,zero
 400f370:	0005883a 	mov	r2,zero
 400f374:	4c53883a 	add	r9,r9,r17
 400f378:	4c63803a 	cmpltu	r17,r9,r17
 400f37c:	10c7883a 	add	r3,r2,r3
 400f380:	88c7883a 	add	r3,r17,r3
 400f384:	4823883a 	mov	r17,r9
 400f388:	1880202c 	andhi	r2,r3,128
 400f38c:	1000d026 	beq	r2,zero,400f6d0 <__subdf3+0x5c8>
 400f390:	84000044 	addi	r16,r16,1
 400f394:	0081ffc4 	movi	r2,2047
 400f398:	8080fe26 	beq	r16,r2,400f794 <__subdf3+0x68c>
 400f39c:	00bfe034 	movhi	r2,65408
 400f3a0:	10bfffc4 	addi	r2,r2,-1
 400f3a4:	1886703a 	and	r3,r3,r2
 400f3a8:	880ad07a 	srli	r5,r17,1
 400f3ac:	180497fa 	slli	r2,r3,31
 400f3b0:	8900004c 	andi	r4,r17,1
 400f3b4:	2922b03a 	or	r17,r5,r4
 400f3b8:	1806d07a 	srli	r3,r3,1
 400f3bc:	1462b03a 	or	r17,r2,r17
 400f3c0:	3825883a 	mov	r18,r7
 400f3c4:	003f7106 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f3c8:	2984b03a 	or	r2,r5,r6
 400f3cc:	103f6826 	beq	r2,zero,400f170 <__alt_mem_onchip_memory2_0+0xfc009fb0>
 400f3d0:	39c03fcc 	andi	r7,r7,255
 400f3d4:	003f6706 	br	400f174 <__alt_mem_onchip_memory2_0+0xfc009fb4>
 400f3d8:	4086b03a 	or	r3,r8,r2
 400f3dc:	18015226 	beq	r3,zero,400f928 <__subdf3+0x820>
 400f3e0:	00c00434 	movhi	r3,16
 400f3e4:	41400234 	orhi	r5,r8,8
 400f3e8:	18ffffc4 	addi	r3,r3,-1
 400f3ec:	28ca703a 	and	r5,r5,r3
 400f3f0:	003f7e06 	br	400f1ec <__alt_mem_onchip_memory2_0+0xfc00a02c>
 400f3f4:	10bfffc4 	addi	r2,r2,-1
 400f3f8:	1000491e 	bne	r2,zero,400f520 <__subdf3+0x418>
 400f3fc:	898fc83a 	sub	r7,r17,r6
 400f400:	89e3803a 	cmpltu	r17,r17,r7
 400f404:	1947c83a 	sub	r3,r3,r5
 400f408:	1c47c83a 	sub	r3,r3,r17
 400f40c:	3823883a 	mov	r17,r7
 400f410:	003f9b06 	br	400f280 <__alt_mem_onchip_memory2_0+0xfc00a0c0>
 400f414:	2988b03a 	or	r4,r5,r6
 400f418:	203f5c26 	beq	r4,zero,400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f41c:	10bfffc4 	addi	r2,r2,-1
 400f420:	1000931e 	bne	r2,zero,400f670 <__subdf3+0x568>
 400f424:	898d883a 	add	r6,r17,r6
 400f428:	3463803a 	cmpltu	r17,r6,r17
 400f42c:	1947883a 	add	r3,r3,r5
 400f430:	88c7883a 	add	r3,r17,r3
 400f434:	3023883a 	mov	r17,r6
 400f438:	003fd306 	br	400f388 <__alt_mem_onchip_memory2_0+0xfc00a1c8>
 400f43c:	1000541e 	bne	r2,zero,400f590 <__subdf3+0x488>
 400f440:	80800044 	addi	r2,r16,1
 400f444:	1081ffcc 	andi	r2,r2,2047
 400f448:	01000044 	movi	r4,1
 400f44c:	2080a20e 	bge	r4,r2,400f6d8 <__subdf3+0x5d0>
 400f450:	8989c83a 	sub	r4,r17,r6
 400f454:	8905803a 	cmpltu	r2,r17,r4
 400f458:	1967c83a 	sub	r19,r3,r5
 400f45c:	98a7c83a 	sub	r19,r19,r2
 400f460:	9880202c 	andhi	r2,r19,128
 400f464:	10006326 	beq	r2,zero,400f5f4 <__subdf3+0x4ec>
 400f468:	3463c83a 	sub	r17,r6,r17
 400f46c:	28c7c83a 	sub	r3,r5,r3
 400f470:	344d803a 	cmpltu	r6,r6,r17
 400f474:	19a7c83a 	sub	r19,r3,r6
 400f478:	3825883a 	mov	r18,r7
 400f47c:	983f861e 	bne	r19,zero,400f298 <__alt_mem_onchip_memory2_0+0xfc00a0d8>
 400f480:	8809883a 	mov	r4,r17
 400f484:	400fb2c0 	call	400fb2c <__clzsi2>
 400f488:	10800804 	addi	r2,r2,32
 400f48c:	113ffe04 	addi	r4,r2,-8
 400f490:	00c007c4 	movi	r3,31
 400f494:	193f850e 	bge	r3,r4,400f2ac <__alt_mem_onchip_memory2_0+0xfc00a0ec>
 400f498:	10bff604 	addi	r2,r2,-40
 400f49c:	8884983a 	sll	r2,r17,r2
 400f4a0:	0023883a 	mov	r17,zero
 400f4a4:	243f880e 	bge	r4,r16,400f2c8 <__alt_mem_onchip_memory2_0+0xfc00a108>
 400f4a8:	00ffe034 	movhi	r3,65408
 400f4ac:	18ffffc4 	addi	r3,r3,-1
 400f4b0:	8121c83a 	sub	r16,r16,r4
 400f4b4:	10c6703a 	and	r3,r2,r3
 400f4b8:	003f3406 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f4bc:	9100004c 	andi	r4,r18,1
 400f4c0:	000b883a 	mov	r5,zero
 400f4c4:	0005883a 	mov	r2,zero
 400f4c8:	003f4806 	br	400f1ec <__alt_mem_onchip_memory2_0+0xfc00a02c>
 400f4cc:	298cb03a 	or	r6,r5,r6
 400f4d0:	300cc03a 	cmpne	r6,r6,zero
 400f4d4:	0005883a 	mov	r2,zero
 400f4d8:	003f6406 	br	400f26c <__alt_mem_onchip_memory2_0+0xfc00a0ac>
 400f4dc:	10009a1e 	bne	r2,zero,400f748 <__subdf3+0x640>
 400f4e0:	82400044 	addi	r9,r16,1
 400f4e4:	4881ffcc 	andi	r2,r9,2047
 400f4e8:	02800044 	movi	r10,1
 400f4ec:	5080670e 	bge	r10,r2,400f68c <__subdf3+0x584>
 400f4f0:	0081ffc4 	movi	r2,2047
 400f4f4:	4880af26 	beq	r9,r2,400f7b4 <__subdf3+0x6ac>
 400f4f8:	898d883a 	add	r6,r17,r6
 400f4fc:	1945883a 	add	r2,r3,r5
 400f500:	3447803a 	cmpltu	r3,r6,r17
 400f504:	1887883a 	add	r3,r3,r2
 400f508:	182297fa 	slli	r17,r3,31
 400f50c:	300cd07a 	srli	r6,r6,1
 400f510:	1806d07a 	srli	r3,r3,1
 400f514:	4821883a 	mov	r16,r9
 400f518:	89a2b03a 	or	r17,r17,r6
 400f51c:	003f1b06 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f520:	0101ffc4 	movi	r4,2047
 400f524:	813f441e 	bne	r16,r4,400f238 <__alt_mem_onchip_memory2_0+0xfc00a078>
 400f528:	003f1806 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f52c:	843ff844 	addi	r16,r16,-31
 400f530:	01400804 	movi	r5,32
 400f534:	1408d83a 	srl	r4,r2,r16
 400f538:	19405026 	beq	r3,r5,400f67c <__subdf3+0x574>
 400f53c:	01401004 	movi	r5,64
 400f540:	28c7c83a 	sub	r3,r5,r3
 400f544:	10c4983a 	sll	r2,r2,r3
 400f548:	88a2b03a 	or	r17,r17,r2
 400f54c:	8822c03a 	cmpne	r17,r17,zero
 400f550:	2462b03a 	or	r17,r4,r17
 400f554:	0007883a 	mov	r3,zero
 400f558:	0021883a 	mov	r16,zero
 400f55c:	003f6d06 	br	400f314 <__alt_mem_onchip_memory2_0+0xfc00a154>
 400f560:	11fff804 	addi	r7,r2,-32
 400f564:	01000804 	movi	r4,32
 400f568:	29ced83a 	srl	r7,r5,r7
 400f56c:	11004526 	beq	r2,r4,400f684 <__subdf3+0x57c>
 400f570:	01001004 	movi	r4,64
 400f574:	2089c83a 	sub	r4,r4,r2
 400f578:	2904983a 	sll	r2,r5,r4
 400f57c:	118cb03a 	or	r6,r2,r6
 400f580:	300cc03a 	cmpne	r6,r6,zero
 400f584:	398cb03a 	or	r6,r7,r6
 400f588:	0005883a 	mov	r2,zero
 400f58c:	003f3706 	br	400f26c <__alt_mem_onchip_memory2_0+0xfc00a0ac>
 400f590:	80002a26 	beq	r16,zero,400f63c <__subdf3+0x534>
 400f594:	0101ffc4 	movi	r4,2047
 400f598:	49006626 	beq	r9,r4,400f734 <__subdf3+0x62c>
 400f59c:	0085c83a 	sub	r2,zero,r2
 400f5a0:	18c02034 	orhi	r3,r3,128
 400f5a4:	01000e04 	movi	r4,56
 400f5a8:	20807e16 	blt	r4,r2,400f7a4 <__subdf3+0x69c>
 400f5ac:	010007c4 	movi	r4,31
 400f5b0:	2080e716 	blt	r4,r2,400f950 <__subdf3+0x848>
 400f5b4:	01000804 	movi	r4,32
 400f5b8:	2089c83a 	sub	r4,r4,r2
 400f5bc:	1914983a 	sll	r10,r3,r4
 400f5c0:	8890d83a 	srl	r8,r17,r2
 400f5c4:	8908983a 	sll	r4,r17,r4
 400f5c8:	1884d83a 	srl	r2,r3,r2
 400f5cc:	5222b03a 	or	r17,r10,r8
 400f5d0:	2006c03a 	cmpne	r3,r4,zero
 400f5d4:	88e2b03a 	or	r17,r17,r3
 400f5d8:	3463c83a 	sub	r17,r6,r17
 400f5dc:	2885c83a 	sub	r2,r5,r2
 400f5e0:	344d803a 	cmpltu	r6,r6,r17
 400f5e4:	1187c83a 	sub	r3,r2,r6
 400f5e8:	4821883a 	mov	r16,r9
 400f5ec:	3825883a 	mov	r18,r7
 400f5f0:	003f2306 	br	400f280 <__alt_mem_onchip_memory2_0+0xfc00a0c0>
 400f5f4:	24d0b03a 	or	r8,r4,r19
 400f5f8:	40001b1e 	bne	r8,zero,400f668 <__subdf3+0x560>
 400f5fc:	0005883a 	mov	r2,zero
 400f600:	0009883a 	mov	r4,zero
 400f604:	0021883a 	mov	r16,zero
 400f608:	003f4906 	br	400f330 <__alt_mem_onchip_memory2_0+0xfc00a170>
 400f60c:	010007c4 	movi	r4,31
 400f610:	20803a16 	blt	r4,r2,400f6fc <__subdf3+0x5f4>
 400f614:	01000804 	movi	r4,32
 400f618:	2089c83a 	sub	r4,r4,r2
 400f61c:	2912983a 	sll	r9,r5,r4
 400f620:	3090d83a 	srl	r8,r6,r2
 400f624:	3108983a 	sll	r4,r6,r4
 400f628:	2884d83a 	srl	r2,r5,r2
 400f62c:	4a12b03a 	or	r9,r9,r8
 400f630:	2008c03a 	cmpne	r4,r4,zero
 400f634:	4912b03a 	or	r9,r9,r4
 400f638:	003f4e06 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00a1b4>
 400f63c:	1c48b03a 	or	r4,r3,r17
 400f640:	20003c26 	beq	r4,zero,400f734 <__subdf3+0x62c>
 400f644:	0084303a 	nor	r2,zero,r2
 400f648:	1000381e 	bne	r2,zero,400f72c <__subdf3+0x624>
 400f64c:	3463c83a 	sub	r17,r6,r17
 400f650:	28c5c83a 	sub	r2,r5,r3
 400f654:	344d803a 	cmpltu	r6,r6,r17
 400f658:	1187c83a 	sub	r3,r2,r6
 400f65c:	4821883a 	mov	r16,r9
 400f660:	3825883a 	mov	r18,r7
 400f664:	003f0606 	br	400f280 <__alt_mem_onchip_memory2_0+0xfc00a0c0>
 400f668:	2023883a 	mov	r17,r4
 400f66c:	003f0906 	br	400f294 <__alt_mem_onchip_memory2_0+0xfc00a0d4>
 400f670:	0101ffc4 	movi	r4,2047
 400f674:	813f3a1e 	bne	r16,r4,400f360 <__alt_mem_onchip_memory2_0+0xfc00a1a0>
 400f678:	003ec406 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f67c:	0005883a 	mov	r2,zero
 400f680:	003fb106 	br	400f548 <__alt_mem_onchip_memory2_0+0xfc00a388>
 400f684:	0005883a 	mov	r2,zero
 400f688:	003fbc06 	br	400f57c <__alt_mem_onchip_memory2_0+0xfc00a3bc>
 400f68c:	1c44b03a 	or	r2,r3,r17
 400f690:	80008e1e 	bne	r16,zero,400f8cc <__subdf3+0x7c4>
 400f694:	1000c826 	beq	r2,zero,400f9b8 <__subdf3+0x8b0>
 400f698:	2984b03a 	or	r2,r5,r6
 400f69c:	103ebb26 	beq	r2,zero,400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f6a0:	8989883a 	add	r4,r17,r6
 400f6a4:	1945883a 	add	r2,r3,r5
 400f6a8:	2447803a 	cmpltu	r3,r4,r17
 400f6ac:	1887883a 	add	r3,r3,r2
 400f6b0:	1880202c 	andhi	r2,r3,128
 400f6b4:	2023883a 	mov	r17,r4
 400f6b8:	103f1626 	beq	r2,zero,400f314 <__alt_mem_onchip_memory2_0+0xfc00a154>
 400f6bc:	00bfe034 	movhi	r2,65408
 400f6c0:	10bfffc4 	addi	r2,r2,-1
 400f6c4:	5021883a 	mov	r16,r10
 400f6c8:	1886703a 	and	r3,r3,r2
 400f6cc:	003eaf06 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f6d0:	3825883a 	mov	r18,r7
 400f6d4:	003f0f06 	br	400f314 <__alt_mem_onchip_memory2_0+0xfc00a154>
 400f6d8:	1c44b03a 	or	r2,r3,r17
 400f6dc:	8000251e 	bne	r16,zero,400f774 <__subdf3+0x66c>
 400f6e0:	1000661e 	bne	r2,zero,400f87c <__subdf3+0x774>
 400f6e4:	2990b03a 	or	r8,r5,r6
 400f6e8:	40009626 	beq	r8,zero,400f944 <__subdf3+0x83c>
 400f6ec:	2807883a 	mov	r3,r5
 400f6f0:	3023883a 	mov	r17,r6
 400f6f4:	3825883a 	mov	r18,r7
 400f6f8:	003ea406 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f6fc:	127ff804 	addi	r9,r2,-32
 400f700:	01000804 	movi	r4,32
 400f704:	2a52d83a 	srl	r9,r5,r9
 400f708:	11008c26 	beq	r2,r4,400f93c <__subdf3+0x834>
 400f70c:	01001004 	movi	r4,64
 400f710:	2085c83a 	sub	r2,r4,r2
 400f714:	2884983a 	sll	r2,r5,r2
 400f718:	118cb03a 	or	r6,r2,r6
 400f71c:	300cc03a 	cmpne	r6,r6,zero
 400f720:	4992b03a 	or	r9,r9,r6
 400f724:	0005883a 	mov	r2,zero
 400f728:	003f1206 	br	400f374 <__alt_mem_onchip_memory2_0+0xfc00a1b4>
 400f72c:	0101ffc4 	movi	r4,2047
 400f730:	493f9c1e 	bne	r9,r4,400f5a4 <__alt_mem_onchip_memory2_0+0xfc00a3e4>
 400f734:	2807883a 	mov	r3,r5
 400f738:	3023883a 	mov	r17,r6
 400f73c:	4821883a 	mov	r16,r9
 400f740:	3825883a 	mov	r18,r7
 400f744:	003e9106 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f748:	80001f1e 	bne	r16,zero,400f7c8 <__subdf3+0x6c0>
 400f74c:	1c48b03a 	or	r4,r3,r17
 400f750:	20005a26 	beq	r4,zero,400f8bc <__subdf3+0x7b4>
 400f754:	0084303a 	nor	r2,zero,r2
 400f758:	1000561e 	bne	r2,zero,400f8b4 <__subdf3+0x7ac>
 400f75c:	89a3883a 	add	r17,r17,r6
 400f760:	1945883a 	add	r2,r3,r5
 400f764:	898d803a 	cmpltu	r6,r17,r6
 400f768:	3087883a 	add	r3,r6,r2
 400f76c:	4821883a 	mov	r16,r9
 400f770:	003f0506 	br	400f388 <__alt_mem_onchip_memory2_0+0xfc00a1c8>
 400f774:	10002b1e 	bne	r2,zero,400f824 <__subdf3+0x71c>
 400f778:	2984b03a 	or	r2,r5,r6
 400f77c:	10008026 	beq	r2,zero,400f980 <__subdf3+0x878>
 400f780:	2807883a 	mov	r3,r5
 400f784:	3023883a 	mov	r17,r6
 400f788:	3825883a 	mov	r18,r7
 400f78c:	0401ffc4 	movi	r16,2047
 400f790:	003e7e06 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f794:	3809883a 	mov	r4,r7
 400f798:	0011883a 	mov	r8,zero
 400f79c:	0005883a 	mov	r2,zero
 400f7a0:	003ee306 	br	400f330 <__alt_mem_onchip_memory2_0+0xfc00a170>
 400f7a4:	1c62b03a 	or	r17,r3,r17
 400f7a8:	8822c03a 	cmpne	r17,r17,zero
 400f7ac:	0005883a 	mov	r2,zero
 400f7b0:	003f8906 	br	400f5d8 <__alt_mem_onchip_memory2_0+0xfc00a418>
 400f7b4:	3809883a 	mov	r4,r7
 400f7b8:	4821883a 	mov	r16,r9
 400f7bc:	0011883a 	mov	r8,zero
 400f7c0:	0005883a 	mov	r2,zero
 400f7c4:	003eda06 	br	400f330 <__alt_mem_onchip_memory2_0+0xfc00a170>
 400f7c8:	0101ffc4 	movi	r4,2047
 400f7cc:	49003b26 	beq	r9,r4,400f8bc <__subdf3+0x7b4>
 400f7d0:	0085c83a 	sub	r2,zero,r2
 400f7d4:	18c02034 	orhi	r3,r3,128
 400f7d8:	01000e04 	movi	r4,56
 400f7dc:	20806e16 	blt	r4,r2,400f998 <__subdf3+0x890>
 400f7e0:	010007c4 	movi	r4,31
 400f7e4:	20807716 	blt	r4,r2,400f9c4 <__subdf3+0x8bc>
 400f7e8:	01000804 	movi	r4,32
 400f7ec:	2089c83a 	sub	r4,r4,r2
 400f7f0:	1914983a 	sll	r10,r3,r4
 400f7f4:	8890d83a 	srl	r8,r17,r2
 400f7f8:	8908983a 	sll	r4,r17,r4
 400f7fc:	1884d83a 	srl	r2,r3,r2
 400f800:	5222b03a 	or	r17,r10,r8
 400f804:	2006c03a 	cmpne	r3,r4,zero
 400f808:	88e2b03a 	or	r17,r17,r3
 400f80c:	89a3883a 	add	r17,r17,r6
 400f810:	1145883a 	add	r2,r2,r5
 400f814:	898d803a 	cmpltu	r6,r17,r6
 400f818:	3087883a 	add	r3,r6,r2
 400f81c:	4821883a 	mov	r16,r9
 400f820:	003ed906 	br	400f388 <__alt_mem_onchip_memory2_0+0xfc00a1c8>
 400f824:	2984b03a 	or	r2,r5,r6
 400f828:	10004226 	beq	r2,zero,400f934 <__subdf3+0x82c>
 400f82c:	1808d0fa 	srli	r4,r3,3
 400f830:	8822d0fa 	srli	r17,r17,3
 400f834:	1806977a 	slli	r3,r3,29
 400f838:	2080022c 	andhi	r2,r4,8
 400f83c:	1c62b03a 	or	r17,r3,r17
 400f840:	10000826 	beq	r2,zero,400f864 <__subdf3+0x75c>
 400f844:	2812d0fa 	srli	r9,r5,3
 400f848:	4880022c 	andhi	r2,r9,8
 400f84c:	1000051e 	bne	r2,zero,400f864 <__subdf3+0x75c>
 400f850:	300cd0fa 	srli	r6,r6,3
 400f854:	2804977a 	slli	r2,r5,29
 400f858:	4809883a 	mov	r4,r9
 400f85c:	3825883a 	mov	r18,r7
 400f860:	11a2b03a 	or	r17,r2,r6
 400f864:	8806d77a 	srli	r3,r17,29
 400f868:	200890fa 	slli	r4,r4,3
 400f86c:	882290fa 	slli	r17,r17,3
 400f870:	0401ffc4 	movi	r16,2047
 400f874:	1906b03a 	or	r3,r3,r4
 400f878:	003e4406 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f87c:	2984b03a 	or	r2,r5,r6
 400f880:	103e4226 	beq	r2,zero,400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f884:	8989c83a 	sub	r4,r17,r6
 400f888:	8911803a 	cmpltu	r8,r17,r4
 400f88c:	1945c83a 	sub	r2,r3,r5
 400f890:	1205c83a 	sub	r2,r2,r8
 400f894:	1200202c 	andhi	r8,r2,128
 400f898:	403e9a26 	beq	r8,zero,400f304 <__alt_mem_onchip_memory2_0+0xfc00a144>
 400f89c:	3463c83a 	sub	r17,r6,r17
 400f8a0:	28c5c83a 	sub	r2,r5,r3
 400f8a4:	344d803a 	cmpltu	r6,r6,r17
 400f8a8:	1187c83a 	sub	r3,r2,r6
 400f8ac:	3825883a 	mov	r18,r7
 400f8b0:	003e3606 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f8b4:	0101ffc4 	movi	r4,2047
 400f8b8:	493fc71e 	bne	r9,r4,400f7d8 <__alt_mem_onchip_memory2_0+0xfc00a618>
 400f8bc:	2807883a 	mov	r3,r5
 400f8c0:	3023883a 	mov	r17,r6
 400f8c4:	4821883a 	mov	r16,r9
 400f8c8:	003e3006 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f8cc:	10003626 	beq	r2,zero,400f9a8 <__subdf3+0x8a0>
 400f8d0:	2984b03a 	or	r2,r5,r6
 400f8d4:	10001726 	beq	r2,zero,400f934 <__subdf3+0x82c>
 400f8d8:	1808d0fa 	srli	r4,r3,3
 400f8dc:	8822d0fa 	srli	r17,r17,3
 400f8e0:	1806977a 	slli	r3,r3,29
 400f8e4:	2080022c 	andhi	r2,r4,8
 400f8e8:	1c62b03a 	or	r17,r3,r17
 400f8ec:	10000726 	beq	r2,zero,400f90c <__subdf3+0x804>
 400f8f0:	2812d0fa 	srli	r9,r5,3
 400f8f4:	4880022c 	andhi	r2,r9,8
 400f8f8:	1000041e 	bne	r2,zero,400f90c <__subdf3+0x804>
 400f8fc:	300cd0fa 	srli	r6,r6,3
 400f900:	2804977a 	slli	r2,r5,29
 400f904:	4809883a 	mov	r4,r9
 400f908:	11a2b03a 	or	r17,r2,r6
 400f90c:	8806d77a 	srli	r3,r17,29
 400f910:	200890fa 	slli	r4,r4,3
 400f914:	882290fa 	slli	r17,r17,3
 400f918:	3825883a 	mov	r18,r7
 400f91c:	1906b03a 	or	r3,r3,r4
 400f920:	0401ffc4 	movi	r16,2047
 400f924:	003e1906 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f928:	000b883a 	mov	r5,zero
 400f92c:	0005883a 	mov	r2,zero
 400f930:	003e2e06 	br	400f1ec <__alt_mem_onchip_memory2_0+0xfc00a02c>
 400f934:	0401ffc4 	movi	r16,2047
 400f938:	003e1406 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f93c:	0005883a 	mov	r2,zero
 400f940:	003f7506 	br	400f718 <__alt_mem_onchip_memory2_0+0xfc00a558>
 400f944:	0005883a 	mov	r2,zero
 400f948:	0009883a 	mov	r4,zero
 400f94c:	003e7806 	br	400f330 <__alt_mem_onchip_memory2_0+0xfc00a170>
 400f950:	123ff804 	addi	r8,r2,-32
 400f954:	01000804 	movi	r4,32
 400f958:	1a10d83a 	srl	r8,r3,r8
 400f95c:	11002526 	beq	r2,r4,400f9f4 <__subdf3+0x8ec>
 400f960:	01001004 	movi	r4,64
 400f964:	2085c83a 	sub	r2,r4,r2
 400f968:	1884983a 	sll	r2,r3,r2
 400f96c:	1444b03a 	or	r2,r2,r17
 400f970:	1004c03a 	cmpne	r2,r2,zero
 400f974:	40a2b03a 	or	r17,r8,r2
 400f978:	0005883a 	mov	r2,zero
 400f97c:	003f1606 	br	400f5d8 <__alt_mem_onchip_memory2_0+0xfc00a418>
 400f980:	02000434 	movhi	r8,16
 400f984:	0009883a 	mov	r4,zero
 400f988:	423fffc4 	addi	r8,r8,-1
 400f98c:	00bfffc4 	movi	r2,-1
 400f990:	0401ffc4 	movi	r16,2047
 400f994:	003e6606 	br	400f330 <__alt_mem_onchip_memory2_0+0xfc00a170>
 400f998:	1c62b03a 	or	r17,r3,r17
 400f99c:	8822c03a 	cmpne	r17,r17,zero
 400f9a0:	0005883a 	mov	r2,zero
 400f9a4:	003f9906 	br	400f80c <__alt_mem_onchip_memory2_0+0xfc00a64c>
 400f9a8:	2807883a 	mov	r3,r5
 400f9ac:	3023883a 	mov	r17,r6
 400f9b0:	0401ffc4 	movi	r16,2047
 400f9b4:	003df506 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f9b8:	2807883a 	mov	r3,r5
 400f9bc:	3023883a 	mov	r17,r6
 400f9c0:	003df206 	br	400f18c <__alt_mem_onchip_memory2_0+0xfc009fcc>
 400f9c4:	123ff804 	addi	r8,r2,-32
 400f9c8:	01000804 	movi	r4,32
 400f9cc:	1a10d83a 	srl	r8,r3,r8
 400f9d0:	11000a26 	beq	r2,r4,400f9fc <__subdf3+0x8f4>
 400f9d4:	01001004 	movi	r4,64
 400f9d8:	2085c83a 	sub	r2,r4,r2
 400f9dc:	1884983a 	sll	r2,r3,r2
 400f9e0:	1444b03a 	or	r2,r2,r17
 400f9e4:	1004c03a 	cmpne	r2,r2,zero
 400f9e8:	40a2b03a 	or	r17,r8,r2
 400f9ec:	0005883a 	mov	r2,zero
 400f9f0:	003f8606 	br	400f80c <__alt_mem_onchip_memory2_0+0xfc00a64c>
 400f9f4:	0005883a 	mov	r2,zero
 400f9f8:	003fdc06 	br	400f96c <__alt_mem_onchip_memory2_0+0xfc00a7ac>
 400f9fc:	0005883a 	mov	r2,zero
 400fa00:	003ff706 	br	400f9e0 <__alt_mem_onchip_memory2_0+0xfc00a820>

0400fa04 <__fixdfsi>:
 400fa04:	280cd53a 	srli	r6,r5,20
 400fa08:	00c00434 	movhi	r3,16
 400fa0c:	18ffffc4 	addi	r3,r3,-1
 400fa10:	3181ffcc 	andi	r6,r6,2047
 400fa14:	01c0ff84 	movi	r7,1022
 400fa18:	28c6703a 	and	r3,r5,r3
 400fa1c:	280ad7fa 	srli	r5,r5,31
 400fa20:	3980120e 	bge	r7,r6,400fa6c <__fixdfsi+0x68>
 400fa24:	00810744 	movi	r2,1053
 400fa28:	11800c16 	blt	r2,r6,400fa5c <__fixdfsi+0x58>
 400fa2c:	00810cc4 	movi	r2,1075
 400fa30:	1185c83a 	sub	r2,r2,r6
 400fa34:	01c007c4 	movi	r7,31
 400fa38:	18c00434 	orhi	r3,r3,16
 400fa3c:	38800d16 	blt	r7,r2,400fa74 <__fixdfsi+0x70>
 400fa40:	31befb44 	addi	r6,r6,-1043
 400fa44:	2084d83a 	srl	r2,r4,r2
 400fa48:	1986983a 	sll	r3,r3,r6
 400fa4c:	1884b03a 	or	r2,r3,r2
 400fa50:	28000726 	beq	r5,zero,400fa70 <__fixdfsi+0x6c>
 400fa54:	0085c83a 	sub	r2,zero,r2
 400fa58:	f800283a 	ret
 400fa5c:	00a00034 	movhi	r2,32768
 400fa60:	10bfffc4 	addi	r2,r2,-1
 400fa64:	2885883a 	add	r2,r5,r2
 400fa68:	f800283a 	ret
 400fa6c:	0005883a 	mov	r2,zero
 400fa70:	f800283a 	ret
 400fa74:	008104c4 	movi	r2,1043
 400fa78:	1185c83a 	sub	r2,r2,r6
 400fa7c:	1884d83a 	srl	r2,r3,r2
 400fa80:	003ff306 	br	400fa50 <__alt_mem_onchip_memory2_0+0xfc00a890>

0400fa84 <__floatunsidf>:
 400fa84:	defffe04 	addi	sp,sp,-8
 400fa88:	dc000015 	stw	r16,0(sp)
 400fa8c:	dfc00115 	stw	ra,4(sp)
 400fa90:	2021883a 	mov	r16,r4
 400fa94:	20002226 	beq	r4,zero,400fb20 <__floatunsidf+0x9c>
 400fa98:	400fb2c0 	call	400fb2c <__clzsi2>
 400fa9c:	01010784 	movi	r4,1054
 400faa0:	2089c83a 	sub	r4,r4,r2
 400faa4:	01810cc4 	movi	r6,1075
 400faa8:	310dc83a 	sub	r6,r6,r4
 400faac:	00c007c4 	movi	r3,31
 400fab0:	1980120e 	bge	r3,r6,400fafc <__floatunsidf+0x78>
 400fab4:	00c104c4 	movi	r3,1043
 400fab8:	1907c83a 	sub	r3,r3,r4
 400fabc:	80ca983a 	sll	r5,r16,r3
 400fac0:	00800434 	movhi	r2,16
 400fac4:	10bfffc4 	addi	r2,r2,-1
 400fac8:	2101ffcc 	andi	r4,r4,2047
 400facc:	0021883a 	mov	r16,zero
 400fad0:	288a703a 	and	r5,r5,r2
 400fad4:	2008953a 	slli	r4,r4,20
 400fad8:	00c00434 	movhi	r3,16
 400fadc:	18ffffc4 	addi	r3,r3,-1
 400fae0:	28c6703a 	and	r3,r5,r3
 400fae4:	8005883a 	mov	r2,r16
 400fae8:	1906b03a 	or	r3,r3,r4
 400faec:	dfc00117 	ldw	ra,4(sp)
 400faf0:	dc000017 	ldw	r16,0(sp)
 400faf4:	dec00204 	addi	sp,sp,8
 400faf8:	f800283a 	ret
 400fafc:	00c002c4 	movi	r3,11
 400fb00:	188bc83a 	sub	r5,r3,r2
 400fb04:	814ad83a 	srl	r5,r16,r5
 400fb08:	00c00434 	movhi	r3,16
 400fb0c:	18ffffc4 	addi	r3,r3,-1
 400fb10:	81a0983a 	sll	r16,r16,r6
 400fb14:	2101ffcc 	andi	r4,r4,2047
 400fb18:	28ca703a 	and	r5,r5,r3
 400fb1c:	003fed06 	br	400fad4 <__alt_mem_onchip_memory2_0+0xfc00a914>
 400fb20:	0009883a 	mov	r4,zero
 400fb24:	000b883a 	mov	r5,zero
 400fb28:	003fea06 	br	400fad4 <__alt_mem_onchip_memory2_0+0xfc00a914>

0400fb2c <__clzsi2>:
 400fb2c:	00bfffd4 	movui	r2,65535
 400fb30:	11000536 	bltu	r2,r4,400fb48 <__clzsi2+0x1c>
 400fb34:	00803fc4 	movi	r2,255
 400fb38:	11000f36 	bltu	r2,r4,400fb78 <__clzsi2+0x4c>
 400fb3c:	00800804 	movi	r2,32
 400fb40:	0007883a 	mov	r3,zero
 400fb44:	00000506 	br	400fb5c <__clzsi2+0x30>
 400fb48:	00804034 	movhi	r2,256
 400fb4c:	10bfffc4 	addi	r2,r2,-1
 400fb50:	11000c2e 	bgeu	r2,r4,400fb84 <__clzsi2+0x58>
 400fb54:	00800204 	movi	r2,8
 400fb58:	00c00604 	movi	r3,24
 400fb5c:	20c8d83a 	srl	r4,r4,r3
 400fb60:	00c100b4 	movhi	r3,1026
 400fb64:	18f74f04 	addi	r3,r3,-8900
 400fb68:	1909883a 	add	r4,r3,r4
 400fb6c:	20c00003 	ldbu	r3,0(r4)
 400fb70:	10c5c83a 	sub	r2,r2,r3
 400fb74:	f800283a 	ret
 400fb78:	00800604 	movi	r2,24
 400fb7c:	00c00204 	movi	r3,8
 400fb80:	003ff606 	br	400fb5c <__alt_mem_onchip_memory2_0+0xfc00a99c>
 400fb84:	00800404 	movi	r2,16
 400fb88:	1007883a 	mov	r3,r2
 400fb8c:	003ff306 	br	400fb5c <__alt_mem_onchip_memory2_0+0xfc00a99c>

0400fb90 <clock>:
 400fb90:	008100b4 	movhi	r2,1026
 400fb94:	10bfe004 	addi	r2,r2,-128
 400fb98:	11000017 	ldw	r4,0(r2)
 400fb9c:	defffb04 	addi	sp,sp,-20
 400fba0:	d80b883a 	mov	r5,sp
 400fba4:	dfc00415 	stw	ra,16(sp)
 400fba8:	400ffc80 	call	400ffc8 <_times_r>
 400fbac:	00ffffc4 	movi	r3,-1
 400fbb0:	10c00726 	beq	r2,r3,400fbd0 <clock+0x40>
 400fbb4:	d8c00017 	ldw	r3,0(sp)
 400fbb8:	d8800117 	ldw	r2,4(sp)
 400fbbc:	1885883a 	add	r2,r3,r2
 400fbc0:	d8c00217 	ldw	r3,8(sp)
 400fbc4:	10c7883a 	add	r3,r2,r3
 400fbc8:	d8800317 	ldw	r2,12(sp)
 400fbcc:	1885883a 	add	r2,r3,r2
 400fbd0:	dfc00417 	ldw	ra,16(sp)
 400fbd4:	dec00504 	addi	sp,sp,20
 400fbd8:	f800283a 	ret

0400fbdc <memcpy>:
 400fbdc:	defffd04 	addi	sp,sp,-12
 400fbe0:	dfc00215 	stw	ra,8(sp)
 400fbe4:	dc400115 	stw	r17,4(sp)
 400fbe8:	dc000015 	stw	r16,0(sp)
 400fbec:	00c003c4 	movi	r3,15
 400fbf0:	2005883a 	mov	r2,r4
 400fbf4:	1980452e 	bgeu	r3,r6,400fd0c <memcpy+0x130>
 400fbf8:	2906b03a 	or	r3,r5,r4
 400fbfc:	18c000cc 	andi	r3,r3,3
 400fc00:	1800441e 	bne	r3,zero,400fd14 <memcpy+0x138>
 400fc04:	347ffc04 	addi	r17,r6,-16
 400fc08:	8822d13a 	srli	r17,r17,4
 400fc0c:	28c00104 	addi	r3,r5,4
 400fc10:	23400104 	addi	r13,r4,4
 400fc14:	8820913a 	slli	r16,r17,4
 400fc18:	2b000204 	addi	r12,r5,8
 400fc1c:	22c00204 	addi	r11,r4,8
 400fc20:	84000504 	addi	r16,r16,20
 400fc24:	2a800304 	addi	r10,r5,12
 400fc28:	22400304 	addi	r9,r4,12
 400fc2c:	2c21883a 	add	r16,r5,r16
 400fc30:	2811883a 	mov	r8,r5
 400fc34:	200f883a 	mov	r7,r4
 400fc38:	41000017 	ldw	r4,0(r8)
 400fc3c:	1fc00017 	ldw	ra,0(r3)
 400fc40:	63c00017 	ldw	r15,0(r12)
 400fc44:	39000015 	stw	r4,0(r7)
 400fc48:	53800017 	ldw	r14,0(r10)
 400fc4c:	6fc00015 	stw	ra,0(r13)
 400fc50:	5bc00015 	stw	r15,0(r11)
 400fc54:	4b800015 	stw	r14,0(r9)
 400fc58:	18c00404 	addi	r3,r3,16
 400fc5c:	39c00404 	addi	r7,r7,16
 400fc60:	42000404 	addi	r8,r8,16
 400fc64:	6b400404 	addi	r13,r13,16
 400fc68:	63000404 	addi	r12,r12,16
 400fc6c:	5ac00404 	addi	r11,r11,16
 400fc70:	52800404 	addi	r10,r10,16
 400fc74:	4a400404 	addi	r9,r9,16
 400fc78:	1c3fef1e 	bne	r3,r16,400fc38 <__alt_mem_onchip_memory2_0+0xfc00aa78>
 400fc7c:	89c00044 	addi	r7,r17,1
 400fc80:	380e913a 	slli	r7,r7,4
 400fc84:	310003cc 	andi	r4,r6,15
 400fc88:	02c000c4 	movi	r11,3
 400fc8c:	11c7883a 	add	r3,r2,r7
 400fc90:	29cb883a 	add	r5,r5,r7
 400fc94:	5900212e 	bgeu	r11,r4,400fd1c <memcpy+0x140>
 400fc98:	1813883a 	mov	r9,r3
 400fc9c:	2811883a 	mov	r8,r5
 400fca0:	200f883a 	mov	r7,r4
 400fca4:	42800017 	ldw	r10,0(r8)
 400fca8:	4a400104 	addi	r9,r9,4
 400fcac:	39ffff04 	addi	r7,r7,-4
 400fcb0:	4abfff15 	stw	r10,-4(r9)
 400fcb4:	42000104 	addi	r8,r8,4
 400fcb8:	59fffa36 	bltu	r11,r7,400fca4 <__alt_mem_onchip_memory2_0+0xfc00aae4>
 400fcbc:	213fff04 	addi	r4,r4,-4
 400fcc0:	2008d0ba 	srli	r4,r4,2
 400fcc4:	318000cc 	andi	r6,r6,3
 400fcc8:	21000044 	addi	r4,r4,1
 400fccc:	2109883a 	add	r4,r4,r4
 400fcd0:	2109883a 	add	r4,r4,r4
 400fcd4:	1907883a 	add	r3,r3,r4
 400fcd8:	290b883a 	add	r5,r5,r4
 400fcdc:	30000626 	beq	r6,zero,400fcf8 <memcpy+0x11c>
 400fce0:	198d883a 	add	r6,r3,r6
 400fce4:	29c00003 	ldbu	r7,0(r5)
 400fce8:	18c00044 	addi	r3,r3,1
 400fcec:	29400044 	addi	r5,r5,1
 400fcf0:	19ffffc5 	stb	r7,-1(r3)
 400fcf4:	19bffb1e 	bne	r3,r6,400fce4 <__alt_mem_onchip_memory2_0+0xfc00ab24>
 400fcf8:	dfc00217 	ldw	ra,8(sp)
 400fcfc:	dc400117 	ldw	r17,4(sp)
 400fd00:	dc000017 	ldw	r16,0(sp)
 400fd04:	dec00304 	addi	sp,sp,12
 400fd08:	f800283a 	ret
 400fd0c:	2007883a 	mov	r3,r4
 400fd10:	003ff206 	br	400fcdc <__alt_mem_onchip_memory2_0+0xfc00ab1c>
 400fd14:	2007883a 	mov	r3,r4
 400fd18:	003ff106 	br	400fce0 <__alt_mem_onchip_memory2_0+0xfc00ab20>
 400fd1c:	200d883a 	mov	r6,r4
 400fd20:	003fee06 	br	400fcdc <__alt_mem_onchip_memory2_0+0xfc00ab1c>

0400fd24 <_printf_r>:
 400fd24:	defffd04 	addi	sp,sp,-12
 400fd28:	2805883a 	mov	r2,r5
 400fd2c:	dfc00015 	stw	ra,0(sp)
 400fd30:	d9800115 	stw	r6,4(sp)
 400fd34:	d9c00215 	stw	r7,8(sp)
 400fd38:	21400217 	ldw	r5,8(r4)
 400fd3c:	d9c00104 	addi	r7,sp,4
 400fd40:	100d883a 	mov	r6,r2
 400fd44:	400ffd00 	call	400ffd0 <___vfprintf_internal_r>
 400fd48:	dfc00017 	ldw	ra,0(sp)
 400fd4c:	dec00304 	addi	sp,sp,12
 400fd50:	f800283a 	ret

0400fd54 <printf>:
 400fd54:	defffc04 	addi	sp,sp,-16
 400fd58:	dfc00015 	stw	ra,0(sp)
 400fd5c:	d9400115 	stw	r5,4(sp)
 400fd60:	d9800215 	stw	r6,8(sp)
 400fd64:	d9c00315 	stw	r7,12(sp)
 400fd68:	008100b4 	movhi	r2,1026
 400fd6c:	10bfe004 	addi	r2,r2,-128
 400fd70:	10800017 	ldw	r2,0(r2)
 400fd74:	200b883a 	mov	r5,r4
 400fd78:	d9800104 	addi	r6,sp,4
 400fd7c:	11000217 	ldw	r4,8(r2)
 400fd80:	40122ac0 	call	40122ac <__vfprintf_internal>
 400fd84:	dfc00017 	ldw	ra,0(sp)
 400fd88:	dec00404 	addi	sp,sp,16
 400fd8c:	f800283a 	ret

0400fd90 <_puts_r>:
 400fd90:	defff604 	addi	sp,sp,-40
 400fd94:	dc000715 	stw	r16,28(sp)
 400fd98:	2021883a 	mov	r16,r4
 400fd9c:	2809883a 	mov	r4,r5
 400fda0:	dc400815 	stw	r17,32(sp)
 400fda4:	dfc00915 	stw	ra,36(sp)
 400fda8:	2823883a 	mov	r17,r5
 400fdac:	400fee00 	call	400fee0 <strlen>
 400fdb0:	10c00044 	addi	r3,r2,1
 400fdb4:	d8800115 	stw	r2,4(sp)
 400fdb8:	008100b4 	movhi	r2,1026
 400fdbc:	10b79004 	addi	r2,r2,-8640
 400fdc0:	d8800215 	stw	r2,8(sp)
 400fdc4:	00800044 	movi	r2,1
 400fdc8:	d8800315 	stw	r2,12(sp)
 400fdcc:	00800084 	movi	r2,2
 400fdd0:	dc400015 	stw	r17,0(sp)
 400fdd4:	d8c00615 	stw	r3,24(sp)
 400fdd8:	dec00415 	stw	sp,16(sp)
 400fddc:	d8800515 	stw	r2,20(sp)
 400fde0:	80000226 	beq	r16,zero,400fdec <_puts_r+0x5c>
 400fde4:	80800e17 	ldw	r2,56(r16)
 400fde8:	10001426 	beq	r2,zero,400fe3c <_puts_r+0xac>
 400fdec:	81400217 	ldw	r5,8(r16)
 400fdf0:	2880030b 	ldhu	r2,12(r5)
 400fdf4:	10c8000c 	andi	r3,r2,8192
 400fdf8:	1800061e 	bne	r3,zero,400fe14 <_puts_r+0x84>
 400fdfc:	29001917 	ldw	r4,100(r5)
 400fe00:	00f7ffc4 	movi	r3,-8193
 400fe04:	10880014 	ori	r2,r2,8192
 400fe08:	20c6703a 	and	r3,r4,r3
 400fe0c:	2880030d 	sth	r2,12(r5)
 400fe10:	28c01915 	stw	r3,100(r5)
 400fe14:	d9800404 	addi	r6,sp,16
 400fe18:	8009883a 	mov	r4,r16
 400fe1c:	40148140 	call	4014814 <__sfvwrite_r>
 400fe20:	1000091e 	bne	r2,zero,400fe48 <_puts_r+0xb8>
 400fe24:	00800284 	movi	r2,10
 400fe28:	dfc00917 	ldw	ra,36(sp)
 400fe2c:	dc400817 	ldw	r17,32(sp)
 400fe30:	dc000717 	ldw	r16,28(sp)
 400fe34:	dec00a04 	addi	sp,sp,40
 400fe38:	f800283a 	ret
 400fe3c:	8009883a 	mov	r4,r16
 400fe40:	40143900 	call	4014390 <__sinit>
 400fe44:	003fe906 	br	400fdec <__alt_mem_onchip_memory2_0+0xfc00ac2c>
 400fe48:	00bfffc4 	movi	r2,-1
 400fe4c:	003ff606 	br	400fe28 <__alt_mem_onchip_memory2_0+0xfc00ac68>

0400fe50 <puts>:
 400fe50:	008100b4 	movhi	r2,1026
 400fe54:	10bfe004 	addi	r2,r2,-128
 400fe58:	200b883a 	mov	r5,r4
 400fe5c:	11000017 	ldw	r4,0(r2)
 400fe60:	400fd901 	jmpi	400fd90 <_puts_r>

0400fe64 <srand>:
 400fe64:	008100b4 	movhi	r2,1026
 400fe68:	10bfe004 	addi	r2,r2,-128
 400fe6c:	10800017 	ldw	r2,0(r2)
 400fe70:	11002915 	stw	r4,164(r2)
 400fe74:	10002a15 	stw	zero,168(r2)
 400fe78:	f800283a 	ret

0400fe7c <rand>:
 400fe7c:	008100b4 	movhi	r2,1026
 400fe80:	defffe04 	addi	sp,sp,-8
 400fe84:	10bfe004 	addi	r2,r2,-128
 400fe88:	dc000015 	stw	r16,0(sp)
 400fe8c:	14000017 	ldw	r16,0(r2)
 400fe90:	dfc00115 	stw	ra,4(sp)
 400fe94:	01932574 	movhi	r6,19605
 400fe98:	81002917 	ldw	r4,164(r16)
 400fe9c:	81402a17 	ldw	r5,168(r16)
 400fea0:	01d614b4 	movhi	r7,22610
 400fea4:	319fcb44 	addi	r6,r6,32557
 400fea8:	39fd0b44 	addi	r7,r7,-3027
 400feac:	401960c0 	call	401960c <__muldi3>
 400feb0:	11000044 	addi	r4,r2,1
 400feb4:	2085803a 	cmpltu	r2,r4,r2
 400feb8:	10c7883a 	add	r3,r2,r3
 400febc:	00a00034 	movhi	r2,32768
 400fec0:	10bfffc4 	addi	r2,r2,-1
 400fec4:	1884703a 	and	r2,r3,r2
 400fec8:	81002915 	stw	r4,164(r16)
 400fecc:	80c02a15 	stw	r3,168(r16)
 400fed0:	dfc00117 	ldw	ra,4(sp)
 400fed4:	dc000017 	ldw	r16,0(sp)
 400fed8:	dec00204 	addi	sp,sp,8
 400fedc:	f800283a 	ret

0400fee0 <strlen>:
 400fee0:	208000cc 	andi	r2,r4,3
 400fee4:	10002026 	beq	r2,zero,400ff68 <strlen+0x88>
 400fee8:	20800007 	ldb	r2,0(r4)
 400feec:	10002026 	beq	r2,zero,400ff70 <strlen+0x90>
 400fef0:	2005883a 	mov	r2,r4
 400fef4:	00000206 	br	400ff00 <strlen+0x20>
 400fef8:	10c00007 	ldb	r3,0(r2)
 400fefc:	18001826 	beq	r3,zero,400ff60 <strlen+0x80>
 400ff00:	10800044 	addi	r2,r2,1
 400ff04:	10c000cc 	andi	r3,r2,3
 400ff08:	183ffb1e 	bne	r3,zero,400fef8 <__alt_mem_onchip_memory2_0+0xfc00ad38>
 400ff0c:	10c00017 	ldw	r3,0(r2)
 400ff10:	01ffbff4 	movhi	r7,65279
 400ff14:	39ffbfc4 	addi	r7,r7,-257
 400ff18:	00ca303a 	nor	r5,zero,r3
 400ff1c:	01a02074 	movhi	r6,32897
 400ff20:	19c7883a 	add	r3,r3,r7
 400ff24:	31a02004 	addi	r6,r6,-32640
 400ff28:	1946703a 	and	r3,r3,r5
 400ff2c:	1986703a 	and	r3,r3,r6
 400ff30:	1800091e 	bne	r3,zero,400ff58 <strlen+0x78>
 400ff34:	10800104 	addi	r2,r2,4
 400ff38:	10c00017 	ldw	r3,0(r2)
 400ff3c:	19cb883a 	add	r5,r3,r7
 400ff40:	00c6303a 	nor	r3,zero,r3
 400ff44:	28c6703a 	and	r3,r5,r3
 400ff48:	1986703a 	and	r3,r3,r6
 400ff4c:	183ff926 	beq	r3,zero,400ff34 <__alt_mem_onchip_memory2_0+0xfc00ad74>
 400ff50:	00000106 	br	400ff58 <strlen+0x78>
 400ff54:	10800044 	addi	r2,r2,1
 400ff58:	10c00007 	ldb	r3,0(r2)
 400ff5c:	183ffd1e 	bne	r3,zero,400ff54 <__alt_mem_onchip_memory2_0+0xfc00ad94>
 400ff60:	1105c83a 	sub	r2,r2,r4
 400ff64:	f800283a 	ret
 400ff68:	2005883a 	mov	r2,r4
 400ff6c:	003fe706 	br	400ff0c <__alt_mem_onchip_memory2_0+0xfc00ad4c>
 400ff70:	0005883a 	mov	r2,zero
 400ff74:	f800283a 	ret

0400ff78 <time>:
 400ff78:	008100b4 	movhi	r2,1026
 400ff7c:	defffc04 	addi	sp,sp,-16
 400ff80:	10bfe004 	addi	r2,r2,-128
 400ff84:	dc000215 	stw	r16,8(sp)
 400ff88:	2021883a 	mov	r16,r4
 400ff8c:	11000017 	ldw	r4,0(r2)
 400ff90:	000d883a 	mov	r6,zero
 400ff94:	d80b883a 	mov	r5,sp
 400ff98:	dfc00315 	stw	ra,12(sp)
 400ff9c:	4014e640 	call	4014e64 <_gettimeofday_r>
 400ffa0:	10000716 	blt	r2,zero,400ffc0 <time+0x48>
 400ffa4:	d8800017 	ldw	r2,0(sp)
 400ffa8:	80000126 	beq	r16,zero,400ffb0 <time+0x38>
 400ffac:	80800015 	stw	r2,0(r16)
 400ffb0:	dfc00317 	ldw	ra,12(sp)
 400ffb4:	dc000217 	ldw	r16,8(sp)
 400ffb8:	dec00404 	addi	sp,sp,16
 400ffbc:	f800283a 	ret
 400ffc0:	00bfffc4 	movi	r2,-1
 400ffc4:	003ffa06 	br	400ffb0 <__alt_mem_onchip_memory2_0+0xfc00adf0>

0400ffc8 <_times_r>:
 400ffc8:	2809883a 	mov	r4,r5
 400ffcc:	401b9141 	jmpi	401b914 <times>

0400ffd0 <___vfprintf_internal_r>:
 400ffd0:	deffb804 	addi	sp,sp,-288
 400ffd4:	dfc04715 	stw	ra,284(sp)
 400ffd8:	ddc04515 	stw	r23,276(sp)
 400ffdc:	dd404315 	stw	r21,268(sp)
 400ffe0:	d9002d15 	stw	r4,180(sp)
 400ffe4:	282f883a 	mov	r23,r5
 400ffe8:	302b883a 	mov	r21,r6
 400ffec:	d9c02e15 	stw	r7,184(sp)
 400fff0:	df004615 	stw	fp,280(sp)
 400fff4:	dd804415 	stw	r22,272(sp)
 400fff8:	dd004215 	stw	r20,264(sp)
 400fffc:	dcc04115 	stw	r19,260(sp)
 4010000:	dc804015 	stw	r18,256(sp)
 4010004:	dc403f15 	stw	r17,252(sp)
 4010008:	dc003e15 	stw	r16,248(sp)
 401000c:	4014f6c0 	call	4014f6c <_localeconv_r>
 4010010:	10800017 	ldw	r2,0(r2)
 4010014:	1009883a 	mov	r4,r2
 4010018:	d8803415 	stw	r2,208(sp)
 401001c:	400fee00 	call	400fee0 <strlen>
 4010020:	d8803715 	stw	r2,220(sp)
 4010024:	d8802d17 	ldw	r2,180(sp)
 4010028:	10000226 	beq	r2,zero,4010034 <___vfprintf_internal_r+0x64>
 401002c:	10800e17 	ldw	r2,56(r2)
 4010030:	1000fb26 	beq	r2,zero,4010420 <___vfprintf_internal_r+0x450>
 4010034:	b880030b 	ldhu	r2,12(r23)
 4010038:	10c8000c 	andi	r3,r2,8192
 401003c:	1800061e 	bne	r3,zero,4010058 <___vfprintf_internal_r+0x88>
 4010040:	b9001917 	ldw	r4,100(r23)
 4010044:	00f7ffc4 	movi	r3,-8193
 4010048:	10880014 	ori	r2,r2,8192
 401004c:	20c6703a 	and	r3,r4,r3
 4010050:	b880030d 	sth	r2,12(r23)
 4010054:	b8c01915 	stw	r3,100(r23)
 4010058:	10c0020c 	andi	r3,r2,8
 401005c:	1800c326 	beq	r3,zero,401036c <___vfprintf_internal_r+0x39c>
 4010060:	b8c00417 	ldw	r3,16(r23)
 4010064:	1800c126 	beq	r3,zero,401036c <___vfprintf_internal_r+0x39c>
 4010068:	1080068c 	andi	r2,r2,26
 401006c:	00c00284 	movi	r3,10
 4010070:	10c0c626 	beq	r2,r3,401038c <___vfprintf_internal_r+0x3bc>
 4010074:	d8c00404 	addi	r3,sp,16
 4010078:	050100b4 	movhi	r20,1026
 401007c:	d9001e04 	addi	r4,sp,120
 4010080:	a537a184 	addi	r20,r20,-8570
 4010084:	d8c01e15 	stw	r3,120(sp)
 4010088:	d8002015 	stw	zero,128(sp)
 401008c:	d8001f15 	stw	zero,124(sp)
 4010090:	d8003315 	stw	zero,204(sp)
 4010094:	d8003615 	stw	zero,216(sp)
 4010098:	d8003815 	stw	zero,224(sp)
 401009c:	1811883a 	mov	r8,r3
 40100a0:	d8003915 	stw	zero,228(sp)
 40100a4:	d8003a15 	stw	zero,232(sp)
 40100a8:	d8002f15 	stw	zero,188(sp)
 40100ac:	d9002815 	stw	r4,160(sp)
 40100b0:	a8800007 	ldb	r2,0(r21)
 40100b4:	10028b26 	beq	r2,zero,4010ae4 <___vfprintf_internal_r+0xb14>
 40100b8:	00c00944 	movi	r3,37
 40100bc:	a823883a 	mov	r17,r21
 40100c0:	10c0021e 	bne	r2,r3,40100cc <___vfprintf_internal_r+0xfc>
 40100c4:	00001406 	br	4010118 <___vfprintf_internal_r+0x148>
 40100c8:	10c00326 	beq	r2,r3,40100d8 <___vfprintf_internal_r+0x108>
 40100cc:	8c400044 	addi	r17,r17,1
 40100d0:	88800007 	ldb	r2,0(r17)
 40100d4:	103ffc1e 	bne	r2,zero,40100c8 <__alt_mem_onchip_memory2_0+0xfc00af08>
 40100d8:	8d61c83a 	sub	r16,r17,r21
 40100dc:	80000e26 	beq	r16,zero,4010118 <___vfprintf_internal_r+0x148>
 40100e0:	d8c02017 	ldw	r3,128(sp)
 40100e4:	d8801f17 	ldw	r2,124(sp)
 40100e8:	45400015 	stw	r21,0(r8)
 40100ec:	1c07883a 	add	r3,r3,r16
 40100f0:	10800044 	addi	r2,r2,1
 40100f4:	d8c02015 	stw	r3,128(sp)
 40100f8:	44000115 	stw	r16,4(r8)
 40100fc:	d8801f15 	stw	r2,124(sp)
 4010100:	00c001c4 	movi	r3,7
 4010104:	1880a916 	blt	r3,r2,40103ac <___vfprintf_internal_r+0x3dc>
 4010108:	42000204 	addi	r8,r8,8
 401010c:	d9402f17 	ldw	r5,188(sp)
 4010110:	2c0b883a 	add	r5,r5,r16
 4010114:	d9402f15 	stw	r5,188(sp)
 4010118:	88800007 	ldb	r2,0(r17)
 401011c:	1000aa26 	beq	r2,zero,40103c8 <___vfprintf_internal_r+0x3f8>
 4010120:	8d400044 	addi	r21,r17,1
 4010124:	8c400047 	ldb	r17,1(r17)
 4010128:	0021883a 	mov	r16,zero
 401012c:	00bfffc4 	movi	r2,-1
 4010130:	0025883a 	mov	r18,zero
 4010134:	dc002905 	stb	r16,164(sp)
 4010138:	d8002785 	stb	zero,158(sp)
 401013c:	d8002b05 	stb	zero,172(sp)
 4010140:	d8802a15 	stw	r2,168(sp)
 4010144:	d8003115 	stw	zero,196(sp)
 4010148:	04c01604 	movi	r19,88
 401014c:	05800244 	movi	r22,9
 4010150:	9021883a 	mov	r16,r18
 4010154:	4039883a 	mov	fp,r8
 4010158:	ad400044 	addi	r21,r21,1
 401015c:	88bff804 	addi	r2,r17,-32
 4010160:	98833236 	bltu	r19,r2,4010e2c <___vfprintf_internal_r+0xe5c>
 4010164:	100490ba 	slli	r2,r2,2
 4010168:	00c10074 	movhi	r3,1025
 401016c:	18c05f04 	addi	r3,r3,380
 4010170:	10c5883a 	add	r2,r2,r3
 4010174:	10800017 	ldw	r2,0(r2)
 4010178:	1000683a 	jmp	r2
 401017c:	04010d24 	muli	r16,zero,1076
 4010180:	04010e2c 	andhi	r16,zero,1080
 4010184:	04010e2c 	andhi	r16,zero,1080
 4010188:	04010d44 	movi	r16,1077
 401018c:	04010e2c 	andhi	r16,zero,1080
 4010190:	04010e2c 	andhi	r16,zero,1080
 4010194:	04010e2c 	andhi	r16,zero,1080
 4010198:	04010e2c 	andhi	r16,zero,1080
 401019c:	04010e2c 	andhi	r16,zero,1080
 40101a0:	04010e2c 	andhi	r16,zero,1080
 40101a4:	0401042c 	andhi	r16,zero,1040
 40101a8:	04010c34 	movhi	r16,1072
 40101ac:	04010e2c 	andhi	r16,zero,1080
 40101b0:	040102f0 	cmpltui	r16,zero,1035
 40101b4:	04010450 	cmplti	r16,zero,1041
 40101b8:	04010e2c 	andhi	r16,zero,1080
 40101bc:	040104a0 	cmpeqi	r16,zero,1042
 40101c0:	040104ac 	andhi	r16,zero,1042
 40101c4:	040104ac 	andhi	r16,zero,1042
 40101c8:	040104ac 	andhi	r16,zero,1042
 40101cc:	040104ac 	andhi	r16,zero,1042
 40101d0:	040104ac 	andhi	r16,zero,1042
 40101d4:	040104ac 	andhi	r16,zero,1042
 40101d8:	040104ac 	andhi	r16,zero,1042
 40101dc:	040104ac 	andhi	r16,zero,1042
 40101e0:	040104ac 	andhi	r16,zero,1042
 40101e4:	04010e2c 	andhi	r16,zero,1080
 40101e8:	04010e2c 	andhi	r16,zero,1080
 40101ec:	04010e2c 	andhi	r16,zero,1080
 40101f0:	04010e2c 	andhi	r16,zero,1080
 40101f4:	04010e2c 	andhi	r16,zero,1080
 40101f8:	04010e2c 	andhi	r16,zero,1080
 40101fc:	04010e2c 	andhi	r16,zero,1080
 4010200:	04010e2c 	andhi	r16,zero,1080
 4010204:	04010e2c 	andhi	r16,zero,1080
 4010208:	04010e2c 	andhi	r16,zero,1080
 401020c:	040104e8 	cmpgeui	r16,zero,1043
 4010210:	040105b0 	cmpltui	r16,zero,1046
 4010214:	04010e2c 	andhi	r16,zero,1080
 4010218:	040105b0 	cmpltui	r16,zero,1046
 401021c:	04010e2c 	andhi	r16,zero,1080
 4010220:	04010e2c 	andhi	r16,zero,1080
 4010224:	04010e2c 	andhi	r16,zero,1080
 4010228:	04010e2c 	andhi	r16,zero,1080
 401022c:	0401065c 	xori	r16,zero,1049
 4010230:	04010e2c 	andhi	r16,zero,1080
 4010234:	04010e2c 	andhi	r16,zero,1080
 4010238:	04010668 	cmpgeui	r16,zero,1049
 401023c:	04010e2c 	andhi	r16,zero,1080
 4010240:	04010e2c 	andhi	r16,zero,1080
 4010244:	04010e2c 	andhi	r16,zero,1080
 4010248:	04010e2c 	andhi	r16,zero,1080
 401024c:	04010e2c 	andhi	r16,zero,1080
 4010250:	04010aec 	andhi	r16,zero,1067
 4010254:	04010e2c 	andhi	r16,zero,1080
 4010258:	04010e2c 	andhi	r16,zero,1080
 401025c:	04010b58 	cmpnei	r16,zero,1069
 4010260:	04010e2c 	andhi	r16,zero,1080
 4010264:	04010e2c 	andhi	r16,zero,1080
 4010268:	04010e2c 	andhi	r16,zero,1080
 401026c:	04010e2c 	andhi	r16,zero,1080
 4010270:	04010e2c 	andhi	r16,zero,1080
 4010274:	04010e2c 	andhi	r16,zero,1080
 4010278:	04010e2c 	andhi	r16,zero,1080
 401027c:	04010e2c 	andhi	r16,zero,1080
 4010280:	04010e2c 	andhi	r16,zero,1080
 4010284:	04010e2c 	andhi	r16,zero,1080
 4010288:	04010dd0 	cmplti	r16,zero,1079
 401028c:	04010d50 	cmplti	r16,zero,1077
 4010290:	040105b0 	cmpltui	r16,zero,1046
 4010294:	040105b0 	cmpltui	r16,zero,1046
 4010298:	040105b0 	cmpltui	r16,zero,1046
 401029c:	04010d70 	cmpltui	r16,zero,1077
 40102a0:	04010d50 	cmplti	r16,zero,1077
 40102a4:	04010e2c 	andhi	r16,zero,1080
 40102a8:	04010e2c 	andhi	r16,zero,1080
 40102ac:	04010d7c 	xorhi	r16,zero,1077
 40102b0:	04010e2c 	andhi	r16,zero,1080
 40102b4:	04010d90 	cmplti	r16,zero,1078
 40102b8:	04010c14 	movui	r16,1072
 40102bc:	040102fc 	xorhi	r16,zero,1035
 40102c0:	04010c4c 	andi	r16,zero,1073
 40102c4:	04010e2c 	andhi	r16,zero,1080
 40102c8:	04010c58 	cmpnei	r16,zero,1073
 40102cc:	04010e2c 	andhi	r16,zero,1080
 40102d0:	04010cbc 	xorhi	r16,zero,1074
 40102d4:	04010e2c 	andhi	r16,zero,1080
 40102d8:	04010e2c 	andhi	r16,zero,1080
 40102dc:	04010cdc 	xori	r16,zero,1075
 40102e0:	d8c03117 	ldw	r3,196(sp)
 40102e4:	d8802e15 	stw	r2,184(sp)
 40102e8:	00c7c83a 	sub	r3,zero,r3
 40102ec:	d8c03115 	stw	r3,196(sp)
 40102f0:	84000114 	ori	r16,r16,4
 40102f4:	ac400007 	ldb	r17,0(r21)
 40102f8:	003f9706 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 40102fc:	00800c04 	movi	r2,48
 4010300:	d8802705 	stb	r2,156(sp)
 4010304:	00801e04 	movi	r2,120
 4010308:	d8802745 	stb	r2,157(sp)
 401030c:	d9002a17 	ldw	r4,168(sp)
 4010310:	d8802e17 	ldw	r2,184(sp)
 4010314:	d8002785 	stb	zero,158(sp)
 4010318:	e011883a 	mov	r8,fp
 401031c:	10c00104 	addi	r3,r2,4
 4010320:	14c00017 	ldw	r19,0(r2)
 4010324:	002d883a 	mov	r22,zero
 4010328:	80800094 	ori	r2,r16,2
 401032c:	2002ca16 	blt	r4,zero,4010e58 <___vfprintf_internal_r+0xe88>
 4010330:	00bfdfc4 	movi	r2,-129
 4010334:	80a4703a 	and	r18,r16,r2
 4010338:	d8c02e15 	stw	r3,184(sp)
 401033c:	94800094 	ori	r18,r18,2
 4010340:	9802b41e 	bne	r19,zero,4010e14 <___vfprintf_internal_r+0xe44>
 4010344:	014100b4 	movhi	r5,1026
 4010348:	29779a04 	addi	r5,r5,-8600
 401034c:	d9403915 	stw	r5,228(sp)
 4010350:	04401e04 	movi	r17,120
 4010354:	d8802a17 	ldw	r2,168(sp)
 4010358:	0039883a 	mov	fp,zero
 401035c:	1001fa26 	beq	r2,zero,4010b48 <___vfprintf_internal_r+0xb78>
 4010360:	0027883a 	mov	r19,zero
 4010364:	002d883a 	mov	r22,zero
 4010368:	00021906 	br	4010bd0 <___vfprintf_internal_r+0xc00>
 401036c:	d9002d17 	ldw	r4,180(sp)
 4010370:	b80b883a 	mov	r5,r23
 4010374:	40123840 	call	4012384 <__swsetup_r>
 4010378:	1005dc1e 	bne	r2,zero,4011aec <___vfprintf_internal_r+0x1b1c>
 401037c:	b880030b 	ldhu	r2,12(r23)
 4010380:	00c00284 	movi	r3,10
 4010384:	1080068c 	andi	r2,r2,26
 4010388:	10ff3a1e 	bne	r2,r3,4010074 <__alt_mem_onchip_memory2_0+0xfc00aeb4>
 401038c:	b880038f 	ldh	r2,14(r23)
 4010390:	103f3816 	blt	r2,zero,4010074 <__alt_mem_onchip_memory2_0+0xfc00aeb4>
 4010394:	d9c02e17 	ldw	r7,184(sp)
 4010398:	d9002d17 	ldw	r4,180(sp)
 401039c:	a80d883a 	mov	r6,r21
 40103a0:	b80b883a 	mov	r5,r23
 40103a4:	40122c80 	call	40122c8 <__sbprintf>
 40103a8:	00001106 	br	40103f0 <___vfprintf_internal_r+0x420>
 40103ac:	d9002d17 	ldw	r4,180(sp)
 40103b0:	d9801e04 	addi	r6,sp,120
 40103b4:	b80b883a 	mov	r5,r23
 40103b8:	40176c40 	call	40176c4 <__sprint_r>
 40103bc:	1000081e 	bne	r2,zero,40103e0 <___vfprintf_internal_r+0x410>
 40103c0:	da000404 	addi	r8,sp,16
 40103c4:	003f5106 	br	401010c <__alt_mem_onchip_memory2_0+0xfc00af4c>
 40103c8:	d8802017 	ldw	r2,128(sp)
 40103cc:	10000426 	beq	r2,zero,40103e0 <___vfprintf_internal_r+0x410>
 40103d0:	d9002d17 	ldw	r4,180(sp)
 40103d4:	d9801e04 	addi	r6,sp,120
 40103d8:	b80b883a 	mov	r5,r23
 40103dc:	40176c40 	call	40176c4 <__sprint_r>
 40103e0:	b880030b 	ldhu	r2,12(r23)
 40103e4:	1080100c 	andi	r2,r2,64
 40103e8:	1005c01e 	bne	r2,zero,4011aec <___vfprintf_internal_r+0x1b1c>
 40103ec:	d8802f17 	ldw	r2,188(sp)
 40103f0:	dfc04717 	ldw	ra,284(sp)
 40103f4:	df004617 	ldw	fp,280(sp)
 40103f8:	ddc04517 	ldw	r23,276(sp)
 40103fc:	dd804417 	ldw	r22,272(sp)
 4010400:	dd404317 	ldw	r21,268(sp)
 4010404:	dd004217 	ldw	r20,264(sp)
 4010408:	dcc04117 	ldw	r19,260(sp)
 401040c:	dc804017 	ldw	r18,256(sp)
 4010410:	dc403f17 	ldw	r17,252(sp)
 4010414:	dc003e17 	ldw	r16,248(sp)
 4010418:	dec04804 	addi	sp,sp,288
 401041c:	f800283a 	ret
 4010420:	d9002d17 	ldw	r4,180(sp)
 4010424:	40143900 	call	4014390 <__sinit>
 4010428:	003f0206 	br	4010034 <__alt_mem_onchip_memory2_0+0xfc00ae74>
 401042c:	d9002e17 	ldw	r4,184(sp)
 4010430:	d9402e17 	ldw	r5,184(sp)
 4010434:	21000017 	ldw	r4,0(r4)
 4010438:	28800104 	addi	r2,r5,4
 401043c:	d9003115 	stw	r4,196(sp)
 4010440:	203fa716 	blt	r4,zero,40102e0 <__alt_mem_onchip_memory2_0+0xfc00b120>
 4010444:	d8802e15 	stw	r2,184(sp)
 4010448:	ac400007 	ldb	r17,0(r21)
 401044c:	003f4206 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 4010450:	ac400007 	ldb	r17,0(r21)
 4010454:	01000a84 	movi	r4,42
 4010458:	a8c00044 	addi	r3,r21,1
 401045c:	89075826 	beq	r17,r4,40121c0 <___vfprintf_internal_r+0x21f0>
 4010460:	8cbff404 	addi	r18,r17,-48
 4010464:	b486ae36 	bltu	r22,r18,4011f20 <___vfprintf_internal_r+0x1f50>
 4010468:	0009883a 	mov	r4,zero
 401046c:	1823883a 	mov	r17,r3
 4010470:	01400284 	movi	r5,10
 4010474:	400dcd40 	call	400dcd4 <__mulsi3>
 4010478:	88c00007 	ldb	r3,0(r17)
 401047c:	1489883a 	add	r4,r2,r18
 4010480:	8d400044 	addi	r21,r17,1
 4010484:	1cbff404 	addi	r18,r3,-48
 4010488:	a823883a 	mov	r17,r21
 401048c:	b4bff82e 	bgeu	r22,r18,4010470 <__alt_mem_onchip_memory2_0+0xfc00b2b0>
 4010490:	1823883a 	mov	r17,r3
 4010494:	2005f616 	blt	r4,zero,4011c70 <___vfprintf_internal_r+0x1ca0>
 4010498:	d9002a15 	stw	r4,168(sp)
 401049c:	003f2f06 	br	401015c <__alt_mem_onchip_memory2_0+0xfc00af9c>
 40104a0:	84002014 	ori	r16,r16,128
 40104a4:	ac400007 	ldb	r17,0(r21)
 40104a8:	003f2b06 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 40104ac:	8cbff404 	addi	r18,r17,-48
 40104b0:	d8003115 	stw	zero,196(sp)
 40104b4:	0009883a 	mov	r4,zero
 40104b8:	a823883a 	mov	r17,r21
 40104bc:	01400284 	movi	r5,10
 40104c0:	400dcd40 	call	400dcd4 <__mulsi3>
 40104c4:	88c00007 	ldb	r3,0(r17)
 40104c8:	9089883a 	add	r4,r18,r2
 40104cc:	ad400044 	addi	r21,r21,1
 40104d0:	1cbff404 	addi	r18,r3,-48
 40104d4:	a823883a 	mov	r17,r21
 40104d8:	b4bff82e 	bgeu	r22,r18,40104bc <__alt_mem_onchip_memory2_0+0xfc00b2fc>
 40104dc:	1823883a 	mov	r17,r3
 40104e0:	d9003115 	stw	r4,196(sp)
 40104e4:	003f1d06 	br	401015c <__alt_mem_onchip_memory2_0+0xfc00af9c>
 40104e8:	8025883a 	mov	r18,r16
 40104ec:	dc002903 	ldbu	r16,164(sp)
 40104f0:	e011883a 	mov	r8,fp
 40104f4:	84003fcc 	andi	r16,r16,255
 40104f8:	8007531e 	bne	r16,zero,4012248 <___vfprintf_internal_r+0x2278>
 40104fc:	94800414 	ori	r18,r18,16
 4010500:	9080080c 	andi	r2,r18,32
 4010504:	1003a326 	beq	r2,zero,4011394 <___vfprintf_internal_r+0x13c4>
 4010508:	d9002e17 	ldw	r4,184(sp)
 401050c:	20800117 	ldw	r2,4(r4)
 4010510:	24c00017 	ldw	r19,0(r4)
 4010514:	21000204 	addi	r4,r4,8
 4010518:	d9002e15 	stw	r4,184(sp)
 401051c:	102d883a 	mov	r22,r2
 4010520:	10047316 	blt	r2,zero,40116f0 <___vfprintf_internal_r+0x1720>
 4010524:	d9002a17 	ldw	r4,168(sp)
 4010528:	df002783 	ldbu	fp,158(sp)
 401052c:	2003e416 	blt	r4,zero,40114c0 <___vfprintf_internal_r+0x14f0>
 4010530:	00ffdfc4 	movi	r3,-129
 4010534:	9d84b03a 	or	r2,r19,r22
 4010538:	90e4703a 	and	r18,r18,r3
 401053c:	10018026 	beq	r2,zero,4010b40 <___vfprintf_internal_r+0xb70>
 4010540:	b003ab26 	beq	r22,zero,40113f0 <___vfprintf_internal_r+0x1420>
 4010544:	dc402915 	stw	r17,164(sp)
 4010548:	dc001e04 	addi	r16,sp,120
 401054c:	b023883a 	mov	r17,r22
 4010550:	402d883a 	mov	r22,r8
 4010554:	9809883a 	mov	r4,r19
 4010558:	880b883a 	mov	r5,r17
 401055c:	01800284 	movi	r6,10
 4010560:	000f883a 	mov	r7,zero
 4010564:	4019d140 	call	4019d14 <__umoddi3>
 4010568:	10800c04 	addi	r2,r2,48
 401056c:	843fffc4 	addi	r16,r16,-1
 4010570:	9809883a 	mov	r4,r19
 4010574:	880b883a 	mov	r5,r17
 4010578:	80800005 	stb	r2,0(r16)
 401057c:	01800284 	movi	r6,10
 4010580:	000f883a 	mov	r7,zero
 4010584:	40197180 	call	4019718 <__udivdi3>
 4010588:	1027883a 	mov	r19,r2
 401058c:	10c4b03a 	or	r2,r2,r3
 4010590:	1823883a 	mov	r17,r3
 4010594:	103fef1e 	bne	r2,zero,4010554 <__alt_mem_onchip_memory2_0+0xfc00b394>
 4010598:	d8c02817 	ldw	r3,160(sp)
 401059c:	dc402917 	ldw	r17,164(sp)
 40105a0:	b011883a 	mov	r8,r22
 40105a4:	1c07c83a 	sub	r3,r3,r16
 40105a8:	d8c02b15 	stw	r3,172(sp)
 40105ac:	00005f06 	br	401072c <___vfprintf_internal_r+0x75c>
 40105b0:	8025883a 	mov	r18,r16
 40105b4:	dc002903 	ldbu	r16,164(sp)
 40105b8:	e011883a 	mov	r8,fp
 40105bc:	84003fcc 	andi	r16,r16,255
 40105c0:	80071e1e 	bne	r16,zero,401223c <___vfprintf_internal_r+0x226c>
 40105c4:	9080020c 	andi	r2,r18,8
 40105c8:	1004af26 	beq	r2,zero,4011888 <___vfprintf_internal_r+0x18b8>
 40105cc:	d9002e17 	ldw	r4,184(sp)
 40105d0:	d9402e17 	ldw	r5,184(sp)
 40105d4:	d8802e17 	ldw	r2,184(sp)
 40105d8:	21000017 	ldw	r4,0(r4)
 40105dc:	29400117 	ldw	r5,4(r5)
 40105e0:	10800204 	addi	r2,r2,8
 40105e4:	d9003615 	stw	r4,216(sp)
 40105e8:	d9403815 	stw	r5,224(sp)
 40105ec:	d8802e15 	stw	r2,184(sp)
 40105f0:	d9003617 	ldw	r4,216(sp)
 40105f4:	d9403817 	ldw	r5,224(sp)
 40105f8:	da003d15 	stw	r8,244(sp)
 40105fc:	04000044 	movi	r16,1
 4010600:	40172e80 	call	40172e8 <__fpclassifyd>
 4010604:	da003d17 	ldw	r8,244(sp)
 4010608:	1404441e 	bne	r2,r16,401171c <___vfprintf_internal_r+0x174c>
 401060c:	d9003617 	ldw	r4,216(sp)
 4010610:	d9403817 	ldw	r5,224(sp)
 4010614:	000d883a 	mov	r6,zero
 4010618:	000f883a 	mov	r7,zero
 401061c:	400e7a80 	call	400e7a8 <__ledf2>
 4010620:	da003d17 	ldw	r8,244(sp)
 4010624:	1005e316 	blt	r2,zero,4011db4 <___vfprintf_internal_r+0x1de4>
 4010628:	df002783 	ldbu	fp,158(sp)
 401062c:	008011c4 	movi	r2,71
 4010630:	1445580e 	bge	r2,r17,4011b94 <___vfprintf_internal_r+0x1bc4>
 4010634:	040100b4 	movhi	r16,1026
 4010638:	84379204 	addi	r16,r16,-8632
 401063c:	00c000c4 	movi	r3,3
 4010640:	00bfdfc4 	movi	r2,-129
 4010644:	d8c02915 	stw	r3,164(sp)
 4010648:	90a4703a 	and	r18,r18,r2
 401064c:	d8c02b15 	stw	r3,172(sp)
 4010650:	d8002a15 	stw	zero,168(sp)
 4010654:	d8003215 	stw	zero,200(sp)
 4010658:	00003a06 	br	4010744 <___vfprintf_internal_r+0x774>
 401065c:	84000214 	ori	r16,r16,8
 4010660:	ac400007 	ldb	r17,0(r21)
 4010664:	003ebc06 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 4010668:	8025883a 	mov	r18,r16
 401066c:	dc002903 	ldbu	r16,164(sp)
 4010670:	e011883a 	mov	r8,fp
 4010674:	84003fcc 	andi	r16,r16,255
 4010678:	8007001e 	bne	r16,zero,401227c <___vfprintf_internal_r+0x22ac>
 401067c:	94800414 	ori	r18,r18,16
 4010680:	9080080c 	andi	r2,r18,32
 4010684:	1002fa26 	beq	r2,zero,4011270 <___vfprintf_internal_r+0x12a0>
 4010688:	d9002e17 	ldw	r4,184(sp)
 401068c:	d9402a17 	ldw	r5,168(sp)
 4010690:	d8002785 	stb	zero,158(sp)
 4010694:	20800204 	addi	r2,r4,8
 4010698:	24c00017 	ldw	r19,0(r4)
 401069c:	25800117 	ldw	r22,4(r4)
 40106a0:	2804b116 	blt	r5,zero,4011968 <___vfprintf_internal_r+0x1998>
 40106a4:	013fdfc4 	movi	r4,-129
 40106a8:	9d86b03a 	or	r3,r19,r22
 40106ac:	d8802e15 	stw	r2,184(sp)
 40106b0:	9124703a 	and	r18,r18,r4
 40106b4:	1802fb1e 	bne	r3,zero,40112a4 <___vfprintf_internal_r+0x12d4>
 40106b8:	d8c02a17 	ldw	r3,168(sp)
 40106bc:	0039883a 	mov	fp,zero
 40106c0:	1805e526 	beq	r3,zero,4011e58 <___vfprintf_internal_r+0x1e88>
 40106c4:	0027883a 	mov	r19,zero
 40106c8:	002d883a 	mov	r22,zero
 40106cc:	dc001e04 	addi	r16,sp,120
 40106d0:	9806d0fa 	srli	r3,r19,3
 40106d4:	b008977a 	slli	r4,r22,29
 40106d8:	b02cd0fa 	srli	r22,r22,3
 40106dc:	9cc001cc 	andi	r19,r19,7
 40106e0:	98800c04 	addi	r2,r19,48
 40106e4:	843fffc4 	addi	r16,r16,-1
 40106e8:	20e6b03a 	or	r19,r4,r3
 40106ec:	80800005 	stb	r2,0(r16)
 40106f0:	9d86b03a 	or	r3,r19,r22
 40106f4:	183ff61e 	bne	r3,zero,40106d0 <__alt_mem_onchip_memory2_0+0xfc00b510>
 40106f8:	90c0004c 	andi	r3,r18,1
 40106fc:	18014126 	beq	r3,zero,4010c04 <___vfprintf_internal_r+0xc34>
 4010700:	10803fcc 	andi	r2,r2,255
 4010704:	1080201c 	xori	r2,r2,128
 4010708:	10bfe004 	addi	r2,r2,-128
 401070c:	00c00c04 	movi	r3,48
 4010710:	10c13c26 	beq	r2,r3,4010c04 <___vfprintf_internal_r+0xc34>
 4010714:	80ffffc5 	stb	r3,-1(r16)
 4010718:	d8c02817 	ldw	r3,160(sp)
 401071c:	80bfffc4 	addi	r2,r16,-1
 4010720:	1021883a 	mov	r16,r2
 4010724:	1887c83a 	sub	r3,r3,r2
 4010728:	d8c02b15 	stw	r3,172(sp)
 401072c:	d8802b17 	ldw	r2,172(sp)
 4010730:	d9002a17 	ldw	r4,168(sp)
 4010734:	1100010e 	bge	r2,r4,401073c <___vfprintf_internal_r+0x76c>
 4010738:	2005883a 	mov	r2,r4
 401073c:	d8802915 	stw	r2,164(sp)
 4010740:	d8003215 	stw	zero,200(sp)
 4010744:	e7003fcc 	andi	fp,fp,255
 4010748:	e700201c 	xori	fp,fp,128
 401074c:	e73fe004 	addi	fp,fp,-128
 4010750:	e0000326 	beq	fp,zero,4010760 <___vfprintf_internal_r+0x790>
 4010754:	d8c02917 	ldw	r3,164(sp)
 4010758:	18c00044 	addi	r3,r3,1
 401075c:	d8c02915 	stw	r3,164(sp)
 4010760:	90c0008c 	andi	r3,r18,2
 4010764:	d8c02c15 	stw	r3,176(sp)
 4010768:	18000326 	beq	r3,zero,4010778 <___vfprintf_internal_r+0x7a8>
 401076c:	d8c02917 	ldw	r3,164(sp)
 4010770:	18c00084 	addi	r3,r3,2
 4010774:	d8c02915 	stw	r3,164(sp)
 4010778:	90c0210c 	andi	r3,r18,132
 401077c:	d8c03015 	stw	r3,192(sp)
 4010780:	1801c51e 	bne	r3,zero,4010e98 <___vfprintf_internal_r+0xec8>
 4010784:	d9003117 	ldw	r4,196(sp)
 4010788:	d8c02917 	ldw	r3,164(sp)
 401078c:	20e7c83a 	sub	r19,r4,r3
 4010790:	04c1c10e 	bge	zero,r19,4010e98 <___vfprintf_internal_r+0xec8>
 4010794:	02400404 	movi	r9,16
 4010798:	d8c02017 	ldw	r3,128(sp)
 401079c:	d8801f17 	ldw	r2,124(sp)
 40107a0:	4cc52f0e 	bge	r9,r19,4011c60 <___vfprintf_internal_r+0x1c90>
 40107a4:	014100b4 	movhi	r5,1026
 40107a8:	2977a584 	addi	r5,r5,-8554
 40107ac:	dc403b15 	stw	r17,236(sp)
 40107b0:	d9403515 	stw	r5,212(sp)
 40107b4:	9823883a 	mov	r17,r19
 40107b8:	482d883a 	mov	r22,r9
 40107bc:	9027883a 	mov	r19,r18
 40107c0:	070001c4 	movi	fp,7
 40107c4:	8025883a 	mov	r18,r16
 40107c8:	dc002d17 	ldw	r16,180(sp)
 40107cc:	00000306 	br	40107dc <___vfprintf_internal_r+0x80c>
 40107d0:	8c7ffc04 	addi	r17,r17,-16
 40107d4:	42000204 	addi	r8,r8,8
 40107d8:	b440130e 	bge	r22,r17,4010828 <___vfprintf_internal_r+0x858>
 40107dc:	010100b4 	movhi	r4,1026
 40107e0:	18c00404 	addi	r3,r3,16
 40107e4:	10800044 	addi	r2,r2,1
 40107e8:	2137a584 	addi	r4,r4,-8554
 40107ec:	41000015 	stw	r4,0(r8)
 40107f0:	45800115 	stw	r22,4(r8)
 40107f4:	d8c02015 	stw	r3,128(sp)
 40107f8:	d8801f15 	stw	r2,124(sp)
 40107fc:	e0bff40e 	bge	fp,r2,40107d0 <__alt_mem_onchip_memory2_0+0xfc00b610>
 4010800:	d9801e04 	addi	r6,sp,120
 4010804:	b80b883a 	mov	r5,r23
 4010808:	8009883a 	mov	r4,r16
 401080c:	40176c40 	call	40176c4 <__sprint_r>
 4010810:	103ef31e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4010814:	8c7ffc04 	addi	r17,r17,-16
 4010818:	d8c02017 	ldw	r3,128(sp)
 401081c:	d8801f17 	ldw	r2,124(sp)
 4010820:	da000404 	addi	r8,sp,16
 4010824:	b47fed16 	blt	r22,r17,40107dc <__alt_mem_onchip_memory2_0+0xfc00b61c>
 4010828:	9021883a 	mov	r16,r18
 401082c:	9825883a 	mov	r18,r19
 4010830:	8827883a 	mov	r19,r17
 4010834:	dc403b17 	ldw	r17,236(sp)
 4010838:	d9403517 	ldw	r5,212(sp)
 401083c:	98c7883a 	add	r3,r19,r3
 4010840:	10800044 	addi	r2,r2,1
 4010844:	41400015 	stw	r5,0(r8)
 4010848:	44c00115 	stw	r19,4(r8)
 401084c:	d8c02015 	stw	r3,128(sp)
 4010850:	d8801f15 	stw	r2,124(sp)
 4010854:	010001c4 	movi	r4,7
 4010858:	2082c516 	blt	r4,r2,4011370 <___vfprintf_internal_r+0x13a0>
 401085c:	df002787 	ldb	fp,158(sp)
 4010860:	42000204 	addi	r8,r8,8
 4010864:	e0000c26 	beq	fp,zero,4010898 <___vfprintf_internal_r+0x8c8>
 4010868:	d8801f17 	ldw	r2,124(sp)
 401086c:	d9002784 	addi	r4,sp,158
 4010870:	18c00044 	addi	r3,r3,1
 4010874:	10800044 	addi	r2,r2,1
 4010878:	41000015 	stw	r4,0(r8)
 401087c:	01000044 	movi	r4,1
 4010880:	41000115 	stw	r4,4(r8)
 4010884:	d8c02015 	stw	r3,128(sp)
 4010888:	d8801f15 	stw	r2,124(sp)
 401088c:	010001c4 	movi	r4,7
 4010890:	20825e16 	blt	r4,r2,401120c <___vfprintf_internal_r+0x123c>
 4010894:	42000204 	addi	r8,r8,8
 4010898:	d8802c17 	ldw	r2,176(sp)
 401089c:	10000c26 	beq	r2,zero,40108d0 <___vfprintf_internal_r+0x900>
 40108a0:	d8801f17 	ldw	r2,124(sp)
 40108a4:	d9002704 	addi	r4,sp,156
 40108a8:	18c00084 	addi	r3,r3,2
 40108ac:	10800044 	addi	r2,r2,1
 40108b0:	41000015 	stw	r4,0(r8)
 40108b4:	01000084 	movi	r4,2
 40108b8:	41000115 	stw	r4,4(r8)
 40108bc:	d8c02015 	stw	r3,128(sp)
 40108c0:	d8801f15 	stw	r2,124(sp)
 40108c4:	010001c4 	movi	r4,7
 40108c8:	20825816 	blt	r4,r2,401122c <___vfprintf_internal_r+0x125c>
 40108cc:	42000204 	addi	r8,r8,8
 40108d0:	d9003017 	ldw	r4,192(sp)
 40108d4:	00802004 	movi	r2,128
 40108d8:	2081bb26 	beq	r4,r2,4010fc8 <___vfprintf_internal_r+0xff8>
 40108dc:	d9402a17 	ldw	r5,168(sp)
 40108e0:	d8802b17 	ldw	r2,172(sp)
 40108e4:	28adc83a 	sub	r22,r5,r2
 40108e8:	0580310e 	bge	zero,r22,40109b0 <___vfprintf_internal_r+0x9e0>
 40108ec:	07000404 	movi	fp,16
 40108f0:	d8801f17 	ldw	r2,124(sp)
 40108f4:	e584360e 	bge	fp,r22,40119d0 <___vfprintf_internal_r+0x1a00>
 40108f8:	014100b4 	movhi	r5,1026
 40108fc:	2977a184 	addi	r5,r5,-8570
 4010900:	dc402a15 	stw	r17,168(sp)
 4010904:	d9402c15 	stw	r5,176(sp)
 4010908:	b023883a 	mov	r17,r22
 401090c:	04c001c4 	movi	r19,7
 4010910:	a82d883a 	mov	r22,r21
 4010914:	902b883a 	mov	r21,r18
 4010918:	8025883a 	mov	r18,r16
 401091c:	dc002d17 	ldw	r16,180(sp)
 4010920:	00000306 	br	4010930 <___vfprintf_internal_r+0x960>
 4010924:	8c7ffc04 	addi	r17,r17,-16
 4010928:	42000204 	addi	r8,r8,8
 401092c:	e440110e 	bge	fp,r17,4010974 <___vfprintf_internal_r+0x9a4>
 4010930:	18c00404 	addi	r3,r3,16
 4010934:	10800044 	addi	r2,r2,1
 4010938:	45000015 	stw	r20,0(r8)
 401093c:	47000115 	stw	fp,4(r8)
 4010940:	d8c02015 	stw	r3,128(sp)
 4010944:	d8801f15 	stw	r2,124(sp)
 4010948:	98bff60e 	bge	r19,r2,4010924 <__alt_mem_onchip_memory2_0+0xfc00b764>
 401094c:	d9801e04 	addi	r6,sp,120
 4010950:	b80b883a 	mov	r5,r23
 4010954:	8009883a 	mov	r4,r16
 4010958:	40176c40 	call	40176c4 <__sprint_r>
 401095c:	103ea01e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4010960:	8c7ffc04 	addi	r17,r17,-16
 4010964:	d8c02017 	ldw	r3,128(sp)
 4010968:	d8801f17 	ldw	r2,124(sp)
 401096c:	da000404 	addi	r8,sp,16
 4010970:	e47fef16 	blt	fp,r17,4010930 <__alt_mem_onchip_memory2_0+0xfc00b770>
 4010974:	9021883a 	mov	r16,r18
 4010978:	a825883a 	mov	r18,r21
 401097c:	b02b883a 	mov	r21,r22
 4010980:	882d883a 	mov	r22,r17
 4010984:	dc402a17 	ldw	r17,168(sp)
 4010988:	d9002c17 	ldw	r4,176(sp)
 401098c:	1d87883a 	add	r3,r3,r22
 4010990:	10800044 	addi	r2,r2,1
 4010994:	41000015 	stw	r4,0(r8)
 4010998:	45800115 	stw	r22,4(r8)
 401099c:	d8c02015 	stw	r3,128(sp)
 40109a0:	d8801f15 	stw	r2,124(sp)
 40109a4:	010001c4 	movi	r4,7
 40109a8:	20821016 	blt	r4,r2,40111ec <___vfprintf_internal_r+0x121c>
 40109ac:	42000204 	addi	r8,r8,8
 40109b0:	9080400c 	andi	r2,r18,256
 40109b4:	10013a1e 	bne	r2,zero,4010ea0 <___vfprintf_internal_r+0xed0>
 40109b8:	d9402b17 	ldw	r5,172(sp)
 40109bc:	d8801f17 	ldw	r2,124(sp)
 40109c0:	44000015 	stw	r16,0(r8)
 40109c4:	1947883a 	add	r3,r3,r5
 40109c8:	10800044 	addi	r2,r2,1
 40109cc:	41400115 	stw	r5,4(r8)
 40109d0:	d8c02015 	stw	r3,128(sp)
 40109d4:	d8801f15 	stw	r2,124(sp)
 40109d8:	010001c4 	movi	r4,7
 40109dc:	2081f516 	blt	r4,r2,40111b4 <___vfprintf_internal_r+0x11e4>
 40109e0:	42000204 	addi	r8,r8,8
 40109e4:	9480010c 	andi	r18,r18,4
 40109e8:	90003226 	beq	r18,zero,4010ab4 <___vfprintf_internal_r+0xae4>
 40109ec:	d9403117 	ldw	r5,196(sp)
 40109f0:	d8802917 	ldw	r2,164(sp)
 40109f4:	28a1c83a 	sub	r16,r5,r2
 40109f8:	04002e0e 	bge	zero,r16,4010ab4 <___vfprintf_internal_r+0xae4>
 40109fc:	04400404 	movi	r17,16
 4010a00:	d8801f17 	ldw	r2,124(sp)
 4010a04:	8c04c40e 	bge	r17,r16,4011d18 <___vfprintf_internal_r+0x1d48>
 4010a08:	014100b4 	movhi	r5,1026
 4010a0c:	2977a584 	addi	r5,r5,-8554
 4010a10:	d9403515 	stw	r5,212(sp)
 4010a14:	048001c4 	movi	r18,7
 4010a18:	dcc02d17 	ldw	r19,180(sp)
 4010a1c:	00000306 	br	4010a2c <___vfprintf_internal_r+0xa5c>
 4010a20:	843ffc04 	addi	r16,r16,-16
 4010a24:	42000204 	addi	r8,r8,8
 4010a28:	8c00130e 	bge	r17,r16,4010a78 <___vfprintf_internal_r+0xaa8>
 4010a2c:	010100b4 	movhi	r4,1026
 4010a30:	18c00404 	addi	r3,r3,16
 4010a34:	10800044 	addi	r2,r2,1
 4010a38:	2137a584 	addi	r4,r4,-8554
 4010a3c:	41000015 	stw	r4,0(r8)
 4010a40:	44400115 	stw	r17,4(r8)
 4010a44:	d8c02015 	stw	r3,128(sp)
 4010a48:	d8801f15 	stw	r2,124(sp)
 4010a4c:	90bff40e 	bge	r18,r2,4010a20 <__alt_mem_onchip_memory2_0+0xfc00b860>
 4010a50:	d9801e04 	addi	r6,sp,120
 4010a54:	b80b883a 	mov	r5,r23
 4010a58:	9809883a 	mov	r4,r19
 4010a5c:	40176c40 	call	40176c4 <__sprint_r>
 4010a60:	103e5f1e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4010a64:	843ffc04 	addi	r16,r16,-16
 4010a68:	d8c02017 	ldw	r3,128(sp)
 4010a6c:	d8801f17 	ldw	r2,124(sp)
 4010a70:	da000404 	addi	r8,sp,16
 4010a74:	8c3fed16 	blt	r17,r16,4010a2c <__alt_mem_onchip_memory2_0+0xfc00b86c>
 4010a78:	d9403517 	ldw	r5,212(sp)
 4010a7c:	1c07883a 	add	r3,r3,r16
 4010a80:	10800044 	addi	r2,r2,1
 4010a84:	41400015 	stw	r5,0(r8)
 4010a88:	44000115 	stw	r16,4(r8)
 4010a8c:	d8c02015 	stw	r3,128(sp)
 4010a90:	d8801f15 	stw	r2,124(sp)
 4010a94:	010001c4 	movi	r4,7
 4010a98:	2080060e 	bge	r4,r2,4010ab4 <___vfprintf_internal_r+0xae4>
 4010a9c:	d9002d17 	ldw	r4,180(sp)
 4010aa0:	d9801e04 	addi	r6,sp,120
 4010aa4:	b80b883a 	mov	r5,r23
 4010aa8:	40176c40 	call	40176c4 <__sprint_r>
 4010aac:	103e4c1e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4010ab0:	d8c02017 	ldw	r3,128(sp)
 4010ab4:	d8803117 	ldw	r2,196(sp)
 4010ab8:	d9002917 	ldw	r4,164(sp)
 4010abc:	1100010e 	bge	r2,r4,4010ac4 <___vfprintf_internal_r+0xaf4>
 4010ac0:	2005883a 	mov	r2,r4
 4010ac4:	d9402f17 	ldw	r5,188(sp)
 4010ac8:	288b883a 	add	r5,r5,r2
 4010acc:	d9402f15 	stw	r5,188(sp)
 4010ad0:	1801c01e 	bne	r3,zero,40111d4 <___vfprintf_internal_r+0x1204>
 4010ad4:	a8800007 	ldb	r2,0(r21)
 4010ad8:	d8001f15 	stw	zero,124(sp)
 4010adc:	da000404 	addi	r8,sp,16
 4010ae0:	103d751e 	bne	r2,zero,40100b8 <__alt_mem_onchip_memory2_0+0xfc00aef8>
 4010ae4:	a823883a 	mov	r17,r21
 4010ae8:	003d8b06 	br	4010118 <__alt_mem_onchip_memory2_0+0xfc00af58>
 4010aec:	8025883a 	mov	r18,r16
 4010af0:	dc002903 	ldbu	r16,164(sp)
 4010af4:	e011883a 	mov	r8,fp
 4010af8:	84003fcc 	andi	r16,r16,255
 4010afc:	8005e51e 	bne	r16,zero,4012294 <___vfprintf_internal_r+0x22c4>
 4010b00:	94800414 	ori	r18,r18,16
 4010b04:	9080080c 	andi	r2,r18,32
 4010b08:	10022b26 	beq	r2,zero,40113b8 <___vfprintf_internal_r+0x13e8>
 4010b0c:	d9002e17 	ldw	r4,184(sp)
 4010b10:	d9402a17 	ldw	r5,168(sp)
 4010b14:	d8002785 	stb	zero,158(sp)
 4010b18:	20c00204 	addi	r3,r4,8
 4010b1c:	24c00017 	ldw	r19,0(r4)
 4010b20:	25800117 	ldw	r22,4(r4)
 4010b24:	28042e16 	blt	r5,zero,4011be0 <___vfprintf_internal_r+0x1c10>
 4010b28:	013fdfc4 	movi	r4,-129
 4010b2c:	9d84b03a 	or	r2,r19,r22
 4010b30:	d8c02e15 	stw	r3,184(sp)
 4010b34:	9124703a 	and	r18,r18,r4
 4010b38:	0039883a 	mov	fp,zero
 4010b3c:	103e801e 	bne	r2,zero,4010540 <__alt_mem_onchip_memory2_0+0xfc00b380>
 4010b40:	d9002a17 	ldw	r4,168(sp)
 4010b44:	2002e01e 	bne	r4,zero,40116c8 <___vfprintf_internal_r+0x16f8>
 4010b48:	d8002a15 	stw	zero,168(sp)
 4010b4c:	d8002b15 	stw	zero,172(sp)
 4010b50:	dc001e04 	addi	r16,sp,120
 4010b54:	003ef506 	br	401072c <__alt_mem_onchip_memory2_0+0xfc00b56c>
 4010b58:	8025883a 	mov	r18,r16
 4010b5c:	dc002903 	ldbu	r16,164(sp)
 4010b60:	e011883a 	mov	r8,fp
 4010b64:	84003fcc 	andi	r16,r16,255
 4010b68:	8005ba1e 	bne	r16,zero,4012254 <___vfprintf_internal_r+0x2284>
 4010b6c:	010100b4 	movhi	r4,1026
 4010b70:	21379504 	addi	r4,r4,-8620
 4010b74:	d9003915 	stw	r4,228(sp)
 4010b78:	9080080c 	andi	r2,r18,32
 4010b7c:	10006126 	beq	r2,zero,4010d04 <___vfprintf_internal_r+0xd34>
 4010b80:	d9402e17 	ldw	r5,184(sp)
 4010b84:	2cc00017 	ldw	r19,0(r5)
 4010b88:	2d800117 	ldw	r22,4(r5)
 4010b8c:	29400204 	addi	r5,r5,8
 4010b90:	d9402e15 	stw	r5,184(sp)
 4010b94:	9080004c 	andi	r2,r18,1
 4010b98:	1001ac26 	beq	r2,zero,401124c <___vfprintf_internal_r+0x127c>
 4010b9c:	9d84b03a 	or	r2,r19,r22
 4010ba0:	10038526 	beq	r2,zero,40119b8 <___vfprintf_internal_r+0x19e8>
 4010ba4:	d8c02a17 	ldw	r3,168(sp)
 4010ba8:	00800c04 	movi	r2,48
 4010bac:	d8802705 	stb	r2,156(sp)
 4010bb0:	dc402745 	stb	r17,157(sp)
 4010bb4:	d8002785 	stb	zero,158(sp)
 4010bb8:	90800094 	ori	r2,r18,2
 4010bbc:	18047916 	blt	r3,zero,4011da4 <___vfprintf_internal_r+0x1dd4>
 4010bc0:	00bfdfc4 	movi	r2,-129
 4010bc4:	90a4703a 	and	r18,r18,r2
 4010bc8:	94800094 	ori	r18,r18,2
 4010bcc:	0039883a 	mov	fp,zero
 4010bd0:	d9003917 	ldw	r4,228(sp)
 4010bd4:	dc001e04 	addi	r16,sp,120
 4010bd8:	988003cc 	andi	r2,r19,15
 4010bdc:	b006973a 	slli	r3,r22,28
 4010be0:	2085883a 	add	r2,r4,r2
 4010be4:	9826d13a 	srli	r19,r19,4
 4010be8:	10800003 	ldbu	r2,0(r2)
 4010bec:	b02cd13a 	srli	r22,r22,4
 4010bf0:	843fffc4 	addi	r16,r16,-1
 4010bf4:	1ce6b03a 	or	r19,r3,r19
 4010bf8:	80800005 	stb	r2,0(r16)
 4010bfc:	9d84b03a 	or	r2,r19,r22
 4010c00:	103ff51e 	bne	r2,zero,4010bd8 <__alt_mem_onchip_memory2_0+0xfc00ba18>
 4010c04:	d8c02817 	ldw	r3,160(sp)
 4010c08:	1c07c83a 	sub	r3,r3,r16
 4010c0c:	d8c02b15 	stw	r3,172(sp)
 4010c10:	003ec606 	br	401072c <__alt_mem_onchip_memory2_0+0xfc00b56c>
 4010c14:	8025883a 	mov	r18,r16
 4010c18:	dc002903 	ldbu	r16,164(sp)
 4010c1c:	e011883a 	mov	r8,fp
 4010c20:	84003fcc 	andi	r16,r16,255
 4010c24:	803e9626 	beq	r16,zero,4010680 <__alt_mem_onchip_memory2_0+0xfc00b4c0>
 4010c28:	d8c02b03 	ldbu	r3,172(sp)
 4010c2c:	d8c02785 	stb	r3,158(sp)
 4010c30:	003e9306 	br	4010680 <__alt_mem_onchip_memory2_0+0xfc00b4c0>
 4010c34:	00c00044 	movi	r3,1
 4010c38:	d8c02905 	stb	r3,164(sp)
 4010c3c:	00c00ac4 	movi	r3,43
 4010c40:	d8c02b05 	stb	r3,172(sp)
 4010c44:	ac400007 	ldb	r17,0(r21)
 4010c48:	003d4306 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 4010c4c:	84000814 	ori	r16,r16,32
 4010c50:	ac400007 	ldb	r17,0(r21)
 4010c54:	003d4006 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 4010c58:	d8802e17 	ldw	r2,184(sp)
 4010c5c:	8025883a 	mov	r18,r16
 4010c60:	d8002785 	stb	zero,158(sp)
 4010c64:	14000017 	ldw	r16,0(r2)
 4010c68:	e011883a 	mov	r8,fp
 4010c6c:	14c00104 	addi	r19,r2,4
 4010c70:	80042d26 	beq	r16,zero,4011d28 <___vfprintf_internal_r+0x1d58>
 4010c74:	d8c02a17 	ldw	r3,168(sp)
 4010c78:	1803e416 	blt	r3,zero,4011c0c <___vfprintf_internal_r+0x1c3c>
 4010c7c:	180d883a 	mov	r6,r3
 4010c80:	000b883a 	mov	r5,zero
 4010c84:	8009883a 	mov	r4,r16
 4010c88:	df003d15 	stw	fp,244(sp)
 4010c8c:	40159640 	call	4015964 <memchr>
 4010c90:	da003d17 	ldw	r8,244(sp)
 4010c94:	10046826 	beq	r2,zero,4011e38 <___vfprintf_internal_r+0x1e68>
 4010c98:	1405c83a 	sub	r2,r2,r16
 4010c9c:	d8802b15 	stw	r2,172(sp)
 4010ca0:	1003e016 	blt	r2,zero,4011c24 <___vfprintf_internal_r+0x1c54>
 4010ca4:	df002783 	ldbu	fp,158(sp)
 4010ca8:	d8802915 	stw	r2,164(sp)
 4010cac:	dcc02e15 	stw	r19,184(sp)
 4010cb0:	d8002a15 	stw	zero,168(sp)
 4010cb4:	d8003215 	stw	zero,200(sp)
 4010cb8:	003ea206 	br	4010744 <__alt_mem_onchip_memory2_0+0xfc00b584>
 4010cbc:	8025883a 	mov	r18,r16
 4010cc0:	dc002903 	ldbu	r16,164(sp)
 4010cc4:	e011883a 	mov	r8,fp
 4010cc8:	84003fcc 	andi	r16,r16,255
 4010ccc:	803f8d26 	beq	r16,zero,4010b04 <__alt_mem_onchip_memory2_0+0xfc00b944>
 4010cd0:	d8c02b03 	ldbu	r3,172(sp)
 4010cd4:	d8c02785 	stb	r3,158(sp)
 4010cd8:	003f8a06 	br	4010b04 <__alt_mem_onchip_memory2_0+0xfc00b944>
 4010cdc:	8025883a 	mov	r18,r16
 4010ce0:	dc002903 	ldbu	r16,164(sp)
 4010ce4:	e011883a 	mov	r8,fp
 4010ce8:	84003fcc 	andi	r16,r16,255
 4010cec:	8005661e 	bne	r16,zero,4012288 <___vfprintf_internal_r+0x22b8>
 4010cf0:	010100b4 	movhi	r4,1026
 4010cf4:	21379a04 	addi	r4,r4,-8600
 4010cf8:	d9003915 	stw	r4,228(sp)
 4010cfc:	9080080c 	andi	r2,r18,32
 4010d00:	103f9f1e 	bne	r2,zero,4010b80 <__alt_mem_onchip_memory2_0+0xfc00b9c0>
 4010d04:	9080040c 	andi	r2,r18,16
 4010d08:	1002eb26 	beq	r2,zero,40118b8 <___vfprintf_internal_r+0x18e8>
 4010d0c:	d8802e17 	ldw	r2,184(sp)
 4010d10:	002d883a 	mov	r22,zero
 4010d14:	14c00017 	ldw	r19,0(r2)
 4010d18:	10800104 	addi	r2,r2,4
 4010d1c:	d8802e15 	stw	r2,184(sp)
 4010d20:	003f9c06 	br	4010b94 <__alt_mem_onchip_memory2_0+0xfc00b9d4>
 4010d24:	d8802b07 	ldb	r2,172(sp)
 4010d28:	1002e11e 	bne	r2,zero,40118b0 <___vfprintf_internal_r+0x18e0>
 4010d2c:	00c00044 	movi	r3,1
 4010d30:	d8c02905 	stb	r3,164(sp)
 4010d34:	00c00804 	movi	r3,32
 4010d38:	d8c02b05 	stb	r3,172(sp)
 4010d3c:	ac400007 	ldb	r17,0(r21)
 4010d40:	003d0506 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 4010d44:	84000054 	ori	r16,r16,1
 4010d48:	ac400007 	ldb	r17,0(r21)
 4010d4c:	003d0206 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 4010d50:	8025883a 	mov	r18,r16
 4010d54:	dc002903 	ldbu	r16,164(sp)
 4010d58:	e011883a 	mov	r8,fp
 4010d5c:	84003fcc 	andi	r16,r16,255
 4010d60:	803de726 	beq	r16,zero,4010500 <__alt_mem_onchip_memory2_0+0xfc00b340>
 4010d64:	d8c02b03 	ldbu	r3,172(sp)
 4010d68:	d8c02785 	stb	r3,158(sp)
 4010d6c:	003de406 	br	4010500 <__alt_mem_onchip_memory2_0+0xfc00b340>
 4010d70:	84001014 	ori	r16,r16,64
 4010d74:	ac400007 	ldb	r17,0(r21)
 4010d78:	003cf706 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 4010d7c:	ac400007 	ldb	r17,0(r21)
 4010d80:	00801b04 	movi	r2,108
 4010d84:	88838f26 	beq	r17,r2,4011bc4 <___vfprintf_internal_r+0x1bf4>
 4010d88:	84000414 	ori	r16,r16,16
 4010d8c:	003cf206 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 4010d90:	8025883a 	mov	r18,r16
 4010d94:	dc002903 	ldbu	r16,164(sp)
 4010d98:	e011883a 	mov	r8,fp
 4010d9c:	84003fcc 	andi	r16,r16,255
 4010da0:	80053f1e 	bne	r16,zero,40122a0 <___vfprintf_internal_r+0x22d0>
 4010da4:	9080080c 	andi	r2,r18,32
 4010da8:	1002d226 	beq	r2,zero,40118f4 <___vfprintf_internal_r+0x1924>
 4010dac:	d9002e17 	ldw	r4,184(sp)
 4010db0:	d9402f17 	ldw	r5,188(sp)
 4010db4:	20800017 	ldw	r2,0(r4)
 4010db8:	2807d7fa 	srai	r3,r5,31
 4010dbc:	21000104 	addi	r4,r4,4
 4010dc0:	d9002e15 	stw	r4,184(sp)
 4010dc4:	11400015 	stw	r5,0(r2)
 4010dc8:	10c00115 	stw	r3,4(r2)
 4010dcc:	003cb806 	br	40100b0 <__alt_mem_onchip_memory2_0+0xfc00aef0>
 4010dd0:	d8c02e17 	ldw	r3,184(sp)
 4010dd4:	d9002e17 	ldw	r4,184(sp)
 4010dd8:	8025883a 	mov	r18,r16
 4010ddc:	18800017 	ldw	r2,0(r3)
 4010de0:	21000104 	addi	r4,r4,4
 4010de4:	00c00044 	movi	r3,1
 4010de8:	e011883a 	mov	r8,fp
 4010dec:	d8c02915 	stw	r3,164(sp)
 4010df0:	d8002785 	stb	zero,158(sp)
 4010df4:	d8801405 	stb	r2,80(sp)
 4010df8:	d9002e15 	stw	r4,184(sp)
 4010dfc:	d8c02b15 	stw	r3,172(sp)
 4010e00:	d8002a15 	stw	zero,168(sp)
 4010e04:	d8003215 	stw	zero,200(sp)
 4010e08:	dc001404 	addi	r16,sp,80
 4010e0c:	0039883a 	mov	fp,zero
 4010e10:	003e5306 	br	4010760 <__alt_mem_onchip_memory2_0+0xfc00b5a0>
 4010e14:	010100b4 	movhi	r4,1026
 4010e18:	21379a04 	addi	r4,r4,-8600
 4010e1c:	0039883a 	mov	fp,zero
 4010e20:	d9003915 	stw	r4,228(sp)
 4010e24:	04401e04 	movi	r17,120
 4010e28:	003f6906 	br	4010bd0 <__alt_mem_onchip_memory2_0+0xfc00ba10>
 4010e2c:	8025883a 	mov	r18,r16
 4010e30:	dc002903 	ldbu	r16,164(sp)
 4010e34:	e011883a 	mov	r8,fp
 4010e38:	84003fcc 	andi	r16,r16,255
 4010e3c:	8005081e 	bne	r16,zero,4012260 <___vfprintf_internal_r+0x2290>
 4010e40:	883d6126 	beq	r17,zero,40103c8 <__alt_mem_onchip_memory2_0+0xfc00b208>
 4010e44:	00c00044 	movi	r3,1
 4010e48:	d8c02915 	stw	r3,164(sp)
 4010e4c:	dc401405 	stb	r17,80(sp)
 4010e50:	d8002785 	stb	zero,158(sp)
 4010e54:	003fe906 	br	4010dfc <__alt_mem_onchip_memory2_0+0xfc00bc3c>
 4010e58:	014100b4 	movhi	r5,1026
 4010e5c:	29779a04 	addi	r5,r5,-8600
 4010e60:	d9403915 	stw	r5,228(sp)
 4010e64:	d8c02e15 	stw	r3,184(sp)
 4010e68:	1025883a 	mov	r18,r2
 4010e6c:	04401e04 	movi	r17,120
 4010e70:	9d84b03a 	or	r2,r19,r22
 4010e74:	1000fc1e 	bne	r2,zero,4011268 <___vfprintf_internal_r+0x1298>
 4010e78:	0039883a 	mov	fp,zero
 4010e7c:	00800084 	movi	r2,2
 4010e80:	10803fcc 	andi	r2,r2,255
 4010e84:	00c00044 	movi	r3,1
 4010e88:	10c20f26 	beq	r2,r3,40116c8 <___vfprintf_internal_r+0x16f8>
 4010e8c:	00c00084 	movi	r3,2
 4010e90:	10fd3326 	beq	r2,r3,4010360 <__alt_mem_onchip_memory2_0+0xfc00b1a0>
 4010e94:	003e0b06 	br	40106c4 <__alt_mem_onchip_memory2_0+0xfc00b504>
 4010e98:	d8c02017 	ldw	r3,128(sp)
 4010e9c:	003e7106 	br	4010864 <__alt_mem_onchip_memory2_0+0xfc00b6a4>
 4010ea0:	00801944 	movi	r2,101
 4010ea4:	14407e0e 	bge	r2,r17,40110a0 <___vfprintf_internal_r+0x10d0>
 4010ea8:	d9003617 	ldw	r4,216(sp)
 4010eac:	d9403817 	ldw	r5,224(sp)
 4010eb0:	000d883a 	mov	r6,zero
 4010eb4:	000f883a 	mov	r7,zero
 4010eb8:	d8c03c15 	stw	r3,240(sp)
 4010ebc:	da003d15 	stw	r8,244(sp)
 4010ec0:	401ab840 	call	401ab84 <__eqdf2>
 4010ec4:	d8c03c17 	ldw	r3,240(sp)
 4010ec8:	da003d17 	ldw	r8,244(sp)
 4010ecc:	1000f71e 	bne	r2,zero,40112ac <___vfprintf_internal_r+0x12dc>
 4010ed0:	d8801f17 	ldw	r2,124(sp)
 4010ed4:	010100b4 	movhi	r4,1026
 4010ed8:	2137a104 	addi	r4,r4,-8572
 4010edc:	18c00044 	addi	r3,r3,1
 4010ee0:	10800044 	addi	r2,r2,1
 4010ee4:	41000015 	stw	r4,0(r8)
 4010ee8:	01000044 	movi	r4,1
 4010eec:	41000115 	stw	r4,4(r8)
 4010ef0:	d8c02015 	stw	r3,128(sp)
 4010ef4:	d8801f15 	stw	r2,124(sp)
 4010ef8:	010001c4 	movi	r4,7
 4010efc:	2082b816 	blt	r4,r2,40119e0 <___vfprintf_internal_r+0x1a10>
 4010f00:	42000204 	addi	r8,r8,8
 4010f04:	d8802617 	ldw	r2,152(sp)
 4010f08:	d9403317 	ldw	r5,204(sp)
 4010f0c:	11400216 	blt	r2,r5,4010f18 <___vfprintf_internal_r+0xf48>
 4010f10:	9080004c 	andi	r2,r18,1
 4010f14:	103eb326 	beq	r2,zero,40109e4 <__alt_mem_onchip_memory2_0+0xfc00b824>
 4010f18:	d8803717 	ldw	r2,220(sp)
 4010f1c:	d9003417 	ldw	r4,208(sp)
 4010f20:	d9403717 	ldw	r5,220(sp)
 4010f24:	1887883a 	add	r3,r3,r2
 4010f28:	d8801f17 	ldw	r2,124(sp)
 4010f2c:	41000015 	stw	r4,0(r8)
 4010f30:	41400115 	stw	r5,4(r8)
 4010f34:	10800044 	addi	r2,r2,1
 4010f38:	d8c02015 	stw	r3,128(sp)
 4010f3c:	d8801f15 	stw	r2,124(sp)
 4010f40:	010001c4 	movi	r4,7
 4010f44:	20832916 	blt	r4,r2,4011bec <___vfprintf_internal_r+0x1c1c>
 4010f48:	42000204 	addi	r8,r8,8
 4010f4c:	d8803317 	ldw	r2,204(sp)
 4010f50:	143fffc4 	addi	r16,r2,-1
 4010f54:	043ea30e 	bge	zero,r16,40109e4 <__alt_mem_onchip_memory2_0+0xfc00b824>
 4010f58:	04400404 	movi	r17,16
 4010f5c:	d8801f17 	ldw	r2,124(sp)
 4010f60:	8c00880e 	bge	r17,r16,4011184 <___vfprintf_internal_r+0x11b4>
 4010f64:	014100b4 	movhi	r5,1026
 4010f68:	2977a184 	addi	r5,r5,-8570
 4010f6c:	d9402c15 	stw	r5,176(sp)
 4010f70:	058001c4 	movi	r22,7
 4010f74:	dcc02d17 	ldw	r19,180(sp)
 4010f78:	00000306 	br	4010f88 <___vfprintf_internal_r+0xfb8>
 4010f7c:	42000204 	addi	r8,r8,8
 4010f80:	843ffc04 	addi	r16,r16,-16
 4010f84:	8c00820e 	bge	r17,r16,4011190 <___vfprintf_internal_r+0x11c0>
 4010f88:	18c00404 	addi	r3,r3,16
 4010f8c:	10800044 	addi	r2,r2,1
 4010f90:	45000015 	stw	r20,0(r8)
 4010f94:	44400115 	stw	r17,4(r8)
 4010f98:	d8c02015 	stw	r3,128(sp)
 4010f9c:	d8801f15 	stw	r2,124(sp)
 4010fa0:	b0bff60e 	bge	r22,r2,4010f7c <__alt_mem_onchip_memory2_0+0xfc00bdbc>
 4010fa4:	d9801e04 	addi	r6,sp,120
 4010fa8:	b80b883a 	mov	r5,r23
 4010fac:	9809883a 	mov	r4,r19
 4010fb0:	40176c40 	call	40176c4 <__sprint_r>
 4010fb4:	103d0a1e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4010fb8:	d8c02017 	ldw	r3,128(sp)
 4010fbc:	d8801f17 	ldw	r2,124(sp)
 4010fc0:	da000404 	addi	r8,sp,16
 4010fc4:	003fee06 	br	4010f80 <__alt_mem_onchip_memory2_0+0xfc00bdc0>
 4010fc8:	d9403117 	ldw	r5,196(sp)
 4010fcc:	d8802917 	ldw	r2,164(sp)
 4010fd0:	28adc83a 	sub	r22,r5,r2
 4010fd4:	05be410e 	bge	zero,r22,40108dc <__alt_mem_onchip_memory2_0+0xfc00b71c>
 4010fd8:	07000404 	movi	fp,16
 4010fdc:	d8801f17 	ldw	r2,124(sp)
 4010fe0:	e5838f0e 	bge	fp,r22,4011e20 <___vfprintf_internal_r+0x1e50>
 4010fe4:	014100b4 	movhi	r5,1026
 4010fe8:	2977a184 	addi	r5,r5,-8570
 4010fec:	dc403015 	stw	r17,192(sp)
 4010ff0:	d9402c15 	stw	r5,176(sp)
 4010ff4:	b023883a 	mov	r17,r22
 4010ff8:	04c001c4 	movi	r19,7
 4010ffc:	a82d883a 	mov	r22,r21
 4011000:	902b883a 	mov	r21,r18
 4011004:	8025883a 	mov	r18,r16
 4011008:	dc002d17 	ldw	r16,180(sp)
 401100c:	00000306 	br	401101c <___vfprintf_internal_r+0x104c>
 4011010:	8c7ffc04 	addi	r17,r17,-16
 4011014:	42000204 	addi	r8,r8,8
 4011018:	e440110e 	bge	fp,r17,4011060 <___vfprintf_internal_r+0x1090>
 401101c:	18c00404 	addi	r3,r3,16
 4011020:	10800044 	addi	r2,r2,1
 4011024:	45000015 	stw	r20,0(r8)
 4011028:	47000115 	stw	fp,4(r8)
 401102c:	d8c02015 	stw	r3,128(sp)
 4011030:	d8801f15 	stw	r2,124(sp)
 4011034:	98bff60e 	bge	r19,r2,4011010 <__alt_mem_onchip_memory2_0+0xfc00be50>
 4011038:	d9801e04 	addi	r6,sp,120
 401103c:	b80b883a 	mov	r5,r23
 4011040:	8009883a 	mov	r4,r16
 4011044:	40176c40 	call	40176c4 <__sprint_r>
 4011048:	103ce51e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 401104c:	8c7ffc04 	addi	r17,r17,-16
 4011050:	d8c02017 	ldw	r3,128(sp)
 4011054:	d8801f17 	ldw	r2,124(sp)
 4011058:	da000404 	addi	r8,sp,16
 401105c:	e47fef16 	blt	fp,r17,401101c <__alt_mem_onchip_memory2_0+0xfc00be5c>
 4011060:	9021883a 	mov	r16,r18
 4011064:	a825883a 	mov	r18,r21
 4011068:	b02b883a 	mov	r21,r22
 401106c:	882d883a 	mov	r22,r17
 4011070:	dc403017 	ldw	r17,192(sp)
 4011074:	d9002c17 	ldw	r4,176(sp)
 4011078:	1d87883a 	add	r3,r3,r22
 401107c:	10800044 	addi	r2,r2,1
 4011080:	41000015 	stw	r4,0(r8)
 4011084:	45800115 	stw	r22,4(r8)
 4011088:	d8c02015 	stw	r3,128(sp)
 401108c:	d8801f15 	stw	r2,124(sp)
 4011090:	010001c4 	movi	r4,7
 4011094:	20818e16 	blt	r4,r2,40116d0 <___vfprintf_internal_r+0x1700>
 4011098:	42000204 	addi	r8,r8,8
 401109c:	003e0f06 	br	40108dc <__alt_mem_onchip_memory2_0+0xfc00b71c>
 40110a0:	d9403317 	ldw	r5,204(sp)
 40110a4:	00800044 	movi	r2,1
 40110a8:	18c00044 	addi	r3,r3,1
 40110ac:	1141530e 	bge	r2,r5,40115fc <___vfprintf_internal_r+0x162c>
 40110b0:	dc401f17 	ldw	r17,124(sp)
 40110b4:	00800044 	movi	r2,1
 40110b8:	40800115 	stw	r2,4(r8)
 40110bc:	8c400044 	addi	r17,r17,1
 40110c0:	44000015 	stw	r16,0(r8)
 40110c4:	d8c02015 	stw	r3,128(sp)
 40110c8:	dc401f15 	stw	r17,124(sp)
 40110cc:	008001c4 	movi	r2,7
 40110d0:	14416b16 	blt	r2,r17,4011680 <___vfprintf_internal_r+0x16b0>
 40110d4:	42000204 	addi	r8,r8,8
 40110d8:	d8803717 	ldw	r2,220(sp)
 40110dc:	d9003417 	ldw	r4,208(sp)
 40110e0:	8c400044 	addi	r17,r17,1
 40110e4:	10c7883a 	add	r3,r2,r3
 40110e8:	40800115 	stw	r2,4(r8)
 40110ec:	41000015 	stw	r4,0(r8)
 40110f0:	d8c02015 	stw	r3,128(sp)
 40110f4:	dc401f15 	stw	r17,124(sp)
 40110f8:	008001c4 	movi	r2,7
 40110fc:	14416916 	blt	r2,r17,40116a4 <___vfprintf_internal_r+0x16d4>
 4011100:	45800204 	addi	r22,r8,8
 4011104:	d9003617 	ldw	r4,216(sp)
 4011108:	d9403817 	ldw	r5,224(sp)
 401110c:	000d883a 	mov	r6,zero
 4011110:	000f883a 	mov	r7,zero
 4011114:	d8c03c15 	stw	r3,240(sp)
 4011118:	401ab840 	call	401ab84 <__eqdf2>
 401111c:	d8c03c17 	ldw	r3,240(sp)
 4011120:	1000bc26 	beq	r2,zero,4011414 <___vfprintf_internal_r+0x1444>
 4011124:	d9403317 	ldw	r5,204(sp)
 4011128:	84000044 	addi	r16,r16,1
 401112c:	8c400044 	addi	r17,r17,1
 4011130:	28bfffc4 	addi	r2,r5,-1
 4011134:	1887883a 	add	r3,r3,r2
 4011138:	b0800115 	stw	r2,4(r22)
 401113c:	b4000015 	stw	r16,0(r22)
 4011140:	d8c02015 	stw	r3,128(sp)
 4011144:	dc401f15 	stw	r17,124(sp)
 4011148:	008001c4 	movi	r2,7
 401114c:	14414316 	blt	r2,r17,401165c <___vfprintf_internal_r+0x168c>
 4011150:	b5800204 	addi	r22,r22,8
 4011154:	d9003a17 	ldw	r4,232(sp)
 4011158:	df0022c4 	addi	fp,sp,139
 401115c:	8c400044 	addi	r17,r17,1
 4011160:	20c7883a 	add	r3,r4,r3
 4011164:	b7000015 	stw	fp,0(r22)
 4011168:	b1000115 	stw	r4,4(r22)
 401116c:	d8c02015 	stw	r3,128(sp)
 4011170:	dc401f15 	stw	r17,124(sp)
 4011174:	008001c4 	movi	r2,7
 4011178:	14400e16 	blt	r2,r17,40111b4 <___vfprintf_internal_r+0x11e4>
 401117c:	b2000204 	addi	r8,r22,8
 4011180:	003e1806 	br	40109e4 <__alt_mem_onchip_memory2_0+0xfc00b824>
 4011184:	010100b4 	movhi	r4,1026
 4011188:	2137a184 	addi	r4,r4,-8570
 401118c:	d9002c15 	stw	r4,176(sp)
 4011190:	d9002c17 	ldw	r4,176(sp)
 4011194:	1c07883a 	add	r3,r3,r16
 4011198:	44000115 	stw	r16,4(r8)
 401119c:	41000015 	stw	r4,0(r8)
 40111a0:	10800044 	addi	r2,r2,1
 40111a4:	d8c02015 	stw	r3,128(sp)
 40111a8:	d8801f15 	stw	r2,124(sp)
 40111ac:	010001c4 	movi	r4,7
 40111b0:	20be0b0e 	bge	r4,r2,40109e0 <__alt_mem_onchip_memory2_0+0xfc00b820>
 40111b4:	d9002d17 	ldw	r4,180(sp)
 40111b8:	d9801e04 	addi	r6,sp,120
 40111bc:	b80b883a 	mov	r5,r23
 40111c0:	40176c40 	call	40176c4 <__sprint_r>
 40111c4:	103c861e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 40111c8:	d8c02017 	ldw	r3,128(sp)
 40111cc:	da000404 	addi	r8,sp,16
 40111d0:	003e0406 	br	40109e4 <__alt_mem_onchip_memory2_0+0xfc00b824>
 40111d4:	d9002d17 	ldw	r4,180(sp)
 40111d8:	d9801e04 	addi	r6,sp,120
 40111dc:	b80b883a 	mov	r5,r23
 40111e0:	40176c40 	call	40176c4 <__sprint_r>
 40111e4:	103e3b26 	beq	r2,zero,4010ad4 <__alt_mem_onchip_memory2_0+0xfc00b914>
 40111e8:	003c7d06 	br	40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 40111ec:	d9002d17 	ldw	r4,180(sp)
 40111f0:	d9801e04 	addi	r6,sp,120
 40111f4:	b80b883a 	mov	r5,r23
 40111f8:	40176c40 	call	40176c4 <__sprint_r>
 40111fc:	103c781e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011200:	d8c02017 	ldw	r3,128(sp)
 4011204:	da000404 	addi	r8,sp,16
 4011208:	003de906 	br	40109b0 <__alt_mem_onchip_memory2_0+0xfc00b7f0>
 401120c:	d9002d17 	ldw	r4,180(sp)
 4011210:	d9801e04 	addi	r6,sp,120
 4011214:	b80b883a 	mov	r5,r23
 4011218:	40176c40 	call	40176c4 <__sprint_r>
 401121c:	103c701e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011220:	d8c02017 	ldw	r3,128(sp)
 4011224:	da000404 	addi	r8,sp,16
 4011228:	003d9b06 	br	4010898 <__alt_mem_onchip_memory2_0+0xfc00b6d8>
 401122c:	d9002d17 	ldw	r4,180(sp)
 4011230:	d9801e04 	addi	r6,sp,120
 4011234:	b80b883a 	mov	r5,r23
 4011238:	40176c40 	call	40176c4 <__sprint_r>
 401123c:	103c681e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011240:	d8c02017 	ldw	r3,128(sp)
 4011244:	da000404 	addi	r8,sp,16
 4011248:	003da106 	br	40108d0 <__alt_mem_onchip_memory2_0+0xfc00b710>
 401124c:	d9402a17 	ldw	r5,168(sp)
 4011250:	d8002785 	stb	zero,158(sp)
 4011254:	283f0616 	blt	r5,zero,4010e70 <__alt_mem_onchip_memory2_0+0xfc00bcb0>
 4011258:	00ffdfc4 	movi	r3,-129
 401125c:	9d84b03a 	or	r2,r19,r22
 4011260:	90e4703a 	and	r18,r18,r3
 4011264:	103c3b26 	beq	r2,zero,4010354 <__alt_mem_onchip_memory2_0+0xfc00b194>
 4011268:	0039883a 	mov	fp,zero
 401126c:	003e5806 	br	4010bd0 <__alt_mem_onchip_memory2_0+0xfc00ba10>
 4011270:	9080040c 	andi	r2,r18,16
 4011274:	1001b326 	beq	r2,zero,4011944 <___vfprintf_internal_r+0x1974>
 4011278:	d8c02e17 	ldw	r3,184(sp)
 401127c:	d9002a17 	ldw	r4,168(sp)
 4011280:	d8002785 	stb	zero,158(sp)
 4011284:	18800104 	addi	r2,r3,4
 4011288:	1cc00017 	ldw	r19,0(r3)
 401128c:	002d883a 	mov	r22,zero
 4011290:	2001b516 	blt	r4,zero,4011968 <___vfprintf_internal_r+0x1998>
 4011294:	00ffdfc4 	movi	r3,-129
 4011298:	d8802e15 	stw	r2,184(sp)
 401129c:	90e4703a 	and	r18,r18,r3
 40112a0:	983d0526 	beq	r19,zero,40106b8 <__alt_mem_onchip_memory2_0+0xfc00b4f8>
 40112a4:	0039883a 	mov	fp,zero
 40112a8:	003d0806 	br	40106cc <__alt_mem_onchip_memory2_0+0xfc00b50c>
 40112ac:	dc402617 	ldw	r17,152(sp)
 40112b0:	0441d30e 	bge	zero,r17,4011a00 <___vfprintf_internal_r+0x1a30>
 40112b4:	dc403217 	ldw	r17,200(sp)
 40112b8:	d8803317 	ldw	r2,204(sp)
 40112bc:	1440010e 	bge	r2,r17,40112c4 <___vfprintf_internal_r+0x12f4>
 40112c0:	1023883a 	mov	r17,r2
 40112c4:	04400a0e 	bge	zero,r17,40112f0 <___vfprintf_internal_r+0x1320>
 40112c8:	d8801f17 	ldw	r2,124(sp)
 40112cc:	1c47883a 	add	r3,r3,r17
 40112d0:	44000015 	stw	r16,0(r8)
 40112d4:	10800044 	addi	r2,r2,1
 40112d8:	44400115 	stw	r17,4(r8)
 40112dc:	d8c02015 	stw	r3,128(sp)
 40112e0:	d8801f15 	stw	r2,124(sp)
 40112e4:	010001c4 	movi	r4,7
 40112e8:	20826516 	blt	r4,r2,4011c80 <___vfprintf_internal_r+0x1cb0>
 40112ec:	42000204 	addi	r8,r8,8
 40112f0:	88026116 	blt	r17,zero,4011c78 <___vfprintf_internal_r+0x1ca8>
 40112f4:	d9003217 	ldw	r4,200(sp)
 40112f8:	2463c83a 	sub	r17,r4,r17
 40112fc:	04407b0e 	bge	zero,r17,40114ec <___vfprintf_internal_r+0x151c>
 4011300:	05800404 	movi	r22,16
 4011304:	d8801f17 	ldw	r2,124(sp)
 4011308:	b4419d0e 	bge	r22,r17,4011980 <___vfprintf_internal_r+0x19b0>
 401130c:	010100b4 	movhi	r4,1026
 4011310:	2137a184 	addi	r4,r4,-8570
 4011314:	d9002c15 	stw	r4,176(sp)
 4011318:	070001c4 	movi	fp,7
 401131c:	dcc02d17 	ldw	r19,180(sp)
 4011320:	00000306 	br	4011330 <___vfprintf_internal_r+0x1360>
 4011324:	42000204 	addi	r8,r8,8
 4011328:	8c7ffc04 	addi	r17,r17,-16
 401132c:	b441970e 	bge	r22,r17,401198c <___vfprintf_internal_r+0x19bc>
 4011330:	18c00404 	addi	r3,r3,16
 4011334:	10800044 	addi	r2,r2,1
 4011338:	45000015 	stw	r20,0(r8)
 401133c:	45800115 	stw	r22,4(r8)
 4011340:	d8c02015 	stw	r3,128(sp)
 4011344:	d8801f15 	stw	r2,124(sp)
 4011348:	e0bff60e 	bge	fp,r2,4011324 <__alt_mem_onchip_memory2_0+0xfc00c164>
 401134c:	d9801e04 	addi	r6,sp,120
 4011350:	b80b883a 	mov	r5,r23
 4011354:	9809883a 	mov	r4,r19
 4011358:	40176c40 	call	40176c4 <__sprint_r>
 401135c:	103c201e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011360:	d8c02017 	ldw	r3,128(sp)
 4011364:	d8801f17 	ldw	r2,124(sp)
 4011368:	da000404 	addi	r8,sp,16
 401136c:	003fee06 	br	4011328 <__alt_mem_onchip_memory2_0+0xfc00c168>
 4011370:	d9002d17 	ldw	r4,180(sp)
 4011374:	d9801e04 	addi	r6,sp,120
 4011378:	b80b883a 	mov	r5,r23
 401137c:	40176c40 	call	40176c4 <__sprint_r>
 4011380:	103c171e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011384:	d8c02017 	ldw	r3,128(sp)
 4011388:	df002787 	ldb	fp,158(sp)
 401138c:	da000404 	addi	r8,sp,16
 4011390:	003d3406 	br	4010864 <__alt_mem_onchip_memory2_0+0xfc00b6a4>
 4011394:	9080040c 	andi	r2,r18,16
 4011398:	10016126 	beq	r2,zero,4011920 <___vfprintf_internal_r+0x1950>
 401139c:	d9402e17 	ldw	r5,184(sp)
 40113a0:	2cc00017 	ldw	r19,0(r5)
 40113a4:	29400104 	addi	r5,r5,4
 40113a8:	d9402e15 	stw	r5,184(sp)
 40113ac:	982dd7fa 	srai	r22,r19,31
 40113b0:	b005883a 	mov	r2,r22
 40113b4:	003c5a06 	br	4010520 <__alt_mem_onchip_memory2_0+0xfc00b360>
 40113b8:	9080040c 	andi	r2,r18,16
 40113bc:	10003526 	beq	r2,zero,4011494 <___vfprintf_internal_r+0x14c4>
 40113c0:	d8c02e17 	ldw	r3,184(sp)
 40113c4:	d9002a17 	ldw	r4,168(sp)
 40113c8:	d8002785 	stb	zero,158(sp)
 40113cc:	18800104 	addi	r2,r3,4
 40113d0:	1cc00017 	ldw	r19,0(r3)
 40113d4:	002d883a 	mov	r22,zero
 40113d8:	20003716 	blt	r4,zero,40114b8 <___vfprintf_internal_r+0x14e8>
 40113dc:	00ffdfc4 	movi	r3,-129
 40113e0:	d8802e15 	stw	r2,184(sp)
 40113e4:	90e4703a 	and	r18,r18,r3
 40113e8:	0039883a 	mov	fp,zero
 40113ec:	983dd426 	beq	r19,zero,4010b40 <__alt_mem_onchip_memory2_0+0xfc00b980>
 40113f0:	00800244 	movi	r2,9
 40113f4:	14fc5336 	bltu	r2,r19,4010544 <__alt_mem_onchip_memory2_0+0xfc00b384>
 40113f8:	d8c02817 	ldw	r3,160(sp)
 40113fc:	dc001dc4 	addi	r16,sp,119
 4011400:	9cc00c04 	addi	r19,r19,48
 4011404:	1c07c83a 	sub	r3,r3,r16
 4011408:	dcc01dc5 	stb	r19,119(sp)
 401140c:	d8c02b15 	stw	r3,172(sp)
 4011410:	003cc606 	br	401072c <__alt_mem_onchip_memory2_0+0xfc00b56c>
 4011414:	d8803317 	ldw	r2,204(sp)
 4011418:	143fffc4 	addi	r16,r2,-1
 401141c:	043f4d0e 	bge	zero,r16,4011154 <__alt_mem_onchip_memory2_0+0xfc00bf94>
 4011420:	07000404 	movi	fp,16
 4011424:	e400810e 	bge	fp,r16,401162c <___vfprintf_internal_r+0x165c>
 4011428:	014100b4 	movhi	r5,1026
 401142c:	2977a184 	addi	r5,r5,-8570
 4011430:	d9402c15 	stw	r5,176(sp)
 4011434:	01c001c4 	movi	r7,7
 4011438:	dcc02d17 	ldw	r19,180(sp)
 401143c:	00000306 	br	401144c <___vfprintf_internal_r+0x147c>
 4011440:	b5800204 	addi	r22,r22,8
 4011444:	843ffc04 	addi	r16,r16,-16
 4011448:	e4007b0e 	bge	fp,r16,4011638 <___vfprintf_internal_r+0x1668>
 401144c:	18c00404 	addi	r3,r3,16
 4011450:	8c400044 	addi	r17,r17,1
 4011454:	b5000015 	stw	r20,0(r22)
 4011458:	b7000115 	stw	fp,4(r22)
 401145c:	d8c02015 	stw	r3,128(sp)
 4011460:	dc401f15 	stw	r17,124(sp)
 4011464:	3c7ff60e 	bge	r7,r17,4011440 <__alt_mem_onchip_memory2_0+0xfc00c280>
 4011468:	d9801e04 	addi	r6,sp,120
 401146c:	b80b883a 	mov	r5,r23
 4011470:	9809883a 	mov	r4,r19
 4011474:	d9c03c15 	stw	r7,240(sp)
 4011478:	40176c40 	call	40176c4 <__sprint_r>
 401147c:	d9c03c17 	ldw	r7,240(sp)
 4011480:	103bd71e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011484:	d8c02017 	ldw	r3,128(sp)
 4011488:	dc401f17 	ldw	r17,124(sp)
 401148c:	dd800404 	addi	r22,sp,16
 4011490:	003fec06 	br	4011444 <__alt_mem_onchip_memory2_0+0xfc00c284>
 4011494:	9080100c 	andi	r2,r18,64
 4011498:	d8002785 	stb	zero,158(sp)
 401149c:	10010e26 	beq	r2,zero,40118d8 <___vfprintf_internal_r+0x1908>
 40114a0:	d9402e17 	ldw	r5,184(sp)
 40114a4:	d8c02a17 	ldw	r3,168(sp)
 40114a8:	002d883a 	mov	r22,zero
 40114ac:	28800104 	addi	r2,r5,4
 40114b0:	2cc0000b 	ldhu	r19,0(r5)
 40114b4:	183fc90e 	bge	r3,zero,40113dc <__alt_mem_onchip_memory2_0+0xfc00c21c>
 40114b8:	d8802e15 	stw	r2,184(sp)
 40114bc:	0039883a 	mov	fp,zero
 40114c0:	9d84b03a 	or	r2,r19,r22
 40114c4:	103c1e1e 	bne	r2,zero,4010540 <__alt_mem_onchip_memory2_0+0xfc00b380>
 40114c8:	00800044 	movi	r2,1
 40114cc:	003e6c06 	br	4010e80 <__alt_mem_onchip_memory2_0+0xfc00bcc0>
 40114d0:	d9002d17 	ldw	r4,180(sp)
 40114d4:	d9801e04 	addi	r6,sp,120
 40114d8:	b80b883a 	mov	r5,r23
 40114dc:	40176c40 	call	40176c4 <__sprint_r>
 40114e0:	103bbf1e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 40114e4:	d8c02017 	ldw	r3,128(sp)
 40114e8:	da000404 	addi	r8,sp,16
 40114ec:	d9003217 	ldw	r4,200(sp)
 40114f0:	d8802617 	ldw	r2,152(sp)
 40114f4:	d9403317 	ldw	r5,204(sp)
 40114f8:	8123883a 	add	r17,r16,r4
 40114fc:	11400216 	blt	r2,r5,4011508 <___vfprintf_internal_r+0x1538>
 4011500:	9100004c 	andi	r4,r18,1
 4011504:	20000d26 	beq	r4,zero,401153c <___vfprintf_internal_r+0x156c>
 4011508:	d9003717 	ldw	r4,220(sp)
 401150c:	d9403417 	ldw	r5,208(sp)
 4011510:	1907883a 	add	r3,r3,r4
 4011514:	d9001f17 	ldw	r4,124(sp)
 4011518:	41400015 	stw	r5,0(r8)
 401151c:	d9403717 	ldw	r5,220(sp)
 4011520:	21000044 	addi	r4,r4,1
 4011524:	d8c02015 	stw	r3,128(sp)
 4011528:	41400115 	stw	r5,4(r8)
 401152c:	d9001f15 	stw	r4,124(sp)
 4011530:	014001c4 	movi	r5,7
 4011534:	2901e816 	blt	r5,r4,4011cd8 <___vfprintf_internal_r+0x1d08>
 4011538:	42000204 	addi	r8,r8,8
 401153c:	d9003317 	ldw	r4,204(sp)
 4011540:	8121883a 	add	r16,r16,r4
 4011544:	2085c83a 	sub	r2,r4,r2
 4011548:	8461c83a 	sub	r16,r16,r17
 401154c:	1400010e 	bge	r2,r16,4011554 <___vfprintf_internal_r+0x1584>
 4011550:	1021883a 	mov	r16,r2
 4011554:	04000a0e 	bge	zero,r16,4011580 <___vfprintf_internal_r+0x15b0>
 4011558:	d9001f17 	ldw	r4,124(sp)
 401155c:	1c07883a 	add	r3,r3,r16
 4011560:	44400015 	stw	r17,0(r8)
 4011564:	21000044 	addi	r4,r4,1
 4011568:	44000115 	stw	r16,4(r8)
 401156c:	d8c02015 	stw	r3,128(sp)
 4011570:	d9001f15 	stw	r4,124(sp)
 4011574:	014001c4 	movi	r5,7
 4011578:	2901fb16 	blt	r5,r4,4011d68 <___vfprintf_internal_r+0x1d98>
 401157c:	42000204 	addi	r8,r8,8
 4011580:	8001f716 	blt	r16,zero,4011d60 <___vfprintf_internal_r+0x1d90>
 4011584:	1421c83a 	sub	r16,r2,r16
 4011588:	043d160e 	bge	zero,r16,40109e4 <__alt_mem_onchip_memory2_0+0xfc00b824>
 401158c:	04400404 	movi	r17,16
 4011590:	d8801f17 	ldw	r2,124(sp)
 4011594:	8c3efb0e 	bge	r17,r16,4011184 <__alt_mem_onchip_memory2_0+0xfc00bfc4>
 4011598:	014100b4 	movhi	r5,1026
 401159c:	2977a184 	addi	r5,r5,-8570
 40115a0:	d9402c15 	stw	r5,176(sp)
 40115a4:	058001c4 	movi	r22,7
 40115a8:	dcc02d17 	ldw	r19,180(sp)
 40115ac:	00000306 	br	40115bc <___vfprintf_internal_r+0x15ec>
 40115b0:	42000204 	addi	r8,r8,8
 40115b4:	843ffc04 	addi	r16,r16,-16
 40115b8:	8c3ef50e 	bge	r17,r16,4011190 <__alt_mem_onchip_memory2_0+0xfc00bfd0>
 40115bc:	18c00404 	addi	r3,r3,16
 40115c0:	10800044 	addi	r2,r2,1
 40115c4:	45000015 	stw	r20,0(r8)
 40115c8:	44400115 	stw	r17,4(r8)
 40115cc:	d8c02015 	stw	r3,128(sp)
 40115d0:	d8801f15 	stw	r2,124(sp)
 40115d4:	b0bff60e 	bge	r22,r2,40115b0 <__alt_mem_onchip_memory2_0+0xfc00c3f0>
 40115d8:	d9801e04 	addi	r6,sp,120
 40115dc:	b80b883a 	mov	r5,r23
 40115e0:	9809883a 	mov	r4,r19
 40115e4:	40176c40 	call	40176c4 <__sprint_r>
 40115e8:	103b7d1e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 40115ec:	d8c02017 	ldw	r3,128(sp)
 40115f0:	d8801f17 	ldw	r2,124(sp)
 40115f4:	da000404 	addi	r8,sp,16
 40115f8:	003fee06 	br	40115b4 <__alt_mem_onchip_memory2_0+0xfc00c3f4>
 40115fc:	9088703a 	and	r4,r18,r2
 4011600:	203eab1e 	bne	r4,zero,40110b0 <__alt_mem_onchip_memory2_0+0xfc00bef0>
 4011604:	dc401f17 	ldw	r17,124(sp)
 4011608:	40800115 	stw	r2,4(r8)
 401160c:	44000015 	stw	r16,0(r8)
 4011610:	8c400044 	addi	r17,r17,1
 4011614:	d8c02015 	stw	r3,128(sp)
 4011618:	dc401f15 	stw	r17,124(sp)
 401161c:	008001c4 	movi	r2,7
 4011620:	14400e16 	blt	r2,r17,401165c <___vfprintf_internal_r+0x168c>
 4011624:	45800204 	addi	r22,r8,8
 4011628:	003eca06 	br	4011154 <__alt_mem_onchip_memory2_0+0xfc00bf94>
 401162c:	010100b4 	movhi	r4,1026
 4011630:	2137a184 	addi	r4,r4,-8570
 4011634:	d9002c15 	stw	r4,176(sp)
 4011638:	d8802c17 	ldw	r2,176(sp)
 401163c:	1c07883a 	add	r3,r3,r16
 4011640:	8c400044 	addi	r17,r17,1
 4011644:	b0800015 	stw	r2,0(r22)
 4011648:	b4000115 	stw	r16,4(r22)
 401164c:	d8c02015 	stw	r3,128(sp)
 4011650:	dc401f15 	stw	r17,124(sp)
 4011654:	008001c4 	movi	r2,7
 4011658:	147ebd0e 	bge	r2,r17,4011150 <__alt_mem_onchip_memory2_0+0xfc00bf90>
 401165c:	d9002d17 	ldw	r4,180(sp)
 4011660:	d9801e04 	addi	r6,sp,120
 4011664:	b80b883a 	mov	r5,r23
 4011668:	40176c40 	call	40176c4 <__sprint_r>
 401166c:	103b5c1e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011670:	d8c02017 	ldw	r3,128(sp)
 4011674:	dc401f17 	ldw	r17,124(sp)
 4011678:	dd800404 	addi	r22,sp,16
 401167c:	003eb506 	br	4011154 <__alt_mem_onchip_memory2_0+0xfc00bf94>
 4011680:	d9002d17 	ldw	r4,180(sp)
 4011684:	d9801e04 	addi	r6,sp,120
 4011688:	b80b883a 	mov	r5,r23
 401168c:	40176c40 	call	40176c4 <__sprint_r>
 4011690:	103b531e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011694:	d8c02017 	ldw	r3,128(sp)
 4011698:	dc401f17 	ldw	r17,124(sp)
 401169c:	da000404 	addi	r8,sp,16
 40116a0:	003e8d06 	br	40110d8 <__alt_mem_onchip_memory2_0+0xfc00bf18>
 40116a4:	d9002d17 	ldw	r4,180(sp)
 40116a8:	d9801e04 	addi	r6,sp,120
 40116ac:	b80b883a 	mov	r5,r23
 40116b0:	40176c40 	call	40176c4 <__sprint_r>
 40116b4:	103b4a1e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 40116b8:	d8c02017 	ldw	r3,128(sp)
 40116bc:	dc401f17 	ldw	r17,124(sp)
 40116c0:	dd800404 	addi	r22,sp,16
 40116c4:	003e8f06 	br	4011104 <__alt_mem_onchip_memory2_0+0xfc00bf44>
 40116c8:	0027883a 	mov	r19,zero
 40116cc:	003f4a06 	br	40113f8 <__alt_mem_onchip_memory2_0+0xfc00c238>
 40116d0:	d9002d17 	ldw	r4,180(sp)
 40116d4:	d9801e04 	addi	r6,sp,120
 40116d8:	b80b883a 	mov	r5,r23
 40116dc:	40176c40 	call	40176c4 <__sprint_r>
 40116e0:	103b3f1e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 40116e4:	d8c02017 	ldw	r3,128(sp)
 40116e8:	da000404 	addi	r8,sp,16
 40116ec:	003c7b06 	br	40108dc <__alt_mem_onchip_memory2_0+0xfc00b71c>
 40116f0:	d9402a17 	ldw	r5,168(sp)
 40116f4:	04e7c83a 	sub	r19,zero,r19
 40116f8:	07000b44 	movi	fp,45
 40116fc:	9804c03a 	cmpne	r2,r19,zero
 4011700:	05adc83a 	sub	r22,zero,r22
 4011704:	df002785 	stb	fp,158(sp)
 4011708:	b0adc83a 	sub	r22,r22,r2
 401170c:	28017b16 	blt	r5,zero,4011cfc <___vfprintf_internal_r+0x1d2c>
 4011710:	00bfdfc4 	movi	r2,-129
 4011714:	90a4703a 	and	r18,r18,r2
 4011718:	003b8906 	br	4010540 <__alt_mem_onchip_memory2_0+0xfc00b380>
 401171c:	d9003617 	ldw	r4,216(sp)
 4011720:	d9403817 	ldw	r5,224(sp)
 4011724:	da003d15 	stw	r8,244(sp)
 4011728:	40172e80 	call	40172e8 <__fpclassifyd>
 401172c:	da003d17 	ldw	r8,244(sp)
 4011730:	1000f026 	beq	r2,zero,4011af4 <___vfprintf_internal_r+0x1b24>
 4011734:	d9002a17 	ldw	r4,168(sp)
 4011738:	05bff7c4 	movi	r22,-33
 401173c:	00bfffc4 	movi	r2,-1
 4011740:	8dac703a 	and	r22,r17,r22
 4011744:	20820026 	beq	r4,r2,4011f48 <___vfprintf_internal_r+0x1f78>
 4011748:	008011c4 	movi	r2,71
 401174c:	b081f726 	beq	r22,r2,4011f2c <___vfprintf_internal_r+0x1f5c>
 4011750:	d9003817 	ldw	r4,224(sp)
 4011754:	90c04014 	ori	r3,r18,256
 4011758:	d8c02c15 	stw	r3,176(sp)
 401175c:	20021516 	blt	r4,zero,4011fb4 <___vfprintf_internal_r+0x1fe4>
 4011760:	dcc03817 	ldw	r19,224(sp)
 4011764:	d8002905 	stb	zero,164(sp)
 4011768:	00801984 	movi	r2,102
 401176c:	8881f926 	beq	r17,r2,4011f54 <___vfprintf_internal_r+0x1f84>
 4011770:	00801184 	movi	r2,70
 4011774:	88821c26 	beq	r17,r2,4011fe8 <___vfprintf_internal_r+0x2018>
 4011778:	00801144 	movi	r2,69
 401177c:	b081ef26 	beq	r22,r2,4011f3c <___vfprintf_internal_r+0x1f6c>
 4011780:	d8c02a17 	ldw	r3,168(sp)
 4011784:	d8802104 	addi	r2,sp,132
 4011788:	d8800315 	stw	r2,12(sp)
 401178c:	d9403617 	ldw	r5,216(sp)
 4011790:	d8802504 	addi	r2,sp,148
 4011794:	d9002d17 	ldw	r4,180(sp)
 4011798:	d8800215 	stw	r2,8(sp)
 401179c:	d8802604 	addi	r2,sp,152
 40117a0:	d8c00015 	stw	r3,0(sp)
 40117a4:	d8800115 	stw	r2,4(sp)
 40117a8:	01c00084 	movi	r7,2
 40117ac:	980d883a 	mov	r6,r19
 40117b0:	d8c03c15 	stw	r3,240(sp)
 40117b4:	da003d15 	stw	r8,244(sp)
 40117b8:	40127000 	call	4012700 <_dtoa_r>
 40117bc:	1021883a 	mov	r16,r2
 40117c0:	008019c4 	movi	r2,103
 40117c4:	d8c03c17 	ldw	r3,240(sp)
 40117c8:	da003d17 	ldw	r8,244(sp)
 40117cc:	88817126 	beq	r17,r2,4011d94 <___vfprintf_internal_r+0x1dc4>
 40117d0:	008011c4 	movi	r2,71
 40117d4:	88829126 	beq	r17,r2,401221c <___vfprintf_internal_r+0x224c>
 40117d8:	80f9883a 	add	fp,r16,r3
 40117dc:	d9003617 	ldw	r4,216(sp)
 40117e0:	000d883a 	mov	r6,zero
 40117e4:	000f883a 	mov	r7,zero
 40117e8:	980b883a 	mov	r5,r19
 40117ec:	da003d15 	stw	r8,244(sp)
 40117f0:	401ab840 	call	401ab84 <__eqdf2>
 40117f4:	da003d17 	ldw	r8,244(sp)
 40117f8:	10018d26 	beq	r2,zero,4011e30 <___vfprintf_internal_r+0x1e60>
 40117fc:	d8802117 	ldw	r2,132(sp)
 4011800:	1700062e 	bgeu	r2,fp,401181c <___vfprintf_internal_r+0x184c>
 4011804:	01000c04 	movi	r4,48
 4011808:	10c00044 	addi	r3,r2,1
 401180c:	d8c02115 	stw	r3,132(sp)
 4011810:	11000005 	stb	r4,0(r2)
 4011814:	d8802117 	ldw	r2,132(sp)
 4011818:	173ffb36 	bltu	r2,fp,4011808 <__alt_mem_onchip_memory2_0+0xfc00c648>
 401181c:	1405c83a 	sub	r2,r2,r16
 4011820:	d8803315 	stw	r2,204(sp)
 4011824:	008011c4 	movi	r2,71
 4011828:	b0817626 	beq	r22,r2,4011e04 <___vfprintf_internal_r+0x1e34>
 401182c:	00801944 	movi	r2,101
 4011830:	1442800e 	bge	r2,r17,4012234 <___vfprintf_internal_r+0x2264>
 4011834:	d8c02617 	ldw	r3,152(sp)
 4011838:	00801984 	movi	r2,102
 401183c:	d8c03215 	stw	r3,200(sp)
 4011840:	8881fe26 	beq	r17,r2,401203c <___vfprintf_internal_r+0x206c>
 4011844:	d8c03217 	ldw	r3,200(sp)
 4011848:	d9003317 	ldw	r4,204(sp)
 401184c:	1901dd16 	blt	r3,r4,4011fc4 <___vfprintf_internal_r+0x1ff4>
 4011850:	9480004c 	andi	r18,r18,1
 4011854:	90022b1e 	bne	r18,zero,4012104 <___vfprintf_internal_r+0x2134>
 4011858:	1805883a 	mov	r2,r3
 401185c:	18028316 	blt	r3,zero,401226c <___vfprintf_internal_r+0x229c>
 4011860:	d8c03217 	ldw	r3,200(sp)
 4011864:	044019c4 	movi	r17,103
 4011868:	d8c02b15 	stw	r3,172(sp)
 401186c:	df002907 	ldb	fp,164(sp)
 4011870:	e001531e 	bne	fp,zero,4011dc0 <___vfprintf_internal_r+0x1df0>
 4011874:	df002783 	ldbu	fp,158(sp)
 4011878:	d8802915 	stw	r2,164(sp)
 401187c:	dc802c17 	ldw	r18,176(sp)
 4011880:	d8002a15 	stw	zero,168(sp)
 4011884:	003baf06 	br	4010744 <__alt_mem_onchip_memory2_0+0xfc00b584>
 4011888:	d8c02e17 	ldw	r3,184(sp)
 401188c:	d9002e17 	ldw	r4,184(sp)
 4011890:	d9402e17 	ldw	r5,184(sp)
 4011894:	18c00017 	ldw	r3,0(r3)
 4011898:	21000117 	ldw	r4,4(r4)
 401189c:	29400204 	addi	r5,r5,8
 40118a0:	d8c03615 	stw	r3,216(sp)
 40118a4:	d9003815 	stw	r4,224(sp)
 40118a8:	d9402e15 	stw	r5,184(sp)
 40118ac:	003b5006 	br	40105f0 <__alt_mem_onchip_memory2_0+0xfc00b430>
 40118b0:	ac400007 	ldb	r17,0(r21)
 40118b4:	003a2806 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 40118b8:	9080100c 	andi	r2,r18,64
 40118bc:	1000a826 	beq	r2,zero,4011b60 <___vfprintf_internal_r+0x1b90>
 40118c0:	d8c02e17 	ldw	r3,184(sp)
 40118c4:	002d883a 	mov	r22,zero
 40118c8:	1cc0000b 	ldhu	r19,0(r3)
 40118cc:	18c00104 	addi	r3,r3,4
 40118d0:	d8c02e15 	stw	r3,184(sp)
 40118d4:	003caf06 	br	4010b94 <__alt_mem_onchip_memory2_0+0xfc00b9d4>
 40118d8:	d9002e17 	ldw	r4,184(sp)
 40118dc:	d9402a17 	ldw	r5,168(sp)
 40118e0:	002d883a 	mov	r22,zero
 40118e4:	20800104 	addi	r2,r4,4
 40118e8:	24c00017 	ldw	r19,0(r4)
 40118ec:	283ebb0e 	bge	r5,zero,40113dc <__alt_mem_onchip_memory2_0+0xfc00c21c>
 40118f0:	003ef106 	br	40114b8 <__alt_mem_onchip_memory2_0+0xfc00c2f8>
 40118f4:	9080040c 	andi	r2,r18,16
 40118f8:	1000921e 	bne	r2,zero,4011b44 <___vfprintf_internal_r+0x1b74>
 40118fc:	9480100c 	andi	r18,r18,64
 4011900:	90013926 	beq	r18,zero,4011de8 <___vfprintf_internal_r+0x1e18>
 4011904:	d9402e17 	ldw	r5,184(sp)
 4011908:	d8c02f17 	ldw	r3,188(sp)
 401190c:	28800017 	ldw	r2,0(r5)
 4011910:	29400104 	addi	r5,r5,4
 4011914:	d9402e15 	stw	r5,184(sp)
 4011918:	10c0000d 	sth	r3,0(r2)
 401191c:	0039e406 	br	40100b0 <__alt_mem_onchip_memory2_0+0xfc00aef0>
 4011920:	9080100c 	andi	r2,r18,64
 4011924:	10008026 	beq	r2,zero,4011b28 <___vfprintf_internal_r+0x1b58>
 4011928:	d8802e17 	ldw	r2,184(sp)
 401192c:	14c0000f 	ldh	r19,0(r2)
 4011930:	10800104 	addi	r2,r2,4
 4011934:	d8802e15 	stw	r2,184(sp)
 4011938:	982dd7fa 	srai	r22,r19,31
 401193c:	b005883a 	mov	r2,r22
 4011940:	003af706 	br	4010520 <__alt_mem_onchip_memory2_0+0xfc00b360>
 4011944:	9080100c 	andi	r2,r18,64
 4011948:	d8002785 	stb	zero,158(sp)
 401194c:	10008a1e 	bne	r2,zero,4011b78 <___vfprintf_internal_r+0x1ba8>
 4011950:	d9002e17 	ldw	r4,184(sp)
 4011954:	d9402a17 	ldw	r5,168(sp)
 4011958:	002d883a 	mov	r22,zero
 401195c:	20800104 	addi	r2,r4,4
 4011960:	24c00017 	ldw	r19,0(r4)
 4011964:	283e4b0e 	bge	r5,zero,4011294 <__alt_mem_onchip_memory2_0+0xfc00c0d4>
 4011968:	9d86b03a 	or	r3,r19,r22
 401196c:	d8802e15 	stw	r2,184(sp)
 4011970:	183e4c1e 	bne	r3,zero,40112a4 <__alt_mem_onchip_memory2_0+0xfc00c0e4>
 4011974:	0039883a 	mov	fp,zero
 4011978:	0005883a 	mov	r2,zero
 401197c:	003d4006 	br	4010e80 <__alt_mem_onchip_memory2_0+0xfc00bcc0>
 4011980:	014100b4 	movhi	r5,1026
 4011984:	2977a184 	addi	r5,r5,-8570
 4011988:	d9402c15 	stw	r5,176(sp)
 401198c:	d9402c17 	ldw	r5,176(sp)
 4011990:	1c47883a 	add	r3,r3,r17
 4011994:	10800044 	addi	r2,r2,1
 4011998:	41400015 	stw	r5,0(r8)
 401199c:	44400115 	stw	r17,4(r8)
 40119a0:	d8c02015 	stw	r3,128(sp)
 40119a4:	d8801f15 	stw	r2,124(sp)
 40119a8:	010001c4 	movi	r4,7
 40119ac:	20bec816 	blt	r4,r2,40114d0 <__alt_mem_onchip_memory2_0+0xfc00c310>
 40119b0:	42000204 	addi	r8,r8,8
 40119b4:	003ecd06 	br	40114ec <__alt_mem_onchip_memory2_0+0xfc00c32c>
 40119b8:	d9002a17 	ldw	r4,168(sp)
 40119bc:	d8002785 	stb	zero,158(sp)
 40119c0:	203d2d16 	blt	r4,zero,4010e78 <__alt_mem_onchip_memory2_0+0xfc00bcb8>
 40119c4:	00bfdfc4 	movi	r2,-129
 40119c8:	90a4703a 	and	r18,r18,r2
 40119cc:	003a6106 	br	4010354 <__alt_mem_onchip_memory2_0+0xfc00b194>
 40119d0:	010100b4 	movhi	r4,1026
 40119d4:	2137a184 	addi	r4,r4,-8570
 40119d8:	d9002c15 	stw	r4,176(sp)
 40119dc:	003bea06 	br	4010988 <__alt_mem_onchip_memory2_0+0xfc00b7c8>
 40119e0:	d9002d17 	ldw	r4,180(sp)
 40119e4:	d9801e04 	addi	r6,sp,120
 40119e8:	b80b883a 	mov	r5,r23
 40119ec:	40176c40 	call	40176c4 <__sprint_r>
 40119f0:	103a7b1e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 40119f4:	d8c02017 	ldw	r3,128(sp)
 40119f8:	da000404 	addi	r8,sp,16
 40119fc:	003d4106 	br	4010f04 <__alt_mem_onchip_memory2_0+0xfc00bd44>
 4011a00:	d8801f17 	ldw	r2,124(sp)
 4011a04:	014100b4 	movhi	r5,1026
 4011a08:	01000044 	movi	r4,1
 4011a0c:	18c00044 	addi	r3,r3,1
 4011a10:	10800044 	addi	r2,r2,1
 4011a14:	2977a104 	addi	r5,r5,-8572
 4011a18:	41000115 	stw	r4,4(r8)
 4011a1c:	41400015 	stw	r5,0(r8)
 4011a20:	d8c02015 	stw	r3,128(sp)
 4011a24:	d8801f15 	stw	r2,124(sp)
 4011a28:	010001c4 	movi	r4,7
 4011a2c:	20805c16 	blt	r4,r2,4011ba0 <___vfprintf_internal_r+0x1bd0>
 4011a30:	42000204 	addi	r8,r8,8
 4011a34:	8800041e 	bne	r17,zero,4011a48 <___vfprintf_internal_r+0x1a78>
 4011a38:	d8803317 	ldw	r2,204(sp)
 4011a3c:	1000021e 	bne	r2,zero,4011a48 <___vfprintf_internal_r+0x1a78>
 4011a40:	9080004c 	andi	r2,r18,1
 4011a44:	103be726 	beq	r2,zero,40109e4 <__alt_mem_onchip_memory2_0+0xfc00b824>
 4011a48:	d9003717 	ldw	r4,220(sp)
 4011a4c:	d8801f17 	ldw	r2,124(sp)
 4011a50:	d9403417 	ldw	r5,208(sp)
 4011a54:	20c7883a 	add	r3,r4,r3
 4011a58:	10800044 	addi	r2,r2,1
 4011a5c:	41000115 	stw	r4,4(r8)
 4011a60:	41400015 	stw	r5,0(r8)
 4011a64:	d8c02015 	stw	r3,128(sp)
 4011a68:	d8801f15 	stw	r2,124(sp)
 4011a6c:	010001c4 	movi	r4,7
 4011a70:	20812116 	blt	r4,r2,4011ef8 <___vfprintf_internal_r+0x1f28>
 4011a74:	42000204 	addi	r8,r8,8
 4011a78:	0463c83a 	sub	r17,zero,r17
 4011a7c:	0440730e 	bge	zero,r17,4011c4c <___vfprintf_internal_r+0x1c7c>
 4011a80:	05800404 	movi	r22,16
 4011a84:	b440860e 	bge	r22,r17,4011ca0 <___vfprintf_internal_r+0x1cd0>
 4011a88:	014100b4 	movhi	r5,1026
 4011a8c:	2977a184 	addi	r5,r5,-8570
 4011a90:	d9402c15 	stw	r5,176(sp)
 4011a94:	070001c4 	movi	fp,7
 4011a98:	dcc02d17 	ldw	r19,180(sp)
 4011a9c:	00000306 	br	4011aac <___vfprintf_internal_r+0x1adc>
 4011aa0:	42000204 	addi	r8,r8,8
 4011aa4:	8c7ffc04 	addi	r17,r17,-16
 4011aa8:	b440800e 	bge	r22,r17,4011cac <___vfprintf_internal_r+0x1cdc>
 4011aac:	18c00404 	addi	r3,r3,16
 4011ab0:	10800044 	addi	r2,r2,1
 4011ab4:	45000015 	stw	r20,0(r8)
 4011ab8:	45800115 	stw	r22,4(r8)
 4011abc:	d8c02015 	stw	r3,128(sp)
 4011ac0:	d8801f15 	stw	r2,124(sp)
 4011ac4:	e0bff60e 	bge	fp,r2,4011aa0 <__alt_mem_onchip_memory2_0+0xfc00c8e0>
 4011ac8:	d9801e04 	addi	r6,sp,120
 4011acc:	b80b883a 	mov	r5,r23
 4011ad0:	9809883a 	mov	r4,r19
 4011ad4:	40176c40 	call	40176c4 <__sprint_r>
 4011ad8:	103a411e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011adc:	d8c02017 	ldw	r3,128(sp)
 4011ae0:	d8801f17 	ldw	r2,124(sp)
 4011ae4:	da000404 	addi	r8,sp,16
 4011ae8:	003fee06 	br	4011aa4 <__alt_mem_onchip_memory2_0+0xfc00c8e4>
 4011aec:	00bfffc4 	movi	r2,-1
 4011af0:	003a3f06 	br	40103f0 <__alt_mem_onchip_memory2_0+0xfc00b230>
 4011af4:	008011c4 	movi	r2,71
 4011af8:	1440b816 	blt	r2,r17,4011ddc <___vfprintf_internal_r+0x1e0c>
 4011afc:	040100b4 	movhi	r16,1026
 4011b00:	84379304 	addi	r16,r16,-8628
 4011b04:	00c000c4 	movi	r3,3
 4011b08:	00bfdfc4 	movi	r2,-129
 4011b0c:	d8c02915 	stw	r3,164(sp)
 4011b10:	90a4703a 	and	r18,r18,r2
 4011b14:	df002783 	ldbu	fp,158(sp)
 4011b18:	d8c02b15 	stw	r3,172(sp)
 4011b1c:	d8002a15 	stw	zero,168(sp)
 4011b20:	d8003215 	stw	zero,200(sp)
 4011b24:	003b0706 	br	4010744 <__alt_mem_onchip_memory2_0+0xfc00b584>
 4011b28:	d8c02e17 	ldw	r3,184(sp)
 4011b2c:	1cc00017 	ldw	r19,0(r3)
 4011b30:	18c00104 	addi	r3,r3,4
 4011b34:	d8c02e15 	stw	r3,184(sp)
 4011b38:	982dd7fa 	srai	r22,r19,31
 4011b3c:	b005883a 	mov	r2,r22
 4011b40:	003a7706 	br	4010520 <__alt_mem_onchip_memory2_0+0xfc00b360>
 4011b44:	d8c02e17 	ldw	r3,184(sp)
 4011b48:	d9002f17 	ldw	r4,188(sp)
 4011b4c:	18800017 	ldw	r2,0(r3)
 4011b50:	18c00104 	addi	r3,r3,4
 4011b54:	d8c02e15 	stw	r3,184(sp)
 4011b58:	11000015 	stw	r4,0(r2)
 4011b5c:	00395406 	br	40100b0 <__alt_mem_onchip_memory2_0+0xfc00aef0>
 4011b60:	d9002e17 	ldw	r4,184(sp)
 4011b64:	002d883a 	mov	r22,zero
 4011b68:	24c00017 	ldw	r19,0(r4)
 4011b6c:	21000104 	addi	r4,r4,4
 4011b70:	d9002e15 	stw	r4,184(sp)
 4011b74:	003c0706 	br	4010b94 <__alt_mem_onchip_memory2_0+0xfc00b9d4>
 4011b78:	d9402e17 	ldw	r5,184(sp)
 4011b7c:	d8c02a17 	ldw	r3,168(sp)
 4011b80:	002d883a 	mov	r22,zero
 4011b84:	28800104 	addi	r2,r5,4
 4011b88:	2cc0000b 	ldhu	r19,0(r5)
 4011b8c:	183dc10e 	bge	r3,zero,4011294 <__alt_mem_onchip_memory2_0+0xfc00c0d4>
 4011b90:	003f7506 	br	4011968 <__alt_mem_onchip_memory2_0+0xfc00c7a8>
 4011b94:	040100b4 	movhi	r16,1026
 4011b98:	84379104 	addi	r16,r16,-8636
 4011b9c:	003aa706 	br	401063c <__alt_mem_onchip_memory2_0+0xfc00b47c>
 4011ba0:	d9002d17 	ldw	r4,180(sp)
 4011ba4:	d9801e04 	addi	r6,sp,120
 4011ba8:	b80b883a 	mov	r5,r23
 4011bac:	40176c40 	call	40176c4 <__sprint_r>
 4011bb0:	103a0b1e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011bb4:	dc402617 	ldw	r17,152(sp)
 4011bb8:	d8c02017 	ldw	r3,128(sp)
 4011bbc:	da000404 	addi	r8,sp,16
 4011bc0:	003f9c06 	br	4011a34 <__alt_mem_onchip_memory2_0+0xfc00c874>
 4011bc4:	ac400043 	ldbu	r17,1(r21)
 4011bc8:	84000814 	ori	r16,r16,32
 4011bcc:	ad400044 	addi	r21,r21,1
 4011bd0:	8c403fcc 	andi	r17,r17,255
 4011bd4:	8c40201c 	xori	r17,r17,128
 4011bd8:	8c7fe004 	addi	r17,r17,-128
 4011bdc:	00395e06 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 4011be0:	d8c02e15 	stw	r3,184(sp)
 4011be4:	0039883a 	mov	fp,zero
 4011be8:	003e3506 	br	40114c0 <__alt_mem_onchip_memory2_0+0xfc00c300>
 4011bec:	d9002d17 	ldw	r4,180(sp)
 4011bf0:	d9801e04 	addi	r6,sp,120
 4011bf4:	b80b883a 	mov	r5,r23
 4011bf8:	40176c40 	call	40176c4 <__sprint_r>
 4011bfc:	1039f81e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011c00:	d8c02017 	ldw	r3,128(sp)
 4011c04:	da000404 	addi	r8,sp,16
 4011c08:	003cd006 	br	4010f4c <__alt_mem_onchip_memory2_0+0xfc00bd8c>
 4011c0c:	8009883a 	mov	r4,r16
 4011c10:	df003d15 	stw	fp,244(sp)
 4011c14:	400fee00 	call	400fee0 <strlen>
 4011c18:	d8802b15 	stw	r2,172(sp)
 4011c1c:	da003d17 	ldw	r8,244(sp)
 4011c20:	103c200e 	bge	r2,zero,4010ca4 <__alt_mem_onchip_memory2_0+0xfc00bae4>
 4011c24:	0005883a 	mov	r2,zero
 4011c28:	003c1e06 	br	4010ca4 <__alt_mem_onchip_memory2_0+0xfc00bae4>
 4011c2c:	d9002d17 	ldw	r4,180(sp)
 4011c30:	d9801e04 	addi	r6,sp,120
 4011c34:	b80b883a 	mov	r5,r23
 4011c38:	40176c40 	call	40176c4 <__sprint_r>
 4011c3c:	1039e81e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011c40:	d8c02017 	ldw	r3,128(sp)
 4011c44:	d8801f17 	ldw	r2,124(sp)
 4011c48:	da000404 	addi	r8,sp,16
 4011c4c:	d9403317 	ldw	r5,204(sp)
 4011c50:	10800044 	addi	r2,r2,1
 4011c54:	44000015 	stw	r16,0(r8)
 4011c58:	28c7883a 	add	r3,r5,r3
 4011c5c:	003b5b06 	br	40109cc <__alt_mem_onchip_memory2_0+0xfc00b80c>
 4011c60:	010100b4 	movhi	r4,1026
 4011c64:	2137a584 	addi	r4,r4,-8554
 4011c68:	d9003515 	stw	r4,212(sp)
 4011c6c:	003af206 	br	4010838 <__alt_mem_onchip_memory2_0+0xfc00b678>
 4011c70:	013fffc4 	movi	r4,-1
 4011c74:	003a0806 	br	4010498 <__alt_mem_onchip_memory2_0+0xfc00b2d8>
 4011c78:	0023883a 	mov	r17,zero
 4011c7c:	003d9d06 	br	40112f4 <__alt_mem_onchip_memory2_0+0xfc00c134>
 4011c80:	d9002d17 	ldw	r4,180(sp)
 4011c84:	d9801e04 	addi	r6,sp,120
 4011c88:	b80b883a 	mov	r5,r23
 4011c8c:	40176c40 	call	40176c4 <__sprint_r>
 4011c90:	1039d31e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011c94:	d8c02017 	ldw	r3,128(sp)
 4011c98:	da000404 	addi	r8,sp,16
 4011c9c:	003d9406 	br	40112f0 <__alt_mem_onchip_memory2_0+0xfc00c130>
 4011ca0:	010100b4 	movhi	r4,1026
 4011ca4:	2137a184 	addi	r4,r4,-8570
 4011ca8:	d9002c15 	stw	r4,176(sp)
 4011cac:	d9002c17 	ldw	r4,176(sp)
 4011cb0:	1c47883a 	add	r3,r3,r17
 4011cb4:	10800044 	addi	r2,r2,1
 4011cb8:	41000015 	stw	r4,0(r8)
 4011cbc:	44400115 	stw	r17,4(r8)
 4011cc0:	d8c02015 	stw	r3,128(sp)
 4011cc4:	d8801f15 	stw	r2,124(sp)
 4011cc8:	010001c4 	movi	r4,7
 4011ccc:	20bfd716 	blt	r4,r2,4011c2c <__alt_mem_onchip_memory2_0+0xfc00ca6c>
 4011cd0:	42000204 	addi	r8,r8,8
 4011cd4:	003fdd06 	br	4011c4c <__alt_mem_onchip_memory2_0+0xfc00ca8c>
 4011cd8:	d9002d17 	ldw	r4,180(sp)
 4011cdc:	d9801e04 	addi	r6,sp,120
 4011ce0:	b80b883a 	mov	r5,r23
 4011ce4:	40176c40 	call	40176c4 <__sprint_r>
 4011ce8:	1039bd1e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011cec:	d8802617 	ldw	r2,152(sp)
 4011cf0:	d8c02017 	ldw	r3,128(sp)
 4011cf4:	da000404 	addi	r8,sp,16
 4011cf8:	003e1006 	br	401153c <__alt_mem_onchip_memory2_0+0xfc00c37c>
 4011cfc:	00800044 	movi	r2,1
 4011d00:	10803fcc 	andi	r2,r2,255
 4011d04:	00c00044 	movi	r3,1
 4011d08:	10fa0d26 	beq	r2,r3,4010540 <__alt_mem_onchip_memory2_0+0xfc00b380>
 4011d0c:	00c00084 	movi	r3,2
 4011d10:	10fbaf26 	beq	r2,r3,4010bd0 <__alt_mem_onchip_memory2_0+0xfc00ba10>
 4011d14:	003a6d06 	br	40106cc <__alt_mem_onchip_memory2_0+0xfc00b50c>
 4011d18:	010100b4 	movhi	r4,1026
 4011d1c:	2137a584 	addi	r4,r4,-8554
 4011d20:	d9003515 	stw	r4,212(sp)
 4011d24:	003b5406 	br	4010a78 <__alt_mem_onchip_memory2_0+0xfc00b8b8>
 4011d28:	d8802a17 	ldw	r2,168(sp)
 4011d2c:	00c00184 	movi	r3,6
 4011d30:	1880012e 	bgeu	r3,r2,4011d38 <___vfprintf_internal_r+0x1d68>
 4011d34:	1805883a 	mov	r2,r3
 4011d38:	d8802b15 	stw	r2,172(sp)
 4011d3c:	1000ef16 	blt	r2,zero,40120fc <___vfprintf_internal_r+0x212c>
 4011d40:	040100b4 	movhi	r16,1026
 4011d44:	d8802915 	stw	r2,164(sp)
 4011d48:	dcc02e15 	stw	r19,184(sp)
 4011d4c:	d8002a15 	stw	zero,168(sp)
 4011d50:	d8003215 	stw	zero,200(sp)
 4011d54:	84379f04 	addi	r16,r16,-8580
 4011d58:	0039883a 	mov	fp,zero
 4011d5c:	003a8006 	br	4010760 <__alt_mem_onchip_memory2_0+0xfc00b5a0>
 4011d60:	0021883a 	mov	r16,zero
 4011d64:	003e0706 	br	4011584 <__alt_mem_onchip_memory2_0+0xfc00c3c4>
 4011d68:	d9002d17 	ldw	r4,180(sp)
 4011d6c:	d9801e04 	addi	r6,sp,120
 4011d70:	b80b883a 	mov	r5,r23
 4011d74:	40176c40 	call	40176c4 <__sprint_r>
 4011d78:	1039991e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011d7c:	d8802617 	ldw	r2,152(sp)
 4011d80:	d9403317 	ldw	r5,204(sp)
 4011d84:	d8c02017 	ldw	r3,128(sp)
 4011d88:	da000404 	addi	r8,sp,16
 4011d8c:	2885c83a 	sub	r2,r5,r2
 4011d90:	003dfb06 	br	4011580 <__alt_mem_onchip_memory2_0+0xfc00c3c0>
 4011d94:	9080004c 	andi	r2,r18,1
 4011d98:	103e8f1e 	bne	r2,zero,40117d8 <__alt_mem_onchip_memory2_0+0xfc00c618>
 4011d9c:	d8802117 	ldw	r2,132(sp)
 4011da0:	003e9e06 	br	401181c <__alt_mem_onchip_memory2_0+0xfc00c65c>
 4011da4:	1025883a 	mov	r18,r2
 4011da8:	0039883a 	mov	fp,zero
 4011dac:	00800084 	movi	r2,2
 4011db0:	003fd306 	br	4011d00 <__alt_mem_onchip_memory2_0+0xfc00cb40>
 4011db4:	07000b44 	movi	fp,45
 4011db8:	df002785 	stb	fp,158(sp)
 4011dbc:	003a1b06 	br	401062c <__alt_mem_onchip_memory2_0+0xfc00b46c>
 4011dc0:	00c00b44 	movi	r3,45
 4011dc4:	d8c02785 	stb	r3,158(sp)
 4011dc8:	d8802915 	stw	r2,164(sp)
 4011dcc:	dc802c17 	ldw	r18,176(sp)
 4011dd0:	d8002a15 	stw	zero,168(sp)
 4011dd4:	07000b44 	movi	fp,45
 4011dd8:	003a5e06 	br	4010754 <__alt_mem_onchip_memory2_0+0xfc00b594>
 4011ddc:	040100b4 	movhi	r16,1026
 4011de0:	84379404 	addi	r16,r16,-8624
 4011de4:	003f4706 	br	4011b04 <__alt_mem_onchip_memory2_0+0xfc00c944>
 4011de8:	d9002e17 	ldw	r4,184(sp)
 4011dec:	d9402f17 	ldw	r5,188(sp)
 4011df0:	20800017 	ldw	r2,0(r4)
 4011df4:	21000104 	addi	r4,r4,4
 4011df8:	d9002e15 	stw	r4,184(sp)
 4011dfc:	11400015 	stw	r5,0(r2)
 4011e00:	0038ab06 	br	40100b0 <__alt_mem_onchip_memory2_0+0xfc00aef0>
 4011e04:	dd802617 	ldw	r22,152(sp)
 4011e08:	00bfff44 	movi	r2,-3
 4011e0c:	b0801c16 	blt	r22,r2,4011e80 <___vfprintf_internal_r+0x1eb0>
 4011e10:	d9402a17 	ldw	r5,168(sp)
 4011e14:	2d801a16 	blt	r5,r22,4011e80 <___vfprintf_internal_r+0x1eb0>
 4011e18:	dd803215 	stw	r22,200(sp)
 4011e1c:	003e8906 	br	4011844 <__alt_mem_onchip_memory2_0+0xfc00c684>
 4011e20:	010100b4 	movhi	r4,1026
 4011e24:	2137a184 	addi	r4,r4,-8570
 4011e28:	d9002c15 	stw	r4,176(sp)
 4011e2c:	003c9106 	br	4011074 <__alt_mem_onchip_memory2_0+0xfc00beb4>
 4011e30:	e005883a 	mov	r2,fp
 4011e34:	003e7906 	br	401181c <__alt_mem_onchip_memory2_0+0xfc00c65c>
 4011e38:	d9002a17 	ldw	r4,168(sp)
 4011e3c:	df002783 	ldbu	fp,158(sp)
 4011e40:	dcc02e15 	stw	r19,184(sp)
 4011e44:	d9002915 	stw	r4,164(sp)
 4011e48:	d9002b15 	stw	r4,172(sp)
 4011e4c:	d8002a15 	stw	zero,168(sp)
 4011e50:	d8003215 	stw	zero,200(sp)
 4011e54:	003a3b06 	br	4010744 <__alt_mem_onchip_memory2_0+0xfc00b584>
 4011e58:	9080004c 	andi	r2,r18,1
 4011e5c:	0039883a 	mov	fp,zero
 4011e60:	10000426 	beq	r2,zero,4011e74 <___vfprintf_internal_r+0x1ea4>
 4011e64:	00800c04 	movi	r2,48
 4011e68:	dc001dc4 	addi	r16,sp,119
 4011e6c:	d8801dc5 	stb	r2,119(sp)
 4011e70:	003b6406 	br	4010c04 <__alt_mem_onchip_memory2_0+0xfc00ba44>
 4011e74:	d8002b15 	stw	zero,172(sp)
 4011e78:	dc001e04 	addi	r16,sp,120
 4011e7c:	003a2b06 	br	401072c <__alt_mem_onchip_memory2_0+0xfc00b56c>
 4011e80:	8c7fff84 	addi	r17,r17,-2
 4011e84:	b5bfffc4 	addi	r22,r22,-1
 4011e88:	dd802615 	stw	r22,152(sp)
 4011e8c:	dc4022c5 	stb	r17,139(sp)
 4011e90:	b000bf16 	blt	r22,zero,4012190 <___vfprintf_internal_r+0x21c0>
 4011e94:	00800ac4 	movi	r2,43
 4011e98:	d8802305 	stb	r2,140(sp)
 4011e9c:	00800244 	movi	r2,9
 4011ea0:	15807016 	blt	r2,r22,4012064 <___vfprintf_internal_r+0x2094>
 4011ea4:	00800c04 	movi	r2,48
 4011ea8:	b5800c04 	addi	r22,r22,48
 4011eac:	d8802345 	stb	r2,141(sp)
 4011eb0:	dd802385 	stb	r22,142(sp)
 4011eb4:	d88023c4 	addi	r2,sp,143
 4011eb8:	df0022c4 	addi	fp,sp,139
 4011ebc:	d8c03317 	ldw	r3,204(sp)
 4011ec0:	1739c83a 	sub	fp,r2,fp
 4011ec4:	d9003317 	ldw	r4,204(sp)
 4011ec8:	e0c7883a 	add	r3,fp,r3
 4011ecc:	df003a15 	stw	fp,232(sp)
 4011ed0:	d8c02b15 	stw	r3,172(sp)
 4011ed4:	00800044 	movi	r2,1
 4011ed8:	1100b30e 	bge	r2,r4,40121a8 <___vfprintf_internal_r+0x21d8>
 4011edc:	d8c02b17 	ldw	r3,172(sp)
 4011ee0:	18c00044 	addi	r3,r3,1
 4011ee4:	d8c02b15 	stw	r3,172(sp)
 4011ee8:	1805883a 	mov	r2,r3
 4011eec:	1800ac16 	blt	r3,zero,40121a0 <___vfprintf_internal_r+0x21d0>
 4011ef0:	d8003215 	stw	zero,200(sp)
 4011ef4:	003e5d06 	br	401186c <__alt_mem_onchip_memory2_0+0xfc00c6ac>
 4011ef8:	d9002d17 	ldw	r4,180(sp)
 4011efc:	d9801e04 	addi	r6,sp,120
 4011f00:	b80b883a 	mov	r5,r23
 4011f04:	40176c40 	call	40176c4 <__sprint_r>
 4011f08:	1039351e 	bne	r2,zero,40103e0 <__alt_mem_onchip_memory2_0+0xfc00b220>
 4011f0c:	dc402617 	ldw	r17,152(sp)
 4011f10:	d8c02017 	ldw	r3,128(sp)
 4011f14:	d8801f17 	ldw	r2,124(sp)
 4011f18:	da000404 	addi	r8,sp,16
 4011f1c:	003ed606 	br	4011a78 <__alt_mem_onchip_memory2_0+0xfc00c8b8>
 4011f20:	182b883a 	mov	r21,r3
 4011f24:	d8002a15 	stw	zero,168(sp)
 4011f28:	00388c06 	br	401015c <__alt_mem_onchip_memory2_0+0xfc00af9c>
 4011f2c:	d8802a17 	ldw	r2,168(sp)
 4011f30:	103e071e 	bne	r2,zero,4011750 <__alt_mem_onchip_memory2_0+0xfc00c590>
 4011f34:	dc002a15 	stw	r16,168(sp)
 4011f38:	003e0506 	br	4011750 <__alt_mem_onchip_memory2_0+0xfc00c590>
 4011f3c:	d9002a17 	ldw	r4,168(sp)
 4011f40:	20c00044 	addi	r3,r4,1
 4011f44:	003e0f06 	br	4011784 <__alt_mem_onchip_memory2_0+0xfc00c5c4>
 4011f48:	01400184 	movi	r5,6
 4011f4c:	d9402a15 	stw	r5,168(sp)
 4011f50:	003dff06 	br	4011750 <__alt_mem_onchip_memory2_0+0xfc00c590>
 4011f54:	d8802104 	addi	r2,sp,132
 4011f58:	d8800315 	stw	r2,12(sp)
 4011f5c:	d8802504 	addi	r2,sp,148
 4011f60:	d8800215 	stw	r2,8(sp)
 4011f64:	d8802604 	addi	r2,sp,152
 4011f68:	d8800115 	stw	r2,4(sp)
 4011f6c:	d8802a17 	ldw	r2,168(sp)
 4011f70:	d9403617 	ldw	r5,216(sp)
 4011f74:	d9002d17 	ldw	r4,180(sp)
 4011f78:	d8800015 	stw	r2,0(sp)
 4011f7c:	01c000c4 	movi	r7,3
 4011f80:	980d883a 	mov	r6,r19
 4011f84:	da003d15 	stw	r8,244(sp)
 4011f88:	40127000 	call	4012700 <_dtoa_r>
 4011f8c:	d8c02a17 	ldw	r3,168(sp)
 4011f90:	da003d17 	ldw	r8,244(sp)
 4011f94:	1021883a 	mov	r16,r2
 4011f98:	10f9883a 	add	fp,r2,r3
 4011f9c:	81000007 	ldb	r4,0(r16)
 4011fa0:	00800c04 	movi	r2,48
 4011fa4:	20805e26 	beq	r4,r2,4012120 <___vfprintf_internal_r+0x2150>
 4011fa8:	d8c02617 	ldw	r3,152(sp)
 4011fac:	e0f9883a 	add	fp,fp,r3
 4011fb0:	003e0a06 	br	40117dc <__alt_mem_onchip_memory2_0+0xfc00c61c>
 4011fb4:	00c00b44 	movi	r3,45
 4011fb8:	24e0003c 	xorhi	r19,r4,32768
 4011fbc:	d8c02905 	stb	r3,164(sp)
 4011fc0:	003de906 	br	4011768 <__alt_mem_onchip_memory2_0+0xfc00c5a8>
 4011fc4:	d8c03217 	ldw	r3,200(sp)
 4011fc8:	00c07a0e 	bge	zero,r3,40121b4 <___vfprintf_internal_r+0x21e4>
 4011fcc:	00800044 	movi	r2,1
 4011fd0:	d9003317 	ldw	r4,204(sp)
 4011fd4:	1105883a 	add	r2,r2,r4
 4011fd8:	d8802b15 	stw	r2,172(sp)
 4011fdc:	10004e16 	blt	r2,zero,4012118 <___vfprintf_internal_r+0x2148>
 4011fe0:	044019c4 	movi	r17,103
 4011fe4:	003e2106 	br	401186c <__alt_mem_onchip_memory2_0+0xfc00c6ac>
 4011fe8:	d9002a17 	ldw	r4,168(sp)
 4011fec:	d8802104 	addi	r2,sp,132
 4011ff0:	d8800315 	stw	r2,12(sp)
 4011ff4:	d9000015 	stw	r4,0(sp)
 4011ff8:	d8802504 	addi	r2,sp,148
 4011ffc:	d9403617 	ldw	r5,216(sp)
 4012000:	d9002d17 	ldw	r4,180(sp)
 4012004:	d8800215 	stw	r2,8(sp)
 4012008:	d8802604 	addi	r2,sp,152
 401200c:	d8800115 	stw	r2,4(sp)
 4012010:	01c000c4 	movi	r7,3
 4012014:	980d883a 	mov	r6,r19
 4012018:	da003d15 	stw	r8,244(sp)
 401201c:	40127000 	call	4012700 <_dtoa_r>
 4012020:	d8c02a17 	ldw	r3,168(sp)
 4012024:	da003d17 	ldw	r8,244(sp)
 4012028:	1021883a 	mov	r16,r2
 401202c:	00801184 	movi	r2,70
 4012030:	80f9883a 	add	fp,r16,r3
 4012034:	88bfd926 	beq	r17,r2,4011f9c <__alt_mem_onchip_memory2_0+0xfc00cddc>
 4012038:	003de806 	br	40117dc <__alt_mem_onchip_memory2_0+0xfc00c61c>
 401203c:	d9002a17 	ldw	r4,168(sp)
 4012040:	00c04d0e 	bge	zero,r3,4012178 <___vfprintf_internal_r+0x21a8>
 4012044:	2000441e 	bne	r4,zero,4012158 <___vfprintf_internal_r+0x2188>
 4012048:	9480004c 	andi	r18,r18,1
 401204c:	9000421e 	bne	r18,zero,4012158 <___vfprintf_internal_r+0x2188>
 4012050:	1805883a 	mov	r2,r3
 4012054:	18006f16 	blt	r3,zero,4012214 <___vfprintf_internal_r+0x2244>
 4012058:	d8c03217 	ldw	r3,200(sp)
 401205c:	d8c02b15 	stw	r3,172(sp)
 4012060:	003e0206 	br	401186c <__alt_mem_onchip_memory2_0+0xfc00c6ac>
 4012064:	df0022c4 	addi	fp,sp,139
 4012068:	dc002a15 	stw	r16,168(sp)
 401206c:	4027883a 	mov	r19,r8
 4012070:	e021883a 	mov	r16,fp
 4012074:	b009883a 	mov	r4,r22
 4012078:	01400284 	movi	r5,10
 401207c:	400dba40 	call	400dba4 <__modsi3>
 4012080:	10800c04 	addi	r2,r2,48
 4012084:	843fffc4 	addi	r16,r16,-1
 4012088:	b009883a 	mov	r4,r22
 401208c:	01400284 	movi	r5,10
 4012090:	80800005 	stb	r2,0(r16)
 4012094:	400db200 	call	400db20 <__divsi3>
 4012098:	102d883a 	mov	r22,r2
 401209c:	00800244 	movi	r2,9
 40120a0:	15bff416 	blt	r2,r22,4012074 <__alt_mem_onchip_memory2_0+0xfc00ceb4>
 40120a4:	9811883a 	mov	r8,r19
 40120a8:	b0800c04 	addi	r2,r22,48
 40120ac:	8027883a 	mov	r19,r16
 40120b0:	997fffc4 	addi	r5,r19,-1
 40120b4:	98bfffc5 	stb	r2,-1(r19)
 40120b8:	dc002a17 	ldw	r16,168(sp)
 40120bc:	2f006d2e 	bgeu	r5,fp,4012274 <___vfprintf_internal_r+0x22a4>
 40120c0:	d9c02384 	addi	r7,sp,142
 40120c4:	3ccfc83a 	sub	r7,r7,r19
 40120c8:	d9002344 	addi	r4,sp,141
 40120cc:	e1cf883a 	add	r7,fp,r7
 40120d0:	00000106 	br	40120d8 <___vfprintf_internal_r+0x2108>
 40120d4:	28800003 	ldbu	r2,0(r5)
 40120d8:	20800005 	stb	r2,0(r4)
 40120dc:	21000044 	addi	r4,r4,1
 40120e0:	29400044 	addi	r5,r5,1
 40120e4:	393ffb1e 	bne	r7,r4,40120d4 <__alt_mem_onchip_memory2_0+0xfc00cf14>
 40120e8:	d8802304 	addi	r2,sp,140
 40120ec:	14c5c83a 	sub	r2,r2,r19
 40120f0:	d8c02344 	addi	r3,sp,141
 40120f4:	1885883a 	add	r2,r3,r2
 40120f8:	003f7006 	br	4011ebc <__alt_mem_onchip_memory2_0+0xfc00ccfc>
 40120fc:	0005883a 	mov	r2,zero
 4012100:	003f0f06 	br	4011d40 <__alt_mem_onchip_memory2_0+0xfc00cb80>
 4012104:	d8c03217 	ldw	r3,200(sp)
 4012108:	18c00044 	addi	r3,r3,1
 401210c:	d8c02b15 	stw	r3,172(sp)
 4012110:	1805883a 	mov	r2,r3
 4012114:	183fb20e 	bge	r3,zero,4011fe0 <__alt_mem_onchip_memory2_0+0xfc00ce20>
 4012118:	0005883a 	mov	r2,zero
 401211c:	003fb006 	br	4011fe0 <__alt_mem_onchip_memory2_0+0xfc00ce20>
 4012120:	d9003617 	ldw	r4,216(sp)
 4012124:	000d883a 	mov	r6,zero
 4012128:	000f883a 	mov	r7,zero
 401212c:	980b883a 	mov	r5,r19
 4012130:	d8c03c15 	stw	r3,240(sp)
 4012134:	da003d15 	stw	r8,244(sp)
 4012138:	401ab840 	call	401ab84 <__eqdf2>
 401213c:	d8c03c17 	ldw	r3,240(sp)
 4012140:	da003d17 	ldw	r8,244(sp)
 4012144:	103f9826 	beq	r2,zero,4011fa8 <__alt_mem_onchip_memory2_0+0xfc00cde8>
 4012148:	00800044 	movi	r2,1
 401214c:	10c7c83a 	sub	r3,r2,r3
 4012150:	d8c02615 	stw	r3,152(sp)
 4012154:	003f9506 	br	4011fac <__alt_mem_onchip_memory2_0+0xfc00cdec>
 4012158:	d9002a17 	ldw	r4,168(sp)
 401215c:	d8c03217 	ldw	r3,200(sp)
 4012160:	20800044 	addi	r2,r4,1
 4012164:	1885883a 	add	r2,r3,r2
 4012168:	d8802b15 	stw	r2,172(sp)
 401216c:	103dbf0e 	bge	r2,zero,401186c <__alt_mem_onchip_memory2_0+0xfc00c6ac>
 4012170:	0005883a 	mov	r2,zero
 4012174:	003dbd06 	br	401186c <__alt_mem_onchip_memory2_0+0xfc00c6ac>
 4012178:	2000201e 	bne	r4,zero,40121fc <___vfprintf_internal_r+0x222c>
 401217c:	9480004c 	andi	r18,r18,1
 4012180:	90001e1e 	bne	r18,zero,40121fc <___vfprintf_internal_r+0x222c>
 4012184:	00800044 	movi	r2,1
 4012188:	d8802b15 	stw	r2,172(sp)
 401218c:	003db706 	br	401186c <__alt_mem_onchip_memory2_0+0xfc00c6ac>
 4012190:	00800b44 	movi	r2,45
 4012194:	05adc83a 	sub	r22,zero,r22
 4012198:	d8802305 	stb	r2,140(sp)
 401219c:	003f3f06 	br	4011e9c <__alt_mem_onchip_memory2_0+0xfc00ccdc>
 40121a0:	0005883a 	mov	r2,zero
 40121a4:	003f5206 	br	4011ef0 <__alt_mem_onchip_memory2_0+0xfc00cd30>
 40121a8:	90a4703a 	and	r18,r18,r2
 40121ac:	903f4e26 	beq	r18,zero,4011ee8 <__alt_mem_onchip_memory2_0+0xfc00cd28>
 40121b0:	003f4a06 	br	4011edc <__alt_mem_onchip_memory2_0+0xfc00cd1c>
 40121b4:	00800084 	movi	r2,2
 40121b8:	10c5c83a 	sub	r2,r2,r3
 40121bc:	003f8406 	br	4011fd0 <__alt_mem_onchip_memory2_0+0xfc00ce10>
 40121c0:	d9402e17 	ldw	r5,184(sp)
 40121c4:	d9002e17 	ldw	r4,184(sp)
 40121c8:	ac400043 	ldbu	r17,1(r21)
 40121cc:	29400017 	ldw	r5,0(r5)
 40121d0:	20800104 	addi	r2,r4,4
 40121d4:	d8802e15 	stw	r2,184(sp)
 40121d8:	d9402a15 	stw	r5,168(sp)
 40121dc:	182b883a 	mov	r21,r3
 40121e0:	283e7b0e 	bge	r5,zero,4011bd0 <__alt_mem_onchip_memory2_0+0xfc00ca10>
 40121e4:	8c403fcc 	andi	r17,r17,255
 40121e8:	017fffc4 	movi	r5,-1
 40121ec:	8c40201c 	xori	r17,r17,128
 40121f0:	d9402a15 	stw	r5,168(sp)
 40121f4:	8c7fe004 	addi	r17,r17,-128
 40121f8:	0037d706 	br	4010158 <__alt_mem_onchip_memory2_0+0xfc00af98>
 40121fc:	d8c02a17 	ldw	r3,168(sp)
 4012200:	18c00084 	addi	r3,r3,2
 4012204:	d8c02b15 	stw	r3,172(sp)
 4012208:	1805883a 	mov	r2,r3
 401220c:	183d970e 	bge	r3,zero,401186c <__alt_mem_onchip_memory2_0+0xfc00c6ac>
 4012210:	003fd706 	br	4012170 <__alt_mem_onchip_memory2_0+0xfc00cfb0>
 4012214:	0005883a 	mov	r2,zero
 4012218:	003f8f06 	br	4012058 <__alt_mem_onchip_memory2_0+0xfc00ce98>
 401221c:	9080004c 	andi	r2,r18,1
 4012220:	103f821e 	bne	r2,zero,401202c <__alt_mem_onchip_memory2_0+0xfc00ce6c>
 4012224:	d8802117 	ldw	r2,132(sp)
 4012228:	1405c83a 	sub	r2,r2,r16
 401222c:	d8803315 	stw	r2,204(sp)
 4012230:	b47ef426 	beq	r22,r17,4011e04 <__alt_mem_onchip_memory2_0+0xfc00cc44>
 4012234:	dd802617 	ldw	r22,152(sp)
 4012238:	003f1206 	br	4011e84 <__alt_mem_onchip_memory2_0+0xfc00ccc4>
 401223c:	d8c02b03 	ldbu	r3,172(sp)
 4012240:	d8c02785 	stb	r3,158(sp)
 4012244:	0038df06 	br	40105c4 <__alt_mem_onchip_memory2_0+0xfc00b404>
 4012248:	d8c02b03 	ldbu	r3,172(sp)
 401224c:	d8c02785 	stb	r3,158(sp)
 4012250:	0038aa06 	br	40104fc <__alt_mem_onchip_memory2_0+0xfc00b33c>
 4012254:	d8c02b03 	ldbu	r3,172(sp)
 4012258:	d8c02785 	stb	r3,158(sp)
 401225c:	003a4306 	br	4010b6c <__alt_mem_onchip_memory2_0+0xfc00b9ac>
 4012260:	d8c02b03 	ldbu	r3,172(sp)
 4012264:	d8c02785 	stb	r3,158(sp)
 4012268:	003af506 	br	4010e40 <__alt_mem_onchip_memory2_0+0xfc00bc80>
 401226c:	0005883a 	mov	r2,zero
 4012270:	003d7b06 	br	4011860 <__alt_mem_onchip_memory2_0+0xfc00c6a0>
 4012274:	d8802344 	addi	r2,sp,141
 4012278:	003f1006 	br	4011ebc <__alt_mem_onchip_memory2_0+0xfc00ccfc>
 401227c:	d8c02b03 	ldbu	r3,172(sp)
 4012280:	d8c02785 	stb	r3,158(sp)
 4012284:	0038fd06 	br	401067c <__alt_mem_onchip_memory2_0+0xfc00b4bc>
 4012288:	d8c02b03 	ldbu	r3,172(sp)
 401228c:	d8c02785 	stb	r3,158(sp)
 4012290:	003a9706 	br	4010cf0 <__alt_mem_onchip_memory2_0+0xfc00bb30>
 4012294:	d8c02b03 	ldbu	r3,172(sp)
 4012298:	d8c02785 	stb	r3,158(sp)
 401229c:	003a1806 	br	4010b00 <__alt_mem_onchip_memory2_0+0xfc00b940>
 40122a0:	d8c02b03 	ldbu	r3,172(sp)
 40122a4:	d8c02785 	stb	r3,158(sp)
 40122a8:	003abe06 	br	4010da4 <__alt_mem_onchip_memory2_0+0xfc00bbe4>

040122ac <__vfprintf_internal>:
 40122ac:	008100b4 	movhi	r2,1026
 40122b0:	10bfe004 	addi	r2,r2,-128
 40122b4:	300f883a 	mov	r7,r6
 40122b8:	280d883a 	mov	r6,r5
 40122bc:	200b883a 	mov	r5,r4
 40122c0:	11000017 	ldw	r4,0(r2)
 40122c4:	400ffd01 	jmpi	400ffd0 <___vfprintf_internal_r>

040122c8 <__sbprintf>:
 40122c8:	2880030b 	ldhu	r2,12(r5)
 40122cc:	2ac01917 	ldw	r11,100(r5)
 40122d0:	2a80038b 	ldhu	r10,14(r5)
 40122d4:	2a400717 	ldw	r9,28(r5)
 40122d8:	2a000917 	ldw	r8,36(r5)
 40122dc:	defee204 	addi	sp,sp,-1144
 40122e0:	00c10004 	movi	r3,1024
 40122e4:	dc011a15 	stw	r16,1128(sp)
 40122e8:	10bfff4c 	andi	r2,r2,65533
 40122ec:	2821883a 	mov	r16,r5
 40122f0:	d8cb883a 	add	r5,sp,r3
 40122f4:	dc811c15 	stw	r18,1136(sp)
 40122f8:	dc411b15 	stw	r17,1132(sp)
 40122fc:	dfc11d15 	stw	ra,1140(sp)
 4012300:	2025883a 	mov	r18,r4
 4012304:	d881030d 	sth	r2,1036(sp)
 4012308:	dac11915 	stw	r11,1124(sp)
 401230c:	da81038d 	sth	r10,1038(sp)
 4012310:	da410715 	stw	r9,1052(sp)
 4012314:	da010915 	stw	r8,1060(sp)
 4012318:	dec10015 	stw	sp,1024(sp)
 401231c:	dec10415 	stw	sp,1040(sp)
 4012320:	d8c10215 	stw	r3,1032(sp)
 4012324:	d8c10515 	stw	r3,1044(sp)
 4012328:	d8010615 	stw	zero,1048(sp)
 401232c:	400ffd00 	call	400ffd0 <___vfprintf_internal_r>
 4012330:	1023883a 	mov	r17,r2
 4012334:	10000416 	blt	r2,zero,4012348 <__sbprintf+0x80>
 4012338:	d9410004 	addi	r5,sp,1024
 401233c:	9009883a 	mov	r4,r18
 4012340:	4013fa40 	call	4013fa4 <_fflush_r>
 4012344:	10000d1e 	bne	r2,zero,401237c <__sbprintf+0xb4>
 4012348:	d881030b 	ldhu	r2,1036(sp)
 401234c:	1080100c 	andi	r2,r2,64
 4012350:	10000326 	beq	r2,zero,4012360 <__sbprintf+0x98>
 4012354:	8080030b 	ldhu	r2,12(r16)
 4012358:	10801014 	ori	r2,r2,64
 401235c:	8080030d 	sth	r2,12(r16)
 4012360:	8805883a 	mov	r2,r17
 4012364:	dfc11d17 	ldw	ra,1140(sp)
 4012368:	dc811c17 	ldw	r18,1136(sp)
 401236c:	dc411b17 	ldw	r17,1132(sp)
 4012370:	dc011a17 	ldw	r16,1128(sp)
 4012374:	dec11e04 	addi	sp,sp,1144
 4012378:	f800283a 	ret
 401237c:	047fffc4 	movi	r17,-1
 4012380:	003ff106 	br	4012348 <__alt_mem_onchip_memory2_0+0xfc00d188>

04012384 <__swsetup_r>:
 4012384:	008100b4 	movhi	r2,1026
 4012388:	defffd04 	addi	sp,sp,-12
 401238c:	10bfe004 	addi	r2,r2,-128
 4012390:	dc400115 	stw	r17,4(sp)
 4012394:	2023883a 	mov	r17,r4
 4012398:	11000017 	ldw	r4,0(r2)
 401239c:	dc000015 	stw	r16,0(sp)
 40123a0:	dfc00215 	stw	ra,8(sp)
 40123a4:	2821883a 	mov	r16,r5
 40123a8:	20000226 	beq	r4,zero,40123b4 <__swsetup_r+0x30>
 40123ac:	20800e17 	ldw	r2,56(r4)
 40123b0:	10003126 	beq	r2,zero,4012478 <__swsetup_r+0xf4>
 40123b4:	8080030b 	ldhu	r2,12(r16)
 40123b8:	10c0020c 	andi	r3,r2,8
 40123bc:	1009883a 	mov	r4,r2
 40123c0:	18000f26 	beq	r3,zero,4012400 <__swsetup_r+0x7c>
 40123c4:	80c00417 	ldw	r3,16(r16)
 40123c8:	18001526 	beq	r3,zero,4012420 <__swsetup_r+0x9c>
 40123cc:	1100004c 	andi	r4,r2,1
 40123d0:	20001c1e 	bne	r4,zero,4012444 <__swsetup_r+0xc0>
 40123d4:	1080008c 	andi	r2,r2,2
 40123d8:	1000291e 	bne	r2,zero,4012480 <__swsetup_r+0xfc>
 40123dc:	80800517 	ldw	r2,20(r16)
 40123e0:	80800215 	stw	r2,8(r16)
 40123e4:	18001c26 	beq	r3,zero,4012458 <__swsetup_r+0xd4>
 40123e8:	0005883a 	mov	r2,zero
 40123ec:	dfc00217 	ldw	ra,8(sp)
 40123f0:	dc400117 	ldw	r17,4(sp)
 40123f4:	dc000017 	ldw	r16,0(sp)
 40123f8:	dec00304 	addi	sp,sp,12
 40123fc:	f800283a 	ret
 4012400:	2080040c 	andi	r2,r4,16
 4012404:	10002e26 	beq	r2,zero,40124c0 <__swsetup_r+0x13c>
 4012408:	2080010c 	andi	r2,r4,4
 401240c:	10001e1e 	bne	r2,zero,4012488 <__swsetup_r+0x104>
 4012410:	80c00417 	ldw	r3,16(r16)
 4012414:	20800214 	ori	r2,r4,8
 4012418:	8080030d 	sth	r2,12(r16)
 401241c:	183feb1e 	bne	r3,zero,40123cc <__alt_mem_onchip_memory2_0+0xfc00d20c>
 4012420:	1100a00c 	andi	r4,r2,640
 4012424:	01408004 	movi	r5,512
 4012428:	217fe826 	beq	r4,r5,40123cc <__alt_mem_onchip_memory2_0+0xfc00d20c>
 401242c:	800b883a 	mov	r5,r16
 4012430:	8809883a 	mov	r4,r17
 4012434:	4014f9c0 	call	4014f9c <__smakebuf_r>
 4012438:	8080030b 	ldhu	r2,12(r16)
 401243c:	80c00417 	ldw	r3,16(r16)
 4012440:	003fe206 	br	40123cc <__alt_mem_onchip_memory2_0+0xfc00d20c>
 4012444:	80800517 	ldw	r2,20(r16)
 4012448:	80000215 	stw	zero,8(r16)
 401244c:	0085c83a 	sub	r2,zero,r2
 4012450:	80800615 	stw	r2,24(r16)
 4012454:	183fe41e 	bne	r3,zero,40123e8 <__alt_mem_onchip_memory2_0+0xfc00d228>
 4012458:	80c0030b 	ldhu	r3,12(r16)
 401245c:	0005883a 	mov	r2,zero
 4012460:	1900200c 	andi	r4,r3,128
 4012464:	203fe126 	beq	r4,zero,40123ec <__alt_mem_onchip_memory2_0+0xfc00d22c>
 4012468:	18c01014 	ori	r3,r3,64
 401246c:	80c0030d 	sth	r3,12(r16)
 4012470:	00bfffc4 	movi	r2,-1
 4012474:	003fdd06 	br	40123ec <__alt_mem_onchip_memory2_0+0xfc00d22c>
 4012478:	40143900 	call	4014390 <__sinit>
 401247c:	003fcd06 	br	40123b4 <__alt_mem_onchip_memory2_0+0xfc00d1f4>
 4012480:	0005883a 	mov	r2,zero
 4012484:	003fd606 	br	40123e0 <__alt_mem_onchip_memory2_0+0xfc00d220>
 4012488:	81400c17 	ldw	r5,48(r16)
 401248c:	28000626 	beq	r5,zero,40124a8 <__swsetup_r+0x124>
 4012490:	80801004 	addi	r2,r16,64
 4012494:	28800326 	beq	r5,r2,40124a4 <__swsetup_r+0x120>
 4012498:	8809883a 	mov	r4,r17
 401249c:	40145040 	call	4014504 <_free_r>
 40124a0:	8100030b 	ldhu	r4,12(r16)
 40124a4:	80000c15 	stw	zero,48(r16)
 40124a8:	80c00417 	ldw	r3,16(r16)
 40124ac:	00bff6c4 	movi	r2,-37
 40124b0:	1108703a 	and	r4,r2,r4
 40124b4:	80000115 	stw	zero,4(r16)
 40124b8:	80c00015 	stw	r3,0(r16)
 40124bc:	003fd506 	br	4012414 <__alt_mem_onchip_memory2_0+0xfc00d254>
 40124c0:	00800244 	movi	r2,9
 40124c4:	88800015 	stw	r2,0(r17)
 40124c8:	20801014 	ori	r2,r4,64
 40124cc:	8080030d 	sth	r2,12(r16)
 40124d0:	00bfffc4 	movi	r2,-1
 40124d4:	003fc506 	br	40123ec <__alt_mem_onchip_memory2_0+0xfc00d22c>

040124d8 <quorem>:
 40124d8:	defff204 	addi	sp,sp,-56
 40124dc:	ddc00b15 	stw	r23,44(sp)
 40124e0:	20800417 	ldw	r2,16(r4)
 40124e4:	2dc00417 	ldw	r23,16(r5)
 40124e8:	dfc00d15 	stw	ra,52(sp)
 40124ec:	df000c15 	stw	fp,48(sp)
 40124f0:	dd800a15 	stw	r22,40(sp)
 40124f4:	dd400915 	stw	r21,36(sp)
 40124f8:	dd000815 	stw	r20,32(sp)
 40124fc:	dcc00715 	stw	r19,28(sp)
 4012500:	dc800615 	stw	r18,24(sp)
 4012504:	dc400515 	stw	r17,20(sp)
 4012508:	dc000415 	stw	r16,16(sp)
 401250c:	15c07a16 	blt	r2,r23,40126f8 <quorem+0x220>
 4012510:	bdffffc4 	addi	r23,r23,-1
 4012514:	bde9883a 	add	r20,r23,r23
 4012518:	28c00504 	addi	r3,r5,20
 401251c:	a529883a 	add	r20,r20,r20
 4012520:	1d39883a 	add	fp,r3,r20
 4012524:	24c00504 	addi	r19,r4,20
 4012528:	d9400215 	stw	r5,8(sp)
 401252c:	9d29883a 	add	r20,r19,r20
 4012530:	e1400017 	ldw	r5,0(fp)
 4012534:	d9000015 	stw	r4,0(sp)
 4012538:	a1000017 	ldw	r4,0(r20)
 401253c:	29400044 	addi	r5,r5,1
 4012540:	d8c00115 	stw	r3,4(sp)
 4012544:	dd000315 	stw	r20,12(sp)
 4012548:	400dc180 	call	400dc18 <__udivsi3>
 401254c:	1025883a 	mov	r18,r2
 4012550:	10003026 	beq	r2,zero,4012614 <quorem+0x13c>
 4012554:	dc400117 	ldw	r17,4(sp)
 4012558:	9829883a 	mov	r20,r19
 401255c:	002d883a 	mov	r22,zero
 4012560:	0021883a 	mov	r16,zero
 4012564:	8d400017 	ldw	r21,0(r17)
 4012568:	900b883a 	mov	r5,r18
 401256c:	8c400104 	addi	r17,r17,4
 4012570:	a93fffcc 	andi	r4,r21,65535
 4012574:	400dcd40 	call	400dcd4 <__mulsi3>
 4012578:	a808d43a 	srli	r4,r21,16
 401257c:	900b883a 	mov	r5,r18
 4012580:	15ad883a 	add	r22,r2,r22
 4012584:	400dcd40 	call	400dcd4 <__mulsi3>
 4012588:	a1000017 	ldw	r4,0(r20)
 401258c:	b00cd43a 	srli	r6,r22,16
 4012590:	b0ffffcc 	andi	r3,r22,65535
 4012594:	217fffcc 	andi	r5,r4,65535
 4012598:	2c21883a 	add	r16,r5,r16
 401259c:	80c7c83a 	sub	r3,r16,r3
 40125a0:	2008d43a 	srli	r4,r4,16
 40125a4:	1185883a 	add	r2,r2,r6
 40125a8:	1821d43a 	srai	r16,r3,16
 40125ac:	117fffcc 	andi	r5,r2,65535
 40125b0:	2149c83a 	sub	r4,r4,r5
 40125b4:	2421883a 	add	r16,r4,r16
 40125b8:	8008943a 	slli	r4,r16,16
 40125bc:	18ffffcc 	andi	r3,r3,65535
 40125c0:	102cd43a 	srli	r22,r2,16
 40125c4:	20c8b03a 	or	r4,r4,r3
 40125c8:	a1000015 	stw	r4,0(r20)
 40125cc:	8021d43a 	srai	r16,r16,16
 40125d0:	a5000104 	addi	r20,r20,4
 40125d4:	e47fe32e 	bgeu	fp,r17,4012564 <__alt_mem_onchip_memory2_0+0xfc00d3a4>
 40125d8:	d8c00317 	ldw	r3,12(sp)
 40125dc:	18800017 	ldw	r2,0(r3)
 40125e0:	10000c1e 	bne	r2,zero,4012614 <quorem+0x13c>
 40125e4:	18bfff04 	addi	r2,r3,-4
 40125e8:	9880082e 	bgeu	r19,r2,401260c <quorem+0x134>
 40125ec:	18ffff17 	ldw	r3,-4(r3)
 40125f0:	18000326 	beq	r3,zero,4012600 <quorem+0x128>
 40125f4:	00000506 	br	401260c <quorem+0x134>
 40125f8:	10c00017 	ldw	r3,0(r2)
 40125fc:	1800031e 	bne	r3,zero,401260c <quorem+0x134>
 4012600:	10bfff04 	addi	r2,r2,-4
 4012604:	bdffffc4 	addi	r23,r23,-1
 4012608:	98bffb36 	bltu	r19,r2,40125f8 <__alt_mem_onchip_memory2_0+0xfc00d438>
 401260c:	d8c00017 	ldw	r3,0(sp)
 4012610:	1dc00415 	stw	r23,16(r3)
 4012614:	d9400217 	ldw	r5,8(sp)
 4012618:	d9000017 	ldw	r4,0(sp)
 401261c:	40166500 	call	4016650 <__mcmp>
 4012620:	10002816 	blt	r2,zero,40126c4 <quorem+0x1ec>
 4012624:	dc400117 	ldw	r17,4(sp)
 4012628:	94800044 	addi	r18,r18,1
 401262c:	980d883a 	mov	r6,r19
 4012630:	0007883a 	mov	r3,zero
 4012634:	31000017 	ldw	r4,0(r6)
 4012638:	89400017 	ldw	r5,0(r17)
 401263c:	31800104 	addi	r6,r6,4
 4012640:	20bfffcc 	andi	r2,r4,65535
 4012644:	10c7883a 	add	r3,r2,r3
 4012648:	28bfffcc 	andi	r2,r5,65535
 401264c:	1885c83a 	sub	r2,r3,r2
 4012650:	280ad43a 	srli	r5,r5,16
 4012654:	2008d43a 	srli	r4,r4,16
 4012658:	1007d43a 	srai	r3,r2,16
 401265c:	10bfffcc 	andi	r2,r2,65535
 4012660:	2149c83a 	sub	r4,r4,r5
 4012664:	20c9883a 	add	r4,r4,r3
 4012668:	200a943a 	slli	r5,r4,16
 401266c:	8c400104 	addi	r17,r17,4
 4012670:	2007d43a 	srai	r3,r4,16
 4012674:	2884b03a 	or	r2,r5,r2
 4012678:	30bfff15 	stw	r2,-4(r6)
 401267c:	e47fed2e 	bgeu	fp,r17,4012634 <__alt_mem_onchip_memory2_0+0xfc00d474>
 4012680:	bdc5883a 	add	r2,r23,r23
 4012684:	1085883a 	add	r2,r2,r2
 4012688:	9887883a 	add	r3,r19,r2
 401268c:	18800017 	ldw	r2,0(r3)
 4012690:	10000c1e 	bne	r2,zero,40126c4 <quorem+0x1ec>
 4012694:	18bfff04 	addi	r2,r3,-4
 4012698:	9880082e 	bgeu	r19,r2,40126bc <quorem+0x1e4>
 401269c:	18ffff17 	ldw	r3,-4(r3)
 40126a0:	18000326 	beq	r3,zero,40126b0 <quorem+0x1d8>
 40126a4:	00000506 	br	40126bc <quorem+0x1e4>
 40126a8:	10c00017 	ldw	r3,0(r2)
 40126ac:	1800031e 	bne	r3,zero,40126bc <quorem+0x1e4>
 40126b0:	10bfff04 	addi	r2,r2,-4
 40126b4:	bdffffc4 	addi	r23,r23,-1
 40126b8:	98bffb36 	bltu	r19,r2,40126a8 <__alt_mem_onchip_memory2_0+0xfc00d4e8>
 40126bc:	d8c00017 	ldw	r3,0(sp)
 40126c0:	1dc00415 	stw	r23,16(r3)
 40126c4:	9005883a 	mov	r2,r18
 40126c8:	dfc00d17 	ldw	ra,52(sp)
 40126cc:	df000c17 	ldw	fp,48(sp)
 40126d0:	ddc00b17 	ldw	r23,44(sp)
 40126d4:	dd800a17 	ldw	r22,40(sp)
 40126d8:	dd400917 	ldw	r21,36(sp)
 40126dc:	dd000817 	ldw	r20,32(sp)
 40126e0:	dcc00717 	ldw	r19,28(sp)
 40126e4:	dc800617 	ldw	r18,24(sp)
 40126e8:	dc400517 	ldw	r17,20(sp)
 40126ec:	dc000417 	ldw	r16,16(sp)
 40126f0:	dec00e04 	addi	sp,sp,56
 40126f4:	f800283a 	ret
 40126f8:	0005883a 	mov	r2,zero
 40126fc:	003ff206 	br	40126c8 <__alt_mem_onchip_memory2_0+0xfc00d508>

04012700 <_dtoa_r>:
 4012700:	20801017 	ldw	r2,64(r4)
 4012704:	deffde04 	addi	sp,sp,-136
 4012708:	df002015 	stw	fp,128(sp)
 401270c:	dcc01b15 	stw	r19,108(sp)
 4012710:	dc801a15 	stw	r18,104(sp)
 4012714:	dc401915 	stw	r17,100(sp)
 4012718:	dc001815 	stw	r16,96(sp)
 401271c:	dfc02115 	stw	ra,132(sp)
 4012720:	ddc01f15 	stw	r23,124(sp)
 4012724:	dd801e15 	stw	r22,120(sp)
 4012728:	dd401d15 	stw	r21,116(sp)
 401272c:	dd001c15 	stw	r20,112(sp)
 4012730:	d9c00315 	stw	r7,12(sp)
 4012734:	2039883a 	mov	fp,r4
 4012738:	3023883a 	mov	r17,r6
 401273c:	2825883a 	mov	r18,r5
 4012740:	dc002417 	ldw	r16,144(sp)
 4012744:	3027883a 	mov	r19,r6
 4012748:	10000826 	beq	r2,zero,401276c <_dtoa_r+0x6c>
 401274c:	21801117 	ldw	r6,68(r4)
 4012750:	00c00044 	movi	r3,1
 4012754:	100b883a 	mov	r5,r2
 4012758:	1986983a 	sll	r3,r3,r6
 401275c:	11800115 	stw	r6,4(r2)
 4012760:	10c00215 	stw	r3,8(r2)
 4012764:	4015d740 	call	4015d74 <_Bfree>
 4012768:	e0001015 	stw	zero,64(fp)
 401276c:	88002e16 	blt	r17,zero,4012828 <_dtoa_r+0x128>
 4012770:	80000015 	stw	zero,0(r16)
 4012774:	889ffc2c 	andhi	r2,r17,32752
 4012778:	00dffc34 	movhi	r3,32752
 401277c:	10c01c26 	beq	r2,r3,40127f0 <_dtoa_r+0xf0>
 4012780:	000d883a 	mov	r6,zero
 4012784:	000f883a 	mov	r7,zero
 4012788:	9009883a 	mov	r4,r18
 401278c:	980b883a 	mov	r5,r19
 4012790:	401ab840 	call	401ab84 <__eqdf2>
 4012794:	10002b1e 	bne	r2,zero,4012844 <_dtoa_r+0x144>
 4012798:	d9c02317 	ldw	r7,140(sp)
 401279c:	00800044 	movi	r2,1
 40127a0:	38800015 	stw	r2,0(r7)
 40127a4:	d8802517 	ldw	r2,148(sp)
 40127a8:	10019e26 	beq	r2,zero,4012e24 <_dtoa_r+0x724>
 40127ac:	d8c02517 	ldw	r3,148(sp)
 40127b0:	008100b4 	movhi	r2,1026
 40127b4:	10b7a144 	addi	r2,r2,-8571
 40127b8:	18800015 	stw	r2,0(r3)
 40127bc:	10bfffc4 	addi	r2,r2,-1
 40127c0:	dfc02117 	ldw	ra,132(sp)
 40127c4:	df002017 	ldw	fp,128(sp)
 40127c8:	ddc01f17 	ldw	r23,124(sp)
 40127cc:	dd801e17 	ldw	r22,120(sp)
 40127d0:	dd401d17 	ldw	r21,116(sp)
 40127d4:	dd001c17 	ldw	r20,112(sp)
 40127d8:	dcc01b17 	ldw	r19,108(sp)
 40127dc:	dc801a17 	ldw	r18,104(sp)
 40127e0:	dc401917 	ldw	r17,100(sp)
 40127e4:	dc001817 	ldw	r16,96(sp)
 40127e8:	dec02204 	addi	sp,sp,136
 40127ec:	f800283a 	ret
 40127f0:	d8c02317 	ldw	r3,140(sp)
 40127f4:	0089c3c4 	movi	r2,9999
 40127f8:	18800015 	stw	r2,0(r3)
 40127fc:	90017726 	beq	r18,zero,4012ddc <_dtoa_r+0x6dc>
 4012800:	008100b4 	movhi	r2,1026
 4012804:	10b7ad04 	addi	r2,r2,-8524
 4012808:	d9002517 	ldw	r4,148(sp)
 401280c:	203fec26 	beq	r4,zero,40127c0 <__alt_mem_onchip_memory2_0+0xfc00d600>
 4012810:	10c000c7 	ldb	r3,3(r2)
 4012814:	1801781e 	bne	r3,zero,4012df8 <_dtoa_r+0x6f8>
 4012818:	10c000c4 	addi	r3,r2,3
 401281c:	d9802517 	ldw	r6,148(sp)
 4012820:	30c00015 	stw	r3,0(r6)
 4012824:	003fe606 	br	40127c0 <__alt_mem_onchip_memory2_0+0xfc00d600>
 4012828:	04e00034 	movhi	r19,32768
 401282c:	9cffffc4 	addi	r19,r19,-1
 4012830:	00800044 	movi	r2,1
 4012834:	8ce6703a 	and	r19,r17,r19
 4012838:	80800015 	stw	r2,0(r16)
 401283c:	9823883a 	mov	r17,r19
 4012840:	003fcc06 	br	4012774 <__alt_mem_onchip_memory2_0+0xfc00d5b4>
 4012844:	d8800204 	addi	r2,sp,8
 4012848:	d8800015 	stw	r2,0(sp)
 401284c:	d9c00104 	addi	r7,sp,4
 4012850:	900b883a 	mov	r5,r18
 4012854:	980d883a 	mov	r6,r19
 4012858:	e009883a 	mov	r4,fp
 401285c:	8820d53a 	srli	r16,r17,20
 4012860:	4016a1c0 	call	4016a1c <__d2b>
 4012864:	d8800915 	stw	r2,36(sp)
 4012868:	8001651e 	bne	r16,zero,4012e00 <_dtoa_r+0x700>
 401286c:	dd800217 	ldw	r22,8(sp)
 4012870:	dc000117 	ldw	r16,4(sp)
 4012874:	00800804 	movi	r2,32
 4012878:	b421883a 	add	r16,r22,r16
 401287c:	80c10c84 	addi	r3,r16,1074
 4012880:	10c2d10e 	bge	r2,r3,40133c8 <_dtoa_r+0xcc8>
 4012884:	00801004 	movi	r2,64
 4012888:	81010484 	addi	r4,r16,1042
 401288c:	10c7c83a 	sub	r3,r2,r3
 4012890:	9108d83a 	srl	r4,r18,r4
 4012894:	88e2983a 	sll	r17,r17,r3
 4012898:	2448b03a 	or	r4,r4,r17
 401289c:	400fa840 	call	400fa84 <__floatunsidf>
 40128a0:	017f8434 	movhi	r5,65040
 40128a4:	01800044 	movi	r6,1
 40128a8:	1009883a 	mov	r4,r2
 40128ac:	194b883a 	add	r5,r3,r5
 40128b0:	843fffc4 	addi	r16,r16,-1
 40128b4:	d9801115 	stw	r6,68(sp)
 40128b8:	000d883a 	mov	r6,zero
 40128bc:	01cffe34 	movhi	r7,16376
 40128c0:	400f1080 	call	400f108 <__subdf3>
 40128c4:	0198dbf4 	movhi	r6,25455
 40128c8:	01cff4f4 	movhi	r7,16339
 40128cc:	3190d844 	addi	r6,r6,17249
 40128d0:	39e1e9c4 	addi	r7,r7,-30809
 40128d4:	1009883a 	mov	r4,r2
 40128d8:	180b883a 	mov	r5,r3
 40128dc:	400e89c0 	call	400e89c <__muldf3>
 40128e0:	01a2d874 	movhi	r6,35681
 40128e4:	01cff1f4 	movhi	r7,16327
 40128e8:	31b22cc4 	addi	r6,r6,-14157
 40128ec:	39e28a04 	addi	r7,r7,-30168
 40128f0:	180b883a 	mov	r5,r3
 40128f4:	1009883a 	mov	r4,r2
 40128f8:	401a2d80 	call	401a2d8 <__adddf3>
 40128fc:	8009883a 	mov	r4,r16
 4012900:	1029883a 	mov	r20,r2
 4012904:	1823883a 	mov	r17,r3
 4012908:	401ac0c0 	call	401ac0c <__floatsidf>
 401290c:	019427f4 	movhi	r6,20639
 4012910:	01cff4f4 	movhi	r7,16339
 4012914:	319e7ec4 	addi	r6,r6,31227
 4012918:	39d104c4 	addi	r7,r7,17427
 401291c:	1009883a 	mov	r4,r2
 4012920:	180b883a 	mov	r5,r3
 4012924:	400e89c0 	call	400e89c <__muldf3>
 4012928:	100d883a 	mov	r6,r2
 401292c:	180f883a 	mov	r7,r3
 4012930:	a009883a 	mov	r4,r20
 4012934:	880b883a 	mov	r5,r17
 4012938:	401a2d80 	call	401a2d8 <__adddf3>
 401293c:	1009883a 	mov	r4,r2
 4012940:	180b883a 	mov	r5,r3
 4012944:	1029883a 	mov	r20,r2
 4012948:	1823883a 	mov	r17,r3
 401294c:	400fa040 	call	400fa04 <__fixdfsi>
 4012950:	000d883a 	mov	r6,zero
 4012954:	000f883a 	mov	r7,zero
 4012958:	a009883a 	mov	r4,r20
 401295c:	880b883a 	mov	r5,r17
 4012960:	d8800515 	stw	r2,20(sp)
 4012964:	400e7a80 	call	400e7a8 <__ledf2>
 4012968:	10028716 	blt	r2,zero,4013388 <_dtoa_r+0xc88>
 401296c:	d8c00517 	ldw	r3,20(sp)
 4012970:	00800584 	movi	r2,22
 4012974:	10c27536 	bltu	r2,r3,401334c <_dtoa_r+0xc4c>
 4012978:	180490fa 	slli	r2,r3,3
 401297c:	00c100b4 	movhi	r3,1026
 4012980:	18f7c804 	addi	r3,r3,-8416
 4012984:	1885883a 	add	r2,r3,r2
 4012988:	11000017 	ldw	r4,0(r2)
 401298c:	11400117 	ldw	r5,4(r2)
 4012990:	900d883a 	mov	r6,r18
 4012994:	980f883a 	mov	r7,r19
 4012998:	400e6cc0 	call	400e6cc <__gedf2>
 401299c:	00828d0e 	bge	zero,r2,40133d4 <_dtoa_r+0xcd4>
 40129a0:	d9000517 	ldw	r4,20(sp)
 40129a4:	d8000e15 	stw	zero,56(sp)
 40129a8:	213fffc4 	addi	r4,r4,-1
 40129ac:	d9000515 	stw	r4,20(sp)
 40129b0:	b42dc83a 	sub	r22,r22,r16
 40129b4:	b5bfffc4 	addi	r22,r22,-1
 40129b8:	b0026f16 	blt	r22,zero,4013378 <_dtoa_r+0xc78>
 40129bc:	d8000815 	stw	zero,32(sp)
 40129c0:	d9c00517 	ldw	r7,20(sp)
 40129c4:	38026416 	blt	r7,zero,4013358 <_dtoa_r+0xc58>
 40129c8:	b1ed883a 	add	r22,r22,r7
 40129cc:	d9c00d15 	stw	r7,52(sp)
 40129d0:	d8000a15 	stw	zero,40(sp)
 40129d4:	d9800317 	ldw	r6,12(sp)
 40129d8:	00800244 	movi	r2,9
 40129dc:	11811436 	bltu	r2,r6,4012e30 <_dtoa_r+0x730>
 40129e0:	00800144 	movi	r2,5
 40129e4:	1184e10e 	bge	r2,r6,4013d6c <_dtoa_r+0x166c>
 40129e8:	31bfff04 	addi	r6,r6,-4
 40129ec:	d9800315 	stw	r6,12(sp)
 40129f0:	0023883a 	mov	r17,zero
 40129f4:	d9800317 	ldw	r6,12(sp)
 40129f8:	008000c4 	movi	r2,3
 40129fc:	30836726 	beq	r6,r2,401379c <_dtoa_r+0x109c>
 4012a00:	1183410e 	bge	r2,r6,4013708 <_dtoa_r+0x1008>
 4012a04:	d9c00317 	ldw	r7,12(sp)
 4012a08:	00800104 	movi	r2,4
 4012a0c:	38827c26 	beq	r7,r2,4013400 <_dtoa_r+0xd00>
 4012a10:	00800144 	movi	r2,5
 4012a14:	3884c41e 	bne	r7,r2,4013d28 <_dtoa_r+0x1628>
 4012a18:	00800044 	movi	r2,1
 4012a1c:	d8800b15 	stw	r2,44(sp)
 4012a20:	d8c00517 	ldw	r3,20(sp)
 4012a24:	d9002217 	ldw	r4,136(sp)
 4012a28:	1907883a 	add	r3,r3,r4
 4012a2c:	19800044 	addi	r6,r3,1
 4012a30:	d8c00c15 	stw	r3,48(sp)
 4012a34:	d9800615 	stw	r6,24(sp)
 4012a38:	0183a40e 	bge	zero,r6,40138cc <_dtoa_r+0x11cc>
 4012a3c:	d9800617 	ldw	r6,24(sp)
 4012a40:	3021883a 	mov	r16,r6
 4012a44:	e0001115 	stw	zero,68(fp)
 4012a48:	008005c4 	movi	r2,23
 4012a4c:	1184c92e 	bgeu	r2,r6,4013d74 <_dtoa_r+0x1674>
 4012a50:	00c00044 	movi	r3,1
 4012a54:	00800104 	movi	r2,4
 4012a58:	1085883a 	add	r2,r2,r2
 4012a5c:	11000504 	addi	r4,r2,20
 4012a60:	180b883a 	mov	r5,r3
 4012a64:	18c00044 	addi	r3,r3,1
 4012a68:	313ffb2e 	bgeu	r6,r4,4012a58 <__alt_mem_onchip_memory2_0+0xfc00d898>
 4012a6c:	e1401115 	stw	r5,68(fp)
 4012a70:	e009883a 	mov	r4,fp
 4012a74:	4015ccc0 	call	4015ccc <_Balloc>
 4012a78:	d8800715 	stw	r2,28(sp)
 4012a7c:	e0801015 	stw	r2,64(fp)
 4012a80:	00800384 	movi	r2,14
 4012a84:	1400f736 	bltu	r2,r16,4012e64 <_dtoa_r+0x764>
 4012a88:	8800f626 	beq	r17,zero,4012e64 <_dtoa_r+0x764>
 4012a8c:	d9c00517 	ldw	r7,20(sp)
 4012a90:	01c39a0e 	bge	zero,r7,40138fc <_dtoa_r+0x11fc>
 4012a94:	388003cc 	andi	r2,r7,15
 4012a98:	100490fa 	slli	r2,r2,3
 4012a9c:	382bd13a 	srai	r21,r7,4
 4012aa0:	00c100b4 	movhi	r3,1026
 4012aa4:	18f7c804 	addi	r3,r3,-8416
 4012aa8:	1885883a 	add	r2,r3,r2
 4012aac:	a8c0040c 	andi	r3,r21,16
 4012ab0:	12400017 	ldw	r9,0(r2)
 4012ab4:	12000117 	ldw	r8,4(r2)
 4012ab8:	18037926 	beq	r3,zero,40138a0 <_dtoa_r+0x11a0>
 4012abc:	008100b4 	movhi	r2,1026
 4012ac0:	10b7be04 	addi	r2,r2,-8456
 4012ac4:	11800817 	ldw	r6,32(r2)
 4012ac8:	11c00917 	ldw	r7,36(r2)
 4012acc:	9009883a 	mov	r4,r18
 4012ad0:	980b883a 	mov	r5,r19
 4012ad4:	da001715 	stw	r8,92(sp)
 4012ad8:	da401615 	stw	r9,88(sp)
 4012adc:	400dcfc0 	call	400dcfc <__divdf3>
 4012ae0:	da001717 	ldw	r8,92(sp)
 4012ae4:	da401617 	ldw	r9,88(sp)
 4012ae8:	ad4003cc 	andi	r21,r21,15
 4012aec:	040000c4 	movi	r16,3
 4012af0:	1023883a 	mov	r17,r2
 4012af4:	1829883a 	mov	r20,r3
 4012af8:	a8001126 	beq	r21,zero,4012b40 <_dtoa_r+0x440>
 4012afc:	05c100b4 	movhi	r23,1026
 4012b00:	bdf7be04 	addi	r23,r23,-8456
 4012b04:	4805883a 	mov	r2,r9
 4012b08:	4007883a 	mov	r3,r8
 4012b0c:	a980004c 	andi	r6,r21,1
 4012b10:	1009883a 	mov	r4,r2
 4012b14:	a82bd07a 	srai	r21,r21,1
 4012b18:	180b883a 	mov	r5,r3
 4012b1c:	30000426 	beq	r6,zero,4012b30 <_dtoa_r+0x430>
 4012b20:	b9800017 	ldw	r6,0(r23)
 4012b24:	b9c00117 	ldw	r7,4(r23)
 4012b28:	84000044 	addi	r16,r16,1
 4012b2c:	400e89c0 	call	400e89c <__muldf3>
 4012b30:	bdc00204 	addi	r23,r23,8
 4012b34:	a83ff51e 	bne	r21,zero,4012b0c <__alt_mem_onchip_memory2_0+0xfc00d94c>
 4012b38:	1013883a 	mov	r9,r2
 4012b3c:	1811883a 	mov	r8,r3
 4012b40:	480d883a 	mov	r6,r9
 4012b44:	400f883a 	mov	r7,r8
 4012b48:	8809883a 	mov	r4,r17
 4012b4c:	a00b883a 	mov	r5,r20
 4012b50:	400dcfc0 	call	400dcfc <__divdf3>
 4012b54:	d8800f15 	stw	r2,60(sp)
 4012b58:	d8c01015 	stw	r3,64(sp)
 4012b5c:	d8c00e17 	ldw	r3,56(sp)
 4012b60:	18000626 	beq	r3,zero,4012b7c <_dtoa_r+0x47c>
 4012b64:	d9000f17 	ldw	r4,60(sp)
 4012b68:	d9401017 	ldw	r5,64(sp)
 4012b6c:	000d883a 	mov	r6,zero
 4012b70:	01cffc34 	movhi	r7,16368
 4012b74:	400e7a80 	call	400e7a8 <__ledf2>
 4012b78:	10040b16 	blt	r2,zero,4013ba8 <_dtoa_r+0x14a8>
 4012b7c:	8009883a 	mov	r4,r16
 4012b80:	401ac0c0 	call	401ac0c <__floatsidf>
 4012b84:	d9800f17 	ldw	r6,60(sp)
 4012b88:	d9c01017 	ldw	r7,64(sp)
 4012b8c:	1009883a 	mov	r4,r2
 4012b90:	180b883a 	mov	r5,r3
 4012b94:	400e89c0 	call	400e89c <__muldf3>
 4012b98:	000d883a 	mov	r6,zero
 4012b9c:	01d00734 	movhi	r7,16412
 4012ba0:	1009883a 	mov	r4,r2
 4012ba4:	180b883a 	mov	r5,r3
 4012ba8:	401a2d80 	call	401a2d8 <__adddf3>
 4012bac:	1021883a 	mov	r16,r2
 4012bb0:	d8800617 	ldw	r2,24(sp)
 4012bb4:	047f3034 	movhi	r17,64704
 4012bb8:	1c63883a 	add	r17,r3,r17
 4012bbc:	10031826 	beq	r2,zero,4013820 <_dtoa_r+0x1120>
 4012bc0:	d8c00517 	ldw	r3,20(sp)
 4012bc4:	db000617 	ldw	r12,24(sp)
 4012bc8:	d8c01315 	stw	r3,76(sp)
 4012bcc:	d9000b17 	ldw	r4,44(sp)
 4012bd0:	20038f26 	beq	r4,zero,4013a10 <_dtoa_r+0x1310>
 4012bd4:	60bfffc4 	addi	r2,r12,-1
 4012bd8:	100490fa 	slli	r2,r2,3
 4012bdc:	00c100b4 	movhi	r3,1026
 4012be0:	18f7c804 	addi	r3,r3,-8416
 4012be4:	1885883a 	add	r2,r3,r2
 4012be8:	11800017 	ldw	r6,0(r2)
 4012bec:	11c00117 	ldw	r7,4(r2)
 4012bf0:	d8800717 	ldw	r2,28(sp)
 4012bf4:	0009883a 	mov	r4,zero
 4012bf8:	014ff834 	movhi	r5,16352
 4012bfc:	db001615 	stw	r12,88(sp)
 4012c00:	15c00044 	addi	r23,r2,1
 4012c04:	400dcfc0 	call	400dcfc <__divdf3>
 4012c08:	800d883a 	mov	r6,r16
 4012c0c:	880f883a 	mov	r7,r17
 4012c10:	1009883a 	mov	r4,r2
 4012c14:	180b883a 	mov	r5,r3
 4012c18:	400f1080 	call	400f108 <__subdf3>
 4012c1c:	d9401017 	ldw	r5,64(sp)
 4012c20:	d9000f17 	ldw	r4,60(sp)
 4012c24:	102b883a 	mov	r21,r2
 4012c28:	d8c01215 	stw	r3,72(sp)
 4012c2c:	400fa040 	call	400fa04 <__fixdfsi>
 4012c30:	1009883a 	mov	r4,r2
 4012c34:	1029883a 	mov	r20,r2
 4012c38:	401ac0c0 	call	401ac0c <__floatsidf>
 4012c3c:	d9000f17 	ldw	r4,60(sp)
 4012c40:	d9401017 	ldw	r5,64(sp)
 4012c44:	100d883a 	mov	r6,r2
 4012c48:	180f883a 	mov	r7,r3
 4012c4c:	400f1080 	call	400f108 <__subdf3>
 4012c50:	1823883a 	mov	r17,r3
 4012c54:	d8c00717 	ldw	r3,28(sp)
 4012c58:	d9401217 	ldw	r5,72(sp)
 4012c5c:	a2000c04 	addi	r8,r20,48
 4012c60:	1021883a 	mov	r16,r2
 4012c64:	1a000005 	stb	r8,0(r3)
 4012c68:	800d883a 	mov	r6,r16
 4012c6c:	880f883a 	mov	r7,r17
 4012c70:	a809883a 	mov	r4,r21
 4012c74:	4029883a 	mov	r20,r8
 4012c78:	400e6cc0 	call	400e6cc <__gedf2>
 4012c7c:	00841d16 	blt	zero,r2,4013cf4 <_dtoa_r+0x15f4>
 4012c80:	800d883a 	mov	r6,r16
 4012c84:	880f883a 	mov	r7,r17
 4012c88:	0009883a 	mov	r4,zero
 4012c8c:	014ffc34 	movhi	r5,16368
 4012c90:	400f1080 	call	400f108 <__subdf3>
 4012c94:	d9401217 	ldw	r5,72(sp)
 4012c98:	100d883a 	mov	r6,r2
 4012c9c:	180f883a 	mov	r7,r3
 4012ca0:	a809883a 	mov	r4,r21
 4012ca4:	400e6cc0 	call	400e6cc <__gedf2>
 4012ca8:	db001617 	ldw	r12,88(sp)
 4012cac:	00840e16 	blt	zero,r2,4013ce8 <_dtoa_r+0x15e8>
 4012cb0:	00800044 	movi	r2,1
 4012cb4:	13006b0e 	bge	r2,r12,4012e64 <_dtoa_r+0x764>
 4012cb8:	d9000717 	ldw	r4,28(sp)
 4012cbc:	dd800f15 	stw	r22,60(sp)
 4012cc0:	dcc01015 	stw	r19,64(sp)
 4012cc4:	2319883a 	add	r12,r4,r12
 4012cc8:	dcc01217 	ldw	r19,72(sp)
 4012ccc:	602d883a 	mov	r22,r12
 4012cd0:	dc801215 	stw	r18,72(sp)
 4012cd4:	b825883a 	mov	r18,r23
 4012cd8:	00000906 	br	4012d00 <_dtoa_r+0x600>
 4012cdc:	400f1080 	call	400f108 <__subdf3>
 4012ce0:	a80d883a 	mov	r6,r21
 4012ce4:	980f883a 	mov	r7,r19
 4012ce8:	1009883a 	mov	r4,r2
 4012cec:	180b883a 	mov	r5,r3
 4012cf0:	400e7a80 	call	400e7a8 <__ledf2>
 4012cf4:	1003e816 	blt	r2,zero,4013c98 <_dtoa_r+0x1598>
 4012cf8:	b825883a 	mov	r18,r23
 4012cfc:	bd83e926 	beq	r23,r22,4013ca4 <_dtoa_r+0x15a4>
 4012d00:	a809883a 	mov	r4,r21
 4012d04:	980b883a 	mov	r5,r19
 4012d08:	000d883a 	mov	r6,zero
 4012d0c:	01d00934 	movhi	r7,16420
 4012d10:	400e89c0 	call	400e89c <__muldf3>
 4012d14:	000d883a 	mov	r6,zero
 4012d18:	01d00934 	movhi	r7,16420
 4012d1c:	8009883a 	mov	r4,r16
 4012d20:	880b883a 	mov	r5,r17
 4012d24:	102b883a 	mov	r21,r2
 4012d28:	1827883a 	mov	r19,r3
 4012d2c:	400e89c0 	call	400e89c <__muldf3>
 4012d30:	180b883a 	mov	r5,r3
 4012d34:	1009883a 	mov	r4,r2
 4012d38:	1821883a 	mov	r16,r3
 4012d3c:	1023883a 	mov	r17,r2
 4012d40:	400fa040 	call	400fa04 <__fixdfsi>
 4012d44:	1009883a 	mov	r4,r2
 4012d48:	1029883a 	mov	r20,r2
 4012d4c:	401ac0c0 	call	401ac0c <__floatsidf>
 4012d50:	8809883a 	mov	r4,r17
 4012d54:	800b883a 	mov	r5,r16
 4012d58:	100d883a 	mov	r6,r2
 4012d5c:	180f883a 	mov	r7,r3
 4012d60:	400f1080 	call	400f108 <__subdf3>
 4012d64:	a5000c04 	addi	r20,r20,48
 4012d68:	a80d883a 	mov	r6,r21
 4012d6c:	980f883a 	mov	r7,r19
 4012d70:	1009883a 	mov	r4,r2
 4012d74:	180b883a 	mov	r5,r3
 4012d78:	95000005 	stb	r20,0(r18)
 4012d7c:	1021883a 	mov	r16,r2
 4012d80:	1823883a 	mov	r17,r3
 4012d84:	400e7a80 	call	400e7a8 <__ledf2>
 4012d88:	bdc00044 	addi	r23,r23,1
 4012d8c:	800d883a 	mov	r6,r16
 4012d90:	880f883a 	mov	r7,r17
 4012d94:	0009883a 	mov	r4,zero
 4012d98:	014ffc34 	movhi	r5,16368
 4012d9c:	103fcf0e 	bge	r2,zero,4012cdc <__alt_mem_onchip_memory2_0+0xfc00db1c>
 4012da0:	d8c01317 	ldw	r3,76(sp)
 4012da4:	d8c00515 	stw	r3,20(sp)
 4012da8:	d9400917 	ldw	r5,36(sp)
 4012dac:	e009883a 	mov	r4,fp
 4012db0:	4015d740 	call	4015d74 <_Bfree>
 4012db4:	d9000517 	ldw	r4,20(sp)
 4012db8:	d9802317 	ldw	r6,140(sp)
 4012dbc:	d9c02517 	ldw	r7,148(sp)
 4012dc0:	b8000005 	stb	zero,0(r23)
 4012dc4:	20800044 	addi	r2,r4,1
 4012dc8:	30800015 	stw	r2,0(r6)
 4012dcc:	3802aa26 	beq	r7,zero,4013878 <_dtoa_r+0x1178>
 4012dd0:	3dc00015 	stw	r23,0(r7)
 4012dd4:	d8800717 	ldw	r2,28(sp)
 4012dd8:	003e7906 	br	40127c0 <__alt_mem_onchip_memory2_0+0xfc00d600>
 4012ddc:	00800434 	movhi	r2,16
 4012de0:	10bfffc4 	addi	r2,r2,-1
 4012de4:	88a2703a 	and	r17,r17,r2
 4012de8:	883e851e 	bne	r17,zero,4012800 <__alt_mem_onchip_memory2_0+0xfc00d640>
 4012dec:	008100b4 	movhi	r2,1026
 4012df0:	10b7aa04 	addi	r2,r2,-8536
 4012df4:	003e8406 	br	4012808 <__alt_mem_onchip_memory2_0+0xfc00d648>
 4012df8:	10c00204 	addi	r3,r2,8
 4012dfc:	003e8706 	br	401281c <__alt_mem_onchip_memory2_0+0xfc00d65c>
 4012e00:	01400434 	movhi	r5,16
 4012e04:	297fffc4 	addi	r5,r5,-1
 4012e08:	994a703a 	and	r5,r19,r5
 4012e0c:	9009883a 	mov	r4,r18
 4012e10:	843f0044 	addi	r16,r16,-1023
 4012e14:	294ffc34 	orhi	r5,r5,16368
 4012e18:	dd800217 	ldw	r22,8(sp)
 4012e1c:	d8001115 	stw	zero,68(sp)
 4012e20:	003ea506 	br	40128b8 <__alt_mem_onchip_memory2_0+0xfc00d6f8>
 4012e24:	008100b4 	movhi	r2,1026
 4012e28:	10b7a104 	addi	r2,r2,-8572
 4012e2c:	003e6406 	br	40127c0 <__alt_mem_onchip_memory2_0+0xfc00d600>
 4012e30:	e0001115 	stw	zero,68(fp)
 4012e34:	000b883a 	mov	r5,zero
 4012e38:	e009883a 	mov	r4,fp
 4012e3c:	4015ccc0 	call	4015ccc <_Balloc>
 4012e40:	01bfffc4 	movi	r6,-1
 4012e44:	01c00044 	movi	r7,1
 4012e48:	d8800715 	stw	r2,28(sp)
 4012e4c:	d9800c15 	stw	r6,48(sp)
 4012e50:	e0801015 	stw	r2,64(fp)
 4012e54:	d8000315 	stw	zero,12(sp)
 4012e58:	d9c00b15 	stw	r7,44(sp)
 4012e5c:	d9800615 	stw	r6,24(sp)
 4012e60:	d8002215 	stw	zero,136(sp)
 4012e64:	d8800117 	ldw	r2,4(sp)
 4012e68:	10008916 	blt	r2,zero,4013090 <_dtoa_r+0x990>
 4012e6c:	d9000517 	ldw	r4,20(sp)
 4012e70:	00c00384 	movi	r3,14
 4012e74:	19008616 	blt	r3,r4,4013090 <_dtoa_r+0x990>
 4012e78:	200490fa 	slli	r2,r4,3
 4012e7c:	00c100b4 	movhi	r3,1026
 4012e80:	d9802217 	ldw	r6,136(sp)
 4012e84:	18f7c804 	addi	r3,r3,-8416
 4012e88:	1885883a 	add	r2,r3,r2
 4012e8c:	14000017 	ldw	r16,0(r2)
 4012e90:	14400117 	ldw	r17,4(r2)
 4012e94:	30016316 	blt	r6,zero,4013424 <_dtoa_r+0xd24>
 4012e98:	800d883a 	mov	r6,r16
 4012e9c:	880f883a 	mov	r7,r17
 4012ea0:	9009883a 	mov	r4,r18
 4012ea4:	980b883a 	mov	r5,r19
 4012ea8:	400dcfc0 	call	400dcfc <__divdf3>
 4012eac:	180b883a 	mov	r5,r3
 4012eb0:	1009883a 	mov	r4,r2
 4012eb4:	400fa040 	call	400fa04 <__fixdfsi>
 4012eb8:	1009883a 	mov	r4,r2
 4012ebc:	102b883a 	mov	r21,r2
 4012ec0:	401ac0c0 	call	401ac0c <__floatsidf>
 4012ec4:	800d883a 	mov	r6,r16
 4012ec8:	880f883a 	mov	r7,r17
 4012ecc:	1009883a 	mov	r4,r2
 4012ed0:	180b883a 	mov	r5,r3
 4012ed4:	400e89c0 	call	400e89c <__muldf3>
 4012ed8:	100d883a 	mov	r6,r2
 4012edc:	180f883a 	mov	r7,r3
 4012ee0:	9009883a 	mov	r4,r18
 4012ee4:	980b883a 	mov	r5,r19
 4012ee8:	400f1080 	call	400f108 <__subdf3>
 4012eec:	d9c00717 	ldw	r7,28(sp)
 4012ef0:	1009883a 	mov	r4,r2
 4012ef4:	a8800c04 	addi	r2,r21,48
 4012ef8:	38800005 	stb	r2,0(r7)
 4012efc:	3dc00044 	addi	r23,r7,1
 4012f00:	d9c00617 	ldw	r7,24(sp)
 4012f04:	01800044 	movi	r6,1
 4012f08:	180b883a 	mov	r5,r3
 4012f0c:	2005883a 	mov	r2,r4
 4012f10:	39803826 	beq	r7,r6,4012ff4 <_dtoa_r+0x8f4>
 4012f14:	000d883a 	mov	r6,zero
 4012f18:	01d00934 	movhi	r7,16420
 4012f1c:	400e89c0 	call	400e89c <__muldf3>
 4012f20:	000d883a 	mov	r6,zero
 4012f24:	000f883a 	mov	r7,zero
 4012f28:	1009883a 	mov	r4,r2
 4012f2c:	180b883a 	mov	r5,r3
 4012f30:	1025883a 	mov	r18,r2
 4012f34:	1827883a 	mov	r19,r3
 4012f38:	401ab840 	call	401ab84 <__eqdf2>
 4012f3c:	103f9a26 	beq	r2,zero,4012da8 <__alt_mem_onchip_memory2_0+0xfc00dbe8>
 4012f40:	d9c00617 	ldw	r7,24(sp)
 4012f44:	d8c00717 	ldw	r3,28(sp)
 4012f48:	b829883a 	mov	r20,r23
 4012f4c:	38bfffc4 	addi	r2,r7,-1
 4012f50:	18ad883a 	add	r22,r3,r2
 4012f54:	00000a06 	br	4012f80 <_dtoa_r+0x880>
 4012f58:	400e89c0 	call	400e89c <__muldf3>
 4012f5c:	000d883a 	mov	r6,zero
 4012f60:	000f883a 	mov	r7,zero
 4012f64:	1009883a 	mov	r4,r2
 4012f68:	180b883a 	mov	r5,r3
 4012f6c:	1025883a 	mov	r18,r2
 4012f70:	1827883a 	mov	r19,r3
 4012f74:	b829883a 	mov	r20,r23
 4012f78:	401ab840 	call	401ab84 <__eqdf2>
 4012f7c:	103f8a26 	beq	r2,zero,4012da8 <__alt_mem_onchip_memory2_0+0xfc00dbe8>
 4012f80:	800d883a 	mov	r6,r16
 4012f84:	880f883a 	mov	r7,r17
 4012f88:	9009883a 	mov	r4,r18
 4012f8c:	980b883a 	mov	r5,r19
 4012f90:	400dcfc0 	call	400dcfc <__divdf3>
 4012f94:	180b883a 	mov	r5,r3
 4012f98:	1009883a 	mov	r4,r2
 4012f9c:	400fa040 	call	400fa04 <__fixdfsi>
 4012fa0:	1009883a 	mov	r4,r2
 4012fa4:	102b883a 	mov	r21,r2
 4012fa8:	401ac0c0 	call	401ac0c <__floatsidf>
 4012fac:	800d883a 	mov	r6,r16
 4012fb0:	880f883a 	mov	r7,r17
 4012fb4:	1009883a 	mov	r4,r2
 4012fb8:	180b883a 	mov	r5,r3
 4012fbc:	400e89c0 	call	400e89c <__muldf3>
 4012fc0:	100d883a 	mov	r6,r2
 4012fc4:	180f883a 	mov	r7,r3
 4012fc8:	9009883a 	mov	r4,r18
 4012fcc:	980b883a 	mov	r5,r19
 4012fd0:	400f1080 	call	400f108 <__subdf3>
 4012fd4:	aa000c04 	addi	r8,r21,48
 4012fd8:	a2000005 	stb	r8,0(r20)
 4012fdc:	000d883a 	mov	r6,zero
 4012fe0:	01d00934 	movhi	r7,16420
 4012fe4:	1009883a 	mov	r4,r2
 4012fe8:	180b883a 	mov	r5,r3
 4012fec:	a5c00044 	addi	r23,r20,1
 4012ff0:	b53fd91e 	bne	r22,r20,4012f58 <__alt_mem_onchip_memory2_0+0xfc00dd98>
 4012ff4:	100d883a 	mov	r6,r2
 4012ff8:	180f883a 	mov	r7,r3
 4012ffc:	1009883a 	mov	r4,r2
 4013000:	180b883a 	mov	r5,r3
 4013004:	401a2d80 	call	401a2d8 <__adddf3>
 4013008:	100d883a 	mov	r6,r2
 401300c:	180f883a 	mov	r7,r3
 4013010:	8009883a 	mov	r4,r16
 4013014:	880b883a 	mov	r5,r17
 4013018:	1027883a 	mov	r19,r2
 401301c:	1825883a 	mov	r18,r3
 4013020:	400e7a80 	call	400e7a8 <__ledf2>
 4013024:	10000816 	blt	r2,zero,4013048 <_dtoa_r+0x948>
 4013028:	980d883a 	mov	r6,r19
 401302c:	900f883a 	mov	r7,r18
 4013030:	8009883a 	mov	r4,r16
 4013034:	880b883a 	mov	r5,r17
 4013038:	401ab840 	call	401ab84 <__eqdf2>
 401303c:	103f5a1e 	bne	r2,zero,4012da8 <__alt_mem_onchip_memory2_0+0xfc00dbe8>
 4013040:	ad40004c 	andi	r21,r21,1
 4013044:	a83f5826 	beq	r21,zero,4012da8 <__alt_mem_onchip_memory2_0+0xfc00dbe8>
 4013048:	bd3fffc3 	ldbu	r20,-1(r23)
 401304c:	b8bfffc4 	addi	r2,r23,-1
 4013050:	1007883a 	mov	r3,r2
 4013054:	01400e44 	movi	r5,57
 4013058:	d9800717 	ldw	r6,28(sp)
 401305c:	00000506 	br	4013074 <_dtoa_r+0x974>
 4013060:	18ffffc4 	addi	r3,r3,-1
 4013064:	11824726 	beq	r2,r6,4013984 <_dtoa_r+0x1284>
 4013068:	1d000003 	ldbu	r20,0(r3)
 401306c:	102f883a 	mov	r23,r2
 4013070:	10bfffc4 	addi	r2,r2,-1
 4013074:	a1003fcc 	andi	r4,r20,255
 4013078:	2100201c 	xori	r4,r4,128
 401307c:	213fe004 	addi	r4,r4,-128
 4013080:	217ff726 	beq	r4,r5,4013060 <__alt_mem_onchip_memory2_0+0xfc00dea0>
 4013084:	a2000044 	addi	r8,r20,1
 4013088:	12000005 	stb	r8,0(r2)
 401308c:	003f4606 	br	4012da8 <__alt_mem_onchip_memory2_0+0xfc00dbe8>
 4013090:	d9000b17 	ldw	r4,44(sp)
 4013094:	2000c826 	beq	r4,zero,40133b8 <_dtoa_r+0xcb8>
 4013098:	d9800317 	ldw	r6,12(sp)
 401309c:	00c00044 	movi	r3,1
 40130a0:	1980f90e 	bge	r3,r6,4013488 <_dtoa_r+0xd88>
 40130a4:	d8800617 	ldw	r2,24(sp)
 40130a8:	d8c00a17 	ldw	r3,40(sp)
 40130ac:	157fffc4 	addi	r21,r2,-1
 40130b0:	1d41f316 	blt	r3,r21,4013880 <_dtoa_r+0x1180>
 40130b4:	1d6bc83a 	sub	r21,r3,r21
 40130b8:	d9c00617 	ldw	r7,24(sp)
 40130bc:	3802aa16 	blt	r7,zero,4013b68 <_dtoa_r+0x1468>
 40130c0:	dd000817 	ldw	r20,32(sp)
 40130c4:	d8800617 	ldw	r2,24(sp)
 40130c8:	d8c00817 	ldw	r3,32(sp)
 40130cc:	01400044 	movi	r5,1
 40130d0:	e009883a 	mov	r4,fp
 40130d4:	1887883a 	add	r3,r3,r2
 40130d8:	d8c00815 	stw	r3,32(sp)
 40130dc:	b0ad883a 	add	r22,r22,r2
 40130e0:	40161000 	call	4016100 <__i2b>
 40130e4:	1023883a 	mov	r17,r2
 40130e8:	a0000826 	beq	r20,zero,401310c <_dtoa_r+0xa0c>
 40130ec:	0580070e 	bge	zero,r22,401310c <_dtoa_r+0xa0c>
 40130f0:	a005883a 	mov	r2,r20
 40130f4:	b500b916 	blt	r22,r20,40133dc <_dtoa_r+0xcdc>
 40130f8:	d9000817 	ldw	r4,32(sp)
 40130fc:	a0a9c83a 	sub	r20,r20,r2
 4013100:	b0adc83a 	sub	r22,r22,r2
 4013104:	2089c83a 	sub	r4,r4,r2
 4013108:	d9000815 	stw	r4,32(sp)
 401310c:	d9800a17 	ldw	r6,40(sp)
 4013110:	0181810e 	bge	zero,r6,4013718 <_dtoa_r+0x1018>
 4013114:	d9c00b17 	ldw	r7,44(sp)
 4013118:	3800b326 	beq	r7,zero,40133e8 <_dtoa_r+0xce8>
 401311c:	a800b226 	beq	r21,zero,40133e8 <_dtoa_r+0xce8>
 4013120:	880b883a 	mov	r5,r17
 4013124:	a80d883a 	mov	r6,r21
 4013128:	e009883a 	mov	r4,fp
 401312c:	40163c80 	call	40163c8 <__pow5mult>
 4013130:	d9800917 	ldw	r6,36(sp)
 4013134:	100b883a 	mov	r5,r2
 4013138:	e009883a 	mov	r4,fp
 401313c:	1023883a 	mov	r17,r2
 4013140:	401613c0 	call	401613c <__multiply>
 4013144:	1021883a 	mov	r16,r2
 4013148:	d8800a17 	ldw	r2,40(sp)
 401314c:	d9400917 	ldw	r5,36(sp)
 4013150:	e009883a 	mov	r4,fp
 4013154:	1545c83a 	sub	r2,r2,r21
 4013158:	d8800a15 	stw	r2,40(sp)
 401315c:	4015d740 	call	4015d74 <_Bfree>
 4013160:	d8c00a17 	ldw	r3,40(sp)
 4013164:	18009f1e 	bne	r3,zero,40133e4 <_dtoa_r+0xce4>
 4013168:	05c00044 	movi	r23,1
 401316c:	e009883a 	mov	r4,fp
 4013170:	b80b883a 	mov	r5,r23
 4013174:	40161000 	call	4016100 <__i2b>
 4013178:	d9000d17 	ldw	r4,52(sp)
 401317c:	102b883a 	mov	r21,r2
 4013180:	2000ce26 	beq	r4,zero,40134bc <_dtoa_r+0xdbc>
 4013184:	200d883a 	mov	r6,r4
 4013188:	100b883a 	mov	r5,r2
 401318c:	e009883a 	mov	r4,fp
 4013190:	40163c80 	call	40163c8 <__pow5mult>
 4013194:	d9800317 	ldw	r6,12(sp)
 4013198:	102b883a 	mov	r21,r2
 401319c:	b981810e 	bge	r23,r6,40137a4 <_dtoa_r+0x10a4>
 40131a0:	0027883a 	mov	r19,zero
 40131a4:	a8800417 	ldw	r2,16(r21)
 40131a8:	05c00804 	movi	r23,32
 40131ac:	10800104 	addi	r2,r2,4
 40131b0:	1085883a 	add	r2,r2,r2
 40131b4:	1085883a 	add	r2,r2,r2
 40131b8:	a885883a 	add	r2,r21,r2
 40131bc:	11000017 	ldw	r4,0(r2)
 40131c0:	4015fe80 	call	4015fe8 <__hi0bits>
 40131c4:	b885c83a 	sub	r2,r23,r2
 40131c8:	1585883a 	add	r2,r2,r22
 40131cc:	108007cc 	andi	r2,r2,31
 40131d0:	1000b326 	beq	r2,zero,40134a0 <_dtoa_r+0xda0>
 40131d4:	00c00804 	movi	r3,32
 40131d8:	1887c83a 	sub	r3,r3,r2
 40131dc:	01000104 	movi	r4,4
 40131e0:	20c2cd0e 	bge	r4,r3,4013d18 <_dtoa_r+0x1618>
 40131e4:	00c00704 	movi	r3,28
 40131e8:	1885c83a 	sub	r2,r3,r2
 40131ec:	d8c00817 	ldw	r3,32(sp)
 40131f0:	a0a9883a 	add	r20,r20,r2
 40131f4:	b0ad883a 	add	r22,r22,r2
 40131f8:	1887883a 	add	r3,r3,r2
 40131fc:	d8c00815 	stw	r3,32(sp)
 4013200:	d9800817 	ldw	r6,32(sp)
 4013204:	0180040e 	bge	zero,r6,4013218 <_dtoa_r+0xb18>
 4013208:	800b883a 	mov	r5,r16
 401320c:	e009883a 	mov	r4,fp
 4013210:	40165080 	call	4016508 <__lshift>
 4013214:	1021883a 	mov	r16,r2
 4013218:	0580050e 	bge	zero,r22,4013230 <_dtoa_r+0xb30>
 401321c:	a80b883a 	mov	r5,r21
 4013220:	b00d883a 	mov	r6,r22
 4013224:	e009883a 	mov	r4,fp
 4013228:	40165080 	call	4016508 <__lshift>
 401322c:	102b883a 	mov	r21,r2
 4013230:	d9c00e17 	ldw	r7,56(sp)
 4013234:	3801211e 	bne	r7,zero,40136bc <_dtoa_r+0xfbc>
 4013238:	d9800617 	ldw	r6,24(sp)
 401323c:	0181380e 	bge	zero,r6,4013720 <_dtoa_r+0x1020>
 4013240:	d8c00b17 	ldw	r3,44(sp)
 4013244:	1800ab1e 	bne	r3,zero,40134f4 <_dtoa_r+0xdf4>
 4013248:	dc800717 	ldw	r18,28(sp)
 401324c:	dcc00617 	ldw	r19,24(sp)
 4013250:	9029883a 	mov	r20,r18
 4013254:	00000206 	br	4013260 <_dtoa_r+0xb60>
 4013258:	4015d9c0 	call	4015d9c <__multadd>
 401325c:	1021883a 	mov	r16,r2
 4013260:	a80b883a 	mov	r5,r21
 4013264:	8009883a 	mov	r4,r16
 4013268:	40124d80 	call	40124d8 <quorem>
 401326c:	10800c04 	addi	r2,r2,48
 4013270:	90800005 	stb	r2,0(r18)
 4013274:	94800044 	addi	r18,r18,1
 4013278:	9507c83a 	sub	r3,r18,r20
 401327c:	000f883a 	mov	r7,zero
 4013280:	01800284 	movi	r6,10
 4013284:	800b883a 	mov	r5,r16
 4013288:	e009883a 	mov	r4,fp
 401328c:	1cfff216 	blt	r3,r19,4013258 <__alt_mem_onchip_memory2_0+0xfc00e098>
 4013290:	1011883a 	mov	r8,r2
 4013294:	d8800617 	ldw	r2,24(sp)
 4013298:	0082370e 	bge	zero,r2,4013b78 <_dtoa_r+0x1478>
 401329c:	d9000717 	ldw	r4,28(sp)
 40132a0:	0025883a 	mov	r18,zero
 40132a4:	20af883a 	add	r23,r4,r2
 40132a8:	01800044 	movi	r6,1
 40132ac:	800b883a 	mov	r5,r16
 40132b0:	e009883a 	mov	r4,fp
 40132b4:	da001715 	stw	r8,92(sp)
 40132b8:	40165080 	call	4016508 <__lshift>
 40132bc:	a80b883a 	mov	r5,r21
 40132c0:	1009883a 	mov	r4,r2
 40132c4:	d8800915 	stw	r2,36(sp)
 40132c8:	40166500 	call	4016650 <__mcmp>
 40132cc:	da001717 	ldw	r8,92(sp)
 40132d0:	0081800e 	bge	zero,r2,40138d4 <_dtoa_r+0x11d4>
 40132d4:	b93fffc3 	ldbu	r4,-1(r23)
 40132d8:	b8bfffc4 	addi	r2,r23,-1
 40132dc:	1007883a 	mov	r3,r2
 40132e0:	01800e44 	movi	r6,57
 40132e4:	d9c00717 	ldw	r7,28(sp)
 40132e8:	00000506 	br	4013300 <_dtoa_r+0xc00>
 40132ec:	18ffffc4 	addi	r3,r3,-1
 40132f0:	11c12326 	beq	r2,r7,4013780 <_dtoa_r+0x1080>
 40132f4:	19000003 	ldbu	r4,0(r3)
 40132f8:	102f883a 	mov	r23,r2
 40132fc:	10bfffc4 	addi	r2,r2,-1
 4013300:	21403fcc 	andi	r5,r4,255
 4013304:	2940201c 	xori	r5,r5,128
 4013308:	297fe004 	addi	r5,r5,-128
 401330c:	29bff726 	beq	r5,r6,40132ec <__alt_mem_onchip_memory2_0+0xfc00e12c>
 4013310:	21000044 	addi	r4,r4,1
 4013314:	11000005 	stb	r4,0(r2)
 4013318:	a80b883a 	mov	r5,r21
 401331c:	e009883a 	mov	r4,fp
 4013320:	4015d740 	call	4015d74 <_Bfree>
 4013324:	883ea026 	beq	r17,zero,4012da8 <__alt_mem_onchip_memory2_0+0xfc00dbe8>
 4013328:	90000426 	beq	r18,zero,401333c <_dtoa_r+0xc3c>
 401332c:	94400326 	beq	r18,r17,401333c <_dtoa_r+0xc3c>
 4013330:	900b883a 	mov	r5,r18
 4013334:	e009883a 	mov	r4,fp
 4013338:	4015d740 	call	4015d74 <_Bfree>
 401333c:	880b883a 	mov	r5,r17
 4013340:	e009883a 	mov	r4,fp
 4013344:	4015d740 	call	4015d74 <_Bfree>
 4013348:	003e9706 	br	4012da8 <__alt_mem_onchip_memory2_0+0xfc00dbe8>
 401334c:	01800044 	movi	r6,1
 4013350:	d9800e15 	stw	r6,56(sp)
 4013354:	003d9606 	br	40129b0 <__alt_mem_onchip_memory2_0+0xfc00d7f0>
 4013358:	d8800817 	ldw	r2,32(sp)
 401335c:	d8c00517 	ldw	r3,20(sp)
 4013360:	d8000d15 	stw	zero,52(sp)
 4013364:	10c5c83a 	sub	r2,r2,r3
 4013368:	00c9c83a 	sub	r4,zero,r3
 401336c:	d8800815 	stw	r2,32(sp)
 4013370:	d9000a15 	stw	r4,40(sp)
 4013374:	003d9706 	br	40129d4 <__alt_mem_onchip_memory2_0+0xfc00d814>
 4013378:	05adc83a 	sub	r22,zero,r22
 401337c:	dd800815 	stw	r22,32(sp)
 4013380:	002d883a 	mov	r22,zero
 4013384:	003d8e06 	br	40129c0 <__alt_mem_onchip_memory2_0+0xfc00d800>
 4013388:	d9000517 	ldw	r4,20(sp)
 401338c:	401ac0c0 	call	401ac0c <__floatsidf>
 4013390:	100d883a 	mov	r6,r2
 4013394:	180f883a 	mov	r7,r3
 4013398:	a009883a 	mov	r4,r20
 401339c:	880b883a 	mov	r5,r17
 40133a0:	401ab840 	call	401ab84 <__eqdf2>
 40133a4:	103d7126 	beq	r2,zero,401296c <__alt_mem_onchip_memory2_0+0xfc00d7ac>
 40133a8:	d9c00517 	ldw	r7,20(sp)
 40133ac:	39ffffc4 	addi	r7,r7,-1
 40133b0:	d9c00515 	stw	r7,20(sp)
 40133b4:	003d6d06 	br	401296c <__alt_mem_onchip_memory2_0+0xfc00d7ac>
 40133b8:	dd400a17 	ldw	r21,40(sp)
 40133bc:	dd000817 	ldw	r20,32(sp)
 40133c0:	0023883a 	mov	r17,zero
 40133c4:	003f4806 	br	40130e8 <__alt_mem_onchip_memory2_0+0xfc00df28>
 40133c8:	10e3c83a 	sub	r17,r2,r3
 40133cc:	9448983a 	sll	r4,r18,r17
 40133d0:	003d3206 	br	401289c <__alt_mem_onchip_memory2_0+0xfc00d6dc>
 40133d4:	d8000e15 	stw	zero,56(sp)
 40133d8:	003d7506 	br	40129b0 <__alt_mem_onchip_memory2_0+0xfc00d7f0>
 40133dc:	b005883a 	mov	r2,r22
 40133e0:	003f4506 	br	40130f8 <__alt_mem_onchip_memory2_0+0xfc00df38>
 40133e4:	dc000915 	stw	r16,36(sp)
 40133e8:	d9800a17 	ldw	r6,40(sp)
 40133ec:	d9400917 	ldw	r5,36(sp)
 40133f0:	e009883a 	mov	r4,fp
 40133f4:	40163c80 	call	40163c8 <__pow5mult>
 40133f8:	1021883a 	mov	r16,r2
 40133fc:	003f5a06 	br	4013168 <__alt_mem_onchip_memory2_0+0xfc00dfa8>
 4013400:	01c00044 	movi	r7,1
 4013404:	d9c00b15 	stw	r7,44(sp)
 4013408:	d8802217 	ldw	r2,136(sp)
 401340c:	0081280e 	bge	zero,r2,40138b0 <_dtoa_r+0x11b0>
 4013410:	100d883a 	mov	r6,r2
 4013414:	1021883a 	mov	r16,r2
 4013418:	d8800c15 	stw	r2,48(sp)
 401341c:	d8800615 	stw	r2,24(sp)
 4013420:	003d8806 	br	4012a44 <__alt_mem_onchip_memory2_0+0xfc00d884>
 4013424:	d8800617 	ldw	r2,24(sp)
 4013428:	00be9b16 	blt	zero,r2,4012e98 <__alt_mem_onchip_memory2_0+0xfc00dcd8>
 401342c:	10010f1e 	bne	r2,zero,401386c <_dtoa_r+0x116c>
 4013430:	880b883a 	mov	r5,r17
 4013434:	000d883a 	mov	r6,zero
 4013438:	01d00534 	movhi	r7,16404
 401343c:	8009883a 	mov	r4,r16
 4013440:	400e89c0 	call	400e89c <__muldf3>
 4013444:	900d883a 	mov	r6,r18
 4013448:	980f883a 	mov	r7,r19
 401344c:	1009883a 	mov	r4,r2
 4013450:	180b883a 	mov	r5,r3
 4013454:	400e6cc0 	call	400e6cc <__gedf2>
 4013458:	002b883a 	mov	r21,zero
 401345c:	0023883a 	mov	r17,zero
 4013460:	1000bf16 	blt	r2,zero,4013760 <_dtoa_r+0x1060>
 4013464:	d9802217 	ldw	r6,136(sp)
 4013468:	ddc00717 	ldw	r23,28(sp)
 401346c:	018c303a 	nor	r6,zero,r6
 4013470:	d9800515 	stw	r6,20(sp)
 4013474:	a80b883a 	mov	r5,r21
 4013478:	e009883a 	mov	r4,fp
 401347c:	4015d740 	call	4015d74 <_Bfree>
 4013480:	883e4926 	beq	r17,zero,4012da8 <__alt_mem_onchip_memory2_0+0xfc00dbe8>
 4013484:	003fad06 	br	401333c <__alt_mem_onchip_memory2_0+0xfc00e17c>
 4013488:	d9c01117 	ldw	r7,68(sp)
 401348c:	3801bc26 	beq	r7,zero,4013b80 <_dtoa_r+0x1480>
 4013490:	10810cc4 	addi	r2,r2,1075
 4013494:	dd400a17 	ldw	r21,40(sp)
 4013498:	dd000817 	ldw	r20,32(sp)
 401349c:	003f0a06 	br	40130c8 <__alt_mem_onchip_memory2_0+0xfc00df08>
 40134a0:	00800704 	movi	r2,28
 40134a4:	d9000817 	ldw	r4,32(sp)
 40134a8:	a0a9883a 	add	r20,r20,r2
 40134ac:	b0ad883a 	add	r22,r22,r2
 40134b0:	2089883a 	add	r4,r4,r2
 40134b4:	d9000815 	stw	r4,32(sp)
 40134b8:	003f5106 	br	4013200 <__alt_mem_onchip_memory2_0+0xfc00e040>
 40134bc:	d8c00317 	ldw	r3,12(sp)
 40134c0:	b8c1fc0e 	bge	r23,r3,4013cb4 <_dtoa_r+0x15b4>
 40134c4:	0027883a 	mov	r19,zero
 40134c8:	b805883a 	mov	r2,r23
 40134cc:	003f3e06 	br	40131c8 <__alt_mem_onchip_memory2_0+0xfc00e008>
 40134d0:	880b883a 	mov	r5,r17
 40134d4:	e009883a 	mov	r4,fp
 40134d8:	000f883a 	mov	r7,zero
 40134dc:	01800284 	movi	r6,10
 40134e0:	4015d9c0 	call	4015d9c <__multadd>
 40134e4:	d9000c17 	ldw	r4,48(sp)
 40134e8:	1023883a 	mov	r17,r2
 40134ec:	0102040e 	bge	zero,r4,4013d00 <_dtoa_r+0x1600>
 40134f0:	d9000615 	stw	r4,24(sp)
 40134f4:	0500050e 	bge	zero,r20,401350c <_dtoa_r+0xe0c>
 40134f8:	880b883a 	mov	r5,r17
 40134fc:	a00d883a 	mov	r6,r20
 4013500:	e009883a 	mov	r4,fp
 4013504:	40165080 	call	4016508 <__lshift>
 4013508:	1023883a 	mov	r17,r2
 401350c:	9801241e 	bne	r19,zero,40139a0 <_dtoa_r+0x12a0>
 4013510:	8829883a 	mov	r20,r17
 4013514:	d9000617 	ldw	r4,24(sp)
 4013518:	dcc00717 	ldw	r19,28(sp)
 401351c:	9480004c 	andi	r18,r18,1
 4013520:	20bfffc4 	addi	r2,r4,-1
 4013524:	9885883a 	add	r2,r19,r2
 4013528:	d8800415 	stw	r2,16(sp)
 401352c:	dc800615 	stw	r18,24(sp)
 4013530:	a80b883a 	mov	r5,r21
 4013534:	8009883a 	mov	r4,r16
 4013538:	40124d80 	call	40124d8 <quorem>
 401353c:	880b883a 	mov	r5,r17
 4013540:	8009883a 	mov	r4,r16
 4013544:	102f883a 	mov	r23,r2
 4013548:	40166500 	call	4016650 <__mcmp>
 401354c:	a80b883a 	mov	r5,r21
 4013550:	a00d883a 	mov	r6,r20
 4013554:	e009883a 	mov	r4,fp
 4013558:	102d883a 	mov	r22,r2
 401355c:	40166b00 	call	40166b0 <__mdiff>
 4013560:	1007883a 	mov	r3,r2
 4013564:	10800317 	ldw	r2,12(r2)
 4013568:	bc800c04 	addi	r18,r23,48
 401356c:	180b883a 	mov	r5,r3
 4013570:	10004e1e 	bne	r2,zero,40136ac <_dtoa_r+0xfac>
 4013574:	8009883a 	mov	r4,r16
 4013578:	d8c01615 	stw	r3,88(sp)
 401357c:	40166500 	call	4016650 <__mcmp>
 4013580:	d8c01617 	ldw	r3,88(sp)
 4013584:	e009883a 	mov	r4,fp
 4013588:	d8801615 	stw	r2,88(sp)
 401358c:	180b883a 	mov	r5,r3
 4013590:	4015d740 	call	4015d74 <_Bfree>
 4013594:	d8801617 	ldw	r2,88(sp)
 4013598:	1000041e 	bne	r2,zero,40135ac <_dtoa_r+0xeac>
 401359c:	d9800317 	ldw	r6,12(sp)
 40135a0:	3000021e 	bne	r6,zero,40135ac <_dtoa_r+0xeac>
 40135a4:	d8c00617 	ldw	r3,24(sp)
 40135a8:	18003726 	beq	r3,zero,4013688 <_dtoa_r+0xf88>
 40135ac:	b0002016 	blt	r22,zero,4013630 <_dtoa_r+0xf30>
 40135b0:	b000041e 	bne	r22,zero,40135c4 <_dtoa_r+0xec4>
 40135b4:	d9000317 	ldw	r4,12(sp)
 40135b8:	2000021e 	bne	r4,zero,40135c4 <_dtoa_r+0xec4>
 40135bc:	d8c00617 	ldw	r3,24(sp)
 40135c0:	18001b26 	beq	r3,zero,4013630 <_dtoa_r+0xf30>
 40135c4:	00810716 	blt	zero,r2,40139e4 <_dtoa_r+0x12e4>
 40135c8:	d8c00417 	ldw	r3,16(sp)
 40135cc:	9d800044 	addi	r22,r19,1
 40135d0:	9c800005 	stb	r18,0(r19)
 40135d4:	b02f883a 	mov	r23,r22
 40135d8:	98c10626 	beq	r19,r3,40139f4 <_dtoa_r+0x12f4>
 40135dc:	800b883a 	mov	r5,r16
 40135e0:	000f883a 	mov	r7,zero
 40135e4:	01800284 	movi	r6,10
 40135e8:	e009883a 	mov	r4,fp
 40135ec:	4015d9c0 	call	4015d9c <__multadd>
 40135f0:	1021883a 	mov	r16,r2
 40135f4:	000f883a 	mov	r7,zero
 40135f8:	01800284 	movi	r6,10
 40135fc:	880b883a 	mov	r5,r17
 4013600:	e009883a 	mov	r4,fp
 4013604:	8d002526 	beq	r17,r20,401369c <_dtoa_r+0xf9c>
 4013608:	4015d9c0 	call	4015d9c <__multadd>
 401360c:	a00b883a 	mov	r5,r20
 4013610:	000f883a 	mov	r7,zero
 4013614:	01800284 	movi	r6,10
 4013618:	e009883a 	mov	r4,fp
 401361c:	1023883a 	mov	r17,r2
 4013620:	4015d9c0 	call	4015d9c <__multadd>
 4013624:	1029883a 	mov	r20,r2
 4013628:	b027883a 	mov	r19,r22
 401362c:	003fc006 	br	4013530 <__alt_mem_onchip_memory2_0+0xfc00e370>
 4013630:	9011883a 	mov	r8,r18
 4013634:	00800e0e 	bge	zero,r2,4013670 <_dtoa_r+0xf70>
 4013638:	800b883a 	mov	r5,r16
 401363c:	01800044 	movi	r6,1
 4013640:	e009883a 	mov	r4,fp
 4013644:	da001715 	stw	r8,92(sp)
 4013648:	40165080 	call	4016508 <__lshift>
 401364c:	a80b883a 	mov	r5,r21
 4013650:	1009883a 	mov	r4,r2
 4013654:	1021883a 	mov	r16,r2
 4013658:	40166500 	call	4016650 <__mcmp>
 401365c:	da001717 	ldw	r8,92(sp)
 4013660:	0081960e 	bge	zero,r2,4013cbc <_dtoa_r+0x15bc>
 4013664:	00800e44 	movi	r2,57
 4013668:	40817026 	beq	r8,r2,4013c2c <_dtoa_r+0x152c>
 401366c:	ba000c44 	addi	r8,r23,49
 4013670:	8825883a 	mov	r18,r17
 4013674:	9dc00044 	addi	r23,r19,1
 4013678:	9a000005 	stb	r8,0(r19)
 401367c:	a023883a 	mov	r17,r20
 4013680:	dc000915 	stw	r16,36(sp)
 4013684:	003f2406 	br	4013318 <__alt_mem_onchip_memory2_0+0xfc00e158>
 4013688:	00800e44 	movi	r2,57
 401368c:	9011883a 	mov	r8,r18
 4013690:	90816626 	beq	r18,r2,4013c2c <_dtoa_r+0x152c>
 4013694:	05bff516 	blt	zero,r22,401366c <__alt_mem_onchip_memory2_0+0xfc00e4ac>
 4013698:	003ff506 	br	4013670 <__alt_mem_onchip_memory2_0+0xfc00e4b0>
 401369c:	4015d9c0 	call	4015d9c <__multadd>
 40136a0:	1023883a 	mov	r17,r2
 40136a4:	1029883a 	mov	r20,r2
 40136a8:	003fdf06 	br	4013628 <__alt_mem_onchip_memory2_0+0xfc00e468>
 40136ac:	e009883a 	mov	r4,fp
 40136b0:	4015d740 	call	4015d74 <_Bfree>
 40136b4:	00800044 	movi	r2,1
 40136b8:	003fbc06 	br	40135ac <__alt_mem_onchip_memory2_0+0xfc00e3ec>
 40136bc:	a80b883a 	mov	r5,r21
 40136c0:	8009883a 	mov	r4,r16
 40136c4:	40166500 	call	4016650 <__mcmp>
 40136c8:	103edb0e 	bge	r2,zero,4013238 <__alt_mem_onchip_memory2_0+0xfc00e078>
 40136cc:	800b883a 	mov	r5,r16
 40136d0:	000f883a 	mov	r7,zero
 40136d4:	01800284 	movi	r6,10
 40136d8:	e009883a 	mov	r4,fp
 40136dc:	4015d9c0 	call	4015d9c <__multadd>
 40136e0:	1021883a 	mov	r16,r2
 40136e4:	d8800517 	ldw	r2,20(sp)
 40136e8:	d8c00b17 	ldw	r3,44(sp)
 40136ec:	10bfffc4 	addi	r2,r2,-1
 40136f0:	d8800515 	stw	r2,20(sp)
 40136f4:	183f761e 	bne	r3,zero,40134d0 <__alt_mem_onchip_memory2_0+0xfc00e310>
 40136f8:	d9000c17 	ldw	r4,48(sp)
 40136fc:	0101730e 	bge	zero,r4,4013ccc <_dtoa_r+0x15cc>
 4013700:	d9000615 	stw	r4,24(sp)
 4013704:	003ed006 	br	4013248 <__alt_mem_onchip_memory2_0+0xfc00e088>
 4013708:	00800084 	movi	r2,2
 401370c:	3081861e 	bne	r6,r2,4013d28 <_dtoa_r+0x1628>
 4013710:	d8000b15 	stw	zero,44(sp)
 4013714:	003f3c06 	br	4013408 <__alt_mem_onchip_memory2_0+0xfc00e248>
 4013718:	dc000917 	ldw	r16,36(sp)
 401371c:	003e9206 	br	4013168 <__alt_mem_onchip_memory2_0+0xfc00dfa8>
 4013720:	d9c00317 	ldw	r7,12(sp)
 4013724:	00800084 	movi	r2,2
 4013728:	11fec50e 	bge	r2,r7,4013240 <__alt_mem_onchip_memory2_0+0xfc00e080>
 401372c:	d9000617 	ldw	r4,24(sp)
 4013730:	20013c1e 	bne	r4,zero,4013c24 <_dtoa_r+0x1524>
 4013734:	a80b883a 	mov	r5,r21
 4013738:	000f883a 	mov	r7,zero
 401373c:	01800144 	movi	r6,5
 4013740:	e009883a 	mov	r4,fp
 4013744:	4015d9c0 	call	4015d9c <__multadd>
 4013748:	100b883a 	mov	r5,r2
 401374c:	8009883a 	mov	r4,r16
 4013750:	102b883a 	mov	r21,r2
 4013754:	40166500 	call	4016650 <__mcmp>
 4013758:	dc000915 	stw	r16,36(sp)
 401375c:	00bf410e 	bge	zero,r2,4013464 <__alt_mem_onchip_memory2_0+0xfc00e2a4>
 4013760:	d9c00717 	ldw	r7,28(sp)
 4013764:	00800c44 	movi	r2,49
 4013768:	38800005 	stb	r2,0(r7)
 401376c:	d8800517 	ldw	r2,20(sp)
 4013770:	3dc00044 	addi	r23,r7,1
 4013774:	10800044 	addi	r2,r2,1
 4013778:	d8800515 	stw	r2,20(sp)
 401377c:	003f3d06 	br	4013474 <__alt_mem_onchip_memory2_0+0xfc00e2b4>
 4013780:	d9800517 	ldw	r6,20(sp)
 4013784:	d9c00717 	ldw	r7,28(sp)
 4013788:	00800c44 	movi	r2,49
 401378c:	31800044 	addi	r6,r6,1
 4013790:	d9800515 	stw	r6,20(sp)
 4013794:	38800005 	stb	r2,0(r7)
 4013798:	003edf06 	br	4013318 <__alt_mem_onchip_memory2_0+0xfc00e158>
 401379c:	d8000b15 	stw	zero,44(sp)
 40137a0:	003c9f06 	br	4012a20 <__alt_mem_onchip_memory2_0+0xfc00d860>
 40137a4:	903e7e1e 	bne	r18,zero,40131a0 <__alt_mem_onchip_memory2_0+0xfc00dfe0>
 40137a8:	00800434 	movhi	r2,16
 40137ac:	10bfffc4 	addi	r2,r2,-1
 40137b0:	9884703a 	and	r2,r19,r2
 40137b4:	1000ea1e 	bne	r2,zero,4013b60 <_dtoa_r+0x1460>
 40137b8:	9cdffc2c 	andhi	r19,r19,32752
 40137bc:	9800e826 	beq	r19,zero,4013b60 <_dtoa_r+0x1460>
 40137c0:	d9c00817 	ldw	r7,32(sp)
 40137c4:	b5800044 	addi	r22,r22,1
 40137c8:	04c00044 	movi	r19,1
 40137cc:	39c00044 	addi	r7,r7,1
 40137d0:	d9c00815 	stw	r7,32(sp)
 40137d4:	d8800d17 	ldw	r2,52(sp)
 40137d8:	103e721e 	bne	r2,zero,40131a4 <__alt_mem_onchip_memory2_0+0xfc00dfe4>
 40137dc:	00800044 	movi	r2,1
 40137e0:	003e7906 	br	40131c8 <__alt_mem_onchip_memory2_0+0xfc00e008>
 40137e4:	8009883a 	mov	r4,r16
 40137e8:	401ac0c0 	call	401ac0c <__floatsidf>
 40137ec:	d9800f17 	ldw	r6,60(sp)
 40137f0:	d9c01017 	ldw	r7,64(sp)
 40137f4:	1009883a 	mov	r4,r2
 40137f8:	180b883a 	mov	r5,r3
 40137fc:	400e89c0 	call	400e89c <__muldf3>
 4013800:	000d883a 	mov	r6,zero
 4013804:	01d00734 	movhi	r7,16412
 4013808:	1009883a 	mov	r4,r2
 401380c:	180b883a 	mov	r5,r3
 4013810:	401a2d80 	call	401a2d8 <__adddf3>
 4013814:	047f3034 	movhi	r17,64704
 4013818:	1021883a 	mov	r16,r2
 401381c:	1c63883a 	add	r17,r3,r17
 4013820:	d9000f17 	ldw	r4,60(sp)
 4013824:	d9401017 	ldw	r5,64(sp)
 4013828:	000d883a 	mov	r6,zero
 401382c:	01d00534 	movhi	r7,16404
 4013830:	400f1080 	call	400f108 <__subdf3>
 4013834:	800d883a 	mov	r6,r16
 4013838:	880f883a 	mov	r7,r17
 401383c:	1009883a 	mov	r4,r2
 4013840:	180b883a 	mov	r5,r3
 4013844:	102b883a 	mov	r21,r2
 4013848:	1829883a 	mov	r20,r3
 401384c:	400e6cc0 	call	400e6cc <__gedf2>
 4013850:	00806c16 	blt	zero,r2,4013a04 <_dtoa_r+0x1304>
 4013854:	89e0003c 	xorhi	r7,r17,32768
 4013858:	800d883a 	mov	r6,r16
 401385c:	a809883a 	mov	r4,r21
 4013860:	a00b883a 	mov	r5,r20
 4013864:	400e7a80 	call	400e7a8 <__ledf2>
 4013868:	103d7e0e 	bge	r2,zero,4012e64 <__alt_mem_onchip_memory2_0+0xfc00dca4>
 401386c:	002b883a 	mov	r21,zero
 4013870:	0023883a 	mov	r17,zero
 4013874:	003efb06 	br	4013464 <__alt_mem_onchip_memory2_0+0xfc00e2a4>
 4013878:	d8800717 	ldw	r2,28(sp)
 401387c:	003bd006 	br	40127c0 <__alt_mem_onchip_memory2_0+0xfc00d600>
 4013880:	d9000a17 	ldw	r4,40(sp)
 4013884:	d9800d17 	ldw	r6,52(sp)
 4013888:	dd400a15 	stw	r21,40(sp)
 401388c:	a905c83a 	sub	r2,r21,r4
 4013890:	308d883a 	add	r6,r6,r2
 4013894:	d9800d15 	stw	r6,52(sp)
 4013898:	002b883a 	mov	r21,zero
 401389c:	003e0606 	br	40130b8 <__alt_mem_onchip_memory2_0+0xfc00def8>
 40138a0:	9023883a 	mov	r17,r18
 40138a4:	9829883a 	mov	r20,r19
 40138a8:	04000084 	movi	r16,2
 40138ac:	003c9206 	br	4012af8 <__alt_mem_onchip_memory2_0+0xfc00d938>
 40138b0:	04000044 	movi	r16,1
 40138b4:	dc000c15 	stw	r16,48(sp)
 40138b8:	dc000615 	stw	r16,24(sp)
 40138bc:	dc002215 	stw	r16,136(sp)
 40138c0:	e0001115 	stw	zero,68(fp)
 40138c4:	000b883a 	mov	r5,zero
 40138c8:	003c6906 	br	4012a70 <__alt_mem_onchip_memory2_0+0xfc00d8b0>
 40138cc:	3021883a 	mov	r16,r6
 40138d0:	003ffb06 	br	40138c0 <__alt_mem_onchip_memory2_0+0xfc00e700>
 40138d4:	1000021e 	bne	r2,zero,40138e0 <_dtoa_r+0x11e0>
 40138d8:	4200004c 	andi	r8,r8,1
 40138dc:	403e7d1e 	bne	r8,zero,40132d4 <__alt_mem_onchip_memory2_0+0xfc00e114>
 40138e0:	01000c04 	movi	r4,48
 40138e4:	00000106 	br	40138ec <_dtoa_r+0x11ec>
 40138e8:	102f883a 	mov	r23,r2
 40138ec:	b8bfffc4 	addi	r2,r23,-1
 40138f0:	10c00007 	ldb	r3,0(r2)
 40138f4:	193ffc26 	beq	r3,r4,40138e8 <__alt_mem_onchip_memory2_0+0xfc00e728>
 40138f8:	003e8706 	br	4013318 <__alt_mem_onchip_memory2_0+0xfc00e158>
 40138fc:	d8800517 	ldw	r2,20(sp)
 4013900:	00a3c83a 	sub	r17,zero,r2
 4013904:	8800a426 	beq	r17,zero,4013b98 <_dtoa_r+0x1498>
 4013908:	888003cc 	andi	r2,r17,15
 401390c:	100490fa 	slli	r2,r2,3
 4013910:	00c100b4 	movhi	r3,1026
 4013914:	18f7c804 	addi	r3,r3,-8416
 4013918:	1885883a 	add	r2,r3,r2
 401391c:	11800017 	ldw	r6,0(r2)
 4013920:	11c00117 	ldw	r7,4(r2)
 4013924:	9009883a 	mov	r4,r18
 4013928:	980b883a 	mov	r5,r19
 401392c:	8823d13a 	srai	r17,r17,4
 4013930:	400e89c0 	call	400e89c <__muldf3>
 4013934:	d8800f15 	stw	r2,60(sp)
 4013938:	d8c01015 	stw	r3,64(sp)
 401393c:	8800e826 	beq	r17,zero,4013ce0 <_dtoa_r+0x15e0>
 4013940:	050100b4 	movhi	r20,1026
 4013944:	a537be04 	addi	r20,r20,-8456
 4013948:	04000084 	movi	r16,2
 401394c:	8980004c 	andi	r6,r17,1
 4013950:	1009883a 	mov	r4,r2
 4013954:	8823d07a 	srai	r17,r17,1
 4013958:	180b883a 	mov	r5,r3
 401395c:	30000426 	beq	r6,zero,4013970 <_dtoa_r+0x1270>
 4013960:	a1800017 	ldw	r6,0(r20)
 4013964:	a1c00117 	ldw	r7,4(r20)
 4013968:	84000044 	addi	r16,r16,1
 401396c:	400e89c0 	call	400e89c <__muldf3>
 4013970:	a5000204 	addi	r20,r20,8
 4013974:	883ff51e 	bne	r17,zero,401394c <__alt_mem_onchip_memory2_0+0xfc00e78c>
 4013978:	d8800f15 	stw	r2,60(sp)
 401397c:	d8c01015 	stw	r3,64(sp)
 4013980:	003c7606 	br	4012b5c <__alt_mem_onchip_memory2_0+0xfc00d99c>
 4013984:	00c00c04 	movi	r3,48
 4013988:	10c00005 	stb	r3,0(r2)
 401398c:	d8c00517 	ldw	r3,20(sp)
 4013990:	bd3fffc3 	ldbu	r20,-1(r23)
 4013994:	18c00044 	addi	r3,r3,1
 4013998:	d8c00515 	stw	r3,20(sp)
 401399c:	003db906 	br	4013084 <__alt_mem_onchip_memory2_0+0xfc00dec4>
 40139a0:	89400117 	ldw	r5,4(r17)
 40139a4:	e009883a 	mov	r4,fp
 40139a8:	4015ccc0 	call	4015ccc <_Balloc>
 40139ac:	89800417 	ldw	r6,16(r17)
 40139b0:	89400304 	addi	r5,r17,12
 40139b4:	11000304 	addi	r4,r2,12
 40139b8:	31800084 	addi	r6,r6,2
 40139bc:	318d883a 	add	r6,r6,r6
 40139c0:	318d883a 	add	r6,r6,r6
 40139c4:	1027883a 	mov	r19,r2
 40139c8:	400fbdc0 	call	400fbdc <memcpy>
 40139cc:	01800044 	movi	r6,1
 40139d0:	980b883a 	mov	r5,r19
 40139d4:	e009883a 	mov	r4,fp
 40139d8:	40165080 	call	4016508 <__lshift>
 40139dc:	1029883a 	mov	r20,r2
 40139e0:	003ecc06 	br	4013514 <__alt_mem_onchip_memory2_0+0xfc00e354>
 40139e4:	00800e44 	movi	r2,57
 40139e8:	90809026 	beq	r18,r2,4013c2c <_dtoa_r+0x152c>
 40139ec:	92000044 	addi	r8,r18,1
 40139f0:	003f1f06 	br	4013670 <__alt_mem_onchip_memory2_0+0xfc00e4b0>
 40139f4:	9011883a 	mov	r8,r18
 40139f8:	8825883a 	mov	r18,r17
 40139fc:	a023883a 	mov	r17,r20
 4013a00:	003e2906 	br	40132a8 <__alt_mem_onchip_memory2_0+0xfc00e0e8>
 4013a04:	002b883a 	mov	r21,zero
 4013a08:	0023883a 	mov	r17,zero
 4013a0c:	003f5406 	br	4013760 <__alt_mem_onchip_memory2_0+0xfc00e5a0>
 4013a10:	61bfffc4 	addi	r6,r12,-1
 4013a14:	300490fa 	slli	r2,r6,3
 4013a18:	00c100b4 	movhi	r3,1026
 4013a1c:	18f7c804 	addi	r3,r3,-8416
 4013a20:	1885883a 	add	r2,r3,r2
 4013a24:	11000017 	ldw	r4,0(r2)
 4013a28:	11400117 	ldw	r5,4(r2)
 4013a2c:	d8800717 	ldw	r2,28(sp)
 4013a30:	880f883a 	mov	r7,r17
 4013a34:	d9801215 	stw	r6,72(sp)
 4013a38:	800d883a 	mov	r6,r16
 4013a3c:	db001615 	stw	r12,88(sp)
 4013a40:	15c00044 	addi	r23,r2,1
 4013a44:	400e89c0 	call	400e89c <__muldf3>
 4013a48:	d9401017 	ldw	r5,64(sp)
 4013a4c:	d9000f17 	ldw	r4,60(sp)
 4013a50:	d8c01515 	stw	r3,84(sp)
 4013a54:	d8801415 	stw	r2,80(sp)
 4013a58:	400fa040 	call	400fa04 <__fixdfsi>
 4013a5c:	1009883a 	mov	r4,r2
 4013a60:	1021883a 	mov	r16,r2
 4013a64:	401ac0c0 	call	401ac0c <__floatsidf>
 4013a68:	d9000f17 	ldw	r4,60(sp)
 4013a6c:	d9401017 	ldw	r5,64(sp)
 4013a70:	100d883a 	mov	r6,r2
 4013a74:	180f883a 	mov	r7,r3
 4013a78:	400f1080 	call	400f108 <__subdf3>
 4013a7c:	1829883a 	mov	r20,r3
 4013a80:	d8c00717 	ldw	r3,28(sp)
 4013a84:	84000c04 	addi	r16,r16,48
 4013a88:	1023883a 	mov	r17,r2
 4013a8c:	1c000005 	stb	r16,0(r3)
 4013a90:	db001617 	ldw	r12,88(sp)
 4013a94:	00800044 	movi	r2,1
 4013a98:	60802226 	beq	r12,r2,4013b24 <_dtoa_r+0x1424>
 4013a9c:	d9c00717 	ldw	r7,28(sp)
 4013aa0:	8805883a 	mov	r2,r17
 4013aa4:	b82b883a 	mov	r21,r23
 4013aa8:	3b19883a 	add	r12,r7,r12
 4013aac:	6023883a 	mov	r17,r12
 4013ab0:	a007883a 	mov	r3,r20
 4013ab4:	dc800f15 	stw	r18,60(sp)
 4013ab8:	000d883a 	mov	r6,zero
 4013abc:	01d00934 	movhi	r7,16420
 4013ac0:	1009883a 	mov	r4,r2
 4013ac4:	180b883a 	mov	r5,r3
 4013ac8:	400e89c0 	call	400e89c <__muldf3>
 4013acc:	180b883a 	mov	r5,r3
 4013ad0:	1009883a 	mov	r4,r2
 4013ad4:	1829883a 	mov	r20,r3
 4013ad8:	1025883a 	mov	r18,r2
 4013adc:	400fa040 	call	400fa04 <__fixdfsi>
 4013ae0:	1009883a 	mov	r4,r2
 4013ae4:	1021883a 	mov	r16,r2
 4013ae8:	401ac0c0 	call	401ac0c <__floatsidf>
 4013aec:	100d883a 	mov	r6,r2
 4013af0:	180f883a 	mov	r7,r3
 4013af4:	9009883a 	mov	r4,r18
 4013af8:	a00b883a 	mov	r5,r20
 4013afc:	84000c04 	addi	r16,r16,48
 4013b00:	400f1080 	call	400f108 <__subdf3>
 4013b04:	ad400044 	addi	r21,r21,1
 4013b08:	ac3fffc5 	stb	r16,-1(r21)
 4013b0c:	ac7fea1e 	bne	r21,r17,4013ab8 <__alt_mem_onchip_memory2_0+0xfc00e8f8>
 4013b10:	1023883a 	mov	r17,r2
 4013b14:	d8801217 	ldw	r2,72(sp)
 4013b18:	dc800f17 	ldw	r18,60(sp)
 4013b1c:	1829883a 	mov	r20,r3
 4013b20:	b8af883a 	add	r23,r23,r2
 4013b24:	d9001417 	ldw	r4,80(sp)
 4013b28:	d9401517 	ldw	r5,84(sp)
 4013b2c:	000d883a 	mov	r6,zero
 4013b30:	01cff834 	movhi	r7,16352
 4013b34:	401a2d80 	call	401a2d8 <__adddf3>
 4013b38:	880d883a 	mov	r6,r17
 4013b3c:	a00f883a 	mov	r7,r20
 4013b40:	1009883a 	mov	r4,r2
 4013b44:	180b883a 	mov	r5,r3
 4013b48:	400e7a80 	call	400e7a8 <__ledf2>
 4013b4c:	10003e0e 	bge	r2,zero,4013c48 <_dtoa_r+0x1548>
 4013b50:	d9001317 	ldw	r4,76(sp)
 4013b54:	bd3fffc3 	ldbu	r20,-1(r23)
 4013b58:	d9000515 	stw	r4,20(sp)
 4013b5c:	003d3b06 	br	401304c <__alt_mem_onchip_memory2_0+0xfc00de8c>
 4013b60:	0027883a 	mov	r19,zero
 4013b64:	003f1b06 	br	40137d4 <__alt_mem_onchip_memory2_0+0xfc00e614>
 4013b68:	d8800817 	ldw	r2,32(sp)
 4013b6c:	11e9c83a 	sub	r20,r2,r7
 4013b70:	0005883a 	mov	r2,zero
 4013b74:	003d5406 	br	40130c8 <__alt_mem_onchip_memory2_0+0xfc00df08>
 4013b78:	00800044 	movi	r2,1
 4013b7c:	003dc706 	br	401329c <__alt_mem_onchip_memory2_0+0xfc00e0dc>
 4013b80:	d8c00217 	ldw	r3,8(sp)
 4013b84:	00800d84 	movi	r2,54
 4013b88:	dd400a17 	ldw	r21,40(sp)
 4013b8c:	10c5c83a 	sub	r2,r2,r3
 4013b90:	dd000817 	ldw	r20,32(sp)
 4013b94:	003d4c06 	br	40130c8 <__alt_mem_onchip_memory2_0+0xfc00df08>
 4013b98:	dc800f15 	stw	r18,60(sp)
 4013b9c:	dcc01015 	stw	r19,64(sp)
 4013ba0:	04000084 	movi	r16,2
 4013ba4:	003bed06 	br	4012b5c <__alt_mem_onchip_memory2_0+0xfc00d99c>
 4013ba8:	d9000617 	ldw	r4,24(sp)
 4013bac:	203f0d26 	beq	r4,zero,40137e4 <__alt_mem_onchip_memory2_0+0xfc00e624>
 4013bb0:	d9800c17 	ldw	r6,48(sp)
 4013bb4:	01bcab0e 	bge	zero,r6,4012e64 <__alt_mem_onchip_memory2_0+0xfc00dca4>
 4013bb8:	d9401017 	ldw	r5,64(sp)
 4013bbc:	d9000f17 	ldw	r4,60(sp)
 4013bc0:	000d883a 	mov	r6,zero
 4013bc4:	01d00934 	movhi	r7,16420
 4013bc8:	400e89c0 	call	400e89c <__muldf3>
 4013bcc:	81000044 	addi	r4,r16,1
 4013bd0:	d8800f15 	stw	r2,60(sp)
 4013bd4:	d8c01015 	stw	r3,64(sp)
 4013bd8:	401ac0c0 	call	401ac0c <__floatsidf>
 4013bdc:	d9800f17 	ldw	r6,60(sp)
 4013be0:	d9c01017 	ldw	r7,64(sp)
 4013be4:	1009883a 	mov	r4,r2
 4013be8:	180b883a 	mov	r5,r3
 4013bec:	400e89c0 	call	400e89c <__muldf3>
 4013bf0:	01d00734 	movhi	r7,16412
 4013bf4:	000d883a 	mov	r6,zero
 4013bf8:	1009883a 	mov	r4,r2
 4013bfc:	180b883a 	mov	r5,r3
 4013c00:	401a2d80 	call	401a2d8 <__adddf3>
 4013c04:	d9c00517 	ldw	r7,20(sp)
 4013c08:	047f3034 	movhi	r17,64704
 4013c0c:	1021883a 	mov	r16,r2
 4013c10:	39ffffc4 	addi	r7,r7,-1
 4013c14:	d9c01315 	stw	r7,76(sp)
 4013c18:	1c63883a 	add	r17,r3,r17
 4013c1c:	db000c17 	ldw	r12,48(sp)
 4013c20:	003bea06 	br	4012bcc <__alt_mem_onchip_memory2_0+0xfc00da0c>
 4013c24:	dc000915 	stw	r16,36(sp)
 4013c28:	003e0e06 	br	4013464 <__alt_mem_onchip_memory2_0+0xfc00e2a4>
 4013c2c:	01000e44 	movi	r4,57
 4013c30:	8825883a 	mov	r18,r17
 4013c34:	9dc00044 	addi	r23,r19,1
 4013c38:	99000005 	stb	r4,0(r19)
 4013c3c:	a023883a 	mov	r17,r20
 4013c40:	dc000915 	stw	r16,36(sp)
 4013c44:	003da406 	br	40132d8 <__alt_mem_onchip_memory2_0+0xfc00e118>
 4013c48:	d9801417 	ldw	r6,80(sp)
 4013c4c:	d9c01517 	ldw	r7,84(sp)
 4013c50:	0009883a 	mov	r4,zero
 4013c54:	014ff834 	movhi	r5,16352
 4013c58:	400f1080 	call	400f108 <__subdf3>
 4013c5c:	880d883a 	mov	r6,r17
 4013c60:	a00f883a 	mov	r7,r20
 4013c64:	1009883a 	mov	r4,r2
 4013c68:	180b883a 	mov	r5,r3
 4013c6c:	400e6cc0 	call	400e6cc <__gedf2>
 4013c70:	00bc7c0e 	bge	zero,r2,4012e64 <__alt_mem_onchip_memory2_0+0xfc00dca4>
 4013c74:	01000c04 	movi	r4,48
 4013c78:	00000106 	br	4013c80 <_dtoa_r+0x1580>
 4013c7c:	102f883a 	mov	r23,r2
 4013c80:	b8bfffc4 	addi	r2,r23,-1
 4013c84:	10c00007 	ldb	r3,0(r2)
 4013c88:	193ffc26 	beq	r3,r4,4013c7c <__alt_mem_onchip_memory2_0+0xfc00eabc>
 4013c8c:	d9801317 	ldw	r6,76(sp)
 4013c90:	d9800515 	stw	r6,20(sp)
 4013c94:	003c4406 	br	4012da8 <__alt_mem_onchip_memory2_0+0xfc00dbe8>
 4013c98:	d9801317 	ldw	r6,76(sp)
 4013c9c:	d9800515 	stw	r6,20(sp)
 4013ca0:	003cea06 	br	401304c <__alt_mem_onchip_memory2_0+0xfc00de8c>
 4013ca4:	dd800f17 	ldw	r22,60(sp)
 4013ca8:	dcc01017 	ldw	r19,64(sp)
 4013cac:	dc801217 	ldw	r18,72(sp)
 4013cb0:	003c6c06 	br	4012e64 <__alt_mem_onchip_memory2_0+0xfc00dca4>
 4013cb4:	903e031e 	bne	r18,zero,40134c4 <__alt_mem_onchip_memory2_0+0xfc00e304>
 4013cb8:	003ebb06 	br	40137a8 <__alt_mem_onchip_memory2_0+0xfc00e5e8>
 4013cbc:	103e6c1e 	bne	r2,zero,4013670 <__alt_mem_onchip_memory2_0+0xfc00e4b0>
 4013cc0:	4080004c 	andi	r2,r8,1
 4013cc4:	103e6a26 	beq	r2,zero,4013670 <__alt_mem_onchip_memory2_0+0xfc00e4b0>
 4013cc8:	003e6606 	br	4013664 <__alt_mem_onchip_memory2_0+0xfc00e4a4>
 4013ccc:	d8c00317 	ldw	r3,12(sp)
 4013cd0:	00800084 	movi	r2,2
 4013cd4:	10c02916 	blt	r2,r3,4013d7c <_dtoa_r+0x167c>
 4013cd8:	d9000c17 	ldw	r4,48(sp)
 4013cdc:	003e8806 	br	4013700 <__alt_mem_onchip_memory2_0+0xfc00e540>
 4013ce0:	04000084 	movi	r16,2
 4013ce4:	003b9d06 	br	4012b5c <__alt_mem_onchip_memory2_0+0xfc00d99c>
 4013ce8:	d9001317 	ldw	r4,76(sp)
 4013cec:	d9000515 	stw	r4,20(sp)
 4013cf0:	003cd606 	br	401304c <__alt_mem_onchip_memory2_0+0xfc00de8c>
 4013cf4:	d8801317 	ldw	r2,76(sp)
 4013cf8:	d8800515 	stw	r2,20(sp)
 4013cfc:	003c2a06 	br	4012da8 <__alt_mem_onchip_memory2_0+0xfc00dbe8>
 4013d00:	d9800317 	ldw	r6,12(sp)
 4013d04:	00800084 	movi	r2,2
 4013d08:	11801516 	blt	r2,r6,4013d60 <_dtoa_r+0x1660>
 4013d0c:	d9c00c17 	ldw	r7,48(sp)
 4013d10:	d9c00615 	stw	r7,24(sp)
 4013d14:	003df706 	br	40134f4 <__alt_mem_onchip_memory2_0+0xfc00e334>
 4013d18:	193d3926 	beq	r3,r4,4013200 <__alt_mem_onchip_memory2_0+0xfc00e040>
 4013d1c:	00c00f04 	movi	r3,60
 4013d20:	1885c83a 	sub	r2,r3,r2
 4013d24:	003ddf06 	br	40134a4 <__alt_mem_onchip_memory2_0+0xfc00e2e4>
 4013d28:	e009883a 	mov	r4,fp
 4013d2c:	e0001115 	stw	zero,68(fp)
 4013d30:	000b883a 	mov	r5,zero
 4013d34:	4015ccc0 	call	4015ccc <_Balloc>
 4013d38:	d8800715 	stw	r2,28(sp)
 4013d3c:	d8c00717 	ldw	r3,28(sp)
 4013d40:	00bfffc4 	movi	r2,-1
 4013d44:	01000044 	movi	r4,1
 4013d48:	d8800c15 	stw	r2,48(sp)
 4013d4c:	e0c01015 	stw	r3,64(fp)
 4013d50:	d9000b15 	stw	r4,44(sp)
 4013d54:	d8800615 	stw	r2,24(sp)
 4013d58:	d8002215 	stw	zero,136(sp)
 4013d5c:	003c4106 	br	4012e64 <__alt_mem_onchip_memory2_0+0xfc00dca4>
 4013d60:	d8c00c17 	ldw	r3,48(sp)
 4013d64:	d8c00615 	stw	r3,24(sp)
 4013d68:	003e7006 	br	401372c <__alt_mem_onchip_memory2_0+0xfc00e56c>
 4013d6c:	04400044 	movi	r17,1
 4013d70:	003b2006 	br	40129f4 <__alt_mem_onchip_memory2_0+0xfc00d834>
 4013d74:	000b883a 	mov	r5,zero
 4013d78:	003b3d06 	br	4012a70 <__alt_mem_onchip_memory2_0+0xfc00d8b0>
 4013d7c:	d8800c17 	ldw	r2,48(sp)
 4013d80:	d8800615 	stw	r2,24(sp)
 4013d84:	003e6906 	br	401372c <__alt_mem_onchip_memory2_0+0xfc00e56c>

04013d88 <__sflush_r>:
 4013d88:	2880030b 	ldhu	r2,12(r5)
 4013d8c:	defffb04 	addi	sp,sp,-20
 4013d90:	dcc00315 	stw	r19,12(sp)
 4013d94:	dc400115 	stw	r17,4(sp)
 4013d98:	dfc00415 	stw	ra,16(sp)
 4013d9c:	dc800215 	stw	r18,8(sp)
 4013da0:	dc000015 	stw	r16,0(sp)
 4013da4:	10c0020c 	andi	r3,r2,8
 4013da8:	2823883a 	mov	r17,r5
 4013dac:	2027883a 	mov	r19,r4
 4013db0:	1800311e 	bne	r3,zero,4013e78 <__sflush_r+0xf0>
 4013db4:	28c00117 	ldw	r3,4(r5)
 4013db8:	10820014 	ori	r2,r2,2048
 4013dbc:	2880030d 	sth	r2,12(r5)
 4013dc0:	00c04b0e 	bge	zero,r3,4013ef0 <__sflush_r+0x168>
 4013dc4:	8a000a17 	ldw	r8,40(r17)
 4013dc8:	40002326 	beq	r8,zero,4013e58 <__sflush_r+0xd0>
 4013dcc:	9c000017 	ldw	r16,0(r19)
 4013dd0:	10c4000c 	andi	r3,r2,4096
 4013dd4:	98000015 	stw	zero,0(r19)
 4013dd8:	18004826 	beq	r3,zero,4013efc <__sflush_r+0x174>
 4013ddc:	89801417 	ldw	r6,80(r17)
 4013de0:	10c0010c 	andi	r3,r2,4
 4013de4:	18000626 	beq	r3,zero,4013e00 <__sflush_r+0x78>
 4013de8:	88c00117 	ldw	r3,4(r17)
 4013dec:	88800c17 	ldw	r2,48(r17)
 4013df0:	30cdc83a 	sub	r6,r6,r3
 4013df4:	10000226 	beq	r2,zero,4013e00 <__sflush_r+0x78>
 4013df8:	88800f17 	ldw	r2,60(r17)
 4013dfc:	308dc83a 	sub	r6,r6,r2
 4013e00:	89400717 	ldw	r5,28(r17)
 4013e04:	000f883a 	mov	r7,zero
 4013e08:	9809883a 	mov	r4,r19
 4013e0c:	403ee83a 	callr	r8
 4013e10:	00ffffc4 	movi	r3,-1
 4013e14:	10c04426 	beq	r2,r3,4013f28 <__sflush_r+0x1a0>
 4013e18:	88c0030b 	ldhu	r3,12(r17)
 4013e1c:	89000417 	ldw	r4,16(r17)
 4013e20:	88000115 	stw	zero,4(r17)
 4013e24:	197dffcc 	andi	r5,r3,63487
 4013e28:	8940030d 	sth	r5,12(r17)
 4013e2c:	89000015 	stw	r4,0(r17)
 4013e30:	18c4000c 	andi	r3,r3,4096
 4013e34:	18002c1e 	bne	r3,zero,4013ee8 <__sflush_r+0x160>
 4013e38:	89400c17 	ldw	r5,48(r17)
 4013e3c:	9c000015 	stw	r16,0(r19)
 4013e40:	28000526 	beq	r5,zero,4013e58 <__sflush_r+0xd0>
 4013e44:	88801004 	addi	r2,r17,64
 4013e48:	28800226 	beq	r5,r2,4013e54 <__sflush_r+0xcc>
 4013e4c:	9809883a 	mov	r4,r19
 4013e50:	40145040 	call	4014504 <_free_r>
 4013e54:	88000c15 	stw	zero,48(r17)
 4013e58:	0005883a 	mov	r2,zero
 4013e5c:	dfc00417 	ldw	ra,16(sp)
 4013e60:	dcc00317 	ldw	r19,12(sp)
 4013e64:	dc800217 	ldw	r18,8(sp)
 4013e68:	dc400117 	ldw	r17,4(sp)
 4013e6c:	dc000017 	ldw	r16,0(sp)
 4013e70:	dec00504 	addi	sp,sp,20
 4013e74:	f800283a 	ret
 4013e78:	2c800417 	ldw	r18,16(r5)
 4013e7c:	903ff626 	beq	r18,zero,4013e58 <__alt_mem_onchip_memory2_0+0xfc00ec98>
 4013e80:	2c000017 	ldw	r16,0(r5)
 4013e84:	108000cc 	andi	r2,r2,3
 4013e88:	2c800015 	stw	r18,0(r5)
 4013e8c:	84a1c83a 	sub	r16,r16,r18
 4013e90:	1000131e 	bne	r2,zero,4013ee0 <__sflush_r+0x158>
 4013e94:	28800517 	ldw	r2,20(r5)
 4013e98:	88800215 	stw	r2,8(r17)
 4013e9c:	04000316 	blt	zero,r16,4013eac <__sflush_r+0x124>
 4013ea0:	003fed06 	br	4013e58 <__alt_mem_onchip_memory2_0+0xfc00ec98>
 4013ea4:	90a5883a 	add	r18,r18,r2
 4013ea8:	043feb0e 	bge	zero,r16,4013e58 <__alt_mem_onchip_memory2_0+0xfc00ec98>
 4013eac:	88800917 	ldw	r2,36(r17)
 4013eb0:	89400717 	ldw	r5,28(r17)
 4013eb4:	800f883a 	mov	r7,r16
 4013eb8:	900d883a 	mov	r6,r18
 4013ebc:	9809883a 	mov	r4,r19
 4013ec0:	103ee83a 	callr	r2
 4013ec4:	80a1c83a 	sub	r16,r16,r2
 4013ec8:	00bff616 	blt	zero,r2,4013ea4 <__alt_mem_onchip_memory2_0+0xfc00ece4>
 4013ecc:	88c0030b 	ldhu	r3,12(r17)
 4013ed0:	00bfffc4 	movi	r2,-1
 4013ed4:	18c01014 	ori	r3,r3,64
 4013ed8:	88c0030d 	sth	r3,12(r17)
 4013edc:	003fdf06 	br	4013e5c <__alt_mem_onchip_memory2_0+0xfc00ec9c>
 4013ee0:	0005883a 	mov	r2,zero
 4013ee4:	003fec06 	br	4013e98 <__alt_mem_onchip_memory2_0+0xfc00ecd8>
 4013ee8:	88801415 	stw	r2,80(r17)
 4013eec:	003fd206 	br	4013e38 <__alt_mem_onchip_memory2_0+0xfc00ec78>
 4013ef0:	28c00f17 	ldw	r3,60(r5)
 4013ef4:	00ffb316 	blt	zero,r3,4013dc4 <__alt_mem_onchip_memory2_0+0xfc00ec04>
 4013ef8:	003fd706 	br	4013e58 <__alt_mem_onchip_memory2_0+0xfc00ec98>
 4013efc:	89400717 	ldw	r5,28(r17)
 4013f00:	000d883a 	mov	r6,zero
 4013f04:	01c00044 	movi	r7,1
 4013f08:	9809883a 	mov	r4,r19
 4013f0c:	403ee83a 	callr	r8
 4013f10:	100d883a 	mov	r6,r2
 4013f14:	00bfffc4 	movi	r2,-1
 4013f18:	30801426 	beq	r6,r2,4013f6c <__sflush_r+0x1e4>
 4013f1c:	8880030b 	ldhu	r2,12(r17)
 4013f20:	8a000a17 	ldw	r8,40(r17)
 4013f24:	003fae06 	br	4013de0 <__alt_mem_onchip_memory2_0+0xfc00ec20>
 4013f28:	98c00017 	ldw	r3,0(r19)
 4013f2c:	183fba26 	beq	r3,zero,4013e18 <__alt_mem_onchip_memory2_0+0xfc00ec58>
 4013f30:	01000744 	movi	r4,29
 4013f34:	19000626 	beq	r3,r4,4013f50 <__sflush_r+0x1c8>
 4013f38:	01000584 	movi	r4,22
 4013f3c:	19000426 	beq	r3,r4,4013f50 <__sflush_r+0x1c8>
 4013f40:	88c0030b 	ldhu	r3,12(r17)
 4013f44:	18c01014 	ori	r3,r3,64
 4013f48:	88c0030d 	sth	r3,12(r17)
 4013f4c:	003fc306 	br	4013e5c <__alt_mem_onchip_memory2_0+0xfc00ec9c>
 4013f50:	8880030b 	ldhu	r2,12(r17)
 4013f54:	88c00417 	ldw	r3,16(r17)
 4013f58:	88000115 	stw	zero,4(r17)
 4013f5c:	10bdffcc 	andi	r2,r2,63487
 4013f60:	8880030d 	sth	r2,12(r17)
 4013f64:	88c00015 	stw	r3,0(r17)
 4013f68:	003fb306 	br	4013e38 <__alt_mem_onchip_memory2_0+0xfc00ec78>
 4013f6c:	98800017 	ldw	r2,0(r19)
 4013f70:	103fea26 	beq	r2,zero,4013f1c <__alt_mem_onchip_memory2_0+0xfc00ed5c>
 4013f74:	00c00744 	movi	r3,29
 4013f78:	10c00226 	beq	r2,r3,4013f84 <__sflush_r+0x1fc>
 4013f7c:	00c00584 	movi	r3,22
 4013f80:	10c0031e 	bne	r2,r3,4013f90 <__sflush_r+0x208>
 4013f84:	9c000015 	stw	r16,0(r19)
 4013f88:	0005883a 	mov	r2,zero
 4013f8c:	003fb306 	br	4013e5c <__alt_mem_onchip_memory2_0+0xfc00ec9c>
 4013f90:	88c0030b 	ldhu	r3,12(r17)
 4013f94:	3005883a 	mov	r2,r6
 4013f98:	18c01014 	ori	r3,r3,64
 4013f9c:	88c0030d 	sth	r3,12(r17)
 4013fa0:	003fae06 	br	4013e5c <__alt_mem_onchip_memory2_0+0xfc00ec9c>

04013fa4 <_fflush_r>:
 4013fa4:	defffd04 	addi	sp,sp,-12
 4013fa8:	dc000115 	stw	r16,4(sp)
 4013fac:	dfc00215 	stw	ra,8(sp)
 4013fb0:	2021883a 	mov	r16,r4
 4013fb4:	20000226 	beq	r4,zero,4013fc0 <_fflush_r+0x1c>
 4013fb8:	20800e17 	ldw	r2,56(r4)
 4013fbc:	10000c26 	beq	r2,zero,4013ff0 <_fflush_r+0x4c>
 4013fc0:	2880030f 	ldh	r2,12(r5)
 4013fc4:	1000051e 	bne	r2,zero,4013fdc <_fflush_r+0x38>
 4013fc8:	0005883a 	mov	r2,zero
 4013fcc:	dfc00217 	ldw	ra,8(sp)
 4013fd0:	dc000117 	ldw	r16,4(sp)
 4013fd4:	dec00304 	addi	sp,sp,12
 4013fd8:	f800283a 	ret
 4013fdc:	8009883a 	mov	r4,r16
 4013fe0:	dfc00217 	ldw	ra,8(sp)
 4013fe4:	dc000117 	ldw	r16,4(sp)
 4013fe8:	dec00304 	addi	sp,sp,12
 4013fec:	4013d881 	jmpi	4013d88 <__sflush_r>
 4013ff0:	d9400015 	stw	r5,0(sp)
 4013ff4:	40143900 	call	4014390 <__sinit>
 4013ff8:	d9400017 	ldw	r5,0(sp)
 4013ffc:	003ff006 	br	4013fc0 <__alt_mem_onchip_memory2_0+0xfc00ee00>

04014000 <fflush>:
 4014000:	20000526 	beq	r4,zero,4014018 <fflush+0x18>
 4014004:	008100b4 	movhi	r2,1026
 4014008:	10bfe004 	addi	r2,r2,-128
 401400c:	200b883a 	mov	r5,r4
 4014010:	11000017 	ldw	r4,0(r2)
 4014014:	4013fa41 	jmpi	4013fa4 <_fflush_r>
 4014018:	008100b4 	movhi	r2,1026
 401401c:	10bfdf04 	addi	r2,r2,-132
 4014020:	11000017 	ldw	r4,0(r2)
 4014024:	01410074 	movhi	r5,1025
 4014028:	294fe904 	addi	r5,r5,16292
 401402c:	4014da01 	jmpi	4014da0 <_fwalk_reent>

04014030 <__fp_unlock>:
 4014030:	0005883a 	mov	r2,zero
 4014034:	f800283a 	ret

04014038 <_cleanup_r>:
 4014038:	014100b4 	movhi	r5,1026
 401403c:	29639404 	addi	r5,r5,-29104
 4014040:	4014da01 	jmpi	4014da0 <_fwalk_reent>

04014044 <__sinit.part.1>:
 4014044:	defff704 	addi	sp,sp,-36
 4014048:	00c10074 	movhi	r3,1025
 401404c:	dfc00815 	stw	ra,32(sp)
 4014050:	ddc00715 	stw	r23,28(sp)
 4014054:	dd800615 	stw	r22,24(sp)
 4014058:	dd400515 	stw	r21,20(sp)
 401405c:	dd000415 	stw	r20,16(sp)
 4014060:	dcc00315 	stw	r19,12(sp)
 4014064:	dc800215 	stw	r18,8(sp)
 4014068:	dc400115 	stw	r17,4(sp)
 401406c:	dc000015 	stw	r16,0(sp)
 4014070:	18d00e04 	addi	r3,r3,16440
 4014074:	24000117 	ldw	r16,4(r4)
 4014078:	20c00f15 	stw	r3,60(r4)
 401407c:	2080bb04 	addi	r2,r4,748
 4014080:	00c000c4 	movi	r3,3
 4014084:	20c0b915 	stw	r3,740(r4)
 4014088:	2080ba15 	stw	r2,744(r4)
 401408c:	2000b815 	stw	zero,736(r4)
 4014090:	05c00204 	movi	r23,8
 4014094:	00800104 	movi	r2,4
 4014098:	2025883a 	mov	r18,r4
 401409c:	b80d883a 	mov	r6,r23
 40140a0:	81001704 	addi	r4,r16,92
 40140a4:	000b883a 	mov	r5,zero
 40140a8:	80000015 	stw	zero,0(r16)
 40140ac:	80000115 	stw	zero,4(r16)
 40140b0:	80000215 	stw	zero,8(r16)
 40140b4:	8080030d 	sth	r2,12(r16)
 40140b8:	80001915 	stw	zero,100(r16)
 40140bc:	8000038d 	sth	zero,14(r16)
 40140c0:	80000415 	stw	zero,16(r16)
 40140c4:	80000515 	stw	zero,20(r16)
 40140c8:	80000615 	stw	zero,24(r16)
 40140cc:	4015ba40 	call	4015ba4 <memset>
 40140d0:	05810074 	movhi	r22,1025
 40140d4:	94400217 	ldw	r17,8(r18)
 40140d8:	05410074 	movhi	r21,1025
 40140dc:	05010074 	movhi	r20,1025
 40140e0:	04c10074 	movhi	r19,1025
 40140e4:	b59cec04 	addi	r22,r22,29616
 40140e8:	ad5d0304 	addi	r21,r21,29708
 40140ec:	a51d2204 	addi	r20,r20,29832
 40140f0:	9cdd3904 	addi	r19,r19,29924
 40140f4:	85800815 	stw	r22,32(r16)
 40140f8:	85400915 	stw	r21,36(r16)
 40140fc:	85000a15 	stw	r20,40(r16)
 4014100:	84c00b15 	stw	r19,44(r16)
 4014104:	84000715 	stw	r16,28(r16)
 4014108:	00800284 	movi	r2,10
 401410c:	8880030d 	sth	r2,12(r17)
 4014110:	00800044 	movi	r2,1
 4014114:	b80d883a 	mov	r6,r23
 4014118:	89001704 	addi	r4,r17,92
 401411c:	000b883a 	mov	r5,zero
 4014120:	88000015 	stw	zero,0(r17)
 4014124:	88000115 	stw	zero,4(r17)
 4014128:	88000215 	stw	zero,8(r17)
 401412c:	88001915 	stw	zero,100(r17)
 4014130:	8880038d 	sth	r2,14(r17)
 4014134:	88000415 	stw	zero,16(r17)
 4014138:	88000515 	stw	zero,20(r17)
 401413c:	88000615 	stw	zero,24(r17)
 4014140:	4015ba40 	call	4015ba4 <memset>
 4014144:	94000317 	ldw	r16,12(r18)
 4014148:	00800484 	movi	r2,18
 401414c:	8c400715 	stw	r17,28(r17)
 4014150:	8d800815 	stw	r22,32(r17)
 4014154:	8d400915 	stw	r21,36(r17)
 4014158:	8d000a15 	stw	r20,40(r17)
 401415c:	8cc00b15 	stw	r19,44(r17)
 4014160:	8080030d 	sth	r2,12(r16)
 4014164:	00800084 	movi	r2,2
 4014168:	80000015 	stw	zero,0(r16)
 401416c:	80000115 	stw	zero,4(r16)
 4014170:	80000215 	stw	zero,8(r16)
 4014174:	80001915 	stw	zero,100(r16)
 4014178:	8080038d 	sth	r2,14(r16)
 401417c:	80000415 	stw	zero,16(r16)
 4014180:	80000515 	stw	zero,20(r16)
 4014184:	80000615 	stw	zero,24(r16)
 4014188:	b80d883a 	mov	r6,r23
 401418c:	000b883a 	mov	r5,zero
 4014190:	81001704 	addi	r4,r16,92
 4014194:	4015ba40 	call	4015ba4 <memset>
 4014198:	00800044 	movi	r2,1
 401419c:	84000715 	stw	r16,28(r16)
 40141a0:	85800815 	stw	r22,32(r16)
 40141a4:	85400915 	stw	r21,36(r16)
 40141a8:	85000a15 	stw	r20,40(r16)
 40141ac:	84c00b15 	stw	r19,44(r16)
 40141b0:	90800e15 	stw	r2,56(r18)
 40141b4:	dfc00817 	ldw	ra,32(sp)
 40141b8:	ddc00717 	ldw	r23,28(sp)
 40141bc:	dd800617 	ldw	r22,24(sp)
 40141c0:	dd400517 	ldw	r21,20(sp)
 40141c4:	dd000417 	ldw	r20,16(sp)
 40141c8:	dcc00317 	ldw	r19,12(sp)
 40141cc:	dc800217 	ldw	r18,8(sp)
 40141d0:	dc400117 	ldw	r17,4(sp)
 40141d4:	dc000017 	ldw	r16,0(sp)
 40141d8:	dec00904 	addi	sp,sp,36
 40141dc:	f800283a 	ret

040141e0 <__fp_lock>:
 40141e0:	0005883a 	mov	r2,zero
 40141e4:	f800283a 	ret

040141e8 <__sfmoreglue>:
 40141e8:	defffc04 	addi	sp,sp,-16
 40141ec:	dc800215 	stw	r18,8(sp)
 40141f0:	2825883a 	mov	r18,r5
 40141f4:	dc000015 	stw	r16,0(sp)
 40141f8:	01401a04 	movi	r5,104
 40141fc:	2021883a 	mov	r16,r4
 4014200:	913fffc4 	addi	r4,r18,-1
 4014204:	dfc00315 	stw	ra,12(sp)
 4014208:	dc400115 	stw	r17,4(sp)
 401420c:	400dcd40 	call	400dcd4 <__mulsi3>
 4014210:	8009883a 	mov	r4,r16
 4014214:	11401d04 	addi	r5,r2,116
 4014218:	1023883a 	mov	r17,r2
 401421c:	40151580 	call	4015158 <_malloc_r>
 4014220:	1021883a 	mov	r16,r2
 4014224:	10000726 	beq	r2,zero,4014244 <__sfmoreglue+0x5c>
 4014228:	11000304 	addi	r4,r2,12
 401422c:	10000015 	stw	zero,0(r2)
 4014230:	14800115 	stw	r18,4(r2)
 4014234:	11000215 	stw	r4,8(r2)
 4014238:	89801a04 	addi	r6,r17,104
 401423c:	000b883a 	mov	r5,zero
 4014240:	4015ba40 	call	4015ba4 <memset>
 4014244:	8005883a 	mov	r2,r16
 4014248:	dfc00317 	ldw	ra,12(sp)
 401424c:	dc800217 	ldw	r18,8(sp)
 4014250:	dc400117 	ldw	r17,4(sp)
 4014254:	dc000017 	ldw	r16,0(sp)
 4014258:	dec00404 	addi	sp,sp,16
 401425c:	f800283a 	ret

04014260 <__sfp>:
 4014260:	defffb04 	addi	sp,sp,-20
 4014264:	dc000015 	stw	r16,0(sp)
 4014268:	040100b4 	movhi	r16,1026
 401426c:	843fdf04 	addi	r16,r16,-132
 4014270:	dcc00315 	stw	r19,12(sp)
 4014274:	2027883a 	mov	r19,r4
 4014278:	81000017 	ldw	r4,0(r16)
 401427c:	dfc00415 	stw	ra,16(sp)
 4014280:	dc800215 	stw	r18,8(sp)
 4014284:	20800e17 	ldw	r2,56(r4)
 4014288:	dc400115 	stw	r17,4(sp)
 401428c:	1000021e 	bne	r2,zero,4014298 <__sfp+0x38>
 4014290:	40140440 	call	4014044 <__sinit.part.1>
 4014294:	81000017 	ldw	r4,0(r16)
 4014298:	2480b804 	addi	r18,r4,736
 401429c:	047fffc4 	movi	r17,-1
 40142a0:	91000117 	ldw	r4,4(r18)
 40142a4:	94000217 	ldw	r16,8(r18)
 40142a8:	213fffc4 	addi	r4,r4,-1
 40142ac:	20000a16 	blt	r4,zero,40142d8 <__sfp+0x78>
 40142b0:	8080030f 	ldh	r2,12(r16)
 40142b4:	10000c26 	beq	r2,zero,40142e8 <__sfp+0x88>
 40142b8:	80c01d04 	addi	r3,r16,116
 40142bc:	00000206 	br	40142c8 <__sfp+0x68>
 40142c0:	18bfe60f 	ldh	r2,-104(r3)
 40142c4:	10000826 	beq	r2,zero,40142e8 <__sfp+0x88>
 40142c8:	213fffc4 	addi	r4,r4,-1
 40142cc:	1c3ffd04 	addi	r16,r3,-12
 40142d0:	18c01a04 	addi	r3,r3,104
 40142d4:	247ffa1e 	bne	r4,r17,40142c0 <__alt_mem_onchip_memory2_0+0xfc00f100>
 40142d8:	90800017 	ldw	r2,0(r18)
 40142dc:	10001d26 	beq	r2,zero,4014354 <__sfp+0xf4>
 40142e0:	1025883a 	mov	r18,r2
 40142e4:	003fee06 	br	40142a0 <__alt_mem_onchip_memory2_0+0xfc00f0e0>
 40142e8:	00bfffc4 	movi	r2,-1
 40142ec:	8080038d 	sth	r2,14(r16)
 40142f0:	00800044 	movi	r2,1
 40142f4:	8080030d 	sth	r2,12(r16)
 40142f8:	80001915 	stw	zero,100(r16)
 40142fc:	80000015 	stw	zero,0(r16)
 4014300:	80000215 	stw	zero,8(r16)
 4014304:	80000115 	stw	zero,4(r16)
 4014308:	80000415 	stw	zero,16(r16)
 401430c:	80000515 	stw	zero,20(r16)
 4014310:	80000615 	stw	zero,24(r16)
 4014314:	01800204 	movi	r6,8
 4014318:	000b883a 	mov	r5,zero
 401431c:	81001704 	addi	r4,r16,92
 4014320:	4015ba40 	call	4015ba4 <memset>
 4014324:	8005883a 	mov	r2,r16
 4014328:	80000c15 	stw	zero,48(r16)
 401432c:	80000d15 	stw	zero,52(r16)
 4014330:	80001115 	stw	zero,68(r16)
 4014334:	80001215 	stw	zero,72(r16)
 4014338:	dfc00417 	ldw	ra,16(sp)
 401433c:	dcc00317 	ldw	r19,12(sp)
 4014340:	dc800217 	ldw	r18,8(sp)
 4014344:	dc400117 	ldw	r17,4(sp)
 4014348:	dc000017 	ldw	r16,0(sp)
 401434c:	dec00504 	addi	sp,sp,20
 4014350:	f800283a 	ret
 4014354:	01400104 	movi	r5,4
 4014358:	9809883a 	mov	r4,r19
 401435c:	40141e80 	call	40141e8 <__sfmoreglue>
 4014360:	90800015 	stw	r2,0(r18)
 4014364:	103fde1e 	bne	r2,zero,40142e0 <__alt_mem_onchip_memory2_0+0xfc00f120>
 4014368:	00800304 	movi	r2,12
 401436c:	98800015 	stw	r2,0(r19)
 4014370:	0005883a 	mov	r2,zero
 4014374:	003ff006 	br	4014338 <__alt_mem_onchip_memory2_0+0xfc00f178>

04014378 <_cleanup>:
 4014378:	008100b4 	movhi	r2,1026
 401437c:	10bfdf04 	addi	r2,r2,-132
 4014380:	11000017 	ldw	r4,0(r2)
 4014384:	014100b4 	movhi	r5,1026
 4014388:	29639404 	addi	r5,r5,-29104
 401438c:	4014da01 	jmpi	4014da0 <_fwalk_reent>

04014390 <__sinit>:
 4014390:	20800e17 	ldw	r2,56(r4)
 4014394:	10000126 	beq	r2,zero,401439c <__sinit+0xc>
 4014398:	f800283a 	ret
 401439c:	40140441 	jmpi	4014044 <__sinit.part.1>

040143a0 <__sfp_lock_acquire>:
 40143a0:	f800283a 	ret

040143a4 <__sfp_lock_release>:
 40143a4:	f800283a 	ret

040143a8 <__sinit_lock_acquire>:
 40143a8:	f800283a 	ret

040143ac <__sinit_lock_release>:
 40143ac:	f800283a 	ret

040143b0 <__fp_lock_all>:
 40143b0:	008100b4 	movhi	r2,1026
 40143b4:	10bfe004 	addi	r2,r2,-128
 40143b8:	11000017 	ldw	r4,0(r2)
 40143bc:	01410074 	movhi	r5,1025
 40143c0:	29507804 	addi	r5,r5,16864
 40143c4:	4014cdc1 	jmpi	4014cdc <_fwalk>

040143c8 <__fp_unlock_all>:
 40143c8:	008100b4 	movhi	r2,1026
 40143cc:	10bfe004 	addi	r2,r2,-128
 40143d0:	11000017 	ldw	r4,0(r2)
 40143d4:	01410074 	movhi	r5,1025
 40143d8:	29500c04 	addi	r5,r5,16432
 40143dc:	4014cdc1 	jmpi	4014cdc <_fwalk>

040143e0 <_malloc_trim_r>:
 40143e0:	defffb04 	addi	sp,sp,-20
 40143e4:	dcc00315 	stw	r19,12(sp)
 40143e8:	04c100b4 	movhi	r19,1026
 40143ec:	dc800215 	stw	r18,8(sp)
 40143f0:	dc400115 	stw	r17,4(sp)
 40143f4:	dc000015 	stw	r16,0(sp)
 40143f8:	dfc00415 	stw	ra,16(sp)
 40143fc:	2821883a 	mov	r16,r5
 4014400:	9cfa5404 	addi	r19,r19,-5808
 4014404:	2025883a 	mov	r18,r4
 4014408:	401b4780 	call	401b478 <__malloc_lock>
 401440c:	98800217 	ldw	r2,8(r19)
 4014410:	14400117 	ldw	r17,4(r2)
 4014414:	00bfff04 	movi	r2,-4
 4014418:	88a2703a 	and	r17,r17,r2
 401441c:	8c21c83a 	sub	r16,r17,r16
 4014420:	8403fbc4 	addi	r16,r16,4079
 4014424:	8020d33a 	srli	r16,r16,12
 4014428:	0083ffc4 	movi	r2,4095
 401442c:	843fffc4 	addi	r16,r16,-1
 4014430:	8020933a 	slli	r16,r16,12
 4014434:	1400060e 	bge	r2,r16,4014450 <_malloc_trim_r+0x70>
 4014438:	000b883a 	mov	r5,zero
 401443c:	9009883a 	mov	r4,r18
 4014440:	401735c0 	call	401735c <_sbrk_r>
 4014444:	98c00217 	ldw	r3,8(r19)
 4014448:	1c47883a 	add	r3,r3,r17
 401444c:	10c00a26 	beq	r2,r3,4014478 <_malloc_trim_r+0x98>
 4014450:	9009883a 	mov	r4,r18
 4014454:	401b49c0 	call	401b49c <__malloc_unlock>
 4014458:	0005883a 	mov	r2,zero
 401445c:	dfc00417 	ldw	ra,16(sp)
 4014460:	dcc00317 	ldw	r19,12(sp)
 4014464:	dc800217 	ldw	r18,8(sp)
 4014468:	dc400117 	ldw	r17,4(sp)
 401446c:	dc000017 	ldw	r16,0(sp)
 4014470:	dec00504 	addi	sp,sp,20
 4014474:	f800283a 	ret
 4014478:	040bc83a 	sub	r5,zero,r16
 401447c:	9009883a 	mov	r4,r18
 4014480:	401735c0 	call	401735c <_sbrk_r>
 4014484:	00ffffc4 	movi	r3,-1
 4014488:	10c00d26 	beq	r2,r3,40144c0 <_malloc_trim_r+0xe0>
 401448c:	00c100b4 	movhi	r3,1026
 4014490:	18c7f604 	addi	r3,r3,8152
 4014494:	18800017 	ldw	r2,0(r3)
 4014498:	99000217 	ldw	r4,8(r19)
 401449c:	8c23c83a 	sub	r17,r17,r16
 40144a0:	8c400054 	ori	r17,r17,1
 40144a4:	1421c83a 	sub	r16,r2,r16
 40144a8:	24400115 	stw	r17,4(r4)
 40144ac:	9009883a 	mov	r4,r18
 40144b0:	1c000015 	stw	r16,0(r3)
 40144b4:	401b49c0 	call	401b49c <__malloc_unlock>
 40144b8:	00800044 	movi	r2,1
 40144bc:	003fe706 	br	401445c <__alt_mem_onchip_memory2_0+0xfc00f29c>
 40144c0:	000b883a 	mov	r5,zero
 40144c4:	9009883a 	mov	r4,r18
 40144c8:	401735c0 	call	401735c <_sbrk_r>
 40144cc:	99000217 	ldw	r4,8(r19)
 40144d0:	014003c4 	movi	r5,15
 40144d4:	1107c83a 	sub	r3,r2,r4
 40144d8:	28ffdd0e 	bge	r5,r3,4014450 <__alt_mem_onchip_memory2_0+0xfc00f290>
 40144dc:	014100b4 	movhi	r5,1026
 40144e0:	297fe204 	addi	r5,r5,-120
 40144e4:	29400017 	ldw	r5,0(r5)
 40144e8:	18c00054 	ori	r3,r3,1
 40144ec:	20c00115 	stw	r3,4(r4)
 40144f0:	00c100b4 	movhi	r3,1026
 40144f4:	1145c83a 	sub	r2,r2,r5
 40144f8:	18c7f604 	addi	r3,r3,8152
 40144fc:	18800015 	stw	r2,0(r3)
 4014500:	003fd306 	br	4014450 <__alt_mem_onchip_memory2_0+0xfc00f290>

04014504 <_free_r>:
 4014504:	28004126 	beq	r5,zero,401460c <_free_r+0x108>
 4014508:	defffd04 	addi	sp,sp,-12
 401450c:	dc400115 	stw	r17,4(sp)
 4014510:	dc000015 	stw	r16,0(sp)
 4014514:	2023883a 	mov	r17,r4
 4014518:	2821883a 	mov	r16,r5
 401451c:	dfc00215 	stw	ra,8(sp)
 4014520:	401b4780 	call	401b478 <__malloc_lock>
 4014524:	81ffff17 	ldw	r7,-4(r16)
 4014528:	00bfff84 	movi	r2,-2
 401452c:	010100b4 	movhi	r4,1026
 4014530:	81bffe04 	addi	r6,r16,-8
 4014534:	3884703a 	and	r2,r7,r2
 4014538:	213a5404 	addi	r4,r4,-5808
 401453c:	308b883a 	add	r5,r6,r2
 4014540:	2a400117 	ldw	r9,4(r5)
 4014544:	22000217 	ldw	r8,8(r4)
 4014548:	00ffff04 	movi	r3,-4
 401454c:	48c6703a 	and	r3,r9,r3
 4014550:	2a005726 	beq	r5,r8,40146b0 <_free_r+0x1ac>
 4014554:	28c00115 	stw	r3,4(r5)
 4014558:	39c0004c 	andi	r7,r7,1
 401455c:	3800091e 	bne	r7,zero,4014584 <_free_r+0x80>
 4014560:	823ffe17 	ldw	r8,-8(r16)
 4014564:	22400204 	addi	r9,r4,8
 4014568:	320dc83a 	sub	r6,r6,r8
 401456c:	31c00217 	ldw	r7,8(r6)
 4014570:	1205883a 	add	r2,r2,r8
 4014574:	3a406526 	beq	r7,r9,401470c <_free_r+0x208>
 4014578:	32000317 	ldw	r8,12(r6)
 401457c:	3a000315 	stw	r8,12(r7)
 4014580:	41c00215 	stw	r7,8(r8)
 4014584:	28cf883a 	add	r7,r5,r3
 4014588:	39c00117 	ldw	r7,4(r7)
 401458c:	39c0004c 	andi	r7,r7,1
 4014590:	38003a26 	beq	r7,zero,401467c <_free_r+0x178>
 4014594:	10c00054 	ori	r3,r2,1
 4014598:	30c00115 	stw	r3,4(r6)
 401459c:	3087883a 	add	r3,r6,r2
 40145a0:	18800015 	stw	r2,0(r3)
 40145a4:	00c07fc4 	movi	r3,511
 40145a8:	18801936 	bltu	r3,r2,4014610 <_free_r+0x10c>
 40145ac:	1004d0fa 	srli	r2,r2,3
 40145b0:	01c00044 	movi	r7,1
 40145b4:	21400117 	ldw	r5,4(r4)
 40145b8:	10c00044 	addi	r3,r2,1
 40145bc:	18c7883a 	add	r3,r3,r3
 40145c0:	1005d0ba 	srai	r2,r2,2
 40145c4:	18c7883a 	add	r3,r3,r3
 40145c8:	18c7883a 	add	r3,r3,r3
 40145cc:	1907883a 	add	r3,r3,r4
 40145d0:	3884983a 	sll	r2,r7,r2
 40145d4:	19c00017 	ldw	r7,0(r3)
 40145d8:	1a3ffe04 	addi	r8,r3,-8
 40145dc:	1144b03a 	or	r2,r2,r5
 40145e0:	32000315 	stw	r8,12(r6)
 40145e4:	31c00215 	stw	r7,8(r6)
 40145e8:	20800115 	stw	r2,4(r4)
 40145ec:	19800015 	stw	r6,0(r3)
 40145f0:	39800315 	stw	r6,12(r7)
 40145f4:	8809883a 	mov	r4,r17
 40145f8:	dfc00217 	ldw	ra,8(sp)
 40145fc:	dc400117 	ldw	r17,4(sp)
 4014600:	dc000017 	ldw	r16,0(sp)
 4014604:	dec00304 	addi	sp,sp,12
 4014608:	401b49c1 	jmpi	401b49c <__malloc_unlock>
 401460c:	f800283a 	ret
 4014610:	100ad27a 	srli	r5,r2,9
 4014614:	00c00104 	movi	r3,4
 4014618:	19404a36 	bltu	r3,r5,4014744 <_free_r+0x240>
 401461c:	100ad1ba 	srli	r5,r2,6
 4014620:	28c00e44 	addi	r3,r5,57
 4014624:	18c7883a 	add	r3,r3,r3
 4014628:	29400e04 	addi	r5,r5,56
 401462c:	18c7883a 	add	r3,r3,r3
 4014630:	18c7883a 	add	r3,r3,r3
 4014634:	1909883a 	add	r4,r3,r4
 4014638:	20c00017 	ldw	r3,0(r4)
 401463c:	01c100b4 	movhi	r7,1026
 4014640:	213ffe04 	addi	r4,r4,-8
 4014644:	39fa5404 	addi	r7,r7,-5808
 4014648:	20c04426 	beq	r4,r3,401475c <_free_r+0x258>
 401464c:	01ffff04 	movi	r7,-4
 4014650:	19400117 	ldw	r5,4(r3)
 4014654:	29ca703a 	and	r5,r5,r7
 4014658:	1140022e 	bgeu	r2,r5,4014664 <_free_r+0x160>
 401465c:	18c00217 	ldw	r3,8(r3)
 4014660:	20fffb1e 	bne	r4,r3,4014650 <__alt_mem_onchip_memory2_0+0xfc00f490>
 4014664:	19000317 	ldw	r4,12(r3)
 4014668:	31000315 	stw	r4,12(r6)
 401466c:	30c00215 	stw	r3,8(r6)
 4014670:	21800215 	stw	r6,8(r4)
 4014674:	19800315 	stw	r6,12(r3)
 4014678:	003fde06 	br	40145f4 <__alt_mem_onchip_memory2_0+0xfc00f434>
 401467c:	29c00217 	ldw	r7,8(r5)
 4014680:	10c5883a 	add	r2,r2,r3
 4014684:	00c100b4 	movhi	r3,1026
 4014688:	18fa5604 	addi	r3,r3,-5800
 401468c:	38c03b26 	beq	r7,r3,401477c <_free_r+0x278>
 4014690:	2a000317 	ldw	r8,12(r5)
 4014694:	11400054 	ori	r5,r2,1
 4014698:	3087883a 	add	r3,r6,r2
 401469c:	3a000315 	stw	r8,12(r7)
 40146a0:	41c00215 	stw	r7,8(r8)
 40146a4:	31400115 	stw	r5,4(r6)
 40146a8:	18800015 	stw	r2,0(r3)
 40146ac:	003fbd06 	br	40145a4 <__alt_mem_onchip_memory2_0+0xfc00f3e4>
 40146b0:	39c0004c 	andi	r7,r7,1
 40146b4:	10c5883a 	add	r2,r2,r3
 40146b8:	3800071e 	bne	r7,zero,40146d8 <_free_r+0x1d4>
 40146bc:	81fffe17 	ldw	r7,-8(r16)
 40146c0:	31cdc83a 	sub	r6,r6,r7
 40146c4:	30c00317 	ldw	r3,12(r6)
 40146c8:	31400217 	ldw	r5,8(r6)
 40146cc:	11c5883a 	add	r2,r2,r7
 40146d0:	28c00315 	stw	r3,12(r5)
 40146d4:	19400215 	stw	r5,8(r3)
 40146d8:	10c00054 	ori	r3,r2,1
 40146dc:	30c00115 	stw	r3,4(r6)
 40146e0:	00c100b4 	movhi	r3,1026
 40146e4:	18ffe304 	addi	r3,r3,-116
 40146e8:	18c00017 	ldw	r3,0(r3)
 40146ec:	21800215 	stw	r6,8(r4)
 40146f0:	10ffc036 	bltu	r2,r3,40145f4 <__alt_mem_onchip_memory2_0+0xfc00f434>
 40146f4:	008100b4 	movhi	r2,1026
 40146f8:	1087e004 	addi	r2,r2,8064
 40146fc:	11400017 	ldw	r5,0(r2)
 4014700:	8809883a 	mov	r4,r17
 4014704:	40143e00 	call	40143e0 <_malloc_trim_r>
 4014708:	003fba06 	br	40145f4 <__alt_mem_onchip_memory2_0+0xfc00f434>
 401470c:	28c9883a 	add	r4,r5,r3
 4014710:	21000117 	ldw	r4,4(r4)
 4014714:	2100004c 	andi	r4,r4,1
 4014718:	2000391e 	bne	r4,zero,4014800 <_free_r+0x2fc>
 401471c:	29c00217 	ldw	r7,8(r5)
 4014720:	29000317 	ldw	r4,12(r5)
 4014724:	1885883a 	add	r2,r3,r2
 4014728:	10c00054 	ori	r3,r2,1
 401472c:	39000315 	stw	r4,12(r7)
 4014730:	21c00215 	stw	r7,8(r4)
 4014734:	30c00115 	stw	r3,4(r6)
 4014738:	308d883a 	add	r6,r6,r2
 401473c:	30800015 	stw	r2,0(r6)
 4014740:	003fac06 	br	40145f4 <__alt_mem_onchip_memory2_0+0xfc00f434>
 4014744:	00c00504 	movi	r3,20
 4014748:	19401536 	bltu	r3,r5,40147a0 <_free_r+0x29c>
 401474c:	28c01704 	addi	r3,r5,92
 4014750:	18c7883a 	add	r3,r3,r3
 4014754:	294016c4 	addi	r5,r5,91
 4014758:	003fb406 	br	401462c <__alt_mem_onchip_memory2_0+0xfc00f46c>
 401475c:	280bd0ba 	srai	r5,r5,2
 4014760:	00c00044 	movi	r3,1
 4014764:	38800117 	ldw	r2,4(r7)
 4014768:	194a983a 	sll	r5,r3,r5
 401476c:	2007883a 	mov	r3,r4
 4014770:	2884b03a 	or	r2,r5,r2
 4014774:	38800115 	stw	r2,4(r7)
 4014778:	003fbb06 	br	4014668 <__alt_mem_onchip_memory2_0+0xfc00f4a8>
 401477c:	21800515 	stw	r6,20(r4)
 4014780:	21800415 	stw	r6,16(r4)
 4014784:	10c00054 	ori	r3,r2,1
 4014788:	31c00315 	stw	r7,12(r6)
 401478c:	31c00215 	stw	r7,8(r6)
 4014790:	30c00115 	stw	r3,4(r6)
 4014794:	308d883a 	add	r6,r6,r2
 4014798:	30800015 	stw	r2,0(r6)
 401479c:	003f9506 	br	40145f4 <__alt_mem_onchip_memory2_0+0xfc00f434>
 40147a0:	00c01504 	movi	r3,84
 40147a4:	19400536 	bltu	r3,r5,40147bc <_free_r+0x2b8>
 40147a8:	100ad33a 	srli	r5,r2,12
 40147ac:	28c01bc4 	addi	r3,r5,111
 40147b0:	18c7883a 	add	r3,r3,r3
 40147b4:	29401b84 	addi	r5,r5,110
 40147b8:	003f9c06 	br	401462c <__alt_mem_onchip_memory2_0+0xfc00f46c>
 40147bc:	00c05504 	movi	r3,340
 40147c0:	19400536 	bltu	r3,r5,40147d8 <_free_r+0x2d4>
 40147c4:	100ad3fa 	srli	r5,r2,15
 40147c8:	28c01e04 	addi	r3,r5,120
 40147cc:	18c7883a 	add	r3,r3,r3
 40147d0:	29401dc4 	addi	r5,r5,119
 40147d4:	003f9506 	br	401462c <__alt_mem_onchip_memory2_0+0xfc00f46c>
 40147d8:	00c15504 	movi	r3,1364
 40147dc:	19400536 	bltu	r3,r5,40147f4 <_free_r+0x2f0>
 40147e0:	100ad4ba 	srli	r5,r2,18
 40147e4:	28c01f44 	addi	r3,r5,125
 40147e8:	18c7883a 	add	r3,r3,r3
 40147ec:	29401f04 	addi	r5,r5,124
 40147f0:	003f8e06 	br	401462c <__alt_mem_onchip_memory2_0+0xfc00f46c>
 40147f4:	00c03f84 	movi	r3,254
 40147f8:	01401f84 	movi	r5,126
 40147fc:	003f8b06 	br	401462c <__alt_mem_onchip_memory2_0+0xfc00f46c>
 4014800:	10c00054 	ori	r3,r2,1
 4014804:	30c00115 	stw	r3,4(r6)
 4014808:	308d883a 	add	r6,r6,r2
 401480c:	30800015 	stw	r2,0(r6)
 4014810:	003f7806 	br	40145f4 <__alt_mem_onchip_memory2_0+0xfc00f434>

04014814 <__sfvwrite_r>:
 4014814:	30800217 	ldw	r2,8(r6)
 4014818:	10006726 	beq	r2,zero,40149b8 <__sfvwrite_r+0x1a4>
 401481c:	28c0030b 	ldhu	r3,12(r5)
 4014820:	defff404 	addi	sp,sp,-48
 4014824:	dd400715 	stw	r21,28(sp)
 4014828:	dd000615 	stw	r20,24(sp)
 401482c:	dc000215 	stw	r16,8(sp)
 4014830:	dfc00b15 	stw	ra,44(sp)
 4014834:	df000a15 	stw	fp,40(sp)
 4014838:	ddc00915 	stw	r23,36(sp)
 401483c:	dd800815 	stw	r22,32(sp)
 4014840:	dcc00515 	stw	r19,20(sp)
 4014844:	dc800415 	stw	r18,16(sp)
 4014848:	dc400315 	stw	r17,12(sp)
 401484c:	1880020c 	andi	r2,r3,8
 4014850:	2821883a 	mov	r16,r5
 4014854:	202b883a 	mov	r21,r4
 4014858:	3029883a 	mov	r20,r6
 401485c:	10002726 	beq	r2,zero,40148fc <__sfvwrite_r+0xe8>
 4014860:	28800417 	ldw	r2,16(r5)
 4014864:	10002526 	beq	r2,zero,40148fc <__sfvwrite_r+0xe8>
 4014868:	1880008c 	andi	r2,r3,2
 401486c:	a4400017 	ldw	r17,0(r20)
 4014870:	10002a26 	beq	r2,zero,401491c <__sfvwrite_r+0x108>
 4014874:	05a00034 	movhi	r22,32768
 4014878:	0027883a 	mov	r19,zero
 401487c:	0025883a 	mov	r18,zero
 4014880:	b5bf0004 	addi	r22,r22,-1024
 4014884:	980d883a 	mov	r6,r19
 4014888:	a809883a 	mov	r4,r21
 401488c:	90004626 	beq	r18,zero,40149a8 <__sfvwrite_r+0x194>
 4014890:	900f883a 	mov	r7,r18
 4014894:	b480022e 	bgeu	r22,r18,40148a0 <__sfvwrite_r+0x8c>
 4014898:	01e00034 	movhi	r7,32768
 401489c:	39ff0004 	addi	r7,r7,-1024
 40148a0:	80800917 	ldw	r2,36(r16)
 40148a4:	81400717 	ldw	r5,28(r16)
 40148a8:	103ee83a 	callr	r2
 40148ac:	00805a0e 	bge	zero,r2,4014a18 <__sfvwrite_r+0x204>
 40148b0:	a0c00217 	ldw	r3,8(r20)
 40148b4:	98a7883a 	add	r19,r19,r2
 40148b8:	90a5c83a 	sub	r18,r18,r2
 40148bc:	1885c83a 	sub	r2,r3,r2
 40148c0:	a0800215 	stw	r2,8(r20)
 40148c4:	103fef1e 	bne	r2,zero,4014884 <__alt_mem_onchip_memory2_0+0xfc00f6c4>
 40148c8:	0005883a 	mov	r2,zero
 40148cc:	dfc00b17 	ldw	ra,44(sp)
 40148d0:	df000a17 	ldw	fp,40(sp)
 40148d4:	ddc00917 	ldw	r23,36(sp)
 40148d8:	dd800817 	ldw	r22,32(sp)
 40148dc:	dd400717 	ldw	r21,28(sp)
 40148e0:	dd000617 	ldw	r20,24(sp)
 40148e4:	dcc00517 	ldw	r19,20(sp)
 40148e8:	dc800417 	ldw	r18,16(sp)
 40148ec:	dc400317 	ldw	r17,12(sp)
 40148f0:	dc000217 	ldw	r16,8(sp)
 40148f4:	dec00c04 	addi	sp,sp,48
 40148f8:	f800283a 	ret
 40148fc:	800b883a 	mov	r5,r16
 4014900:	a809883a 	mov	r4,r21
 4014904:	40123840 	call	4012384 <__swsetup_r>
 4014908:	1000ee1e 	bne	r2,zero,4014cc4 <__sfvwrite_r+0x4b0>
 401490c:	80c0030b 	ldhu	r3,12(r16)
 4014910:	a4400017 	ldw	r17,0(r20)
 4014914:	1880008c 	andi	r2,r3,2
 4014918:	103fd61e 	bne	r2,zero,4014874 <__alt_mem_onchip_memory2_0+0xfc00f6b4>
 401491c:	1880004c 	andi	r2,r3,1
 4014920:	1000421e 	bne	r2,zero,4014a2c <__sfvwrite_r+0x218>
 4014924:	0039883a 	mov	fp,zero
 4014928:	0025883a 	mov	r18,zero
 401492c:	90001a26 	beq	r18,zero,4014998 <__sfvwrite_r+0x184>
 4014930:	1880800c 	andi	r2,r3,512
 4014934:	84c00217 	ldw	r19,8(r16)
 4014938:	10002126 	beq	r2,zero,40149c0 <__sfvwrite_r+0x1ac>
 401493c:	982f883a 	mov	r23,r19
 4014940:	94c09636 	bltu	r18,r19,4014b9c <__sfvwrite_r+0x388>
 4014944:	1881200c 	andi	r2,r3,1152
 4014948:	1000a11e 	bne	r2,zero,4014bd0 <__sfvwrite_r+0x3bc>
 401494c:	81000017 	ldw	r4,0(r16)
 4014950:	b80d883a 	mov	r6,r23
 4014954:	e00b883a 	mov	r5,fp
 4014958:	4015a480 	call	4015a48 <memmove>
 401495c:	80c00217 	ldw	r3,8(r16)
 4014960:	81000017 	ldw	r4,0(r16)
 4014964:	9005883a 	mov	r2,r18
 4014968:	1ce7c83a 	sub	r19,r3,r19
 401496c:	25cf883a 	add	r7,r4,r23
 4014970:	84c00215 	stw	r19,8(r16)
 4014974:	81c00015 	stw	r7,0(r16)
 4014978:	a0c00217 	ldw	r3,8(r20)
 401497c:	e0b9883a 	add	fp,fp,r2
 4014980:	90a5c83a 	sub	r18,r18,r2
 4014984:	18a7c83a 	sub	r19,r3,r2
 4014988:	a4c00215 	stw	r19,8(r20)
 401498c:	983fce26 	beq	r19,zero,40148c8 <__alt_mem_onchip_memory2_0+0xfc00f708>
 4014990:	80c0030b 	ldhu	r3,12(r16)
 4014994:	903fe61e 	bne	r18,zero,4014930 <__alt_mem_onchip_memory2_0+0xfc00f770>
 4014998:	8f000017 	ldw	fp,0(r17)
 401499c:	8c800117 	ldw	r18,4(r17)
 40149a0:	8c400204 	addi	r17,r17,8
 40149a4:	003fe106 	br	401492c <__alt_mem_onchip_memory2_0+0xfc00f76c>
 40149a8:	8cc00017 	ldw	r19,0(r17)
 40149ac:	8c800117 	ldw	r18,4(r17)
 40149b0:	8c400204 	addi	r17,r17,8
 40149b4:	003fb306 	br	4014884 <__alt_mem_onchip_memory2_0+0xfc00f6c4>
 40149b8:	0005883a 	mov	r2,zero
 40149bc:	f800283a 	ret
 40149c0:	81000017 	ldw	r4,0(r16)
 40149c4:	80800417 	ldw	r2,16(r16)
 40149c8:	11005a36 	bltu	r2,r4,4014b34 <__sfvwrite_r+0x320>
 40149cc:	85c00517 	ldw	r23,20(r16)
 40149d0:	95c05836 	bltu	r18,r23,4014b34 <__sfvwrite_r+0x320>
 40149d4:	00a00034 	movhi	r2,32768
 40149d8:	10bfffc4 	addi	r2,r2,-1
 40149dc:	9009883a 	mov	r4,r18
 40149e0:	1480012e 	bgeu	r2,r18,40149e8 <__sfvwrite_r+0x1d4>
 40149e4:	1009883a 	mov	r4,r2
 40149e8:	b80b883a 	mov	r5,r23
 40149ec:	400db200 	call	400db20 <__divsi3>
 40149f0:	b80b883a 	mov	r5,r23
 40149f4:	1009883a 	mov	r4,r2
 40149f8:	400dcd40 	call	400dcd4 <__mulsi3>
 40149fc:	81400717 	ldw	r5,28(r16)
 4014a00:	80c00917 	ldw	r3,36(r16)
 4014a04:	100f883a 	mov	r7,r2
 4014a08:	e00d883a 	mov	r6,fp
 4014a0c:	a809883a 	mov	r4,r21
 4014a10:	183ee83a 	callr	r3
 4014a14:	00bfd816 	blt	zero,r2,4014978 <__alt_mem_onchip_memory2_0+0xfc00f7b8>
 4014a18:	8080030b 	ldhu	r2,12(r16)
 4014a1c:	10801014 	ori	r2,r2,64
 4014a20:	8080030d 	sth	r2,12(r16)
 4014a24:	00bfffc4 	movi	r2,-1
 4014a28:	003fa806 	br	40148cc <__alt_mem_onchip_memory2_0+0xfc00f70c>
 4014a2c:	0027883a 	mov	r19,zero
 4014a30:	0011883a 	mov	r8,zero
 4014a34:	0039883a 	mov	fp,zero
 4014a38:	0025883a 	mov	r18,zero
 4014a3c:	90001f26 	beq	r18,zero,4014abc <__sfvwrite_r+0x2a8>
 4014a40:	40005a26 	beq	r8,zero,4014bac <__sfvwrite_r+0x398>
 4014a44:	982d883a 	mov	r22,r19
 4014a48:	94c0012e 	bgeu	r18,r19,4014a50 <__sfvwrite_r+0x23c>
 4014a4c:	902d883a 	mov	r22,r18
 4014a50:	81000017 	ldw	r4,0(r16)
 4014a54:	80800417 	ldw	r2,16(r16)
 4014a58:	b02f883a 	mov	r23,r22
 4014a5c:	81c00517 	ldw	r7,20(r16)
 4014a60:	1100032e 	bgeu	r2,r4,4014a70 <__sfvwrite_r+0x25c>
 4014a64:	80c00217 	ldw	r3,8(r16)
 4014a68:	38c7883a 	add	r3,r7,r3
 4014a6c:	1d801816 	blt	r3,r22,4014ad0 <__sfvwrite_r+0x2bc>
 4014a70:	b1c03e16 	blt	r22,r7,4014b6c <__sfvwrite_r+0x358>
 4014a74:	80800917 	ldw	r2,36(r16)
 4014a78:	81400717 	ldw	r5,28(r16)
 4014a7c:	e00d883a 	mov	r6,fp
 4014a80:	da000115 	stw	r8,4(sp)
 4014a84:	a809883a 	mov	r4,r21
 4014a88:	103ee83a 	callr	r2
 4014a8c:	102f883a 	mov	r23,r2
 4014a90:	da000117 	ldw	r8,4(sp)
 4014a94:	00bfe00e 	bge	zero,r2,4014a18 <__alt_mem_onchip_memory2_0+0xfc00f858>
 4014a98:	9de7c83a 	sub	r19,r19,r23
 4014a9c:	98001f26 	beq	r19,zero,4014b1c <__sfvwrite_r+0x308>
 4014aa0:	a0800217 	ldw	r2,8(r20)
 4014aa4:	e5f9883a 	add	fp,fp,r23
 4014aa8:	95e5c83a 	sub	r18,r18,r23
 4014aac:	15efc83a 	sub	r23,r2,r23
 4014ab0:	a5c00215 	stw	r23,8(r20)
 4014ab4:	b83f8426 	beq	r23,zero,40148c8 <__alt_mem_onchip_memory2_0+0xfc00f708>
 4014ab8:	903fe11e 	bne	r18,zero,4014a40 <__alt_mem_onchip_memory2_0+0xfc00f880>
 4014abc:	8f000017 	ldw	fp,0(r17)
 4014ac0:	8c800117 	ldw	r18,4(r17)
 4014ac4:	0011883a 	mov	r8,zero
 4014ac8:	8c400204 	addi	r17,r17,8
 4014acc:	003fdb06 	br	4014a3c <__alt_mem_onchip_memory2_0+0xfc00f87c>
 4014ad0:	180d883a 	mov	r6,r3
 4014ad4:	e00b883a 	mov	r5,fp
 4014ad8:	da000115 	stw	r8,4(sp)
 4014adc:	d8c00015 	stw	r3,0(sp)
 4014ae0:	4015a480 	call	4015a48 <memmove>
 4014ae4:	d8c00017 	ldw	r3,0(sp)
 4014ae8:	80800017 	ldw	r2,0(r16)
 4014aec:	800b883a 	mov	r5,r16
 4014af0:	a809883a 	mov	r4,r21
 4014af4:	10c5883a 	add	r2,r2,r3
 4014af8:	80800015 	stw	r2,0(r16)
 4014afc:	d8c00015 	stw	r3,0(sp)
 4014b00:	4013fa40 	call	4013fa4 <_fflush_r>
 4014b04:	d8c00017 	ldw	r3,0(sp)
 4014b08:	da000117 	ldw	r8,4(sp)
 4014b0c:	103fc21e 	bne	r2,zero,4014a18 <__alt_mem_onchip_memory2_0+0xfc00f858>
 4014b10:	182f883a 	mov	r23,r3
 4014b14:	9de7c83a 	sub	r19,r19,r23
 4014b18:	983fe11e 	bne	r19,zero,4014aa0 <__alt_mem_onchip_memory2_0+0xfc00f8e0>
 4014b1c:	800b883a 	mov	r5,r16
 4014b20:	a809883a 	mov	r4,r21
 4014b24:	4013fa40 	call	4013fa4 <_fflush_r>
 4014b28:	103fbb1e 	bne	r2,zero,4014a18 <__alt_mem_onchip_memory2_0+0xfc00f858>
 4014b2c:	0011883a 	mov	r8,zero
 4014b30:	003fdb06 	br	4014aa0 <__alt_mem_onchip_memory2_0+0xfc00f8e0>
 4014b34:	94c0012e 	bgeu	r18,r19,4014b3c <__sfvwrite_r+0x328>
 4014b38:	9027883a 	mov	r19,r18
 4014b3c:	980d883a 	mov	r6,r19
 4014b40:	e00b883a 	mov	r5,fp
 4014b44:	4015a480 	call	4015a48 <memmove>
 4014b48:	80800217 	ldw	r2,8(r16)
 4014b4c:	80c00017 	ldw	r3,0(r16)
 4014b50:	14c5c83a 	sub	r2,r2,r19
 4014b54:	1cc7883a 	add	r3,r3,r19
 4014b58:	80800215 	stw	r2,8(r16)
 4014b5c:	80c00015 	stw	r3,0(r16)
 4014b60:	10004326 	beq	r2,zero,4014c70 <__sfvwrite_r+0x45c>
 4014b64:	9805883a 	mov	r2,r19
 4014b68:	003f8306 	br	4014978 <__alt_mem_onchip_memory2_0+0xfc00f7b8>
 4014b6c:	b00d883a 	mov	r6,r22
 4014b70:	e00b883a 	mov	r5,fp
 4014b74:	da000115 	stw	r8,4(sp)
 4014b78:	4015a480 	call	4015a48 <memmove>
 4014b7c:	80800217 	ldw	r2,8(r16)
 4014b80:	80c00017 	ldw	r3,0(r16)
 4014b84:	da000117 	ldw	r8,4(sp)
 4014b88:	1585c83a 	sub	r2,r2,r22
 4014b8c:	1dad883a 	add	r22,r3,r22
 4014b90:	80800215 	stw	r2,8(r16)
 4014b94:	85800015 	stw	r22,0(r16)
 4014b98:	003fbf06 	br	4014a98 <__alt_mem_onchip_memory2_0+0xfc00f8d8>
 4014b9c:	81000017 	ldw	r4,0(r16)
 4014ba0:	9027883a 	mov	r19,r18
 4014ba4:	902f883a 	mov	r23,r18
 4014ba8:	003f6906 	br	4014950 <__alt_mem_onchip_memory2_0+0xfc00f790>
 4014bac:	900d883a 	mov	r6,r18
 4014bb0:	01400284 	movi	r5,10
 4014bb4:	e009883a 	mov	r4,fp
 4014bb8:	40159640 	call	4015964 <memchr>
 4014bbc:	10003e26 	beq	r2,zero,4014cb8 <__sfvwrite_r+0x4a4>
 4014bc0:	10800044 	addi	r2,r2,1
 4014bc4:	1727c83a 	sub	r19,r2,fp
 4014bc8:	02000044 	movi	r8,1
 4014bcc:	003f9d06 	br	4014a44 <__alt_mem_onchip_memory2_0+0xfc00f884>
 4014bd0:	80800517 	ldw	r2,20(r16)
 4014bd4:	81400417 	ldw	r5,16(r16)
 4014bd8:	81c00017 	ldw	r7,0(r16)
 4014bdc:	10a7883a 	add	r19,r2,r2
 4014be0:	9885883a 	add	r2,r19,r2
 4014be4:	1026d7fa 	srli	r19,r2,31
 4014be8:	396dc83a 	sub	r22,r7,r5
 4014bec:	b1000044 	addi	r4,r22,1
 4014bf0:	9885883a 	add	r2,r19,r2
 4014bf4:	1027d07a 	srai	r19,r2,1
 4014bf8:	2485883a 	add	r2,r4,r18
 4014bfc:	980d883a 	mov	r6,r19
 4014c00:	9880022e 	bgeu	r19,r2,4014c0c <__sfvwrite_r+0x3f8>
 4014c04:	1027883a 	mov	r19,r2
 4014c08:	100d883a 	mov	r6,r2
 4014c0c:	18c1000c 	andi	r3,r3,1024
 4014c10:	18001c26 	beq	r3,zero,4014c84 <__sfvwrite_r+0x470>
 4014c14:	300b883a 	mov	r5,r6
 4014c18:	a809883a 	mov	r4,r21
 4014c1c:	40151580 	call	4015158 <_malloc_r>
 4014c20:	102f883a 	mov	r23,r2
 4014c24:	10002926 	beq	r2,zero,4014ccc <__sfvwrite_r+0x4b8>
 4014c28:	81400417 	ldw	r5,16(r16)
 4014c2c:	b00d883a 	mov	r6,r22
 4014c30:	1009883a 	mov	r4,r2
 4014c34:	400fbdc0 	call	400fbdc <memcpy>
 4014c38:	8080030b 	ldhu	r2,12(r16)
 4014c3c:	00fedfc4 	movi	r3,-1153
 4014c40:	10c4703a 	and	r2,r2,r3
 4014c44:	10802014 	ori	r2,r2,128
 4014c48:	8080030d 	sth	r2,12(r16)
 4014c4c:	bd89883a 	add	r4,r23,r22
 4014c50:	9d8fc83a 	sub	r7,r19,r22
 4014c54:	85c00415 	stw	r23,16(r16)
 4014c58:	84c00515 	stw	r19,20(r16)
 4014c5c:	81000015 	stw	r4,0(r16)
 4014c60:	9027883a 	mov	r19,r18
 4014c64:	81c00215 	stw	r7,8(r16)
 4014c68:	902f883a 	mov	r23,r18
 4014c6c:	003f3806 	br	4014950 <__alt_mem_onchip_memory2_0+0xfc00f790>
 4014c70:	800b883a 	mov	r5,r16
 4014c74:	a809883a 	mov	r4,r21
 4014c78:	4013fa40 	call	4013fa4 <_fflush_r>
 4014c7c:	103fb926 	beq	r2,zero,4014b64 <__alt_mem_onchip_memory2_0+0xfc00f9a4>
 4014c80:	003f6506 	br	4014a18 <__alt_mem_onchip_memory2_0+0xfc00f858>
 4014c84:	a809883a 	mov	r4,r21
 4014c88:	4016d840 	call	4016d84 <_realloc_r>
 4014c8c:	102f883a 	mov	r23,r2
 4014c90:	103fee1e 	bne	r2,zero,4014c4c <__alt_mem_onchip_memory2_0+0xfc00fa8c>
 4014c94:	81400417 	ldw	r5,16(r16)
 4014c98:	a809883a 	mov	r4,r21
 4014c9c:	40145040 	call	4014504 <_free_r>
 4014ca0:	8080030b 	ldhu	r2,12(r16)
 4014ca4:	00ffdfc4 	movi	r3,-129
 4014ca8:	1884703a 	and	r2,r3,r2
 4014cac:	00c00304 	movi	r3,12
 4014cb0:	a8c00015 	stw	r3,0(r21)
 4014cb4:	003f5906 	br	4014a1c <__alt_mem_onchip_memory2_0+0xfc00f85c>
 4014cb8:	94c00044 	addi	r19,r18,1
 4014cbc:	02000044 	movi	r8,1
 4014cc0:	003f6006 	br	4014a44 <__alt_mem_onchip_memory2_0+0xfc00f884>
 4014cc4:	00bfffc4 	movi	r2,-1
 4014cc8:	003f0006 	br	40148cc <__alt_mem_onchip_memory2_0+0xfc00f70c>
 4014ccc:	00800304 	movi	r2,12
 4014cd0:	a8800015 	stw	r2,0(r21)
 4014cd4:	8080030b 	ldhu	r2,12(r16)
 4014cd8:	003f5006 	br	4014a1c <__alt_mem_onchip_memory2_0+0xfc00f85c>

04014cdc <_fwalk>:
 4014cdc:	defff704 	addi	sp,sp,-36
 4014ce0:	dd000415 	stw	r20,16(sp)
 4014ce4:	dfc00815 	stw	ra,32(sp)
 4014ce8:	ddc00715 	stw	r23,28(sp)
 4014cec:	dd800615 	stw	r22,24(sp)
 4014cf0:	dd400515 	stw	r21,20(sp)
 4014cf4:	dcc00315 	stw	r19,12(sp)
 4014cf8:	dc800215 	stw	r18,8(sp)
 4014cfc:	dc400115 	stw	r17,4(sp)
 4014d00:	dc000015 	stw	r16,0(sp)
 4014d04:	2500b804 	addi	r20,r4,736
 4014d08:	a0002326 	beq	r20,zero,4014d98 <_fwalk+0xbc>
 4014d0c:	282b883a 	mov	r21,r5
 4014d10:	002f883a 	mov	r23,zero
 4014d14:	05800044 	movi	r22,1
 4014d18:	04ffffc4 	movi	r19,-1
 4014d1c:	a4400117 	ldw	r17,4(r20)
 4014d20:	a4800217 	ldw	r18,8(r20)
 4014d24:	8c7fffc4 	addi	r17,r17,-1
 4014d28:	88000d16 	blt	r17,zero,4014d60 <_fwalk+0x84>
 4014d2c:	94000304 	addi	r16,r18,12
 4014d30:	94800384 	addi	r18,r18,14
 4014d34:	8080000b 	ldhu	r2,0(r16)
 4014d38:	8c7fffc4 	addi	r17,r17,-1
 4014d3c:	813ffd04 	addi	r4,r16,-12
 4014d40:	b080042e 	bgeu	r22,r2,4014d54 <_fwalk+0x78>
 4014d44:	9080000f 	ldh	r2,0(r18)
 4014d48:	14c00226 	beq	r2,r19,4014d54 <_fwalk+0x78>
 4014d4c:	a83ee83a 	callr	r21
 4014d50:	b8aeb03a 	or	r23,r23,r2
 4014d54:	84001a04 	addi	r16,r16,104
 4014d58:	94801a04 	addi	r18,r18,104
 4014d5c:	8cfff51e 	bne	r17,r19,4014d34 <__alt_mem_onchip_memory2_0+0xfc00fb74>
 4014d60:	a5000017 	ldw	r20,0(r20)
 4014d64:	a03fed1e 	bne	r20,zero,4014d1c <__alt_mem_onchip_memory2_0+0xfc00fb5c>
 4014d68:	b805883a 	mov	r2,r23
 4014d6c:	dfc00817 	ldw	ra,32(sp)
 4014d70:	ddc00717 	ldw	r23,28(sp)
 4014d74:	dd800617 	ldw	r22,24(sp)
 4014d78:	dd400517 	ldw	r21,20(sp)
 4014d7c:	dd000417 	ldw	r20,16(sp)
 4014d80:	dcc00317 	ldw	r19,12(sp)
 4014d84:	dc800217 	ldw	r18,8(sp)
 4014d88:	dc400117 	ldw	r17,4(sp)
 4014d8c:	dc000017 	ldw	r16,0(sp)
 4014d90:	dec00904 	addi	sp,sp,36
 4014d94:	f800283a 	ret
 4014d98:	002f883a 	mov	r23,zero
 4014d9c:	003ff206 	br	4014d68 <__alt_mem_onchip_memory2_0+0xfc00fba8>

04014da0 <_fwalk_reent>:
 4014da0:	defff704 	addi	sp,sp,-36
 4014da4:	dd000415 	stw	r20,16(sp)
 4014da8:	dfc00815 	stw	ra,32(sp)
 4014dac:	ddc00715 	stw	r23,28(sp)
 4014db0:	dd800615 	stw	r22,24(sp)
 4014db4:	dd400515 	stw	r21,20(sp)
 4014db8:	dcc00315 	stw	r19,12(sp)
 4014dbc:	dc800215 	stw	r18,8(sp)
 4014dc0:	dc400115 	stw	r17,4(sp)
 4014dc4:	dc000015 	stw	r16,0(sp)
 4014dc8:	2500b804 	addi	r20,r4,736
 4014dcc:	a0002326 	beq	r20,zero,4014e5c <_fwalk_reent+0xbc>
 4014dd0:	282b883a 	mov	r21,r5
 4014dd4:	2027883a 	mov	r19,r4
 4014dd8:	002f883a 	mov	r23,zero
 4014ddc:	05800044 	movi	r22,1
 4014de0:	04bfffc4 	movi	r18,-1
 4014de4:	a4400117 	ldw	r17,4(r20)
 4014de8:	a4000217 	ldw	r16,8(r20)
 4014dec:	8c7fffc4 	addi	r17,r17,-1
 4014df0:	88000c16 	blt	r17,zero,4014e24 <_fwalk_reent+0x84>
 4014df4:	84000304 	addi	r16,r16,12
 4014df8:	8080000b 	ldhu	r2,0(r16)
 4014dfc:	8c7fffc4 	addi	r17,r17,-1
 4014e00:	817ffd04 	addi	r5,r16,-12
 4014e04:	b080052e 	bgeu	r22,r2,4014e1c <_fwalk_reent+0x7c>
 4014e08:	8080008f 	ldh	r2,2(r16)
 4014e0c:	9809883a 	mov	r4,r19
 4014e10:	14800226 	beq	r2,r18,4014e1c <_fwalk_reent+0x7c>
 4014e14:	a83ee83a 	callr	r21
 4014e18:	b8aeb03a 	or	r23,r23,r2
 4014e1c:	84001a04 	addi	r16,r16,104
 4014e20:	8cbff51e 	bne	r17,r18,4014df8 <__alt_mem_onchip_memory2_0+0xfc00fc38>
 4014e24:	a5000017 	ldw	r20,0(r20)
 4014e28:	a03fee1e 	bne	r20,zero,4014de4 <__alt_mem_onchip_memory2_0+0xfc00fc24>
 4014e2c:	b805883a 	mov	r2,r23
 4014e30:	dfc00817 	ldw	ra,32(sp)
 4014e34:	ddc00717 	ldw	r23,28(sp)
 4014e38:	dd800617 	ldw	r22,24(sp)
 4014e3c:	dd400517 	ldw	r21,20(sp)
 4014e40:	dd000417 	ldw	r20,16(sp)
 4014e44:	dcc00317 	ldw	r19,12(sp)
 4014e48:	dc800217 	ldw	r18,8(sp)
 4014e4c:	dc400117 	ldw	r17,4(sp)
 4014e50:	dc000017 	ldw	r16,0(sp)
 4014e54:	dec00904 	addi	sp,sp,36
 4014e58:	f800283a 	ret
 4014e5c:	002f883a 	mov	r23,zero
 4014e60:	003ff206 	br	4014e2c <__alt_mem_onchip_memory2_0+0xfc00fc6c>

04014e64 <_gettimeofday_r>:
 4014e64:	defffd04 	addi	sp,sp,-12
 4014e68:	2805883a 	mov	r2,r5
 4014e6c:	dc000015 	stw	r16,0(sp)
 4014e70:	040100b4 	movhi	r16,1026
 4014e74:	dc400115 	stw	r17,4(sp)
 4014e78:	8407da04 	addi	r16,r16,8040
 4014e7c:	2023883a 	mov	r17,r4
 4014e80:	300b883a 	mov	r5,r6
 4014e84:	1009883a 	mov	r4,r2
 4014e88:	dfc00215 	stw	ra,8(sp)
 4014e8c:	80000015 	stw	zero,0(r16)
 4014e90:	401af1c0 	call	401af1c <gettimeofday>
 4014e94:	00ffffc4 	movi	r3,-1
 4014e98:	10c00526 	beq	r2,r3,4014eb0 <_gettimeofday_r+0x4c>
 4014e9c:	dfc00217 	ldw	ra,8(sp)
 4014ea0:	dc400117 	ldw	r17,4(sp)
 4014ea4:	dc000017 	ldw	r16,0(sp)
 4014ea8:	dec00304 	addi	sp,sp,12
 4014eac:	f800283a 	ret
 4014eb0:	80c00017 	ldw	r3,0(r16)
 4014eb4:	183ff926 	beq	r3,zero,4014e9c <__alt_mem_onchip_memory2_0+0xfc00fcdc>
 4014eb8:	88c00015 	stw	r3,0(r17)
 4014ebc:	003ff706 	br	4014e9c <__alt_mem_onchip_memory2_0+0xfc00fcdc>

04014ec0 <_setlocale_r>:
 4014ec0:	30001b26 	beq	r6,zero,4014f30 <_setlocale_r+0x70>
 4014ec4:	014100b4 	movhi	r5,1026
 4014ec8:	defffe04 	addi	sp,sp,-8
 4014ecc:	2977ae04 	addi	r5,r5,-8520
 4014ed0:	3009883a 	mov	r4,r6
 4014ed4:	dc000015 	stw	r16,0(sp)
 4014ed8:	dfc00115 	stw	ra,4(sp)
 4014edc:	3021883a 	mov	r16,r6
 4014ee0:	40174ec0 	call	40174ec <strcmp>
 4014ee4:	1000061e 	bne	r2,zero,4014f00 <_setlocale_r+0x40>
 4014ee8:	008100b4 	movhi	r2,1026
 4014eec:	10b78f04 	addi	r2,r2,-8644
 4014ef0:	dfc00117 	ldw	ra,4(sp)
 4014ef4:	dc000017 	ldw	r16,0(sp)
 4014ef8:	dec00204 	addi	sp,sp,8
 4014efc:	f800283a 	ret
 4014f00:	014100b4 	movhi	r5,1026
 4014f04:	29778f04 	addi	r5,r5,-8644
 4014f08:	8009883a 	mov	r4,r16
 4014f0c:	40174ec0 	call	40174ec <strcmp>
 4014f10:	103ff526 	beq	r2,zero,4014ee8 <__alt_mem_onchip_memory2_0+0xfc00fd28>
 4014f14:	014100b4 	movhi	r5,1026
 4014f18:	29779904 	addi	r5,r5,-8604
 4014f1c:	8009883a 	mov	r4,r16
 4014f20:	40174ec0 	call	40174ec <strcmp>
 4014f24:	103ff026 	beq	r2,zero,4014ee8 <__alt_mem_onchip_memory2_0+0xfc00fd28>
 4014f28:	0005883a 	mov	r2,zero
 4014f2c:	003ff006 	br	4014ef0 <__alt_mem_onchip_memory2_0+0xfc00fd30>
 4014f30:	008100b4 	movhi	r2,1026
 4014f34:	10b78f04 	addi	r2,r2,-8644
 4014f38:	f800283a 	ret

04014f3c <__locale_charset>:
 4014f3c:	008100b4 	movhi	r2,1026
 4014f40:	10ba3e04 	addi	r2,r2,-5896
 4014f44:	f800283a 	ret

04014f48 <__locale_mb_cur_max>:
 4014f48:	008100b4 	movhi	r2,1026
 4014f4c:	10bfe104 	addi	r2,r2,-124
 4014f50:	10800017 	ldw	r2,0(r2)
 4014f54:	f800283a 	ret

04014f58 <__locale_msgcharset>:
 4014f58:	008100b4 	movhi	r2,1026
 4014f5c:	10ba3604 	addi	r2,r2,-5928
 4014f60:	f800283a 	ret

04014f64 <__locale_cjk_lang>:
 4014f64:	0005883a 	mov	r2,zero
 4014f68:	f800283a 	ret

04014f6c <_localeconv_r>:
 4014f6c:	008100b4 	movhi	r2,1026
 4014f70:	10ba4604 	addi	r2,r2,-5864
 4014f74:	f800283a 	ret

04014f78 <setlocale>:
 4014f78:	008100b4 	movhi	r2,1026
 4014f7c:	10bfe004 	addi	r2,r2,-128
 4014f80:	280d883a 	mov	r6,r5
 4014f84:	200b883a 	mov	r5,r4
 4014f88:	11000017 	ldw	r4,0(r2)
 4014f8c:	4014ec01 	jmpi	4014ec0 <_setlocale_r>

04014f90 <localeconv>:
 4014f90:	008100b4 	movhi	r2,1026
 4014f94:	10ba4604 	addi	r2,r2,-5864
 4014f98:	f800283a 	ret

04014f9c <__smakebuf_r>:
 4014f9c:	2880030b 	ldhu	r2,12(r5)
 4014fa0:	10c0008c 	andi	r3,r2,2
 4014fa4:	1800411e 	bne	r3,zero,40150ac <__smakebuf_r+0x110>
 4014fa8:	deffec04 	addi	sp,sp,-80
 4014fac:	dc000f15 	stw	r16,60(sp)
 4014fb0:	2821883a 	mov	r16,r5
 4014fb4:	2940038f 	ldh	r5,14(r5)
 4014fb8:	dc401015 	stw	r17,64(sp)
 4014fbc:	dfc01315 	stw	ra,76(sp)
 4014fc0:	dcc01215 	stw	r19,72(sp)
 4014fc4:	dc801115 	stw	r18,68(sp)
 4014fc8:	2023883a 	mov	r17,r4
 4014fcc:	28001c16 	blt	r5,zero,4015040 <__smakebuf_r+0xa4>
 4014fd0:	d80d883a 	mov	r6,sp
 4014fd4:	401915c0 	call	401915c <_fstat_r>
 4014fd8:	10001816 	blt	r2,zero,401503c <__smakebuf_r+0xa0>
 4014fdc:	d8800117 	ldw	r2,4(sp)
 4014fe0:	00e00014 	movui	r3,32768
 4014fe4:	10bc000c 	andi	r2,r2,61440
 4014fe8:	14c80020 	cmpeqi	r19,r2,8192
 4014fec:	10c03726 	beq	r2,r3,40150cc <__smakebuf_r+0x130>
 4014ff0:	80c0030b 	ldhu	r3,12(r16)
 4014ff4:	18c20014 	ori	r3,r3,2048
 4014ff8:	80c0030d 	sth	r3,12(r16)
 4014ffc:	00c80004 	movi	r3,8192
 4015000:	10c0521e 	bne	r2,r3,401514c <__smakebuf_r+0x1b0>
 4015004:	8140038f 	ldh	r5,14(r16)
 4015008:	8809883a 	mov	r4,r17
 401500c:	40191b80 	call	40191b8 <_isatty_r>
 4015010:	10004c26 	beq	r2,zero,4015144 <__smakebuf_r+0x1a8>
 4015014:	8080030b 	ldhu	r2,12(r16)
 4015018:	80c010c4 	addi	r3,r16,67
 401501c:	80c00015 	stw	r3,0(r16)
 4015020:	10800054 	ori	r2,r2,1
 4015024:	8080030d 	sth	r2,12(r16)
 4015028:	00800044 	movi	r2,1
 401502c:	80c00415 	stw	r3,16(r16)
 4015030:	80800515 	stw	r2,20(r16)
 4015034:	04810004 	movi	r18,1024
 4015038:	00000706 	br	4015058 <__smakebuf_r+0xbc>
 401503c:	8080030b 	ldhu	r2,12(r16)
 4015040:	10c0200c 	andi	r3,r2,128
 4015044:	18001f1e 	bne	r3,zero,40150c4 <__smakebuf_r+0x128>
 4015048:	04810004 	movi	r18,1024
 401504c:	10820014 	ori	r2,r2,2048
 4015050:	8080030d 	sth	r2,12(r16)
 4015054:	0027883a 	mov	r19,zero
 4015058:	900b883a 	mov	r5,r18
 401505c:	8809883a 	mov	r4,r17
 4015060:	40151580 	call	4015158 <_malloc_r>
 4015064:	10002c26 	beq	r2,zero,4015118 <__smakebuf_r+0x17c>
 4015068:	80c0030b 	ldhu	r3,12(r16)
 401506c:	01010074 	movhi	r4,1025
 4015070:	21100e04 	addi	r4,r4,16440
 4015074:	89000f15 	stw	r4,60(r17)
 4015078:	18c02014 	ori	r3,r3,128
 401507c:	80c0030d 	sth	r3,12(r16)
 4015080:	80800015 	stw	r2,0(r16)
 4015084:	80800415 	stw	r2,16(r16)
 4015088:	84800515 	stw	r18,20(r16)
 401508c:	98001a1e 	bne	r19,zero,40150f8 <__smakebuf_r+0x15c>
 4015090:	dfc01317 	ldw	ra,76(sp)
 4015094:	dcc01217 	ldw	r19,72(sp)
 4015098:	dc801117 	ldw	r18,68(sp)
 401509c:	dc401017 	ldw	r17,64(sp)
 40150a0:	dc000f17 	ldw	r16,60(sp)
 40150a4:	dec01404 	addi	sp,sp,80
 40150a8:	f800283a 	ret
 40150ac:	288010c4 	addi	r2,r5,67
 40150b0:	28800015 	stw	r2,0(r5)
 40150b4:	28800415 	stw	r2,16(r5)
 40150b8:	00800044 	movi	r2,1
 40150bc:	28800515 	stw	r2,20(r5)
 40150c0:	f800283a 	ret
 40150c4:	04801004 	movi	r18,64
 40150c8:	003fe006 	br	401504c <__alt_mem_onchip_memory2_0+0xfc00fe8c>
 40150cc:	81000a17 	ldw	r4,40(r16)
 40150d0:	00c10074 	movhi	r3,1025
 40150d4:	18dd2204 	addi	r3,r3,29832
 40150d8:	20ffc51e 	bne	r4,r3,4014ff0 <__alt_mem_onchip_memory2_0+0xfc00fe30>
 40150dc:	8080030b 	ldhu	r2,12(r16)
 40150e0:	04810004 	movi	r18,1024
 40150e4:	84801315 	stw	r18,76(r16)
 40150e8:	1484b03a 	or	r2,r2,r18
 40150ec:	8080030d 	sth	r2,12(r16)
 40150f0:	0027883a 	mov	r19,zero
 40150f4:	003fd806 	br	4015058 <__alt_mem_onchip_memory2_0+0xfc00fe98>
 40150f8:	8140038f 	ldh	r5,14(r16)
 40150fc:	8809883a 	mov	r4,r17
 4015100:	40191b80 	call	40191b8 <_isatty_r>
 4015104:	103fe226 	beq	r2,zero,4015090 <__alt_mem_onchip_memory2_0+0xfc00fed0>
 4015108:	8080030b 	ldhu	r2,12(r16)
 401510c:	10800054 	ori	r2,r2,1
 4015110:	8080030d 	sth	r2,12(r16)
 4015114:	003fde06 	br	4015090 <__alt_mem_onchip_memory2_0+0xfc00fed0>
 4015118:	8080030b 	ldhu	r2,12(r16)
 401511c:	10c0800c 	andi	r3,r2,512
 4015120:	183fdb1e 	bne	r3,zero,4015090 <__alt_mem_onchip_memory2_0+0xfc00fed0>
 4015124:	10800094 	ori	r2,r2,2
 4015128:	80c010c4 	addi	r3,r16,67
 401512c:	8080030d 	sth	r2,12(r16)
 4015130:	00800044 	movi	r2,1
 4015134:	80c00015 	stw	r3,0(r16)
 4015138:	80c00415 	stw	r3,16(r16)
 401513c:	80800515 	stw	r2,20(r16)
 4015140:	003fd306 	br	4015090 <__alt_mem_onchip_memory2_0+0xfc00fed0>
 4015144:	04810004 	movi	r18,1024
 4015148:	003fc306 	br	4015058 <__alt_mem_onchip_memory2_0+0xfc00fe98>
 401514c:	0027883a 	mov	r19,zero
 4015150:	04810004 	movi	r18,1024
 4015154:	003fc006 	br	4015058 <__alt_mem_onchip_memory2_0+0xfc00fe98>

04015158 <_malloc_r>:
 4015158:	defff504 	addi	sp,sp,-44
 401515c:	dc800315 	stw	r18,12(sp)
 4015160:	dfc00a15 	stw	ra,40(sp)
 4015164:	df000915 	stw	fp,36(sp)
 4015168:	ddc00815 	stw	r23,32(sp)
 401516c:	dd800715 	stw	r22,28(sp)
 4015170:	dd400615 	stw	r21,24(sp)
 4015174:	dd000515 	stw	r20,20(sp)
 4015178:	dcc00415 	stw	r19,16(sp)
 401517c:	dc400215 	stw	r17,8(sp)
 4015180:	dc000115 	stw	r16,4(sp)
 4015184:	288002c4 	addi	r2,r5,11
 4015188:	00c00584 	movi	r3,22
 401518c:	2025883a 	mov	r18,r4
 4015190:	18807f2e 	bgeu	r3,r2,4015390 <_malloc_r+0x238>
 4015194:	047ffe04 	movi	r17,-8
 4015198:	1462703a 	and	r17,r2,r17
 401519c:	8800a316 	blt	r17,zero,401542c <_malloc_r+0x2d4>
 40151a0:	8940a236 	bltu	r17,r5,401542c <_malloc_r+0x2d4>
 40151a4:	401b4780 	call	401b478 <__malloc_lock>
 40151a8:	00807dc4 	movi	r2,503
 40151ac:	1441e92e 	bgeu	r2,r17,4015954 <_malloc_r+0x7fc>
 40151b0:	8804d27a 	srli	r2,r17,9
 40151b4:	1000a126 	beq	r2,zero,401543c <_malloc_r+0x2e4>
 40151b8:	00c00104 	movi	r3,4
 40151bc:	18811e36 	bltu	r3,r2,4015638 <_malloc_r+0x4e0>
 40151c0:	8804d1ba 	srli	r2,r17,6
 40151c4:	12000e44 	addi	r8,r2,57
 40151c8:	11c00e04 	addi	r7,r2,56
 40151cc:	4209883a 	add	r4,r8,r8
 40151d0:	04c100b4 	movhi	r19,1026
 40151d4:	2109883a 	add	r4,r4,r4
 40151d8:	9cfa5404 	addi	r19,r19,-5808
 40151dc:	2109883a 	add	r4,r4,r4
 40151e0:	9909883a 	add	r4,r19,r4
 40151e4:	24000117 	ldw	r16,4(r4)
 40151e8:	213ffe04 	addi	r4,r4,-8
 40151ec:	24009726 	beq	r4,r16,401544c <_malloc_r+0x2f4>
 40151f0:	80800117 	ldw	r2,4(r16)
 40151f4:	01bfff04 	movi	r6,-4
 40151f8:	014003c4 	movi	r5,15
 40151fc:	1184703a 	and	r2,r2,r6
 4015200:	1447c83a 	sub	r3,r2,r17
 4015204:	28c00716 	blt	r5,r3,4015224 <_malloc_r+0xcc>
 4015208:	1800920e 	bge	r3,zero,4015454 <_malloc_r+0x2fc>
 401520c:	84000317 	ldw	r16,12(r16)
 4015210:	24008e26 	beq	r4,r16,401544c <_malloc_r+0x2f4>
 4015214:	80800117 	ldw	r2,4(r16)
 4015218:	1184703a 	and	r2,r2,r6
 401521c:	1447c83a 	sub	r3,r2,r17
 4015220:	28fff90e 	bge	r5,r3,4015208 <__alt_mem_onchip_memory2_0+0xfc010048>
 4015224:	3809883a 	mov	r4,r7
 4015228:	018100b4 	movhi	r6,1026
 401522c:	9c000417 	ldw	r16,16(r19)
 4015230:	31ba5404 	addi	r6,r6,-5808
 4015234:	32000204 	addi	r8,r6,8
 4015238:	82013426 	beq	r16,r8,401570c <_malloc_r+0x5b4>
 401523c:	80c00117 	ldw	r3,4(r16)
 4015240:	00bfff04 	movi	r2,-4
 4015244:	188e703a 	and	r7,r3,r2
 4015248:	3c45c83a 	sub	r2,r7,r17
 401524c:	00c003c4 	movi	r3,15
 4015250:	18811f16 	blt	r3,r2,40156d0 <_malloc_r+0x578>
 4015254:	32000515 	stw	r8,20(r6)
 4015258:	32000415 	stw	r8,16(r6)
 401525c:	10007f0e 	bge	r2,zero,401545c <_malloc_r+0x304>
 4015260:	00807fc4 	movi	r2,511
 4015264:	11c0fd36 	bltu	r2,r7,401565c <_malloc_r+0x504>
 4015268:	3806d0fa 	srli	r3,r7,3
 401526c:	01c00044 	movi	r7,1
 4015270:	30800117 	ldw	r2,4(r6)
 4015274:	19400044 	addi	r5,r3,1
 4015278:	294b883a 	add	r5,r5,r5
 401527c:	1807d0ba 	srai	r3,r3,2
 4015280:	294b883a 	add	r5,r5,r5
 4015284:	294b883a 	add	r5,r5,r5
 4015288:	298b883a 	add	r5,r5,r6
 401528c:	38c6983a 	sll	r3,r7,r3
 4015290:	29c00017 	ldw	r7,0(r5)
 4015294:	2a7ffe04 	addi	r9,r5,-8
 4015298:	1886b03a 	or	r3,r3,r2
 401529c:	82400315 	stw	r9,12(r16)
 40152a0:	81c00215 	stw	r7,8(r16)
 40152a4:	30c00115 	stw	r3,4(r6)
 40152a8:	2c000015 	stw	r16,0(r5)
 40152ac:	3c000315 	stw	r16,12(r7)
 40152b0:	2005d0ba 	srai	r2,r4,2
 40152b4:	01400044 	movi	r5,1
 40152b8:	288a983a 	sll	r5,r5,r2
 40152bc:	19406f36 	bltu	r3,r5,401547c <_malloc_r+0x324>
 40152c0:	28c4703a 	and	r2,r5,r3
 40152c4:	10000a1e 	bne	r2,zero,40152f0 <_malloc_r+0x198>
 40152c8:	00bfff04 	movi	r2,-4
 40152cc:	294b883a 	add	r5,r5,r5
 40152d0:	2088703a 	and	r4,r4,r2
 40152d4:	28c4703a 	and	r2,r5,r3
 40152d8:	21000104 	addi	r4,r4,4
 40152dc:	1000041e 	bne	r2,zero,40152f0 <_malloc_r+0x198>
 40152e0:	294b883a 	add	r5,r5,r5
 40152e4:	28c4703a 	and	r2,r5,r3
 40152e8:	21000104 	addi	r4,r4,4
 40152ec:	103ffc26 	beq	r2,zero,40152e0 <__alt_mem_onchip_memory2_0+0xfc010120>
 40152f0:	02bfff04 	movi	r10,-4
 40152f4:	024003c4 	movi	r9,15
 40152f8:	21800044 	addi	r6,r4,1
 40152fc:	318d883a 	add	r6,r6,r6
 4015300:	318d883a 	add	r6,r6,r6
 4015304:	318d883a 	add	r6,r6,r6
 4015308:	998d883a 	add	r6,r19,r6
 401530c:	333ffe04 	addi	r12,r6,-8
 4015310:	2017883a 	mov	r11,r4
 4015314:	31800104 	addi	r6,r6,4
 4015318:	34000017 	ldw	r16,0(r6)
 401531c:	31fffd04 	addi	r7,r6,-12
 4015320:	81c0041e 	bne	r16,r7,4015334 <_malloc_r+0x1dc>
 4015324:	0000fb06 	br	4015714 <_malloc_r+0x5bc>
 4015328:	1801030e 	bge	r3,zero,4015738 <_malloc_r+0x5e0>
 401532c:	84000317 	ldw	r16,12(r16)
 4015330:	81c0f826 	beq	r16,r7,4015714 <_malloc_r+0x5bc>
 4015334:	80800117 	ldw	r2,4(r16)
 4015338:	1284703a 	and	r2,r2,r10
 401533c:	1447c83a 	sub	r3,r2,r17
 4015340:	48fff90e 	bge	r9,r3,4015328 <__alt_mem_onchip_memory2_0+0xfc010168>
 4015344:	80800317 	ldw	r2,12(r16)
 4015348:	81000217 	ldw	r4,8(r16)
 401534c:	89400054 	ori	r5,r17,1
 4015350:	81400115 	stw	r5,4(r16)
 4015354:	20800315 	stw	r2,12(r4)
 4015358:	11000215 	stw	r4,8(r2)
 401535c:	8463883a 	add	r17,r16,r17
 4015360:	9c400515 	stw	r17,20(r19)
 4015364:	9c400415 	stw	r17,16(r19)
 4015368:	18800054 	ori	r2,r3,1
 401536c:	88800115 	stw	r2,4(r17)
 4015370:	8a000315 	stw	r8,12(r17)
 4015374:	8a000215 	stw	r8,8(r17)
 4015378:	88e3883a 	add	r17,r17,r3
 401537c:	88c00015 	stw	r3,0(r17)
 4015380:	9009883a 	mov	r4,r18
 4015384:	401b49c0 	call	401b49c <__malloc_unlock>
 4015388:	80800204 	addi	r2,r16,8
 401538c:	00001b06 	br	40153fc <_malloc_r+0x2a4>
 4015390:	04400404 	movi	r17,16
 4015394:	89402536 	bltu	r17,r5,401542c <_malloc_r+0x2d4>
 4015398:	401b4780 	call	401b478 <__malloc_lock>
 401539c:	00800184 	movi	r2,6
 40153a0:	01000084 	movi	r4,2
 40153a4:	04c100b4 	movhi	r19,1026
 40153a8:	1085883a 	add	r2,r2,r2
 40153ac:	9cfa5404 	addi	r19,r19,-5808
 40153b0:	1085883a 	add	r2,r2,r2
 40153b4:	9885883a 	add	r2,r19,r2
 40153b8:	14000117 	ldw	r16,4(r2)
 40153bc:	10fffe04 	addi	r3,r2,-8
 40153c0:	80c0d926 	beq	r16,r3,4015728 <_malloc_r+0x5d0>
 40153c4:	80c00117 	ldw	r3,4(r16)
 40153c8:	81000317 	ldw	r4,12(r16)
 40153cc:	00bfff04 	movi	r2,-4
 40153d0:	1884703a 	and	r2,r3,r2
 40153d4:	81400217 	ldw	r5,8(r16)
 40153d8:	8085883a 	add	r2,r16,r2
 40153dc:	10c00117 	ldw	r3,4(r2)
 40153e0:	29000315 	stw	r4,12(r5)
 40153e4:	21400215 	stw	r5,8(r4)
 40153e8:	18c00054 	ori	r3,r3,1
 40153ec:	10c00115 	stw	r3,4(r2)
 40153f0:	9009883a 	mov	r4,r18
 40153f4:	401b49c0 	call	401b49c <__malloc_unlock>
 40153f8:	80800204 	addi	r2,r16,8
 40153fc:	dfc00a17 	ldw	ra,40(sp)
 4015400:	df000917 	ldw	fp,36(sp)
 4015404:	ddc00817 	ldw	r23,32(sp)
 4015408:	dd800717 	ldw	r22,28(sp)
 401540c:	dd400617 	ldw	r21,24(sp)
 4015410:	dd000517 	ldw	r20,20(sp)
 4015414:	dcc00417 	ldw	r19,16(sp)
 4015418:	dc800317 	ldw	r18,12(sp)
 401541c:	dc400217 	ldw	r17,8(sp)
 4015420:	dc000117 	ldw	r16,4(sp)
 4015424:	dec00b04 	addi	sp,sp,44
 4015428:	f800283a 	ret
 401542c:	00800304 	movi	r2,12
 4015430:	90800015 	stw	r2,0(r18)
 4015434:	0005883a 	mov	r2,zero
 4015438:	003ff006 	br	40153fc <__alt_mem_onchip_memory2_0+0xfc01023c>
 401543c:	01002004 	movi	r4,128
 4015440:	02001004 	movi	r8,64
 4015444:	01c00fc4 	movi	r7,63
 4015448:	003f6106 	br	40151d0 <__alt_mem_onchip_memory2_0+0xfc010010>
 401544c:	4009883a 	mov	r4,r8
 4015450:	003f7506 	br	4015228 <__alt_mem_onchip_memory2_0+0xfc010068>
 4015454:	81000317 	ldw	r4,12(r16)
 4015458:	003fde06 	br	40153d4 <__alt_mem_onchip_memory2_0+0xfc010214>
 401545c:	81c5883a 	add	r2,r16,r7
 4015460:	11400117 	ldw	r5,4(r2)
 4015464:	9009883a 	mov	r4,r18
 4015468:	29400054 	ori	r5,r5,1
 401546c:	11400115 	stw	r5,4(r2)
 4015470:	401b49c0 	call	401b49c <__malloc_unlock>
 4015474:	80800204 	addi	r2,r16,8
 4015478:	003fe006 	br	40153fc <__alt_mem_onchip_memory2_0+0xfc01023c>
 401547c:	9c000217 	ldw	r16,8(r19)
 4015480:	00bfff04 	movi	r2,-4
 4015484:	85800117 	ldw	r22,4(r16)
 4015488:	b0ac703a 	and	r22,r22,r2
 401548c:	b4400336 	bltu	r22,r17,401549c <_malloc_r+0x344>
 4015490:	b445c83a 	sub	r2,r22,r17
 4015494:	00c003c4 	movi	r3,15
 4015498:	18805d16 	blt	r3,r2,4015610 <_malloc_r+0x4b8>
 401549c:	05c100b4 	movhi	r23,1026
 40154a0:	008100b4 	movhi	r2,1026
 40154a4:	1087e004 	addi	r2,r2,8064
 40154a8:	bdffe204 	addi	r23,r23,-120
 40154ac:	15400017 	ldw	r21,0(r2)
 40154b0:	b8c00017 	ldw	r3,0(r23)
 40154b4:	00bfffc4 	movi	r2,-1
 40154b8:	858d883a 	add	r6,r16,r22
 40154bc:	8d6b883a 	add	r21,r17,r21
 40154c0:	1880ea26 	beq	r3,r2,401586c <_malloc_r+0x714>
 40154c4:	ad4403c4 	addi	r21,r21,4111
 40154c8:	00bc0004 	movi	r2,-4096
 40154cc:	a8aa703a 	and	r21,r21,r2
 40154d0:	a80b883a 	mov	r5,r21
 40154d4:	9009883a 	mov	r4,r18
 40154d8:	d9800015 	stw	r6,0(sp)
 40154dc:	401735c0 	call	401735c <_sbrk_r>
 40154e0:	1029883a 	mov	r20,r2
 40154e4:	00bfffc4 	movi	r2,-1
 40154e8:	d9800017 	ldw	r6,0(sp)
 40154ec:	a080e826 	beq	r20,r2,4015890 <_malloc_r+0x738>
 40154f0:	a180a636 	bltu	r20,r6,401578c <_malloc_r+0x634>
 40154f4:	070100b4 	movhi	fp,1026
 40154f8:	e707f604 	addi	fp,fp,8152
 40154fc:	e0800017 	ldw	r2,0(fp)
 4015500:	a887883a 	add	r3,r21,r2
 4015504:	e0c00015 	stw	r3,0(fp)
 4015508:	3500e626 	beq	r6,r20,40158a4 <_malloc_r+0x74c>
 401550c:	b9000017 	ldw	r4,0(r23)
 4015510:	00bfffc4 	movi	r2,-1
 4015514:	2080ee26 	beq	r4,r2,40158d0 <_malloc_r+0x778>
 4015518:	a185c83a 	sub	r2,r20,r6
 401551c:	10c5883a 	add	r2,r2,r3
 4015520:	e0800015 	stw	r2,0(fp)
 4015524:	a0c001cc 	andi	r3,r20,7
 4015528:	1800bc26 	beq	r3,zero,401581c <_malloc_r+0x6c4>
 401552c:	a0e9c83a 	sub	r20,r20,r3
 4015530:	00840204 	movi	r2,4104
 4015534:	a5000204 	addi	r20,r20,8
 4015538:	10c7c83a 	sub	r3,r2,r3
 401553c:	a545883a 	add	r2,r20,r21
 4015540:	1083ffcc 	andi	r2,r2,4095
 4015544:	18abc83a 	sub	r21,r3,r2
 4015548:	a80b883a 	mov	r5,r21
 401554c:	9009883a 	mov	r4,r18
 4015550:	401735c0 	call	401735c <_sbrk_r>
 4015554:	00ffffc4 	movi	r3,-1
 4015558:	10c0e126 	beq	r2,r3,40158e0 <_malloc_r+0x788>
 401555c:	1505c83a 	sub	r2,r2,r20
 4015560:	1545883a 	add	r2,r2,r21
 4015564:	10800054 	ori	r2,r2,1
 4015568:	e0c00017 	ldw	r3,0(fp)
 401556c:	9d000215 	stw	r20,8(r19)
 4015570:	a0800115 	stw	r2,4(r20)
 4015574:	a8c7883a 	add	r3,r21,r3
 4015578:	e0c00015 	stw	r3,0(fp)
 401557c:	84c00e26 	beq	r16,r19,40155b8 <_malloc_r+0x460>
 4015580:	018003c4 	movi	r6,15
 4015584:	3580a72e 	bgeu	r6,r22,4015824 <_malloc_r+0x6cc>
 4015588:	81400117 	ldw	r5,4(r16)
 401558c:	013ffe04 	movi	r4,-8
 4015590:	b0bffd04 	addi	r2,r22,-12
 4015594:	1104703a 	and	r2,r2,r4
 4015598:	2900004c 	andi	r4,r5,1
 401559c:	2088b03a 	or	r4,r4,r2
 40155a0:	81000115 	stw	r4,4(r16)
 40155a4:	01400144 	movi	r5,5
 40155a8:	8089883a 	add	r4,r16,r2
 40155ac:	21400115 	stw	r5,4(r4)
 40155b0:	21400215 	stw	r5,8(r4)
 40155b4:	3080cd36 	bltu	r6,r2,40158ec <_malloc_r+0x794>
 40155b8:	008100b4 	movhi	r2,1026
 40155bc:	1087df04 	addi	r2,r2,8060
 40155c0:	11000017 	ldw	r4,0(r2)
 40155c4:	20c0012e 	bgeu	r4,r3,40155cc <_malloc_r+0x474>
 40155c8:	10c00015 	stw	r3,0(r2)
 40155cc:	008100b4 	movhi	r2,1026
 40155d0:	1087de04 	addi	r2,r2,8056
 40155d4:	11000017 	ldw	r4,0(r2)
 40155d8:	9c000217 	ldw	r16,8(r19)
 40155dc:	20c0012e 	bgeu	r4,r3,40155e4 <_malloc_r+0x48c>
 40155e0:	10c00015 	stw	r3,0(r2)
 40155e4:	80c00117 	ldw	r3,4(r16)
 40155e8:	00bfff04 	movi	r2,-4
 40155ec:	1886703a 	and	r3,r3,r2
 40155f0:	1c45c83a 	sub	r2,r3,r17
 40155f4:	1c400236 	bltu	r3,r17,4015600 <_malloc_r+0x4a8>
 40155f8:	00c003c4 	movi	r3,15
 40155fc:	18800416 	blt	r3,r2,4015610 <_malloc_r+0x4b8>
 4015600:	9009883a 	mov	r4,r18
 4015604:	401b49c0 	call	401b49c <__malloc_unlock>
 4015608:	0005883a 	mov	r2,zero
 401560c:	003f7b06 	br	40153fc <__alt_mem_onchip_memory2_0+0xfc01023c>
 4015610:	88c00054 	ori	r3,r17,1
 4015614:	80c00115 	stw	r3,4(r16)
 4015618:	8463883a 	add	r17,r16,r17
 401561c:	10800054 	ori	r2,r2,1
 4015620:	9c400215 	stw	r17,8(r19)
 4015624:	88800115 	stw	r2,4(r17)
 4015628:	9009883a 	mov	r4,r18
 401562c:	401b49c0 	call	401b49c <__malloc_unlock>
 4015630:	80800204 	addi	r2,r16,8
 4015634:	003f7106 	br	40153fc <__alt_mem_onchip_memory2_0+0xfc01023c>
 4015638:	00c00504 	movi	r3,20
 401563c:	18804a2e 	bgeu	r3,r2,4015768 <_malloc_r+0x610>
 4015640:	00c01504 	movi	r3,84
 4015644:	18806e36 	bltu	r3,r2,4015800 <_malloc_r+0x6a8>
 4015648:	8804d33a 	srli	r2,r17,12
 401564c:	12001bc4 	addi	r8,r2,111
 4015650:	11c01b84 	addi	r7,r2,110
 4015654:	4209883a 	add	r4,r8,r8
 4015658:	003edd06 	br	40151d0 <__alt_mem_onchip_memory2_0+0xfc010010>
 401565c:	3804d27a 	srli	r2,r7,9
 4015660:	00c00104 	movi	r3,4
 4015664:	1880442e 	bgeu	r3,r2,4015778 <_malloc_r+0x620>
 4015668:	00c00504 	movi	r3,20
 401566c:	18808136 	bltu	r3,r2,4015874 <_malloc_r+0x71c>
 4015670:	11401704 	addi	r5,r2,92
 4015674:	10c016c4 	addi	r3,r2,91
 4015678:	294b883a 	add	r5,r5,r5
 401567c:	294b883a 	add	r5,r5,r5
 4015680:	294b883a 	add	r5,r5,r5
 4015684:	994b883a 	add	r5,r19,r5
 4015688:	28800017 	ldw	r2,0(r5)
 401568c:	018100b4 	movhi	r6,1026
 4015690:	297ffe04 	addi	r5,r5,-8
 4015694:	31ba5404 	addi	r6,r6,-5808
 4015698:	28806526 	beq	r5,r2,4015830 <_malloc_r+0x6d8>
 401569c:	01bfff04 	movi	r6,-4
 40156a0:	10c00117 	ldw	r3,4(r2)
 40156a4:	1986703a 	and	r3,r3,r6
 40156a8:	38c0022e 	bgeu	r7,r3,40156b4 <_malloc_r+0x55c>
 40156ac:	10800217 	ldw	r2,8(r2)
 40156b0:	28bffb1e 	bne	r5,r2,40156a0 <__alt_mem_onchip_memory2_0+0xfc0104e0>
 40156b4:	11400317 	ldw	r5,12(r2)
 40156b8:	98c00117 	ldw	r3,4(r19)
 40156bc:	81400315 	stw	r5,12(r16)
 40156c0:	80800215 	stw	r2,8(r16)
 40156c4:	2c000215 	stw	r16,8(r5)
 40156c8:	14000315 	stw	r16,12(r2)
 40156cc:	003ef806 	br	40152b0 <__alt_mem_onchip_memory2_0+0xfc0100f0>
 40156d0:	88c00054 	ori	r3,r17,1
 40156d4:	80c00115 	stw	r3,4(r16)
 40156d8:	8463883a 	add	r17,r16,r17
 40156dc:	34400515 	stw	r17,20(r6)
 40156e0:	34400415 	stw	r17,16(r6)
 40156e4:	10c00054 	ori	r3,r2,1
 40156e8:	8a000315 	stw	r8,12(r17)
 40156ec:	8a000215 	stw	r8,8(r17)
 40156f0:	88c00115 	stw	r3,4(r17)
 40156f4:	88a3883a 	add	r17,r17,r2
 40156f8:	88800015 	stw	r2,0(r17)
 40156fc:	9009883a 	mov	r4,r18
 4015700:	401b49c0 	call	401b49c <__malloc_unlock>
 4015704:	80800204 	addi	r2,r16,8
 4015708:	003f3c06 	br	40153fc <__alt_mem_onchip_memory2_0+0xfc01023c>
 401570c:	30c00117 	ldw	r3,4(r6)
 4015710:	003ee706 	br	40152b0 <__alt_mem_onchip_memory2_0+0xfc0100f0>
 4015714:	5ac00044 	addi	r11,r11,1
 4015718:	588000cc 	andi	r2,r11,3
 401571c:	31800204 	addi	r6,r6,8
 4015720:	103efd1e 	bne	r2,zero,4015318 <__alt_mem_onchip_memory2_0+0xfc010158>
 4015724:	00002406 	br	40157b8 <_malloc_r+0x660>
 4015728:	14000317 	ldw	r16,12(r2)
 401572c:	143f251e 	bne	r2,r16,40153c4 <__alt_mem_onchip_memory2_0+0xfc010204>
 4015730:	21000084 	addi	r4,r4,2
 4015734:	003ebc06 	br	4015228 <__alt_mem_onchip_memory2_0+0xfc010068>
 4015738:	8085883a 	add	r2,r16,r2
 401573c:	10c00117 	ldw	r3,4(r2)
 4015740:	81000317 	ldw	r4,12(r16)
 4015744:	81400217 	ldw	r5,8(r16)
 4015748:	18c00054 	ori	r3,r3,1
 401574c:	10c00115 	stw	r3,4(r2)
 4015750:	29000315 	stw	r4,12(r5)
 4015754:	21400215 	stw	r5,8(r4)
 4015758:	9009883a 	mov	r4,r18
 401575c:	401b49c0 	call	401b49c <__malloc_unlock>
 4015760:	80800204 	addi	r2,r16,8
 4015764:	003f2506 	br	40153fc <__alt_mem_onchip_memory2_0+0xfc01023c>
 4015768:	12001704 	addi	r8,r2,92
 401576c:	11c016c4 	addi	r7,r2,91
 4015770:	4209883a 	add	r4,r8,r8
 4015774:	003e9606 	br	40151d0 <__alt_mem_onchip_memory2_0+0xfc010010>
 4015778:	3804d1ba 	srli	r2,r7,6
 401577c:	11400e44 	addi	r5,r2,57
 4015780:	10c00e04 	addi	r3,r2,56
 4015784:	294b883a 	add	r5,r5,r5
 4015788:	003fbc06 	br	401567c <__alt_mem_onchip_memory2_0+0xfc0104bc>
 401578c:	84ff5926 	beq	r16,r19,40154f4 <__alt_mem_onchip_memory2_0+0xfc010334>
 4015790:	008100b4 	movhi	r2,1026
 4015794:	10ba5404 	addi	r2,r2,-5808
 4015798:	14000217 	ldw	r16,8(r2)
 401579c:	00bfff04 	movi	r2,-4
 40157a0:	80c00117 	ldw	r3,4(r16)
 40157a4:	1886703a 	and	r3,r3,r2
 40157a8:	003f9106 	br	40155f0 <__alt_mem_onchip_memory2_0+0xfc010430>
 40157ac:	60800217 	ldw	r2,8(r12)
 40157b0:	213fffc4 	addi	r4,r4,-1
 40157b4:	1300651e 	bne	r2,r12,401594c <_malloc_r+0x7f4>
 40157b8:	208000cc 	andi	r2,r4,3
 40157bc:	633ffe04 	addi	r12,r12,-8
 40157c0:	103ffa1e 	bne	r2,zero,40157ac <__alt_mem_onchip_memory2_0+0xfc0105ec>
 40157c4:	98800117 	ldw	r2,4(r19)
 40157c8:	0146303a 	nor	r3,zero,r5
 40157cc:	1884703a 	and	r2,r3,r2
 40157d0:	98800115 	stw	r2,4(r19)
 40157d4:	294b883a 	add	r5,r5,r5
 40157d8:	117f2836 	bltu	r2,r5,401547c <__alt_mem_onchip_memory2_0+0xfc0102bc>
 40157dc:	283f2726 	beq	r5,zero,401547c <__alt_mem_onchip_memory2_0+0xfc0102bc>
 40157e0:	2886703a 	and	r3,r5,r2
 40157e4:	5809883a 	mov	r4,r11
 40157e8:	183ec31e 	bne	r3,zero,40152f8 <__alt_mem_onchip_memory2_0+0xfc010138>
 40157ec:	294b883a 	add	r5,r5,r5
 40157f0:	2886703a 	and	r3,r5,r2
 40157f4:	21000104 	addi	r4,r4,4
 40157f8:	183ffc26 	beq	r3,zero,40157ec <__alt_mem_onchip_memory2_0+0xfc01062c>
 40157fc:	003ebe06 	br	40152f8 <__alt_mem_onchip_memory2_0+0xfc010138>
 4015800:	00c05504 	movi	r3,340
 4015804:	18801236 	bltu	r3,r2,4015850 <_malloc_r+0x6f8>
 4015808:	8804d3fa 	srli	r2,r17,15
 401580c:	12001e04 	addi	r8,r2,120
 4015810:	11c01dc4 	addi	r7,r2,119
 4015814:	4209883a 	add	r4,r8,r8
 4015818:	003e6d06 	br	40151d0 <__alt_mem_onchip_memory2_0+0xfc010010>
 401581c:	00c40004 	movi	r3,4096
 4015820:	003f4606 	br	401553c <__alt_mem_onchip_memory2_0+0xfc01037c>
 4015824:	00800044 	movi	r2,1
 4015828:	a0800115 	stw	r2,4(r20)
 401582c:	003f7406 	br	4015600 <__alt_mem_onchip_memory2_0+0xfc010440>
 4015830:	1805d0ba 	srai	r2,r3,2
 4015834:	01c00044 	movi	r7,1
 4015838:	30c00117 	ldw	r3,4(r6)
 401583c:	388e983a 	sll	r7,r7,r2
 4015840:	2805883a 	mov	r2,r5
 4015844:	38c6b03a 	or	r3,r7,r3
 4015848:	30c00115 	stw	r3,4(r6)
 401584c:	003f9b06 	br	40156bc <__alt_mem_onchip_memory2_0+0xfc0104fc>
 4015850:	00c15504 	movi	r3,1364
 4015854:	18801a36 	bltu	r3,r2,40158c0 <_malloc_r+0x768>
 4015858:	8804d4ba 	srli	r2,r17,18
 401585c:	12001f44 	addi	r8,r2,125
 4015860:	11c01f04 	addi	r7,r2,124
 4015864:	4209883a 	add	r4,r8,r8
 4015868:	003e5906 	br	40151d0 <__alt_mem_onchip_memory2_0+0xfc010010>
 401586c:	ad400404 	addi	r21,r21,16
 4015870:	003f1706 	br	40154d0 <__alt_mem_onchip_memory2_0+0xfc010310>
 4015874:	00c01504 	movi	r3,84
 4015878:	18802336 	bltu	r3,r2,4015908 <_malloc_r+0x7b0>
 401587c:	3804d33a 	srli	r2,r7,12
 4015880:	11401bc4 	addi	r5,r2,111
 4015884:	10c01b84 	addi	r3,r2,110
 4015888:	294b883a 	add	r5,r5,r5
 401588c:	003f7b06 	br	401567c <__alt_mem_onchip_memory2_0+0xfc0104bc>
 4015890:	9c000217 	ldw	r16,8(r19)
 4015894:	00bfff04 	movi	r2,-4
 4015898:	80c00117 	ldw	r3,4(r16)
 401589c:	1886703a 	and	r3,r3,r2
 40158a0:	003f5306 	br	40155f0 <__alt_mem_onchip_memory2_0+0xfc010430>
 40158a4:	3083ffcc 	andi	r2,r6,4095
 40158a8:	103f181e 	bne	r2,zero,401550c <__alt_mem_onchip_memory2_0+0xfc01034c>
 40158ac:	99000217 	ldw	r4,8(r19)
 40158b0:	b545883a 	add	r2,r22,r21
 40158b4:	10800054 	ori	r2,r2,1
 40158b8:	20800115 	stw	r2,4(r4)
 40158bc:	003f3e06 	br	40155b8 <__alt_mem_onchip_memory2_0+0xfc0103f8>
 40158c0:	01003f84 	movi	r4,254
 40158c4:	02001fc4 	movi	r8,127
 40158c8:	01c01f84 	movi	r7,126
 40158cc:	003e4006 	br	40151d0 <__alt_mem_onchip_memory2_0+0xfc010010>
 40158d0:	008100b4 	movhi	r2,1026
 40158d4:	10bfe204 	addi	r2,r2,-120
 40158d8:	15000015 	stw	r20,0(r2)
 40158dc:	003f1106 	br	4015524 <__alt_mem_onchip_memory2_0+0xfc010364>
 40158e0:	00800044 	movi	r2,1
 40158e4:	002b883a 	mov	r21,zero
 40158e8:	003f1f06 	br	4015568 <__alt_mem_onchip_memory2_0+0xfc0103a8>
 40158ec:	81400204 	addi	r5,r16,8
 40158f0:	9009883a 	mov	r4,r18
 40158f4:	40145040 	call	4014504 <_free_r>
 40158f8:	008100b4 	movhi	r2,1026
 40158fc:	1087f604 	addi	r2,r2,8152
 4015900:	10c00017 	ldw	r3,0(r2)
 4015904:	003f2c06 	br	40155b8 <__alt_mem_onchip_memory2_0+0xfc0103f8>
 4015908:	00c05504 	movi	r3,340
 401590c:	18800536 	bltu	r3,r2,4015924 <_malloc_r+0x7cc>
 4015910:	3804d3fa 	srli	r2,r7,15
 4015914:	11401e04 	addi	r5,r2,120
 4015918:	10c01dc4 	addi	r3,r2,119
 401591c:	294b883a 	add	r5,r5,r5
 4015920:	003f5606 	br	401567c <__alt_mem_onchip_memory2_0+0xfc0104bc>
 4015924:	00c15504 	movi	r3,1364
 4015928:	18800536 	bltu	r3,r2,4015940 <_malloc_r+0x7e8>
 401592c:	3804d4ba 	srli	r2,r7,18
 4015930:	11401f44 	addi	r5,r2,125
 4015934:	10c01f04 	addi	r3,r2,124
 4015938:	294b883a 	add	r5,r5,r5
 401593c:	003f4f06 	br	401567c <__alt_mem_onchip_memory2_0+0xfc0104bc>
 4015940:	01403f84 	movi	r5,254
 4015944:	00c01f84 	movi	r3,126
 4015948:	003f4c06 	br	401567c <__alt_mem_onchip_memory2_0+0xfc0104bc>
 401594c:	98800117 	ldw	r2,4(r19)
 4015950:	003fa006 	br	40157d4 <__alt_mem_onchip_memory2_0+0xfc010614>
 4015954:	8808d0fa 	srli	r4,r17,3
 4015958:	20800044 	addi	r2,r4,1
 401595c:	1085883a 	add	r2,r2,r2
 4015960:	003e9006 	br	40153a4 <__alt_mem_onchip_memory2_0+0xfc0101e4>

04015964 <memchr>:
 4015964:	208000cc 	andi	r2,r4,3
 4015968:	280f883a 	mov	r7,r5
 401596c:	10003426 	beq	r2,zero,4015a40 <memchr+0xdc>
 4015970:	30bfffc4 	addi	r2,r6,-1
 4015974:	30001a26 	beq	r6,zero,40159e0 <memchr+0x7c>
 4015978:	20c00003 	ldbu	r3,0(r4)
 401597c:	29803fcc 	andi	r6,r5,255
 4015980:	30c0051e 	bne	r6,r3,4015998 <memchr+0x34>
 4015984:	00001806 	br	40159e8 <memchr+0x84>
 4015988:	10001526 	beq	r2,zero,40159e0 <memchr+0x7c>
 401598c:	20c00003 	ldbu	r3,0(r4)
 4015990:	10bfffc4 	addi	r2,r2,-1
 4015994:	30c01426 	beq	r6,r3,40159e8 <memchr+0x84>
 4015998:	21000044 	addi	r4,r4,1
 401599c:	20c000cc 	andi	r3,r4,3
 40159a0:	183ff91e 	bne	r3,zero,4015988 <__alt_mem_onchip_memory2_0+0xfc0107c8>
 40159a4:	020000c4 	movi	r8,3
 40159a8:	40801136 	bltu	r8,r2,40159f0 <memchr+0x8c>
 40159ac:	10000c26 	beq	r2,zero,40159e0 <memchr+0x7c>
 40159b0:	20c00003 	ldbu	r3,0(r4)
 40159b4:	29403fcc 	andi	r5,r5,255
 40159b8:	28c00b26 	beq	r5,r3,40159e8 <memchr+0x84>
 40159bc:	20c00044 	addi	r3,r4,1
 40159c0:	39803fcc 	andi	r6,r7,255
 40159c4:	2089883a 	add	r4,r4,r2
 40159c8:	00000306 	br	40159d8 <memchr+0x74>
 40159cc:	18c00044 	addi	r3,r3,1
 40159d0:	197fffc3 	ldbu	r5,-1(r3)
 40159d4:	31400526 	beq	r6,r5,40159ec <memchr+0x88>
 40159d8:	1805883a 	mov	r2,r3
 40159dc:	20fffb1e 	bne	r4,r3,40159cc <__alt_mem_onchip_memory2_0+0xfc01080c>
 40159e0:	0005883a 	mov	r2,zero
 40159e4:	f800283a 	ret
 40159e8:	2005883a 	mov	r2,r4
 40159ec:	f800283a 	ret
 40159f0:	28c03fcc 	andi	r3,r5,255
 40159f4:	1812923a 	slli	r9,r3,8
 40159f8:	02ffbff4 	movhi	r11,65279
 40159fc:	02a02074 	movhi	r10,32897
 4015a00:	48d2b03a 	or	r9,r9,r3
 4015a04:	4806943a 	slli	r3,r9,16
 4015a08:	5affbfc4 	addi	r11,r11,-257
 4015a0c:	52a02004 	addi	r10,r10,-32640
 4015a10:	48d2b03a 	or	r9,r9,r3
 4015a14:	20c00017 	ldw	r3,0(r4)
 4015a18:	48c6f03a 	xor	r3,r9,r3
 4015a1c:	1acd883a 	add	r6,r3,r11
 4015a20:	00c6303a 	nor	r3,zero,r3
 4015a24:	30c6703a 	and	r3,r6,r3
 4015a28:	1a86703a 	and	r3,r3,r10
 4015a2c:	183fe01e 	bne	r3,zero,40159b0 <__alt_mem_onchip_memory2_0+0xfc0107f0>
 4015a30:	10bfff04 	addi	r2,r2,-4
 4015a34:	21000104 	addi	r4,r4,4
 4015a38:	40bff636 	bltu	r8,r2,4015a14 <__alt_mem_onchip_memory2_0+0xfc010854>
 4015a3c:	003fdb06 	br	40159ac <__alt_mem_onchip_memory2_0+0xfc0107ec>
 4015a40:	3005883a 	mov	r2,r6
 4015a44:	003fd706 	br	40159a4 <__alt_mem_onchip_memory2_0+0xfc0107e4>

04015a48 <memmove>:
 4015a48:	2005883a 	mov	r2,r4
 4015a4c:	29000b2e 	bgeu	r5,r4,4015a7c <memmove+0x34>
 4015a50:	298f883a 	add	r7,r5,r6
 4015a54:	21c0092e 	bgeu	r4,r7,4015a7c <memmove+0x34>
 4015a58:	2187883a 	add	r3,r4,r6
 4015a5c:	198bc83a 	sub	r5,r3,r6
 4015a60:	30004826 	beq	r6,zero,4015b84 <memmove+0x13c>
 4015a64:	39ffffc4 	addi	r7,r7,-1
 4015a68:	39000003 	ldbu	r4,0(r7)
 4015a6c:	18ffffc4 	addi	r3,r3,-1
 4015a70:	19000005 	stb	r4,0(r3)
 4015a74:	28fffb1e 	bne	r5,r3,4015a64 <__alt_mem_onchip_memory2_0+0xfc0108a4>
 4015a78:	f800283a 	ret
 4015a7c:	00c003c4 	movi	r3,15
 4015a80:	1980412e 	bgeu	r3,r6,4015b88 <memmove+0x140>
 4015a84:	2886b03a 	or	r3,r5,r2
 4015a88:	18c000cc 	andi	r3,r3,3
 4015a8c:	1800401e 	bne	r3,zero,4015b90 <memmove+0x148>
 4015a90:	33fffc04 	addi	r15,r6,-16
 4015a94:	781ed13a 	srli	r15,r15,4
 4015a98:	28c00104 	addi	r3,r5,4
 4015a9c:	13400104 	addi	r13,r2,4
 4015aa0:	781c913a 	slli	r14,r15,4
 4015aa4:	2b000204 	addi	r12,r5,8
 4015aa8:	12c00204 	addi	r11,r2,8
 4015aac:	73800504 	addi	r14,r14,20
 4015ab0:	2a800304 	addi	r10,r5,12
 4015ab4:	12400304 	addi	r9,r2,12
 4015ab8:	2b9d883a 	add	r14,r5,r14
 4015abc:	2811883a 	mov	r8,r5
 4015ac0:	100f883a 	mov	r7,r2
 4015ac4:	41000017 	ldw	r4,0(r8)
 4015ac8:	39c00404 	addi	r7,r7,16
 4015acc:	18c00404 	addi	r3,r3,16
 4015ad0:	393ffc15 	stw	r4,-16(r7)
 4015ad4:	193ffc17 	ldw	r4,-16(r3)
 4015ad8:	6b400404 	addi	r13,r13,16
 4015adc:	5ac00404 	addi	r11,r11,16
 4015ae0:	693ffc15 	stw	r4,-16(r13)
 4015ae4:	61000017 	ldw	r4,0(r12)
 4015ae8:	4a400404 	addi	r9,r9,16
 4015aec:	42000404 	addi	r8,r8,16
 4015af0:	593ffc15 	stw	r4,-16(r11)
 4015af4:	51000017 	ldw	r4,0(r10)
 4015af8:	63000404 	addi	r12,r12,16
 4015afc:	52800404 	addi	r10,r10,16
 4015b00:	493ffc15 	stw	r4,-16(r9)
 4015b04:	1bbfef1e 	bne	r3,r14,4015ac4 <__alt_mem_onchip_memory2_0+0xfc010904>
 4015b08:	79000044 	addi	r4,r15,1
 4015b0c:	2008913a 	slli	r4,r4,4
 4015b10:	328003cc 	andi	r10,r6,15
 4015b14:	02c000c4 	movi	r11,3
 4015b18:	1107883a 	add	r3,r2,r4
 4015b1c:	290b883a 	add	r5,r5,r4
 4015b20:	5a801e2e 	bgeu	r11,r10,4015b9c <memmove+0x154>
 4015b24:	1813883a 	mov	r9,r3
 4015b28:	2811883a 	mov	r8,r5
 4015b2c:	500f883a 	mov	r7,r10
 4015b30:	41000017 	ldw	r4,0(r8)
 4015b34:	4a400104 	addi	r9,r9,4
 4015b38:	39ffff04 	addi	r7,r7,-4
 4015b3c:	493fff15 	stw	r4,-4(r9)
 4015b40:	42000104 	addi	r8,r8,4
 4015b44:	59fffa36 	bltu	r11,r7,4015b30 <__alt_mem_onchip_memory2_0+0xfc010970>
 4015b48:	513fff04 	addi	r4,r10,-4
 4015b4c:	2008d0ba 	srli	r4,r4,2
 4015b50:	318000cc 	andi	r6,r6,3
 4015b54:	21000044 	addi	r4,r4,1
 4015b58:	2109883a 	add	r4,r4,r4
 4015b5c:	2109883a 	add	r4,r4,r4
 4015b60:	1907883a 	add	r3,r3,r4
 4015b64:	290b883a 	add	r5,r5,r4
 4015b68:	30000b26 	beq	r6,zero,4015b98 <memmove+0x150>
 4015b6c:	198d883a 	add	r6,r3,r6
 4015b70:	29c00003 	ldbu	r7,0(r5)
 4015b74:	18c00044 	addi	r3,r3,1
 4015b78:	29400044 	addi	r5,r5,1
 4015b7c:	19ffffc5 	stb	r7,-1(r3)
 4015b80:	19bffb1e 	bne	r3,r6,4015b70 <__alt_mem_onchip_memory2_0+0xfc0109b0>
 4015b84:	f800283a 	ret
 4015b88:	1007883a 	mov	r3,r2
 4015b8c:	003ff606 	br	4015b68 <__alt_mem_onchip_memory2_0+0xfc0109a8>
 4015b90:	1007883a 	mov	r3,r2
 4015b94:	003ff506 	br	4015b6c <__alt_mem_onchip_memory2_0+0xfc0109ac>
 4015b98:	f800283a 	ret
 4015b9c:	500d883a 	mov	r6,r10
 4015ba0:	003ff106 	br	4015b68 <__alt_mem_onchip_memory2_0+0xfc0109a8>

04015ba4 <memset>:
 4015ba4:	20c000cc 	andi	r3,r4,3
 4015ba8:	2005883a 	mov	r2,r4
 4015bac:	18004426 	beq	r3,zero,4015cc0 <memset+0x11c>
 4015bb0:	31ffffc4 	addi	r7,r6,-1
 4015bb4:	30004026 	beq	r6,zero,4015cb8 <memset+0x114>
 4015bb8:	2813883a 	mov	r9,r5
 4015bbc:	200d883a 	mov	r6,r4
 4015bc0:	2007883a 	mov	r3,r4
 4015bc4:	00000406 	br	4015bd8 <memset+0x34>
 4015bc8:	3a3fffc4 	addi	r8,r7,-1
 4015bcc:	31800044 	addi	r6,r6,1
 4015bd0:	38003926 	beq	r7,zero,4015cb8 <memset+0x114>
 4015bd4:	400f883a 	mov	r7,r8
 4015bd8:	18c00044 	addi	r3,r3,1
 4015bdc:	32400005 	stb	r9,0(r6)
 4015be0:	1a0000cc 	andi	r8,r3,3
 4015be4:	403ff81e 	bne	r8,zero,4015bc8 <__alt_mem_onchip_memory2_0+0xfc010a08>
 4015be8:	010000c4 	movi	r4,3
 4015bec:	21c02d2e 	bgeu	r4,r7,4015ca4 <memset+0x100>
 4015bf0:	29003fcc 	andi	r4,r5,255
 4015bf4:	200c923a 	slli	r6,r4,8
 4015bf8:	3108b03a 	or	r4,r6,r4
 4015bfc:	200c943a 	slli	r6,r4,16
 4015c00:	218cb03a 	or	r6,r4,r6
 4015c04:	010003c4 	movi	r4,15
 4015c08:	21c0182e 	bgeu	r4,r7,4015c6c <memset+0xc8>
 4015c0c:	3b3ffc04 	addi	r12,r7,-16
 4015c10:	6018d13a 	srli	r12,r12,4
 4015c14:	1a000104 	addi	r8,r3,4
 4015c18:	1ac00204 	addi	r11,r3,8
 4015c1c:	6008913a 	slli	r4,r12,4
 4015c20:	1a800304 	addi	r10,r3,12
 4015c24:	1813883a 	mov	r9,r3
 4015c28:	21000504 	addi	r4,r4,20
 4015c2c:	1909883a 	add	r4,r3,r4
 4015c30:	49800015 	stw	r6,0(r9)
 4015c34:	41800015 	stw	r6,0(r8)
 4015c38:	59800015 	stw	r6,0(r11)
 4015c3c:	51800015 	stw	r6,0(r10)
 4015c40:	42000404 	addi	r8,r8,16
 4015c44:	4a400404 	addi	r9,r9,16
 4015c48:	5ac00404 	addi	r11,r11,16
 4015c4c:	52800404 	addi	r10,r10,16
 4015c50:	413ff71e 	bne	r8,r4,4015c30 <__alt_mem_onchip_memory2_0+0xfc010a70>
 4015c54:	63000044 	addi	r12,r12,1
 4015c58:	6018913a 	slli	r12,r12,4
 4015c5c:	39c003cc 	andi	r7,r7,15
 4015c60:	010000c4 	movi	r4,3
 4015c64:	1b07883a 	add	r3,r3,r12
 4015c68:	21c00e2e 	bgeu	r4,r7,4015ca4 <memset+0x100>
 4015c6c:	1813883a 	mov	r9,r3
 4015c70:	3811883a 	mov	r8,r7
 4015c74:	010000c4 	movi	r4,3
 4015c78:	49800015 	stw	r6,0(r9)
 4015c7c:	423fff04 	addi	r8,r8,-4
 4015c80:	4a400104 	addi	r9,r9,4
 4015c84:	223ffc36 	bltu	r4,r8,4015c78 <__alt_mem_onchip_memory2_0+0xfc010ab8>
 4015c88:	393fff04 	addi	r4,r7,-4
 4015c8c:	2008d0ba 	srli	r4,r4,2
 4015c90:	39c000cc 	andi	r7,r7,3
 4015c94:	21000044 	addi	r4,r4,1
 4015c98:	2109883a 	add	r4,r4,r4
 4015c9c:	2109883a 	add	r4,r4,r4
 4015ca0:	1907883a 	add	r3,r3,r4
 4015ca4:	38000526 	beq	r7,zero,4015cbc <memset+0x118>
 4015ca8:	19cf883a 	add	r7,r3,r7
 4015cac:	19400005 	stb	r5,0(r3)
 4015cb0:	18c00044 	addi	r3,r3,1
 4015cb4:	38fffd1e 	bne	r7,r3,4015cac <__alt_mem_onchip_memory2_0+0xfc010aec>
 4015cb8:	f800283a 	ret
 4015cbc:	f800283a 	ret
 4015cc0:	2007883a 	mov	r3,r4
 4015cc4:	300f883a 	mov	r7,r6
 4015cc8:	003fc706 	br	4015be8 <__alt_mem_onchip_memory2_0+0xfc010a28>

04015ccc <_Balloc>:
 4015ccc:	20801317 	ldw	r2,76(r4)
 4015cd0:	defffc04 	addi	sp,sp,-16
 4015cd4:	dc400115 	stw	r17,4(sp)
 4015cd8:	dc000015 	stw	r16,0(sp)
 4015cdc:	dfc00315 	stw	ra,12(sp)
 4015ce0:	dc800215 	stw	r18,8(sp)
 4015ce4:	2023883a 	mov	r17,r4
 4015ce8:	2821883a 	mov	r16,r5
 4015cec:	10000f26 	beq	r2,zero,4015d2c <_Balloc+0x60>
 4015cf0:	8407883a 	add	r3,r16,r16
 4015cf4:	18c7883a 	add	r3,r3,r3
 4015cf8:	10c7883a 	add	r3,r2,r3
 4015cfc:	18800017 	ldw	r2,0(r3)
 4015d00:	10001126 	beq	r2,zero,4015d48 <_Balloc+0x7c>
 4015d04:	11000017 	ldw	r4,0(r2)
 4015d08:	19000015 	stw	r4,0(r3)
 4015d0c:	10000415 	stw	zero,16(r2)
 4015d10:	10000315 	stw	zero,12(r2)
 4015d14:	dfc00317 	ldw	ra,12(sp)
 4015d18:	dc800217 	ldw	r18,8(sp)
 4015d1c:	dc400117 	ldw	r17,4(sp)
 4015d20:	dc000017 	ldw	r16,0(sp)
 4015d24:	dec00404 	addi	sp,sp,16
 4015d28:	f800283a 	ret
 4015d2c:	01800844 	movi	r6,33
 4015d30:	01400104 	movi	r5,4
 4015d34:	4018d740 	call	4018d74 <_calloc_r>
 4015d38:	88801315 	stw	r2,76(r17)
 4015d3c:	103fec1e 	bne	r2,zero,4015cf0 <__alt_mem_onchip_memory2_0+0xfc010b30>
 4015d40:	0005883a 	mov	r2,zero
 4015d44:	003ff306 	br	4015d14 <__alt_mem_onchip_memory2_0+0xfc010b54>
 4015d48:	01400044 	movi	r5,1
 4015d4c:	2c24983a 	sll	r18,r5,r16
 4015d50:	8809883a 	mov	r4,r17
 4015d54:	91800144 	addi	r6,r18,5
 4015d58:	318d883a 	add	r6,r6,r6
 4015d5c:	318d883a 	add	r6,r6,r6
 4015d60:	4018d740 	call	4018d74 <_calloc_r>
 4015d64:	103ff626 	beq	r2,zero,4015d40 <__alt_mem_onchip_memory2_0+0xfc010b80>
 4015d68:	14000115 	stw	r16,4(r2)
 4015d6c:	14800215 	stw	r18,8(r2)
 4015d70:	003fe606 	br	4015d0c <__alt_mem_onchip_memory2_0+0xfc010b4c>

04015d74 <_Bfree>:
 4015d74:	28000826 	beq	r5,zero,4015d98 <_Bfree+0x24>
 4015d78:	28c00117 	ldw	r3,4(r5)
 4015d7c:	20801317 	ldw	r2,76(r4)
 4015d80:	18c7883a 	add	r3,r3,r3
 4015d84:	18c7883a 	add	r3,r3,r3
 4015d88:	10c5883a 	add	r2,r2,r3
 4015d8c:	10c00017 	ldw	r3,0(r2)
 4015d90:	28c00015 	stw	r3,0(r5)
 4015d94:	11400015 	stw	r5,0(r2)
 4015d98:	f800283a 	ret

04015d9c <__multadd>:
 4015d9c:	defff704 	addi	sp,sp,-36
 4015da0:	dc800215 	stw	r18,8(sp)
 4015da4:	2c800417 	ldw	r18,16(r5)
 4015da8:	dd800615 	stw	r22,24(sp)
 4015dac:	dd400515 	stw	r21,20(sp)
 4015db0:	dd000415 	stw	r20,16(sp)
 4015db4:	dcc00315 	stw	r19,12(sp)
 4015db8:	dc400115 	stw	r17,4(sp)
 4015dbc:	dc000015 	stw	r16,0(sp)
 4015dc0:	dfc00815 	stw	ra,32(sp)
 4015dc4:	ddc00715 	stw	r23,28(sp)
 4015dc8:	2827883a 	mov	r19,r5
 4015dcc:	2029883a 	mov	r20,r4
 4015dd0:	3023883a 	mov	r17,r6
 4015dd4:	3821883a 	mov	r16,r7
 4015dd8:	2d400504 	addi	r21,r5,20
 4015ddc:	002d883a 	mov	r22,zero
 4015de0:	adc00017 	ldw	r23,0(r21)
 4015de4:	880b883a 	mov	r5,r17
 4015de8:	ad400104 	addi	r21,r21,4
 4015dec:	b93fffcc 	andi	r4,r23,65535
 4015df0:	400dcd40 	call	400dcd4 <__mulsi3>
 4015df4:	b808d43a 	srli	r4,r23,16
 4015df8:	880b883a 	mov	r5,r17
 4015dfc:	1421883a 	add	r16,r2,r16
 4015e00:	400dcd40 	call	400dcd4 <__mulsi3>
 4015e04:	800ed43a 	srli	r7,r16,16
 4015e08:	80ffffcc 	andi	r3,r16,65535
 4015e0c:	b5800044 	addi	r22,r22,1
 4015e10:	11c5883a 	add	r2,r2,r7
 4015e14:	100e943a 	slli	r7,r2,16
 4015e18:	1020d43a 	srli	r16,r2,16
 4015e1c:	38c7883a 	add	r3,r7,r3
 4015e20:	a8ffff15 	stw	r3,-4(r21)
 4015e24:	b4bfee16 	blt	r22,r18,4015de0 <__alt_mem_onchip_memory2_0+0xfc010c20>
 4015e28:	80000926 	beq	r16,zero,4015e50 <__multadd+0xb4>
 4015e2c:	98800217 	ldw	r2,8(r19)
 4015e30:	9080130e 	bge	r18,r2,4015e80 <__multadd+0xe4>
 4015e34:	90800144 	addi	r2,r18,5
 4015e38:	1085883a 	add	r2,r2,r2
 4015e3c:	1085883a 	add	r2,r2,r2
 4015e40:	9885883a 	add	r2,r19,r2
 4015e44:	14000015 	stw	r16,0(r2)
 4015e48:	94800044 	addi	r18,r18,1
 4015e4c:	9c800415 	stw	r18,16(r19)
 4015e50:	9805883a 	mov	r2,r19
 4015e54:	dfc00817 	ldw	ra,32(sp)
 4015e58:	ddc00717 	ldw	r23,28(sp)
 4015e5c:	dd800617 	ldw	r22,24(sp)
 4015e60:	dd400517 	ldw	r21,20(sp)
 4015e64:	dd000417 	ldw	r20,16(sp)
 4015e68:	dcc00317 	ldw	r19,12(sp)
 4015e6c:	dc800217 	ldw	r18,8(sp)
 4015e70:	dc400117 	ldw	r17,4(sp)
 4015e74:	dc000017 	ldw	r16,0(sp)
 4015e78:	dec00904 	addi	sp,sp,36
 4015e7c:	f800283a 	ret
 4015e80:	99400117 	ldw	r5,4(r19)
 4015e84:	a009883a 	mov	r4,r20
 4015e88:	29400044 	addi	r5,r5,1
 4015e8c:	4015ccc0 	call	4015ccc <_Balloc>
 4015e90:	99800417 	ldw	r6,16(r19)
 4015e94:	99400304 	addi	r5,r19,12
 4015e98:	11000304 	addi	r4,r2,12
 4015e9c:	31800084 	addi	r6,r6,2
 4015ea0:	318d883a 	add	r6,r6,r6
 4015ea4:	318d883a 	add	r6,r6,r6
 4015ea8:	1023883a 	mov	r17,r2
 4015eac:	400fbdc0 	call	400fbdc <memcpy>
 4015eb0:	98000a26 	beq	r19,zero,4015edc <__multadd+0x140>
 4015eb4:	98c00117 	ldw	r3,4(r19)
 4015eb8:	a0801317 	ldw	r2,76(r20)
 4015ebc:	18c7883a 	add	r3,r3,r3
 4015ec0:	18c7883a 	add	r3,r3,r3
 4015ec4:	10c5883a 	add	r2,r2,r3
 4015ec8:	10c00017 	ldw	r3,0(r2)
 4015ecc:	98c00015 	stw	r3,0(r19)
 4015ed0:	14c00015 	stw	r19,0(r2)
 4015ed4:	8827883a 	mov	r19,r17
 4015ed8:	003fd606 	br	4015e34 <__alt_mem_onchip_memory2_0+0xfc010c74>
 4015edc:	8827883a 	mov	r19,r17
 4015ee0:	003fd406 	br	4015e34 <__alt_mem_onchip_memory2_0+0xfc010c74>

04015ee4 <__s2b>:
 4015ee4:	defff904 	addi	sp,sp,-28
 4015ee8:	dc400115 	stw	r17,4(sp)
 4015eec:	dc000015 	stw	r16,0(sp)
 4015ef0:	2023883a 	mov	r17,r4
 4015ef4:	2821883a 	mov	r16,r5
 4015ef8:	39000204 	addi	r4,r7,8
 4015efc:	01400244 	movi	r5,9
 4015f00:	dcc00315 	stw	r19,12(sp)
 4015f04:	dc800215 	stw	r18,8(sp)
 4015f08:	dfc00615 	stw	ra,24(sp)
 4015f0c:	dd400515 	stw	r21,20(sp)
 4015f10:	dd000415 	stw	r20,16(sp)
 4015f14:	3825883a 	mov	r18,r7
 4015f18:	3027883a 	mov	r19,r6
 4015f1c:	400db200 	call	400db20 <__divsi3>
 4015f20:	00c00044 	movi	r3,1
 4015f24:	000b883a 	mov	r5,zero
 4015f28:	1880030e 	bge	r3,r2,4015f38 <__s2b+0x54>
 4015f2c:	18c7883a 	add	r3,r3,r3
 4015f30:	29400044 	addi	r5,r5,1
 4015f34:	18bffd16 	blt	r3,r2,4015f2c <__alt_mem_onchip_memory2_0+0xfc010d6c>
 4015f38:	8809883a 	mov	r4,r17
 4015f3c:	4015ccc0 	call	4015ccc <_Balloc>
 4015f40:	d8c00717 	ldw	r3,28(sp)
 4015f44:	10c00515 	stw	r3,20(r2)
 4015f48:	00c00044 	movi	r3,1
 4015f4c:	10c00415 	stw	r3,16(r2)
 4015f50:	00c00244 	movi	r3,9
 4015f54:	1cc0210e 	bge	r3,r19,4015fdc <__s2b+0xf8>
 4015f58:	80eb883a 	add	r21,r16,r3
 4015f5c:	a829883a 	mov	r20,r21
 4015f60:	84e1883a 	add	r16,r16,r19
 4015f64:	a1c00007 	ldb	r7,0(r20)
 4015f68:	01800284 	movi	r6,10
 4015f6c:	a5000044 	addi	r20,r20,1
 4015f70:	100b883a 	mov	r5,r2
 4015f74:	39fff404 	addi	r7,r7,-48
 4015f78:	8809883a 	mov	r4,r17
 4015f7c:	4015d9c0 	call	4015d9c <__multadd>
 4015f80:	a43ff81e 	bne	r20,r16,4015f64 <__alt_mem_onchip_memory2_0+0xfc010da4>
 4015f84:	ace1883a 	add	r16,r21,r19
 4015f88:	843ffe04 	addi	r16,r16,-8
 4015f8c:	9c800a0e 	bge	r19,r18,4015fb8 <__s2b+0xd4>
 4015f90:	94e5c83a 	sub	r18,r18,r19
 4015f94:	84a5883a 	add	r18,r16,r18
 4015f98:	81c00007 	ldb	r7,0(r16)
 4015f9c:	01800284 	movi	r6,10
 4015fa0:	84000044 	addi	r16,r16,1
 4015fa4:	100b883a 	mov	r5,r2
 4015fa8:	39fff404 	addi	r7,r7,-48
 4015fac:	8809883a 	mov	r4,r17
 4015fb0:	4015d9c0 	call	4015d9c <__multadd>
 4015fb4:	84bff81e 	bne	r16,r18,4015f98 <__alt_mem_onchip_memory2_0+0xfc010dd8>
 4015fb8:	dfc00617 	ldw	ra,24(sp)
 4015fbc:	dd400517 	ldw	r21,20(sp)
 4015fc0:	dd000417 	ldw	r20,16(sp)
 4015fc4:	dcc00317 	ldw	r19,12(sp)
 4015fc8:	dc800217 	ldw	r18,8(sp)
 4015fcc:	dc400117 	ldw	r17,4(sp)
 4015fd0:	dc000017 	ldw	r16,0(sp)
 4015fd4:	dec00704 	addi	sp,sp,28
 4015fd8:	f800283a 	ret
 4015fdc:	84000284 	addi	r16,r16,10
 4015fe0:	1827883a 	mov	r19,r3
 4015fe4:	003fe906 	br	4015f8c <__alt_mem_onchip_memory2_0+0xfc010dcc>

04015fe8 <__hi0bits>:
 4015fe8:	20bfffec 	andhi	r2,r4,65535
 4015fec:	1000141e 	bne	r2,zero,4016040 <__hi0bits+0x58>
 4015ff0:	2008943a 	slli	r4,r4,16
 4015ff4:	00800404 	movi	r2,16
 4015ff8:	20ffc02c 	andhi	r3,r4,65280
 4015ffc:	1800021e 	bne	r3,zero,4016008 <__hi0bits+0x20>
 4016000:	2008923a 	slli	r4,r4,8
 4016004:	10800204 	addi	r2,r2,8
 4016008:	20fc002c 	andhi	r3,r4,61440
 401600c:	1800021e 	bne	r3,zero,4016018 <__hi0bits+0x30>
 4016010:	2008913a 	slli	r4,r4,4
 4016014:	10800104 	addi	r2,r2,4
 4016018:	20f0002c 	andhi	r3,r4,49152
 401601c:	1800031e 	bne	r3,zero,401602c <__hi0bits+0x44>
 4016020:	2109883a 	add	r4,r4,r4
 4016024:	10800084 	addi	r2,r2,2
 4016028:	2109883a 	add	r4,r4,r4
 401602c:	20000316 	blt	r4,zero,401603c <__hi0bits+0x54>
 4016030:	2110002c 	andhi	r4,r4,16384
 4016034:	2000041e 	bne	r4,zero,4016048 <__hi0bits+0x60>
 4016038:	00800804 	movi	r2,32
 401603c:	f800283a 	ret
 4016040:	0005883a 	mov	r2,zero
 4016044:	003fec06 	br	4015ff8 <__alt_mem_onchip_memory2_0+0xfc010e38>
 4016048:	10800044 	addi	r2,r2,1
 401604c:	f800283a 	ret

04016050 <__lo0bits>:
 4016050:	20c00017 	ldw	r3,0(r4)
 4016054:	188001cc 	andi	r2,r3,7
 4016058:	10000826 	beq	r2,zero,401607c <__lo0bits+0x2c>
 401605c:	1880004c 	andi	r2,r3,1
 4016060:	1000211e 	bne	r2,zero,40160e8 <__lo0bits+0x98>
 4016064:	1880008c 	andi	r2,r3,2
 4016068:	1000211e 	bne	r2,zero,40160f0 <__lo0bits+0xa0>
 401606c:	1806d0ba 	srli	r3,r3,2
 4016070:	00800084 	movi	r2,2
 4016074:	20c00015 	stw	r3,0(r4)
 4016078:	f800283a 	ret
 401607c:	18bfffcc 	andi	r2,r3,65535
 4016080:	10001326 	beq	r2,zero,40160d0 <__lo0bits+0x80>
 4016084:	0005883a 	mov	r2,zero
 4016088:	19403fcc 	andi	r5,r3,255
 401608c:	2800021e 	bne	r5,zero,4016098 <__lo0bits+0x48>
 4016090:	1806d23a 	srli	r3,r3,8
 4016094:	10800204 	addi	r2,r2,8
 4016098:	194003cc 	andi	r5,r3,15
 401609c:	2800021e 	bne	r5,zero,40160a8 <__lo0bits+0x58>
 40160a0:	1806d13a 	srli	r3,r3,4
 40160a4:	10800104 	addi	r2,r2,4
 40160a8:	194000cc 	andi	r5,r3,3
 40160ac:	2800021e 	bne	r5,zero,40160b8 <__lo0bits+0x68>
 40160b0:	1806d0ba 	srli	r3,r3,2
 40160b4:	10800084 	addi	r2,r2,2
 40160b8:	1940004c 	andi	r5,r3,1
 40160bc:	2800081e 	bne	r5,zero,40160e0 <__lo0bits+0x90>
 40160c0:	1806d07a 	srli	r3,r3,1
 40160c4:	1800051e 	bne	r3,zero,40160dc <__lo0bits+0x8c>
 40160c8:	00800804 	movi	r2,32
 40160cc:	f800283a 	ret
 40160d0:	1806d43a 	srli	r3,r3,16
 40160d4:	00800404 	movi	r2,16
 40160d8:	003feb06 	br	4016088 <__alt_mem_onchip_memory2_0+0xfc010ec8>
 40160dc:	10800044 	addi	r2,r2,1
 40160e0:	20c00015 	stw	r3,0(r4)
 40160e4:	f800283a 	ret
 40160e8:	0005883a 	mov	r2,zero
 40160ec:	f800283a 	ret
 40160f0:	1806d07a 	srli	r3,r3,1
 40160f4:	00800044 	movi	r2,1
 40160f8:	20c00015 	stw	r3,0(r4)
 40160fc:	f800283a 	ret

04016100 <__i2b>:
 4016100:	defffd04 	addi	sp,sp,-12
 4016104:	dc000015 	stw	r16,0(sp)
 4016108:	04000044 	movi	r16,1
 401610c:	dc400115 	stw	r17,4(sp)
 4016110:	2823883a 	mov	r17,r5
 4016114:	800b883a 	mov	r5,r16
 4016118:	dfc00215 	stw	ra,8(sp)
 401611c:	4015ccc0 	call	4015ccc <_Balloc>
 4016120:	14400515 	stw	r17,20(r2)
 4016124:	14000415 	stw	r16,16(r2)
 4016128:	dfc00217 	ldw	ra,8(sp)
 401612c:	dc400117 	ldw	r17,4(sp)
 4016130:	dc000017 	ldw	r16,0(sp)
 4016134:	dec00304 	addi	sp,sp,12
 4016138:	f800283a 	ret

0401613c <__multiply>:
 401613c:	deffef04 	addi	sp,sp,-68
 4016140:	dc400815 	stw	r17,32(sp)
 4016144:	dc000715 	stw	r16,28(sp)
 4016148:	34400417 	ldw	r17,16(r6)
 401614c:	2c000417 	ldw	r16,16(r5)
 4016150:	dd800d15 	stw	r22,52(sp)
 4016154:	dc800915 	stw	r18,36(sp)
 4016158:	dfc01015 	stw	ra,64(sp)
 401615c:	df000f15 	stw	fp,60(sp)
 4016160:	ddc00e15 	stw	r23,56(sp)
 4016164:	dd400c15 	stw	r21,48(sp)
 4016168:	dd000b15 	stw	r20,44(sp)
 401616c:	dcc00a15 	stw	r19,40(sp)
 4016170:	2825883a 	mov	r18,r5
 4016174:	302d883a 	mov	r22,r6
 4016178:	8440050e 	bge	r16,r17,4016190 <__multiply+0x54>
 401617c:	8007883a 	mov	r3,r16
 4016180:	3025883a 	mov	r18,r6
 4016184:	8821883a 	mov	r16,r17
 4016188:	282d883a 	mov	r22,r5
 401618c:	1823883a 	mov	r17,r3
 4016190:	90800217 	ldw	r2,8(r18)
 4016194:	8447883a 	add	r3,r16,r17
 4016198:	d8c00215 	stw	r3,8(sp)
 401619c:	91400117 	ldw	r5,4(r18)
 40161a0:	10c0010e 	bge	r2,r3,40161a8 <__multiply+0x6c>
 40161a4:	29400044 	addi	r5,r5,1
 40161a8:	4015ccc0 	call	4015ccc <_Balloc>
 40161ac:	d8c00217 	ldw	r3,8(sp)
 40161b0:	d8800615 	stw	r2,24(sp)
 40161b4:	18eb883a 	add	r21,r3,r3
 40161b8:	ad6b883a 	add	r21,r21,r21
 40161bc:	10c00504 	addi	r3,r2,20
 40161c0:	1d6b883a 	add	r21,r3,r21
 40161c4:	d8c00115 	stw	r3,4(sp)
 40161c8:	dd400315 	stw	r21,12(sp)
 40161cc:	1805883a 	mov	r2,r3
 40161d0:	1d40042e 	bgeu	r3,r21,40161e4 <__multiply+0xa8>
 40161d4:	d8c00317 	ldw	r3,12(sp)
 40161d8:	10000015 	stw	zero,0(r2)
 40161dc:	10800104 	addi	r2,r2,4
 40161e0:	10fffc36 	bltu	r2,r3,40161d4 <__alt_mem_onchip_memory2_0+0xfc011014>
 40161e4:	8c63883a 	add	r17,r17,r17
 40161e8:	b5800504 	addi	r22,r22,20
 40161ec:	8c63883a 	add	r17,r17,r17
 40161f0:	94800504 	addi	r18,r18,20
 40161f4:	8421883a 	add	r16,r16,r16
 40161f8:	b463883a 	add	r17,r22,r17
 40161fc:	8421883a 	add	r16,r16,r16
 4016200:	dd800015 	stw	r22,0(sp)
 4016204:	dc800415 	stw	r18,16(sp)
 4016208:	dc400515 	stw	r17,20(sp)
 401620c:	9429883a 	add	r20,r18,r16
 4016210:	b4404f2e 	bgeu	r22,r17,4016350 <__multiply+0x214>
 4016214:	d8c00017 	ldw	r3,0(sp)
 4016218:	1c800017 	ldw	r18,0(r3)
 401621c:	947fffcc 	andi	r17,r18,65535
 4016220:	88001e26 	beq	r17,zero,401629c <__multiply+0x160>
 4016224:	dd800117 	ldw	r22,4(sp)
 4016228:	dd400417 	ldw	r21,16(sp)
 401622c:	0027883a 	mov	r19,zero
 4016230:	ac800017 	ldw	r18,0(r21)
 4016234:	b4000017 	ldw	r16,0(r22)
 4016238:	880b883a 	mov	r5,r17
 401623c:	913fffcc 	andi	r4,r18,65535
 4016240:	400dcd40 	call	400dcd4 <__mulsi3>
 4016244:	9008d43a 	srli	r4,r18,16
 4016248:	84bfffcc 	andi	r18,r16,65535
 401624c:	1485883a 	add	r2,r2,r18
 4016250:	14e5883a 	add	r18,r2,r19
 4016254:	8020d43a 	srli	r16,r16,16
 4016258:	9026d43a 	srli	r19,r18,16
 401625c:	880b883a 	mov	r5,r17
 4016260:	400dcd40 	call	400dcd4 <__mulsi3>
 4016264:	1405883a 	add	r2,r2,r16
 4016268:	14e1883a 	add	r16,r2,r19
 401626c:	90ffffcc 	andi	r3,r18,65535
 4016270:	8024943a 	slli	r18,r16,16
 4016274:	ad400104 	addi	r21,r21,4
 4016278:	b005883a 	mov	r2,r22
 401627c:	90c6b03a 	or	r3,r18,r3
 4016280:	b0c00015 	stw	r3,0(r22)
 4016284:	8026d43a 	srli	r19,r16,16
 4016288:	b5800104 	addi	r22,r22,4
 401628c:	ad3fe836 	bltu	r21,r20,4016230 <__alt_mem_onchip_memory2_0+0xfc011070>
 4016290:	d8c00017 	ldw	r3,0(sp)
 4016294:	14c00115 	stw	r19,4(r2)
 4016298:	1c800017 	ldw	r18,0(r3)
 401629c:	9024d43a 	srli	r18,r18,16
 40162a0:	90002226 	beq	r18,zero,401632c <__multiply+0x1f0>
 40162a4:	d8c00117 	ldw	r3,4(sp)
 40162a8:	dd800417 	ldw	r22,16(sp)
 40162ac:	002f883a 	mov	r23,zero
 40162b0:	1f000017 	ldw	fp,0(r3)
 40162b4:	1823883a 	mov	r17,r3
 40162b8:	182b883a 	mov	r21,r3
 40162bc:	e021883a 	mov	r16,fp
 40162c0:	00000106 	br	40162c8 <__multiply+0x18c>
 40162c4:	982b883a 	mov	r21,r19
 40162c8:	b100000b 	ldhu	r4,0(r22)
 40162cc:	8020d43a 	srli	r16,r16,16
 40162d0:	900b883a 	mov	r5,r18
 40162d4:	400dcd40 	call	400dcd4 <__mulsi3>
 40162d8:	1405883a 	add	r2,r2,r16
 40162dc:	15ef883a 	add	r23,r2,r23
 40162e0:	b804943a 	slli	r2,r23,16
 40162e4:	e0ffffcc 	andi	r3,fp,65535
 40162e8:	8c400104 	addi	r17,r17,4
 40162ec:	10c6b03a 	or	r3,r2,r3
 40162f0:	88ffff15 	stw	r3,-4(r17)
 40162f4:	b5800104 	addi	r22,r22,4
 40162f8:	b13fff17 	ldw	r4,-4(r22)
 40162fc:	acc00104 	addi	r19,r21,4
 4016300:	900b883a 	mov	r5,r18
 4016304:	2008d43a 	srli	r4,r4,16
 4016308:	9c000017 	ldw	r16,0(r19)
 401630c:	400dcd40 	call	400dcd4 <__mulsi3>
 4016310:	b806d43a 	srli	r3,r23,16
 4016314:	813fffcc 	andi	r4,r16,65535
 4016318:	1105883a 	add	r2,r2,r4
 401631c:	10f9883a 	add	fp,r2,r3
 4016320:	e02ed43a 	srli	r23,fp,16
 4016324:	b53fe736 	bltu	r22,r20,40162c4 <__alt_mem_onchip_memory2_0+0xfc011104>
 4016328:	af000115 	stw	fp,4(r21)
 401632c:	d8c00017 	ldw	r3,0(sp)
 4016330:	d9000517 	ldw	r4,20(sp)
 4016334:	18c00104 	addi	r3,r3,4
 4016338:	d8c00015 	stw	r3,0(sp)
 401633c:	d8c00117 	ldw	r3,4(sp)
 4016340:	18c00104 	addi	r3,r3,4
 4016344:	d8c00115 	stw	r3,4(sp)
 4016348:	d8c00017 	ldw	r3,0(sp)
 401634c:	193fb136 	bltu	r3,r4,4016214 <__alt_mem_onchip_memory2_0+0xfc011054>
 4016350:	d8c00217 	ldw	r3,8(sp)
 4016354:	00c00c0e 	bge	zero,r3,4016388 <__multiply+0x24c>
 4016358:	d8c00317 	ldw	r3,12(sp)
 401635c:	18bfff17 	ldw	r2,-4(r3)
 4016360:	1d7fff04 	addi	r21,r3,-4
 4016364:	10000326 	beq	r2,zero,4016374 <__multiply+0x238>
 4016368:	00000706 	br	4016388 <__multiply+0x24c>
 401636c:	a8800017 	ldw	r2,0(r21)
 4016370:	1000051e 	bne	r2,zero,4016388 <__multiply+0x24c>
 4016374:	d8c00217 	ldw	r3,8(sp)
 4016378:	ad7fff04 	addi	r21,r21,-4
 401637c:	18ffffc4 	addi	r3,r3,-1
 4016380:	d8c00215 	stw	r3,8(sp)
 4016384:	183ff91e 	bne	r3,zero,401636c <__alt_mem_onchip_memory2_0+0xfc0111ac>
 4016388:	d8c00617 	ldw	r3,24(sp)
 401638c:	d9000217 	ldw	r4,8(sp)
 4016390:	1805883a 	mov	r2,r3
 4016394:	19000415 	stw	r4,16(r3)
 4016398:	dfc01017 	ldw	ra,64(sp)
 401639c:	df000f17 	ldw	fp,60(sp)
 40163a0:	ddc00e17 	ldw	r23,56(sp)
 40163a4:	dd800d17 	ldw	r22,52(sp)
 40163a8:	dd400c17 	ldw	r21,48(sp)
 40163ac:	dd000b17 	ldw	r20,44(sp)
 40163b0:	dcc00a17 	ldw	r19,40(sp)
 40163b4:	dc800917 	ldw	r18,36(sp)
 40163b8:	dc400817 	ldw	r17,32(sp)
 40163bc:	dc000717 	ldw	r16,28(sp)
 40163c0:	dec01104 	addi	sp,sp,68
 40163c4:	f800283a 	ret

040163c8 <__pow5mult>:
 40163c8:	defffa04 	addi	sp,sp,-24
 40163cc:	dcc00315 	stw	r19,12(sp)
 40163d0:	dc000015 	stw	r16,0(sp)
 40163d4:	dfc00515 	stw	ra,20(sp)
 40163d8:	dd000415 	stw	r20,16(sp)
 40163dc:	dc800215 	stw	r18,8(sp)
 40163e0:	dc400115 	stw	r17,4(sp)
 40163e4:	308000cc 	andi	r2,r6,3
 40163e8:	3021883a 	mov	r16,r6
 40163ec:	2027883a 	mov	r19,r4
 40163f0:	10002f1e 	bne	r2,zero,40164b0 <__pow5mult+0xe8>
 40163f4:	2825883a 	mov	r18,r5
 40163f8:	8021d0ba 	srai	r16,r16,2
 40163fc:	80001a26 	beq	r16,zero,4016468 <__pow5mult+0xa0>
 4016400:	9c401217 	ldw	r17,72(r19)
 4016404:	8800061e 	bne	r17,zero,4016420 <__pow5mult+0x58>
 4016408:	00003406 	br	40164dc <__pow5mult+0x114>
 401640c:	8021d07a 	srai	r16,r16,1
 4016410:	80001526 	beq	r16,zero,4016468 <__pow5mult+0xa0>
 4016414:	88800017 	ldw	r2,0(r17)
 4016418:	10001c26 	beq	r2,zero,401648c <__pow5mult+0xc4>
 401641c:	1023883a 	mov	r17,r2
 4016420:	8080004c 	andi	r2,r16,1
 4016424:	103ff926 	beq	r2,zero,401640c <__alt_mem_onchip_memory2_0+0xfc01124c>
 4016428:	880d883a 	mov	r6,r17
 401642c:	900b883a 	mov	r5,r18
 4016430:	9809883a 	mov	r4,r19
 4016434:	401613c0 	call	401613c <__multiply>
 4016438:	90001b26 	beq	r18,zero,40164a8 <__pow5mult+0xe0>
 401643c:	91000117 	ldw	r4,4(r18)
 4016440:	98c01317 	ldw	r3,76(r19)
 4016444:	8021d07a 	srai	r16,r16,1
 4016448:	2109883a 	add	r4,r4,r4
 401644c:	2109883a 	add	r4,r4,r4
 4016450:	1907883a 	add	r3,r3,r4
 4016454:	19000017 	ldw	r4,0(r3)
 4016458:	91000015 	stw	r4,0(r18)
 401645c:	1c800015 	stw	r18,0(r3)
 4016460:	1025883a 	mov	r18,r2
 4016464:	803feb1e 	bne	r16,zero,4016414 <__alt_mem_onchip_memory2_0+0xfc011254>
 4016468:	9005883a 	mov	r2,r18
 401646c:	dfc00517 	ldw	ra,20(sp)
 4016470:	dd000417 	ldw	r20,16(sp)
 4016474:	dcc00317 	ldw	r19,12(sp)
 4016478:	dc800217 	ldw	r18,8(sp)
 401647c:	dc400117 	ldw	r17,4(sp)
 4016480:	dc000017 	ldw	r16,0(sp)
 4016484:	dec00604 	addi	sp,sp,24
 4016488:	f800283a 	ret
 401648c:	880d883a 	mov	r6,r17
 4016490:	880b883a 	mov	r5,r17
 4016494:	9809883a 	mov	r4,r19
 4016498:	401613c0 	call	401613c <__multiply>
 401649c:	88800015 	stw	r2,0(r17)
 40164a0:	10000015 	stw	zero,0(r2)
 40164a4:	003fdd06 	br	401641c <__alt_mem_onchip_memory2_0+0xfc01125c>
 40164a8:	1025883a 	mov	r18,r2
 40164ac:	003fd706 	br	401640c <__alt_mem_onchip_memory2_0+0xfc01124c>
 40164b0:	10bfffc4 	addi	r2,r2,-1
 40164b4:	1085883a 	add	r2,r2,r2
 40164b8:	00c100b4 	movhi	r3,1026
 40164bc:	18f7b104 	addi	r3,r3,-8508
 40164c0:	1085883a 	add	r2,r2,r2
 40164c4:	1885883a 	add	r2,r3,r2
 40164c8:	11800017 	ldw	r6,0(r2)
 40164cc:	000f883a 	mov	r7,zero
 40164d0:	4015d9c0 	call	4015d9c <__multadd>
 40164d4:	1025883a 	mov	r18,r2
 40164d8:	003fc706 	br	40163f8 <__alt_mem_onchip_memory2_0+0xfc011238>
 40164dc:	05000044 	movi	r20,1
 40164e0:	a00b883a 	mov	r5,r20
 40164e4:	9809883a 	mov	r4,r19
 40164e8:	4015ccc0 	call	4015ccc <_Balloc>
 40164ec:	1023883a 	mov	r17,r2
 40164f0:	00809c44 	movi	r2,625
 40164f4:	88800515 	stw	r2,20(r17)
 40164f8:	8d000415 	stw	r20,16(r17)
 40164fc:	9c401215 	stw	r17,72(r19)
 4016500:	88000015 	stw	zero,0(r17)
 4016504:	003fc606 	br	4016420 <__alt_mem_onchip_memory2_0+0xfc011260>

04016508 <__lshift>:
 4016508:	defff904 	addi	sp,sp,-28
 401650c:	dd400515 	stw	r21,20(sp)
 4016510:	dcc00315 	stw	r19,12(sp)
 4016514:	302bd17a 	srai	r21,r6,5
 4016518:	2cc00417 	ldw	r19,16(r5)
 401651c:	28800217 	ldw	r2,8(r5)
 4016520:	dd000415 	stw	r20,16(sp)
 4016524:	ace7883a 	add	r19,r21,r19
 4016528:	dc800215 	stw	r18,8(sp)
 401652c:	dc400115 	stw	r17,4(sp)
 4016530:	dc000015 	stw	r16,0(sp)
 4016534:	dfc00615 	stw	ra,24(sp)
 4016538:	9c000044 	addi	r16,r19,1
 401653c:	2823883a 	mov	r17,r5
 4016540:	3029883a 	mov	r20,r6
 4016544:	2025883a 	mov	r18,r4
 4016548:	29400117 	ldw	r5,4(r5)
 401654c:	1400030e 	bge	r2,r16,401655c <__lshift+0x54>
 4016550:	1085883a 	add	r2,r2,r2
 4016554:	29400044 	addi	r5,r5,1
 4016558:	143ffd16 	blt	r2,r16,4016550 <__alt_mem_onchip_memory2_0+0xfc011390>
 401655c:	9009883a 	mov	r4,r18
 4016560:	4015ccc0 	call	4015ccc <_Balloc>
 4016564:	10c00504 	addi	r3,r2,20
 4016568:	0540070e 	bge	zero,r21,4016588 <__lshift+0x80>
 401656c:	ad6b883a 	add	r21,r21,r21
 4016570:	ad6b883a 	add	r21,r21,r21
 4016574:	1809883a 	mov	r4,r3
 4016578:	1d47883a 	add	r3,r3,r21
 401657c:	20000015 	stw	zero,0(r4)
 4016580:	21000104 	addi	r4,r4,4
 4016584:	193ffd1e 	bne	r3,r4,401657c <__alt_mem_onchip_memory2_0+0xfc0113bc>
 4016588:	8a000417 	ldw	r8,16(r17)
 401658c:	89000504 	addi	r4,r17,20
 4016590:	a18007cc 	andi	r6,r20,31
 4016594:	4211883a 	add	r8,r8,r8
 4016598:	4211883a 	add	r8,r8,r8
 401659c:	2211883a 	add	r8,r4,r8
 40165a0:	30002326 	beq	r6,zero,4016630 <__lshift+0x128>
 40165a4:	02400804 	movi	r9,32
 40165a8:	4993c83a 	sub	r9,r9,r6
 40165ac:	000b883a 	mov	r5,zero
 40165b0:	21c00017 	ldw	r7,0(r4)
 40165b4:	1815883a 	mov	r10,r3
 40165b8:	18c00104 	addi	r3,r3,4
 40165bc:	398e983a 	sll	r7,r7,r6
 40165c0:	21000104 	addi	r4,r4,4
 40165c4:	394ab03a 	or	r5,r7,r5
 40165c8:	197fff15 	stw	r5,-4(r3)
 40165cc:	217fff17 	ldw	r5,-4(r4)
 40165d0:	2a4ad83a 	srl	r5,r5,r9
 40165d4:	223ff636 	bltu	r4,r8,40165b0 <__alt_mem_onchip_memory2_0+0xfc0113f0>
 40165d8:	51400115 	stw	r5,4(r10)
 40165dc:	28001a1e 	bne	r5,zero,4016648 <__lshift+0x140>
 40165e0:	843fffc4 	addi	r16,r16,-1
 40165e4:	14000415 	stw	r16,16(r2)
 40165e8:	88000826 	beq	r17,zero,401660c <__lshift+0x104>
 40165ec:	89000117 	ldw	r4,4(r17)
 40165f0:	90c01317 	ldw	r3,76(r18)
 40165f4:	2109883a 	add	r4,r4,r4
 40165f8:	2109883a 	add	r4,r4,r4
 40165fc:	1907883a 	add	r3,r3,r4
 4016600:	19000017 	ldw	r4,0(r3)
 4016604:	89000015 	stw	r4,0(r17)
 4016608:	1c400015 	stw	r17,0(r3)
 401660c:	dfc00617 	ldw	ra,24(sp)
 4016610:	dd400517 	ldw	r21,20(sp)
 4016614:	dd000417 	ldw	r20,16(sp)
 4016618:	dcc00317 	ldw	r19,12(sp)
 401661c:	dc800217 	ldw	r18,8(sp)
 4016620:	dc400117 	ldw	r17,4(sp)
 4016624:	dc000017 	ldw	r16,0(sp)
 4016628:	dec00704 	addi	sp,sp,28
 401662c:	f800283a 	ret
 4016630:	21400017 	ldw	r5,0(r4)
 4016634:	18c00104 	addi	r3,r3,4
 4016638:	21000104 	addi	r4,r4,4
 401663c:	197fff15 	stw	r5,-4(r3)
 4016640:	223ffb36 	bltu	r4,r8,4016630 <__alt_mem_onchip_memory2_0+0xfc011470>
 4016644:	003fe606 	br	40165e0 <__alt_mem_onchip_memory2_0+0xfc011420>
 4016648:	9c000084 	addi	r16,r19,2
 401664c:	003fe406 	br	40165e0 <__alt_mem_onchip_memory2_0+0xfc011420>

04016650 <__mcmp>:
 4016650:	20800417 	ldw	r2,16(r4)
 4016654:	28c00417 	ldw	r3,16(r5)
 4016658:	10c5c83a 	sub	r2,r2,r3
 401665c:	1000111e 	bne	r2,zero,40166a4 <__mcmp+0x54>
 4016660:	18c7883a 	add	r3,r3,r3
 4016664:	18c7883a 	add	r3,r3,r3
 4016668:	21000504 	addi	r4,r4,20
 401666c:	29400504 	addi	r5,r5,20
 4016670:	20c5883a 	add	r2,r4,r3
 4016674:	28cb883a 	add	r5,r5,r3
 4016678:	00000106 	br	4016680 <__mcmp+0x30>
 401667c:	20800a2e 	bgeu	r4,r2,40166a8 <__mcmp+0x58>
 4016680:	10bfff04 	addi	r2,r2,-4
 4016684:	297fff04 	addi	r5,r5,-4
 4016688:	11800017 	ldw	r6,0(r2)
 401668c:	28c00017 	ldw	r3,0(r5)
 4016690:	30fffa26 	beq	r6,r3,401667c <__alt_mem_onchip_memory2_0+0xfc0114bc>
 4016694:	30c00236 	bltu	r6,r3,40166a0 <__mcmp+0x50>
 4016698:	00800044 	movi	r2,1
 401669c:	f800283a 	ret
 40166a0:	00bfffc4 	movi	r2,-1
 40166a4:	f800283a 	ret
 40166a8:	0005883a 	mov	r2,zero
 40166ac:	f800283a 	ret

040166b0 <__mdiff>:
 40166b0:	28c00417 	ldw	r3,16(r5)
 40166b4:	30800417 	ldw	r2,16(r6)
 40166b8:	defffa04 	addi	sp,sp,-24
 40166bc:	dcc00315 	stw	r19,12(sp)
 40166c0:	dc800215 	stw	r18,8(sp)
 40166c4:	dfc00515 	stw	ra,20(sp)
 40166c8:	dd000415 	stw	r20,16(sp)
 40166cc:	dc400115 	stw	r17,4(sp)
 40166d0:	dc000015 	stw	r16,0(sp)
 40166d4:	1887c83a 	sub	r3,r3,r2
 40166d8:	2825883a 	mov	r18,r5
 40166dc:	3027883a 	mov	r19,r6
 40166e0:	1800141e 	bne	r3,zero,4016734 <__mdiff+0x84>
 40166e4:	1085883a 	add	r2,r2,r2
 40166e8:	1085883a 	add	r2,r2,r2
 40166ec:	2a000504 	addi	r8,r5,20
 40166f0:	34000504 	addi	r16,r6,20
 40166f4:	4087883a 	add	r3,r8,r2
 40166f8:	8085883a 	add	r2,r16,r2
 40166fc:	00000106 	br	4016704 <__mdiff+0x54>
 4016700:	40c0592e 	bgeu	r8,r3,4016868 <__mdiff+0x1b8>
 4016704:	18ffff04 	addi	r3,r3,-4
 4016708:	10bfff04 	addi	r2,r2,-4
 401670c:	19c00017 	ldw	r7,0(r3)
 4016710:	11400017 	ldw	r5,0(r2)
 4016714:	397ffa26 	beq	r7,r5,4016700 <__alt_mem_onchip_memory2_0+0xfc011540>
 4016718:	3940592e 	bgeu	r7,r5,4016880 <__mdiff+0x1d0>
 401671c:	9005883a 	mov	r2,r18
 4016720:	4023883a 	mov	r17,r8
 4016724:	9825883a 	mov	r18,r19
 4016728:	05000044 	movi	r20,1
 401672c:	1027883a 	mov	r19,r2
 4016730:	00000406 	br	4016744 <__mdiff+0x94>
 4016734:	18005616 	blt	r3,zero,4016890 <__mdiff+0x1e0>
 4016738:	34400504 	addi	r17,r6,20
 401673c:	2c000504 	addi	r16,r5,20
 4016740:	0029883a 	mov	r20,zero
 4016744:	91400117 	ldw	r5,4(r18)
 4016748:	4015ccc0 	call	4015ccc <_Balloc>
 401674c:	92400417 	ldw	r9,16(r18)
 4016750:	9b000417 	ldw	r12,16(r19)
 4016754:	12c00504 	addi	r11,r2,20
 4016758:	4a51883a 	add	r8,r9,r9
 401675c:	6319883a 	add	r12,r12,r12
 4016760:	4211883a 	add	r8,r8,r8
 4016764:	6319883a 	add	r12,r12,r12
 4016768:	15000315 	stw	r20,12(r2)
 401676c:	8211883a 	add	r8,r16,r8
 4016770:	8b19883a 	add	r12,r17,r12
 4016774:	0007883a 	mov	r3,zero
 4016778:	81400017 	ldw	r5,0(r16)
 401677c:	89c00017 	ldw	r7,0(r17)
 4016780:	59800104 	addi	r6,r11,4
 4016784:	293fffcc 	andi	r4,r5,65535
 4016788:	20c7883a 	add	r3,r4,r3
 401678c:	393fffcc 	andi	r4,r7,65535
 4016790:	1909c83a 	sub	r4,r3,r4
 4016794:	280ad43a 	srli	r5,r5,16
 4016798:	380ed43a 	srli	r7,r7,16
 401679c:	2007d43a 	srai	r3,r4,16
 40167a0:	213fffcc 	andi	r4,r4,65535
 40167a4:	29cbc83a 	sub	r5,r5,r7
 40167a8:	28c7883a 	add	r3,r5,r3
 40167ac:	180a943a 	slli	r5,r3,16
 40167b0:	8c400104 	addi	r17,r17,4
 40167b4:	84000104 	addi	r16,r16,4
 40167b8:	2908b03a 	or	r4,r5,r4
 40167bc:	59000015 	stw	r4,0(r11)
 40167c0:	1807d43a 	srai	r3,r3,16
 40167c4:	3015883a 	mov	r10,r6
 40167c8:	3017883a 	mov	r11,r6
 40167cc:	8b3fea36 	bltu	r17,r12,4016778 <__alt_mem_onchip_memory2_0+0xfc0115b8>
 40167d0:	8200162e 	bgeu	r16,r8,401682c <__mdiff+0x17c>
 40167d4:	8017883a 	mov	r11,r16
 40167d8:	59400017 	ldw	r5,0(r11)
 40167dc:	31800104 	addi	r6,r6,4
 40167e0:	5ac00104 	addi	r11,r11,4
 40167e4:	293fffcc 	andi	r4,r5,65535
 40167e8:	20c7883a 	add	r3,r4,r3
 40167ec:	280ed43a 	srli	r7,r5,16
 40167f0:	180bd43a 	srai	r5,r3,16
 40167f4:	193fffcc 	andi	r4,r3,65535
 40167f8:	3947883a 	add	r3,r7,r5
 40167fc:	180a943a 	slli	r5,r3,16
 4016800:	1807d43a 	srai	r3,r3,16
 4016804:	2908b03a 	or	r4,r5,r4
 4016808:	313fff15 	stw	r4,-4(r6)
 401680c:	5a3ff236 	bltu	r11,r8,40167d8 <__alt_mem_onchip_memory2_0+0xfc011618>
 4016810:	0406303a 	nor	r3,zero,r16
 4016814:	1a07883a 	add	r3,r3,r8
 4016818:	1806d0ba 	srli	r3,r3,2
 401681c:	18c00044 	addi	r3,r3,1
 4016820:	18c7883a 	add	r3,r3,r3
 4016824:	18c7883a 	add	r3,r3,r3
 4016828:	50d5883a 	add	r10,r10,r3
 401682c:	50ffff04 	addi	r3,r10,-4
 4016830:	2000041e 	bne	r4,zero,4016844 <__mdiff+0x194>
 4016834:	18ffff04 	addi	r3,r3,-4
 4016838:	19000017 	ldw	r4,0(r3)
 401683c:	4a7fffc4 	addi	r9,r9,-1
 4016840:	203ffc26 	beq	r4,zero,4016834 <__alt_mem_onchip_memory2_0+0xfc011674>
 4016844:	12400415 	stw	r9,16(r2)
 4016848:	dfc00517 	ldw	ra,20(sp)
 401684c:	dd000417 	ldw	r20,16(sp)
 4016850:	dcc00317 	ldw	r19,12(sp)
 4016854:	dc800217 	ldw	r18,8(sp)
 4016858:	dc400117 	ldw	r17,4(sp)
 401685c:	dc000017 	ldw	r16,0(sp)
 4016860:	dec00604 	addi	sp,sp,24
 4016864:	f800283a 	ret
 4016868:	000b883a 	mov	r5,zero
 401686c:	4015ccc0 	call	4015ccc <_Balloc>
 4016870:	00c00044 	movi	r3,1
 4016874:	10c00415 	stw	r3,16(r2)
 4016878:	10000515 	stw	zero,20(r2)
 401687c:	003ff206 	br	4016848 <__alt_mem_onchip_memory2_0+0xfc011688>
 4016880:	8023883a 	mov	r17,r16
 4016884:	0029883a 	mov	r20,zero
 4016888:	4021883a 	mov	r16,r8
 401688c:	003fad06 	br	4016744 <__alt_mem_onchip_memory2_0+0xfc011584>
 4016890:	9005883a 	mov	r2,r18
 4016894:	94400504 	addi	r17,r18,20
 4016898:	9c000504 	addi	r16,r19,20
 401689c:	9825883a 	mov	r18,r19
 40168a0:	05000044 	movi	r20,1
 40168a4:	1027883a 	mov	r19,r2
 40168a8:	003fa606 	br	4016744 <__alt_mem_onchip_memory2_0+0xfc011584>

040168ac <__ulp>:
 40168ac:	295ffc2c 	andhi	r5,r5,32752
 40168b0:	00bf3034 	movhi	r2,64704
 40168b4:	2887883a 	add	r3,r5,r2
 40168b8:	00c0020e 	bge	zero,r3,40168c4 <__ulp+0x18>
 40168bc:	0005883a 	mov	r2,zero
 40168c0:	f800283a 	ret
 40168c4:	00c7c83a 	sub	r3,zero,r3
 40168c8:	1807d53a 	srai	r3,r3,20
 40168cc:	008004c4 	movi	r2,19
 40168d0:	10c00b0e 	bge	r2,r3,4016900 <__ulp+0x54>
 40168d4:	18bffb04 	addi	r2,r3,-20
 40168d8:	01000784 	movi	r4,30
 40168dc:	0007883a 	mov	r3,zero
 40168e0:	20800516 	blt	r4,r2,40168f8 <__ulp+0x4c>
 40168e4:	010007c4 	movi	r4,31
 40168e8:	2089c83a 	sub	r4,r4,r2
 40168ec:	00800044 	movi	r2,1
 40168f0:	1104983a 	sll	r2,r2,r4
 40168f4:	f800283a 	ret
 40168f8:	00800044 	movi	r2,1
 40168fc:	f800283a 	ret
 4016900:	01400234 	movhi	r5,8
 4016904:	28c7d83a 	sra	r3,r5,r3
 4016908:	0005883a 	mov	r2,zero
 401690c:	f800283a 	ret

04016910 <__b2d>:
 4016910:	defffa04 	addi	sp,sp,-24
 4016914:	dc000015 	stw	r16,0(sp)
 4016918:	24000417 	ldw	r16,16(r4)
 401691c:	dc400115 	stw	r17,4(sp)
 4016920:	24400504 	addi	r17,r4,20
 4016924:	8421883a 	add	r16,r16,r16
 4016928:	8421883a 	add	r16,r16,r16
 401692c:	8c21883a 	add	r16,r17,r16
 4016930:	dc800215 	stw	r18,8(sp)
 4016934:	84bfff17 	ldw	r18,-4(r16)
 4016938:	dd000415 	stw	r20,16(sp)
 401693c:	dcc00315 	stw	r19,12(sp)
 4016940:	9009883a 	mov	r4,r18
 4016944:	2829883a 	mov	r20,r5
 4016948:	dfc00515 	stw	ra,20(sp)
 401694c:	4015fe80 	call	4015fe8 <__hi0bits>
 4016950:	00c00804 	movi	r3,32
 4016954:	1889c83a 	sub	r4,r3,r2
 4016958:	a1000015 	stw	r4,0(r20)
 401695c:	01000284 	movi	r4,10
 4016960:	84ffff04 	addi	r19,r16,-4
 4016964:	20801216 	blt	r4,r2,40169b0 <__b2d+0xa0>
 4016968:	018002c4 	movi	r6,11
 401696c:	308dc83a 	sub	r6,r6,r2
 4016970:	9186d83a 	srl	r3,r18,r6
 4016974:	18cffc34 	orhi	r3,r3,16368
 4016978:	8cc0212e 	bgeu	r17,r19,4016a00 <__b2d+0xf0>
 401697c:	813ffe17 	ldw	r4,-8(r16)
 4016980:	218cd83a 	srl	r6,r4,r6
 4016984:	10800544 	addi	r2,r2,21
 4016988:	9084983a 	sll	r2,r18,r2
 401698c:	1184b03a 	or	r2,r2,r6
 4016990:	dfc00517 	ldw	ra,20(sp)
 4016994:	dd000417 	ldw	r20,16(sp)
 4016998:	dcc00317 	ldw	r19,12(sp)
 401699c:	dc800217 	ldw	r18,8(sp)
 40169a0:	dc400117 	ldw	r17,4(sp)
 40169a4:	dc000017 	ldw	r16,0(sp)
 40169a8:	dec00604 	addi	sp,sp,24
 40169ac:	f800283a 	ret
 40169b0:	8cc00f2e 	bgeu	r17,r19,40169f0 <__b2d+0xe0>
 40169b4:	117ffd44 	addi	r5,r2,-11
 40169b8:	80bffe17 	ldw	r2,-8(r16)
 40169bc:	28000e26 	beq	r5,zero,40169f8 <__b2d+0xe8>
 40169c0:	1949c83a 	sub	r4,r3,r5
 40169c4:	9164983a 	sll	r18,r18,r5
 40169c8:	1106d83a 	srl	r3,r2,r4
 40169cc:	81bffe04 	addi	r6,r16,-8
 40169d0:	948ffc34 	orhi	r18,r18,16368
 40169d4:	90c6b03a 	or	r3,r18,r3
 40169d8:	89800e2e 	bgeu	r17,r6,4016a14 <__b2d+0x104>
 40169dc:	81bffd17 	ldw	r6,-12(r16)
 40169e0:	1144983a 	sll	r2,r2,r5
 40169e4:	310ad83a 	srl	r5,r6,r4
 40169e8:	2884b03a 	or	r2,r5,r2
 40169ec:	003fe806 	br	4016990 <__alt_mem_onchip_memory2_0+0xfc0117d0>
 40169f0:	10bffd44 	addi	r2,r2,-11
 40169f4:	1000041e 	bne	r2,zero,4016a08 <__b2d+0xf8>
 40169f8:	90cffc34 	orhi	r3,r18,16368
 40169fc:	003fe406 	br	4016990 <__alt_mem_onchip_memory2_0+0xfc0117d0>
 4016a00:	000d883a 	mov	r6,zero
 4016a04:	003fdf06 	br	4016984 <__alt_mem_onchip_memory2_0+0xfc0117c4>
 4016a08:	90a4983a 	sll	r18,r18,r2
 4016a0c:	0005883a 	mov	r2,zero
 4016a10:	003ff906 	br	40169f8 <__alt_mem_onchip_memory2_0+0xfc011838>
 4016a14:	1144983a 	sll	r2,r2,r5
 4016a18:	003fdd06 	br	4016990 <__alt_mem_onchip_memory2_0+0xfc0117d0>

04016a1c <__d2b>:
 4016a1c:	defff804 	addi	sp,sp,-32
 4016a20:	dc000215 	stw	r16,8(sp)
 4016a24:	3021883a 	mov	r16,r6
 4016a28:	dc400315 	stw	r17,12(sp)
 4016a2c:	8022907a 	slli	r17,r16,1
 4016a30:	dd000615 	stw	r20,24(sp)
 4016a34:	2829883a 	mov	r20,r5
 4016a38:	01400044 	movi	r5,1
 4016a3c:	dcc00515 	stw	r19,20(sp)
 4016a40:	dc800415 	stw	r18,16(sp)
 4016a44:	dfc00715 	stw	ra,28(sp)
 4016a48:	3825883a 	mov	r18,r7
 4016a4c:	8822d57a 	srli	r17,r17,21
 4016a50:	4015ccc0 	call	4015ccc <_Balloc>
 4016a54:	1027883a 	mov	r19,r2
 4016a58:	00800434 	movhi	r2,16
 4016a5c:	10bfffc4 	addi	r2,r2,-1
 4016a60:	808c703a 	and	r6,r16,r2
 4016a64:	88000126 	beq	r17,zero,4016a6c <__d2b+0x50>
 4016a68:	31800434 	orhi	r6,r6,16
 4016a6c:	d9800015 	stw	r6,0(sp)
 4016a70:	a0002426 	beq	r20,zero,4016b04 <__d2b+0xe8>
 4016a74:	d9000104 	addi	r4,sp,4
 4016a78:	dd000115 	stw	r20,4(sp)
 4016a7c:	40160500 	call	4016050 <__lo0bits>
 4016a80:	d8c00017 	ldw	r3,0(sp)
 4016a84:	10002f1e 	bne	r2,zero,4016b44 <__d2b+0x128>
 4016a88:	d9000117 	ldw	r4,4(sp)
 4016a8c:	99000515 	stw	r4,20(r19)
 4016a90:	1821003a 	cmpeq	r16,r3,zero
 4016a94:	01000084 	movi	r4,2
 4016a98:	2421c83a 	sub	r16,r4,r16
 4016a9c:	98c00615 	stw	r3,24(r19)
 4016aa0:	9c000415 	stw	r16,16(r19)
 4016aa4:	88001f1e 	bne	r17,zero,4016b24 <__d2b+0x108>
 4016aa8:	10bef384 	addi	r2,r2,-1074
 4016aac:	90800015 	stw	r2,0(r18)
 4016ab0:	00900034 	movhi	r2,16384
 4016ab4:	10bfffc4 	addi	r2,r2,-1
 4016ab8:	8085883a 	add	r2,r16,r2
 4016abc:	1085883a 	add	r2,r2,r2
 4016ac0:	1085883a 	add	r2,r2,r2
 4016ac4:	9885883a 	add	r2,r19,r2
 4016ac8:	11000517 	ldw	r4,20(r2)
 4016acc:	8020917a 	slli	r16,r16,5
 4016ad0:	4015fe80 	call	4015fe8 <__hi0bits>
 4016ad4:	d8c00817 	ldw	r3,32(sp)
 4016ad8:	8085c83a 	sub	r2,r16,r2
 4016adc:	18800015 	stw	r2,0(r3)
 4016ae0:	9805883a 	mov	r2,r19
 4016ae4:	dfc00717 	ldw	ra,28(sp)
 4016ae8:	dd000617 	ldw	r20,24(sp)
 4016aec:	dcc00517 	ldw	r19,20(sp)
 4016af0:	dc800417 	ldw	r18,16(sp)
 4016af4:	dc400317 	ldw	r17,12(sp)
 4016af8:	dc000217 	ldw	r16,8(sp)
 4016afc:	dec00804 	addi	sp,sp,32
 4016b00:	f800283a 	ret
 4016b04:	d809883a 	mov	r4,sp
 4016b08:	40160500 	call	4016050 <__lo0bits>
 4016b0c:	d8c00017 	ldw	r3,0(sp)
 4016b10:	04000044 	movi	r16,1
 4016b14:	9c000415 	stw	r16,16(r19)
 4016b18:	98c00515 	stw	r3,20(r19)
 4016b1c:	10800804 	addi	r2,r2,32
 4016b20:	883fe126 	beq	r17,zero,4016aa8 <__alt_mem_onchip_memory2_0+0xfc0118e8>
 4016b24:	00c00d44 	movi	r3,53
 4016b28:	8c7ef344 	addi	r17,r17,-1075
 4016b2c:	88a3883a 	add	r17,r17,r2
 4016b30:	1885c83a 	sub	r2,r3,r2
 4016b34:	d8c00817 	ldw	r3,32(sp)
 4016b38:	94400015 	stw	r17,0(r18)
 4016b3c:	18800015 	stw	r2,0(r3)
 4016b40:	003fe706 	br	4016ae0 <__alt_mem_onchip_memory2_0+0xfc011920>
 4016b44:	01000804 	movi	r4,32
 4016b48:	2089c83a 	sub	r4,r4,r2
 4016b4c:	1908983a 	sll	r4,r3,r4
 4016b50:	d9400117 	ldw	r5,4(sp)
 4016b54:	1886d83a 	srl	r3,r3,r2
 4016b58:	2148b03a 	or	r4,r4,r5
 4016b5c:	99000515 	stw	r4,20(r19)
 4016b60:	d8c00015 	stw	r3,0(sp)
 4016b64:	003fca06 	br	4016a90 <__alt_mem_onchip_memory2_0+0xfc0118d0>

04016b68 <__ratio>:
 4016b68:	defff904 	addi	sp,sp,-28
 4016b6c:	dc400315 	stw	r17,12(sp)
 4016b70:	2823883a 	mov	r17,r5
 4016b74:	d9400104 	addi	r5,sp,4
 4016b78:	dfc00615 	stw	ra,24(sp)
 4016b7c:	dcc00515 	stw	r19,20(sp)
 4016b80:	dc800415 	stw	r18,16(sp)
 4016b84:	2027883a 	mov	r19,r4
 4016b88:	dc000215 	stw	r16,8(sp)
 4016b8c:	40169100 	call	4016910 <__b2d>
 4016b90:	d80b883a 	mov	r5,sp
 4016b94:	8809883a 	mov	r4,r17
 4016b98:	1025883a 	mov	r18,r2
 4016b9c:	1821883a 	mov	r16,r3
 4016ba0:	40169100 	call	4016910 <__b2d>
 4016ba4:	8a000417 	ldw	r8,16(r17)
 4016ba8:	99000417 	ldw	r4,16(r19)
 4016bac:	d9400117 	ldw	r5,4(sp)
 4016bb0:	2209c83a 	sub	r4,r4,r8
 4016bb4:	2010917a 	slli	r8,r4,5
 4016bb8:	d9000017 	ldw	r4,0(sp)
 4016bbc:	2909c83a 	sub	r4,r5,r4
 4016bc0:	4109883a 	add	r4,r8,r4
 4016bc4:	01000e0e 	bge	zero,r4,4016c00 <__ratio+0x98>
 4016bc8:	2008953a 	slli	r4,r4,20
 4016bcc:	2421883a 	add	r16,r4,r16
 4016bd0:	100d883a 	mov	r6,r2
 4016bd4:	180f883a 	mov	r7,r3
 4016bd8:	9009883a 	mov	r4,r18
 4016bdc:	800b883a 	mov	r5,r16
 4016be0:	400dcfc0 	call	400dcfc <__divdf3>
 4016be4:	dfc00617 	ldw	ra,24(sp)
 4016be8:	dcc00517 	ldw	r19,20(sp)
 4016bec:	dc800417 	ldw	r18,16(sp)
 4016bf0:	dc400317 	ldw	r17,12(sp)
 4016bf4:	dc000217 	ldw	r16,8(sp)
 4016bf8:	dec00704 	addi	sp,sp,28
 4016bfc:	f800283a 	ret
 4016c00:	2008953a 	slli	r4,r4,20
 4016c04:	1907c83a 	sub	r3,r3,r4
 4016c08:	003ff106 	br	4016bd0 <__alt_mem_onchip_memory2_0+0xfc011a10>

04016c0c <_mprec_log10>:
 4016c0c:	defffe04 	addi	sp,sp,-8
 4016c10:	dc000015 	stw	r16,0(sp)
 4016c14:	dfc00115 	stw	ra,4(sp)
 4016c18:	008005c4 	movi	r2,23
 4016c1c:	2021883a 	mov	r16,r4
 4016c20:	11000d0e 	bge	r2,r4,4016c58 <_mprec_log10+0x4c>
 4016c24:	0005883a 	mov	r2,zero
 4016c28:	00cffc34 	movhi	r3,16368
 4016c2c:	843fffc4 	addi	r16,r16,-1
 4016c30:	000d883a 	mov	r6,zero
 4016c34:	01d00934 	movhi	r7,16420
 4016c38:	1009883a 	mov	r4,r2
 4016c3c:	180b883a 	mov	r5,r3
 4016c40:	400e89c0 	call	400e89c <__muldf3>
 4016c44:	803ff91e 	bne	r16,zero,4016c2c <__alt_mem_onchip_memory2_0+0xfc011a6c>
 4016c48:	dfc00117 	ldw	ra,4(sp)
 4016c4c:	dc000017 	ldw	r16,0(sp)
 4016c50:	dec00204 	addi	sp,sp,8
 4016c54:	f800283a 	ret
 4016c58:	202090fa 	slli	r16,r4,3
 4016c5c:	008100b4 	movhi	r2,1026
 4016c60:	10b7c804 	addi	r2,r2,-8416
 4016c64:	1421883a 	add	r16,r2,r16
 4016c68:	80800017 	ldw	r2,0(r16)
 4016c6c:	80c00117 	ldw	r3,4(r16)
 4016c70:	dfc00117 	ldw	ra,4(sp)
 4016c74:	dc000017 	ldw	r16,0(sp)
 4016c78:	dec00204 	addi	sp,sp,8
 4016c7c:	f800283a 	ret

04016c80 <__copybits>:
 4016c80:	297fffc4 	addi	r5,r5,-1
 4016c84:	280fd17a 	srai	r7,r5,5
 4016c88:	30c00417 	ldw	r3,16(r6)
 4016c8c:	30800504 	addi	r2,r6,20
 4016c90:	39c00044 	addi	r7,r7,1
 4016c94:	18c7883a 	add	r3,r3,r3
 4016c98:	39cf883a 	add	r7,r7,r7
 4016c9c:	18c7883a 	add	r3,r3,r3
 4016ca0:	39cf883a 	add	r7,r7,r7
 4016ca4:	10c7883a 	add	r3,r2,r3
 4016ca8:	21cf883a 	add	r7,r4,r7
 4016cac:	10c00d2e 	bgeu	r2,r3,4016ce4 <__copybits+0x64>
 4016cb0:	200b883a 	mov	r5,r4
 4016cb4:	12000017 	ldw	r8,0(r2)
 4016cb8:	29400104 	addi	r5,r5,4
 4016cbc:	10800104 	addi	r2,r2,4
 4016cc0:	2a3fff15 	stw	r8,-4(r5)
 4016cc4:	10fffb36 	bltu	r2,r3,4016cb4 <__alt_mem_onchip_memory2_0+0xfc011af4>
 4016cc8:	1985c83a 	sub	r2,r3,r6
 4016ccc:	10bffac4 	addi	r2,r2,-21
 4016cd0:	1004d0ba 	srli	r2,r2,2
 4016cd4:	10800044 	addi	r2,r2,1
 4016cd8:	1085883a 	add	r2,r2,r2
 4016cdc:	1085883a 	add	r2,r2,r2
 4016ce0:	2089883a 	add	r4,r4,r2
 4016ce4:	21c0032e 	bgeu	r4,r7,4016cf4 <__copybits+0x74>
 4016ce8:	20000015 	stw	zero,0(r4)
 4016cec:	21000104 	addi	r4,r4,4
 4016cf0:	21fffd36 	bltu	r4,r7,4016ce8 <__alt_mem_onchip_memory2_0+0xfc011b28>
 4016cf4:	f800283a 	ret

04016cf8 <__any_on>:
 4016cf8:	20c00417 	ldw	r3,16(r4)
 4016cfc:	2805d17a 	srai	r2,r5,5
 4016d00:	21000504 	addi	r4,r4,20
 4016d04:	18800d0e 	bge	r3,r2,4016d3c <__any_on+0x44>
 4016d08:	18c7883a 	add	r3,r3,r3
 4016d0c:	18c7883a 	add	r3,r3,r3
 4016d10:	20c7883a 	add	r3,r4,r3
 4016d14:	20c0192e 	bgeu	r4,r3,4016d7c <__any_on+0x84>
 4016d18:	18bfff17 	ldw	r2,-4(r3)
 4016d1c:	18ffff04 	addi	r3,r3,-4
 4016d20:	1000041e 	bne	r2,zero,4016d34 <__any_on+0x3c>
 4016d24:	20c0142e 	bgeu	r4,r3,4016d78 <__any_on+0x80>
 4016d28:	18ffff04 	addi	r3,r3,-4
 4016d2c:	19400017 	ldw	r5,0(r3)
 4016d30:	283ffc26 	beq	r5,zero,4016d24 <__alt_mem_onchip_memory2_0+0xfc011b64>
 4016d34:	00800044 	movi	r2,1
 4016d38:	f800283a 	ret
 4016d3c:	10c00a0e 	bge	r2,r3,4016d68 <__any_on+0x70>
 4016d40:	1085883a 	add	r2,r2,r2
 4016d44:	1085883a 	add	r2,r2,r2
 4016d48:	294007cc 	andi	r5,r5,31
 4016d4c:	2087883a 	add	r3,r4,r2
 4016d50:	283ff026 	beq	r5,zero,4016d14 <__alt_mem_onchip_memory2_0+0xfc011b54>
 4016d54:	19800017 	ldw	r6,0(r3)
 4016d58:	3144d83a 	srl	r2,r6,r5
 4016d5c:	114a983a 	sll	r5,r2,r5
 4016d60:	317ff41e 	bne	r6,r5,4016d34 <__alt_mem_onchip_memory2_0+0xfc011b74>
 4016d64:	003feb06 	br	4016d14 <__alt_mem_onchip_memory2_0+0xfc011b54>
 4016d68:	1085883a 	add	r2,r2,r2
 4016d6c:	1085883a 	add	r2,r2,r2
 4016d70:	2087883a 	add	r3,r4,r2
 4016d74:	003fe706 	br	4016d14 <__alt_mem_onchip_memory2_0+0xfc011b54>
 4016d78:	f800283a 	ret
 4016d7c:	0005883a 	mov	r2,zero
 4016d80:	f800283a 	ret

04016d84 <_realloc_r>:
 4016d84:	defff604 	addi	sp,sp,-40
 4016d88:	dc800215 	stw	r18,8(sp)
 4016d8c:	dfc00915 	stw	ra,36(sp)
 4016d90:	df000815 	stw	fp,32(sp)
 4016d94:	ddc00715 	stw	r23,28(sp)
 4016d98:	dd800615 	stw	r22,24(sp)
 4016d9c:	dd400515 	stw	r21,20(sp)
 4016da0:	dd000415 	stw	r20,16(sp)
 4016da4:	dcc00315 	stw	r19,12(sp)
 4016da8:	dc400115 	stw	r17,4(sp)
 4016dac:	dc000015 	stw	r16,0(sp)
 4016db0:	3025883a 	mov	r18,r6
 4016db4:	2800b726 	beq	r5,zero,4017094 <_realloc_r+0x310>
 4016db8:	282b883a 	mov	r21,r5
 4016dbc:	2029883a 	mov	r20,r4
 4016dc0:	401b4780 	call	401b478 <__malloc_lock>
 4016dc4:	a8bfff17 	ldw	r2,-4(r21)
 4016dc8:	043fff04 	movi	r16,-4
 4016dcc:	90c002c4 	addi	r3,r18,11
 4016dd0:	01000584 	movi	r4,22
 4016dd4:	acfffe04 	addi	r19,r21,-8
 4016dd8:	1420703a 	and	r16,r2,r16
 4016ddc:	20c0332e 	bgeu	r4,r3,4016eac <_realloc_r+0x128>
 4016de0:	047ffe04 	movi	r17,-8
 4016de4:	1c62703a 	and	r17,r3,r17
 4016de8:	8807883a 	mov	r3,r17
 4016dec:	88005816 	blt	r17,zero,4016f50 <_realloc_r+0x1cc>
 4016df0:	8c805736 	bltu	r17,r18,4016f50 <_realloc_r+0x1cc>
 4016df4:	80c0300e 	bge	r16,r3,4016eb8 <_realloc_r+0x134>
 4016df8:	070100b4 	movhi	fp,1026
 4016dfc:	e73a5404 	addi	fp,fp,-5808
 4016e00:	e1c00217 	ldw	r7,8(fp)
 4016e04:	9c09883a 	add	r4,r19,r16
 4016e08:	22000117 	ldw	r8,4(r4)
 4016e0c:	21c06326 	beq	r4,r7,4016f9c <_realloc_r+0x218>
 4016e10:	017fff84 	movi	r5,-2
 4016e14:	414a703a 	and	r5,r8,r5
 4016e18:	214b883a 	add	r5,r4,r5
 4016e1c:	29800117 	ldw	r6,4(r5)
 4016e20:	3180004c 	andi	r6,r6,1
 4016e24:	30003f26 	beq	r6,zero,4016f24 <_realloc_r+0x1a0>
 4016e28:	1080004c 	andi	r2,r2,1
 4016e2c:	10008326 	beq	r2,zero,401703c <_realloc_r+0x2b8>
 4016e30:	900b883a 	mov	r5,r18
 4016e34:	a009883a 	mov	r4,r20
 4016e38:	40151580 	call	4015158 <_malloc_r>
 4016e3c:	1025883a 	mov	r18,r2
 4016e40:	10011e26 	beq	r2,zero,40172bc <_realloc_r+0x538>
 4016e44:	a93fff17 	ldw	r4,-4(r21)
 4016e48:	10fffe04 	addi	r3,r2,-8
 4016e4c:	00bfff84 	movi	r2,-2
 4016e50:	2084703a 	and	r2,r4,r2
 4016e54:	9885883a 	add	r2,r19,r2
 4016e58:	1880ee26 	beq	r3,r2,4017214 <_realloc_r+0x490>
 4016e5c:	81bfff04 	addi	r6,r16,-4
 4016e60:	00800904 	movi	r2,36
 4016e64:	1180b836 	bltu	r2,r6,4017148 <_realloc_r+0x3c4>
 4016e68:	00c004c4 	movi	r3,19
 4016e6c:	19809636 	bltu	r3,r6,40170c8 <_realloc_r+0x344>
 4016e70:	9005883a 	mov	r2,r18
 4016e74:	a807883a 	mov	r3,r21
 4016e78:	19000017 	ldw	r4,0(r3)
 4016e7c:	11000015 	stw	r4,0(r2)
 4016e80:	19000117 	ldw	r4,4(r3)
 4016e84:	11000115 	stw	r4,4(r2)
 4016e88:	18c00217 	ldw	r3,8(r3)
 4016e8c:	10c00215 	stw	r3,8(r2)
 4016e90:	a80b883a 	mov	r5,r21
 4016e94:	a009883a 	mov	r4,r20
 4016e98:	40145040 	call	4014504 <_free_r>
 4016e9c:	a009883a 	mov	r4,r20
 4016ea0:	401b49c0 	call	401b49c <__malloc_unlock>
 4016ea4:	9005883a 	mov	r2,r18
 4016ea8:	00001206 	br	4016ef4 <_realloc_r+0x170>
 4016eac:	00c00404 	movi	r3,16
 4016eb0:	1823883a 	mov	r17,r3
 4016eb4:	003fce06 	br	4016df0 <__alt_mem_onchip_memory2_0+0xfc011c30>
 4016eb8:	a825883a 	mov	r18,r21
 4016ebc:	8445c83a 	sub	r2,r16,r17
 4016ec0:	00c003c4 	movi	r3,15
 4016ec4:	18802636 	bltu	r3,r2,4016f60 <_realloc_r+0x1dc>
 4016ec8:	99800117 	ldw	r6,4(r19)
 4016ecc:	9c07883a 	add	r3,r19,r16
 4016ed0:	3180004c 	andi	r6,r6,1
 4016ed4:	3420b03a 	or	r16,r6,r16
 4016ed8:	9c000115 	stw	r16,4(r19)
 4016edc:	18800117 	ldw	r2,4(r3)
 4016ee0:	10800054 	ori	r2,r2,1
 4016ee4:	18800115 	stw	r2,4(r3)
 4016ee8:	a009883a 	mov	r4,r20
 4016eec:	401b49c0 	call	401b49c <__malloc_unlock>
 4016ef0:	9005883a 	mov	r2,r18
 4016ef4:	dfc00917 	ldw	ra,36(sp)
 4016ef8:	df000817 	ldw	fp,32(sp)
 4016efc:	ddc00717 	ldw	r23,28(sp)
 4016f00:	dd800617 	ldw	r22,24(sp)
 4016f04:	dd400517 	ldw	r21,20(sp)
 4016f08:	dd000417 	ldw	r20,16(sp)
 4016f0c:	dcc00317 	ldw	r19,12(sp)
 4016f10:	dc800217 	ldw	r18,8(sp)
 4016f14:	dc400117 	ldw	r17,4(sp)
 4016f18:	dc000017 	ldw	r16,0(sp)
 4016f1c:	dec00a04 	addi	sp,sp,40
 4016f20:	f800283a 	ret
 4016f24:	017fff04 	movi	r5,-4
 4016f28:	414a703a 	and	r5,r8,r5
 4016f2c:	814d883a 	add	r6,r16,r5
 4016f30:	30c01f16 	blt	r6,r3,4016fb0 <_realloc_r+0x22c>
 4016f34:	20800317 	ldw	r2,12(r4)
 4016f38:	20c00217 	ldw	r3,8(r4)
 4016f3c:	a825883a 	mov	r18,r21
 4016f40:	3021883a 	mov	r16,r6
 4016f44:	18800315 	stw	r2,12(r3)
 4016f48:	10c00215 	stw	r3,8(r2)
 4016f4c:	003fdb06 	br	4016ebc <__alt_mem_onchip_memory2_0+0xfc011cfc>
 4016f50:	00800304 	movi	r2,12
 4016f54:	a0800015 	stw	r2,0(r20)
 4016f58:	0005883a 	mov	r2,zero
 4016f5c:	003fe506 	br	4016ef4 <__alt_mem_onchip_memory2_0+0xfc011d34>
 4016f60:	98c00117 	ldw	r3,4(r19)
 4016f64:	9c4b883a 	add	r5,r19,r17
 4016f68:	11000054 	ori	r4,r2,1
 4016f6c:	18c0004c 	andi	r3,r3,1
 4016f70:	1c62b03a 	or	r17,r3,r17
 4016f74:	9c400115 	stw	r17,4(r19)
 4016f78:	29000115 	stw	r4,4(r5)
 4016f7c:	2885883a 	add	r2,r5,r2
 4016f80:	10c00117 	ldw	r3,4(r2)
 4016f84:	29400204 	addi	r5,r5,8
 4016f88:	a009883a 	mov	r4,r20
 4016f8c:	18c00054 	ori	r3,r3,1
 4016f90:	10c00115 	stw	r3,4(r2)
 4016f94:	40145040 	call	4014504 <_free_r>
 4016f98:	003fd306 	br	4016ee8 <__alt_mem_onchip_memory2_0+0xfc011d28>
 4016f9c:	017fff04 	movi	r5,-4
 4016fa0:	414a703a 	and	r5,r8,r5
 4016fa4:	89800404 	addi	r6,r17,16
 4016fa8:	8151883a 	add	r8,r16,r5
 4016fac:	4180590e 	bge	r8,r6,4017114 <_realloc_r+0x390>
 4016fb0:	1080004c 	andi	r2,r2,1
 4016fb4:	103f9e1e 	bne	r2,zero,4016e30 <__alt_mem_onchip_memory2_0+0xfc011c70>
 4016fb8:	adbffe17 	ldw	r22,-8(r21)
 4016fbc:	00bfff04 	movi	r2,-4
 4016fc0:	9dadc83a 	sub	r22,r19,r22
 4016fc4:	b1800117 	ldw	r6,4(r22)
 4016fc8:	3084703a 	and	r2,r6,r2
 4016fcc:	20002026 	beq	r4,zero,4017050 <_realloc_r+0x2cc>
 4016fd0:	80af883a 	add	r23,r16,r2
 4016fd4:	b96f883a 	add	r23,r23,r5
 4016fd8:	21c05f26 	beq	r4,r7,4017158 <_realloc_r+0x3d4>
 4016fdc:	b8c01c16 	blt	r23,r3,4017050 <_realloc_r+0x2cc>
 4016fe0:	20800317 	ldw	r2,12(r4)
 4016fe4:	20c00217 	ldw	r3,8(r4)
 4016fe8:	81bfff04 	addi	r6,r16,-4
 4016fec:	01000904 	movi	r4,36
 4016ff0:	18800315 	stw	r2,12(r3)
 4016ff4:	10c00215 	stw	r3,8(r2)
 4016ff8:	b0c00217 	ldw	r3,8(r22)
 4016ffc:	b0800317 	ldw	r2,12(r22)
 4017000:	b4800204 	addi	r18,r22,8
 4017004:	18800315 	stw	r2,12(r3)
 4017008:	10c00215 	stw	r3,8(r2)
 401700c:	21801b36 	bltu	r4,r6,401707c <_realloc_r+0x2f8>
 4017010:	008004c4 	movi	r2,19
 4017014:	1180352e 	bgeu	r2,r6,40170ec <_realloc_r+0x368>
 4017018:	a8800017 	ldw	r2,0(r21)
 401701c:	b0800215 	stw	r2,8(r22)
 4017020:	a8800117 	ldw	r2,4(r21)
 4017024:	b0800315 	stw	r2,12(r22)
 4017028:	008006c4 	movi	r2,27
 401702c:	11807f36 	bltu	r2,r6,401722c <_realloc_r+0x4a8>
 4017030:	b0800404 	addi	r2,r22,16
 4017034:	ad400204 	addi	r21,r21,8
 4017038:	00002d06 	br	40170f0 <_realloc_r+0x36c>
 401703c:	adbffe17 	ldw	r22,-8(r21)
 4017040:	00bfff04 	movi	r2,-4
 4017044:	9dadc83a 	sub	r22,r19,r22
 4017048:	b1000117 	ldw	r4,4(r22)
 401704c:	2084703a 	and	r2,r4,r2
 4017050:	b03f7726 	beq	r22,zero,4016e30 <__alt_mem_onchip_memory2_0+0xfc011c70>
 4017054:	80af883a 	add	r23,r16,r2
 4017058:	b8ff7516 	blt	r23,r3,4016e30 <__alt_mem_onchip_memory2_0+0xfc011c70>
 401705c:	b0800317 	ldw	r2,12(r22)
 4017060:	b0c00217 	ldw	r3,8(r22)
 4017064:	81bfff04 	addi	r6,r16,-4
 4017068:	01000904 	movi	r4,36
 401706c:	18800315 	stw	r2,12(r3)
 4017070:	10c00215 	stw	r3,8(r2)
 4017074:	b4800204 	addi	r18,r22,8
 4017078:	21bfe52e 	bgeu	r4,r6,4017010 <__alt_mem_onchip_memory2_0+0xfc011e50>
 401707c:	a80b883a 	mov	r5,r21
 4017080:	9009883a 	mov	r4,r18
 4017084:	4015a480 	call	4015a48 <memmove>
 4017088:	b821883a 	mov	r16,r23
 401708c:	b027883a 	mov	r19,r22
 4017090:	003f8a06 	br	4016ebc <__alt_mem_onchip_memory2_0+0xfc011cfc>
 4017094:	300b883a 	mov	r5,r6
 4017098:	dfc00917 	ldw	ra,36(sp)
 401709c:	df000817 	ldw	fp,32(sp)
 40170a0:	ddc00717 	ldw	r23,28(sp)
 40170a4:	dd800617 	ldw	r22,24(sp)
 40170a8:	dd400517 	ldw	r21,20(sp)
 40170ac:	dd000417 	ldw	r20,16(sp)
 40170b0:	dcc00317 	ldw	r19,12(sp)
 40170b4:	dc800217 	ldw	r18,8(sp)
 40170b8:	dc400117 	ldw	r17,4(sp)
 40170bc:	dc000017 	ldw	r16,0(sp)
 40170c0:	dec00a04 	addi	sp,sp,40
 40170c4:	40151581 	jmpi	4015158 <_malloc_r>
 40170c8:	a8c00017 	ldw	r3,0(r21)
 40170cc:	90c00015 	stw	r3,0(r18)
 40170d0:	a8c00117 	ldw	r3,4(r21)
 40170d4:	90c00115 	stw	r3,4(r18)
 40170d8:	00c006c4 	movi	r3,27
 40170dc:	19804536 	bltu	r3,r6,40171f4 <_realloc_r+0x470>
 40170e0:	90800204 	addi	r2,r18,8
 40170e4:	a8c00204 	addi	r3,r21,8
 40170e8:	003f6306 	br	4016e78 <__alt_mem_onchip_memory2_0+0xfc011cb8>
 40170ec:	9005883a 	mov	r2,r18
 40170f0:	a8c00017 	ldw	r3,0(r21)
 40170f4:	b821883a 	mov	r16,r23
 40170f8:	b027883a 	mov	r19,r22
 40170fc:	10c00015 	stw	r3,0(r2)
 4017100:	a8c00117 	ldw	r3,4(r21)
 4017104:	10c00115 	stw	r3,4(r2)
 4017108:	a8c00217 	ldw	r3,8(r21)
 401710c:	10c00215 	stw	r3,8(r2)
 4017110:	003f6a06 	br	4016ebc <__alt_mem_onchip_memory2_0+0xfc011cfc>
 4017114:	9c67883a 	add	r19,r19,r17
 4017118:	4445c83a 	sub	r2,r8,r17
 401711c:	e4c00215 	stw	r19,8(fp)
 4017120:	10800054 	ori	r2,r2,1
 4017124:	98800115 	stw	r2,4(r19)
 4017128:	a8bfff17 	ldw	r2,-4(r21)
 401712c:	a009883a 	mov	r4,r20
 4017130:	1080004c 	andi	r2,r2,1
 4017134:	1462b03a 	or	r17,r2,r17
 4017138:	ac7fff15 	stw	r17,-4(r21)
 401713c:	401b49c0 	call	401b49c <__malloc_unlock>
 4017140:	a805883a 	mov	r2,r21
 4017144:	003f6b06 	br	4016ef4 <__alt_mem_onchip_memory2_0+0xfc011d34>
 4017148:	a80b883a 	mov	r5,r21
 401714c:	9009883a 	mov	r4,r18
 4017150:	4015a480 	call	4015a48 <memmove>
 4017154:	003f4e06 	br	4016e90 <__alt_mem_onchip_memory2_0+0xfc011cd0>
 4017158:	89000404 	addi	r4,r17,16
 401715c:	b93fbc16 	blt	r23,r4,4017050 <__alt_mem_onchip_memory2_0+0xfc011e90>
 4017160:	b0800317 	ldw	r2,12(r22)
 4017164:	b0c00217 	ldw	r3,8(r22)
 4017168:	81bfff04 	addi	r6,r16,-4
 401716c:	01000904 	movi	r4,36
 4017170:	18800315 	stw	r2,12(r3)
 4017174:	10c00215 	stw	r3,8(r2)
 4017178:	b4800204 	addi	r18,r22,8
 401717c:	21804336 	bltu	r4,r6,401728c <_realloc_r+0x508>
 4017180:	008004c4 	movi	r2,19
 4017184:	11803f2e 	bgeu	r2,r6,4017284 <_realloc_r+0x500>
 4017188:	a8800017 	ldw	r2,0(r21)
 401718c:	b0800215 	stw	r2,8(r22)
 4017190:	a8800117 	ldw	r2,4(r21)
 4017194:	b0800315 	stw	r2,12(r22)
 4017198:	008006c4 	movi	r2,27
 401719c:	11803f36 	bltu	r2,r6,401729c <_realloc_r+0x518>
 40171a0:	b0800404 	addi	r2,r22,16
 40171a4:	ad400204 	addi	r21,r21,8
 40171a8:	a8c00017 	ldw	r3,0(r21)
 40171ac:	10c00015 	stw	r3,0(r2)
 40171b0:	a8c00117 	ldw	r3,4(r21)
 40171b4:	10c00115 	stw	r3,4(r2)
 40171b8:	a8c00217 	ldw	r3,8(r21)
 40171bc:	10c00215 	stw	r3,8(r2)
 40171c0:	b447883a 	add	r3,r22,r17
 40171c4:	bc45c83a 	sub	r2,r23,r17
 40171c8:	e0c00215 	stw	r3,8(fp)
 40171cc:	10800054 	ori	r2,r2,1
 40171d0:	18800115 	stw	r2,4(r3)
 40171d4:	b0800117 	ldw	r2,4(r22)
 40171d8:	a009883a 	mov	r4,r20
 40171dc:	1080004c 	andi	r2,r2,1
 40171e0:	1462b03a 	or	r17,r2,r17
 40171e4:	b4400115 	stw	r17,4(r22)
 40171e8:	401b49c0 	call	401b49c <__malloc_unlock>
 40171ec:	9005883a 	mov	r2,r18
 40171f0:	003f4006 	br	4016ef4 <__alt_mem_onchip_memory2_0+0xfc011d34>
 40171f4:	a8c00217 	ldw	r3,8(r21)
 40171f8:	90c00215 	stw	r3,8(r18)
 40171fc:	a8c00317 	ldw	r3,12(r21)
 4017200:	90c00315 	stw	r3,12(r18)
 4017204:	30801126 	beq	r6,r2,401724c <_realloc_r+0x4c8>
 4017208:	90800404 	addi	r2,r18,16
 401720c:	a8c00404 	addi	r3,r21,16
 4017210:	003f1906 	br	4016e78 <__alt_mem_onchip_memory2_0+0xfc011cb8>
 4017214:	90ffff17 	ldw	r3,-4(r18)
 4017218:	00bfff04 	movi	r2,-4
 401721c:	a825883a 	mov	r18,r21
 4017220:	1884703a 	and	r2,r3,r2
 4017224:	80a1883a 	add	r16,r16,r2
 4017228:	003f2406 	br	4016ebc <__alt_mem_onchip_memory2_0+0xfc011cfc>
 401722c:	a8800217 	ldw	r2,8(r21)
 4017230:	b0800415 	stw	r2,16(r22)
 4017234:	a8800317 	ldw	r2,12(r21)
 4017238:	b0800515 	stw	r2,20(r22)
 401723c:	31000a26 	beq	r6,r4,4017268 <_realloc_r+0x4e4>
 4017240:	b0800604 	addi	r2,r22,24
 4017244:	ad400404 	addi	r21,r21,16
 4017248:	003fa906 	br	40170f0 <__alt_mem_onchip_memory2_0+0xfc011f30>
 401724c:	a9000417 	ldw	r4,16(r21)
 4017250:	90800604 	addi	r2,r18,24
 4017254:	a8c00604 	addi	r3,r21,24
 4017258:	91000415 	stw	r4,16(r18)
 401725c:	a9000517 	ldw	r4,20(r21)
 4017260:	91000515 	stw	r4,20(r18)
 4017264:	003f0406 	br	4016e78 <__alt_mem_onchip_memory2_0+0xfc011cb8>
 4017268:	a8c00417 	ldw	r3,16(r21)
 401726c:	ad400604 	addi	r21,r21,24
 4017270:	b0800804 	addi	r2,r22,32
 4017274:	b0c00615 	stw	r3,24(r22)
 4017278:	a8ffff17 	ldw	r3,-4(r21)
 401727c:	b0c00715 	stw	r3,28(r22)
 4017280:	003f9b06 	br	40170f0 <__alt_mem_onchip_memory2_0+0xfc011f30>
 4017284:	9005883a 	mov	r2,r18
 4017288:	003fc706 	br	40171a8 <__alt_mem_onchip_memory2_0+0xfc011fe8>
 401728c:	a80b883a 	mov	r5,r21
 4017290:	9009883a 	mov	r4,r18
 4017294:	4015a480 	call	4015a48 <memmove>
 4017298:	003fc906 	br	40171c0 <__alt_mem_onchip_memory2_0+0xfc012000>
 401729c:	a8800217 	ldw	r2,8(r21)
 40172a0:	b0800415 	stw	r2,16(r22)
 40172a4:	a8800317 	ldw	r2,12(r21)
 40172a8:	b0800515 	stw	r2,20(r22)
 40172ac:	31000726 	beq	r6,r4,40172cc <_realloc_r+0x548>
 40172b0:	b0800604 	addi	r2,r22,24
 40172b4:	ad400404 	addi	r21,r21,16
 40172b8:	003fbb06 	br	40171a8 <__alt_mem_onchip_memory2_0+0xfc011fe8>
 40172bc:	a009883a 	mov	r4,r20
 40172c0:	401b49c0 	call	401b49c <__malloc_unlock>
 40172c4:	0005883a 	mov	r2,zero
 40172c8:	003f0a06 	br	4016ef4 <__alt_mem_onchip_memory2_0+0xfc011d34>
 40172cc:	a8c00417 	ldw	r3,16(r21)
 40172d0:	ad400604 	addi	r21,r21,24
 40172d4:	b0800804 	addi	r2,r22,32
 40172d8:	b0c00615 	stw	r3,24(r22)
 40172dc:	a8ffff17 	ldw	r3,-4(r21)
 40172e0:	b0c00715 	stw	r3,28(r22)
 40172e4:	003fb006 	br	40171a8 <__alt_mem_onchip_memory2_0+0xfc011fe8>

040172e8 <__fpclassifyd>:
 40172e8:	00a00034 	movhi	r2,32768
 40172ec:	10bfffc4 	addi	r2,r2,-1
 40172f0:	2884703a 	and	r2,r5,r2
 40172f4:	10000726 	beq	r2,zero,4017314 <__fpclassifyd+0x2c>
 40172f8:	00fffc34 	movhi	r3,65520
 40172fc:	019ff834 	movhi	r6,32736
 4017300:	28c7883a 	add	r3,r5,r3
 4017304:	31bfffc4 	addi	r6,r6,-1
 4017308:	30c00536 	bltu	r6,r3,4017320 <__fpclassifyd+0x38>
 401730c:	00800104 	movi	r2,4
 4017310:	f800283a 	ret
 4017314:	2000021e 	bne	r4,zero,4017320 <__fpclassifyd+0x38>
 4017318:	00800084 	movi	r2,2
 401731c:	f800283a 	ret
 4017320:	00dffc34 	movhi	r3,32752
 4017324:	019ff834 	movhi	r6,32736
 4017328:	28cb883a 	add	r5,r5,r3
 401732c:	31bfffc4 	addi	r6,r6,-1
 4017330:	317ff62e 	bgeu	r6,r5,401730c <__alt_mem_onchip_memory2_0+0xfc01214c>
 4017334:	01400434 	movhi	r5,16
 4017338:	297fffc4 	addi	r5,r5,-1
 401733c:	28800236 	bltu	r5,r2,4017348 <__fpclassifyd+0x60>
 4017340:	008000c4 	movi	r2,3
 4017344:	f800283a 	ret
 4017348:	10c00226 	beq	r2,r3,4017354 <__fpclassifyd+0x6c>
 401734c:	0005883a 	mov	r2,zero
 4017350:	f800283a 	ret
 4017354:	2005003a 	cmpeq	r2,r4,zero
 4017358:	f800283a 	ret

0401735c <_sbrk_r>:
 401735c:	defffd04 	addi	sp,sp,-12
 4017360:	dc000015 	stw	r16,0(sp)
 4017364:	040100b4 	movhi	r16,1026
 4017368:	dc400115 	stw	r17,4(sp)
 401736c:	8407da04 	addi	r16,r16,8040
 4017370:	2023883a 	mov	r17,r4
 4017374:	2809883a 	mov	r4,r5
 4017378:	dfc00215 	stw	ra,8(sp)
 401737c:	80000015 	stw	zero,0(r16)
 4017380:	401b6840 	call	401b684 <sbrk>
 4017384:	00ffffc4 	movi	r3,-1
 4017388:	10c00526 	beq	r2,r3,40173a0 <_sbrk_r+0x44>
 401738c:	dfc00217 	ldw	ra,8(sp)
 4017390:	dc400117 	ldw	r17,4(sp)
 4017394:	dc000017 	ldw	r16,0(sp)
 4017398:	dec00304 	addi	sp,sp,12
 401739c:	f800283a 	ret
 40173a0:	80c00017 	ldw	r3,0(r16)
 40173a4:	183ff926 	beq	r3,zero,401738c <__alt_mem_onchip_memory2_0+0xfc0121cc>
 40173a8:	88c00015 	stw	r3,0(r17)
 40173ac:	003ff706 	br	401738c <__alt_mem_onchip_memory2_0+0xfc0121cc>

040173b0 <__sread>:
 40173b0:	defffe04 	addi	sp,sp,-8
 40173b4:	dc000015 	stw	r16,0(sp)
 40173b8:	2821883a 	mov	r16,r5
 40173bc:	2940038f 	ldh	r5,14(r5)
 40173c0:	dfc00115 	stw	ra,4(sp)
 40173c4:	401926c0 	call	401926c <_read_r>
 40173c8:	10000716 	blt	r2,zero,40173e8 <__sread+0x38>
 40173cc:	80c01417 	ldw	r3,80(r16)
 40173d0:	1887883a 	add	r3,r3,r2
 40173d4:	80c01415 	stw	r3,80(r16)
 40173d8:	dfc00117 	ldw	ra,4(sp)
 40173dc:	dc000017 	ldw	r16,0(sp)
 40173e0:	dec00204 	addi	sp,sp,8
 40173e4:	f800283a 	ret
 40173e8:	80c0030b 	ldhu	r3,12(r16)
 40173ec:	18fbffcc 	andi	r3,r3,61439
 40173f0:	80c0030d 	sth	r3,12(r16)
 40173f4:	dfc00117 	ldw	ra,4(sp)
 40173f8:	dc000017 	ldw	r16,0(sp)
 40173fc:	dec00204 	addi	sp,sp,8
 4017400:	f800283a 	ret

04017404 <__seofread>:
 4017404:	0005883a 	mov	r2,zero
 4017408:	f800283a 	ret

0401740c <__swrite>:
 401740c:	2880030b 	ldhu	r2,12(r5)
 4017410:	defffb04 	addi	sp,sp,-20
 4017414:	dcc00315 	stw	r19,12(sp)
 4017418:	dc800215 	stw	r18,8(sp)
 401741c:	dc400115 	stw	r17,4(sp)
 4017420:	dc000015 	stw	r16,0(sp)
 4017424:	dfc00415 	stw	ra,16(sp)
 4017428:	10c0400c 	andi	r3,r2,256
 401742c:	2821883a 	mov	r16,r5
 4017430:	2023883a 	mov	r17,r4
 4017434:	3025883a 	mov	r18,r6
 4017438:	3827883a 	mov	r19,r7
 401743c:	18000526 	beq	r3,zero,4017454 <__swrite+0x48>
 4017440:	2940038f 	ldh	r5,14(r5)
 4017444:	01c00084 	movi	r7,2
 4017448:	000d883a 	mov	r6,zero
 401744c:	401920c0 	call	401920c <_lseek_r>
 4017450:	8080030b 	ldhu	r2,12(r16)
 4017454:	8140038f 	ldh	r5,14(r16)
 4017458:	10bbffcc 	andi	r2,r2,61439
 401745c:	980f883a 	mov	r7,r19
 4017460:	900d883a 	mov	r6,r18
 4017464:	8809883a 	mov	r4,r17
 4017468:	8080030d 	sth	r2,12(r16)
 401746c:	dfc00417 	ldw	ra,16(sp)
 4017470:	dcc00317 	ldw	r19,12(sp)
 4017474:	dc800217 	ldw	r18,8(sp)
 4017478:	dc400117 	ldw	r17,4(sp)
 401747c:	dc000017 	ldw	r16,0(sp)
 4017480:	dec00504 	addi	sp,sp,20
 4017484:	4018cc01 	jmpi	4018cc0 <_write_r>

04017488 <__sseek>:
 4017488:	defffe04 	addi	sp,sp,-8
 401748c:	dc000015 	stw	r16,0(sp)
 4017490:	2821883a 	mov	r16,r5
 4017494:	2940038f 	ldh	r5,14(r5)
 4017498:	dfc00115 	stw	ra,4(sp)
 401749c:	401920c0 	call	401920c <_lseek_r>
 40174a0:	00ffffc4 	movi	r3,-1
 40174a4:	10c00826 	beq	r2,r3,40174c8 <__sseek+0x40>
 40174a8:	80c0030b 	ldhu	r3,12(r16)
 40174ac:	80801415 	stw	r2,80(r16)
 40174b0:	18c40014 	ori	r3,r3,4096
 40174b4:	80c0030d 	sth	r3,12(r16)
 40174b8:	dfc00117 	ldw	ra,4(sp)
 40174bc:	dc000017 	ldw	r16,0(sp)
 40174c0:	dec00204 	addi	sp,sp,8
 40174c4:	f800283a 	ret
 40174c8:	80c0030b 	ldhu	r3,12(r16)
 40174cc:	18fbffcc 	andi	r3,r3,61439
 40174d0:	80c0030d 	sth	r3,12(r16)
 40174d4:	dfc00117 	ldw	ra,4(sp)
 40174d8:	dc000017 	ldw	r16,0(sp)
 40174dc:	dec00204 	addi	sp,sp,8
 40174e0:	f800283a 	ret

040174e4 <__sclose>:
 40174e4:	2940038f 	ldh	r5,14(r5)
 40174e8:	4018d201 	jmpi	4018d20 <_close_r>

040174ec <strcmp>:
 40174ec:	2144b03a 	or	r2,r4,r5
 40174f0:	108000cc 	andi	r2,r2,3
 40174f4:	1000171e 	bne	r2,zero,4017554 <strcmp+0x68>
 40174f8:	20800017 	ldw	r2,0(r4)
 40174fc:	28c00017 	ldw	r3,0(r5)
 4017500:	10c0141e 	bne	r2,r3,4017554 <strcmp+0x68>
 4017504:	027fbff4 	movhi	r9,65279
 4017508:	4a7fbfc4 	addi	r9,r9,-257
 401750c:	0086303a 	nor	r3,zero,r2
 4017510:	02202074 	movhi	r8,32897
 4017514:	1245883a 	add	r2,r2,r9
 4017518:	42202004 	addi	r8,r8,-32640
 401751c:	10c4703a 	and	r2,r2,r3
 4017520:	1204703a 	and	r2,r2,r8
 4017524:	10000226 	beq	r2,zero,4017530 <strcmp+0x44>
 4017528:	00002306 	br	40175b8 <strcmp+0xcc>
 401752c:	1000221e 	bne	r2,zero,40175b8 <strcmp+0xcc>
 4017530:	21000104 	addi	r4,r4,4
 4017534:	20c00017 	ldw	r3,0(r4)
 4017538:	29400104 	addi	r5,r5,4
 401753c:	29800017 	ldw	r6,0(r5)
 4017540:	1a4f883a 	add	r7,r3,r9
 4017544:	00c4303a 	nor	r2,zero,r3
 4017548:	3884703a 	and	r2,r7,r2
 401754c:	1204703a 	and	r2,r2,r8
 4017550:	19bff626 	beq	r3,r6,401752c <__alt_mem_onchip_memory2_0+0xfc01236c>
 4017554:	20800003 	ldbu	r2,0(r4)
 4017558:	10c03fcc 	andi	r3,r2,255
 401755c:	18c0201c 	xori	r3,r3,128
 4017560:	18ffe004 	addi	r3,r3,-128
 4017564:	18000c26 	beq	r3,zero,4017598 <strcmp+0xac>
 4017568:	29800007 	ldb	r6,0(r5)
 401756c:	19800326 	beq	r3,r6,401757c <strcmp+0x90>
 4017570:	00001306 	br	40175c0 <strcmp+0xd4>
 4017574:	29800007 	ldb	r6,0(r5)
 4017578:	11800b1e 	bne	r2,r6,40175a8 <strcmp+0xbc>
 401757c:	21000044 	addi	r4,r4,1
 4017580:	20c00003 	ldbu	r3,0(r4)
 4017584:	29400044 	addi	r5,r5,1
 4017588:	18803fcc 	andi	r2,r3,255
 401758c:	1080201c 	xori	r2,r2,128
 4017590:	10bfe004 	addi	r2,r2,-128
 4017594:	103ff71e 	bne	r2,zero,4017574 <__alt_mem_onchip_memory2_0+0xfc0123b4>
 4017598:	0007883a 	mov	r3,zero
 401759c:	28800003 	ldbu	r2,0(r5)
 40175a0:	1885c83a 	sub	r2,r3,r2
 40175a4:	f800283a 	ret
 40175a8:	28800003 	ldbu	r2,0(r5)
 40175ac:	18c03fcc 	andi	r3,r3,255
 40175b0:	1885c83a 	sub	r2,r3,r2
 40175b4:	f800283a 	ret
 40175b8:	0005883a 	mov	r2,zero
 40175bc:	f800283a 	ret
 40175c0:	10c03fcc 	andi	r3,r2,255
 40175c4:	003ff506 	br	401759c <__alt_mem_onchip_memory2_0+0xfc0123dc>

040175c8 <__sprint_r.part.0>:
 40175c8:	28801917 	ldw	r2,100(r5)
 40175cc:	defff604 	addi	sp,sp,-40
 40175d0:	dd400515 	stw	r21,20(sp)
 40175d4:	dfc00915 	stw	ra,36(sp)
 40175d8:	df000815 	stw	fp,32(sp)
 40175dc:	ddc00715 	stw	r23,28(sp)
 40175e0:	dd800615 	stw	r22,24(sp)
 40175e4:	dd000415 	stw	r20,16(sp)
 40175e8:	dcc00315 	stw	r19,12(sp)
 40175ec:	dc800215 	stw	r18,8(sp)
 40175f0:	dc400115 	stw	r17,4(sp)
 40175f4:	dc000015 	stw	r16,0(sp)
 40175f8:	1088000c 	andi	r2,r2,8192
 40175fc:	302b883a 	mov	r21,r6
 4017600:	10002e26 	beq	r2,zero,40176bc <__sprint_r.part.0+0xf4>
 4017604:	30800217 	ldw	r2,8(r6)
 4017608:	35800017 	ldw	r22,0(r6)
 401760c:	10002926 	beq	r2,zero,40176b4 <__sprint_r.part.0+0xec>
 4017610:	2827883a 	mov	r19,r5
 4017614:	2029883a 	mov	r20,r4
 4017618:	b5c00104 	addi	r23,r22,4
 401761c:	04bfffc4 	movi	r18,-1
 4017620:	bc400017 	ldw	r17,0(r23)
 4017624:	b4000017 	ldw	r16,0(r22)
 4017628:	0039883a 	mov	fp,zero
 401762c:	8822d0ba 	srli	r17,r17,2
 4017630:	8800031e 	bne	r17,zero,4017640 <__sprint_r.part.0+0x78>
 4017634:	00001806 	br	4017698 <__sprint_r.part.0+0xd0>
 4017638:	84000104 	addi	r16,r16,4
 401763c:	8f001526 	beq	r17,fp,4017694 <__sprint_r.part.0+0xcc>
 4017640:	81400017 	ldw	r5,0(r16)
 4017644:	980d883a 	mov	r6,r19
 4017648:	a009883a 	mov	r4,r20
 401764c:	40190b80 	call	40190b8 <_fputwc_r>
 4017650:	e7000044 	addi	fp,fp,1
 4017654:	14bff81e 	bne	r2,r18,4017638 <__alt_mem_onchip_memory2_0+0xfc012478>
 4017658:	9005883a 	mov	r2,r18
 401765c:	a8000215 	stw	zero,8(r21)
 4017660:	a8000115 	stw	zero,4(r21)
 4017664:	dfc00917 	ldw	ra,36(sp)
 4017668:	df000817 	ldw	fp,32(sp)
 401766c:	ddc00717 	ldw	r23,28(sp)
 4017670:	dd800617 	ldw	r22,24(sp)
 4017674:	dd400517 	ldw	r21,20(sp)
 4017678:	dd000417 	ldw	r20,16(sp)
 401767c:	dcc00317 	ldw	r19,12(sp)
 4017680:	dc800217 	ldw	r18,8(sp)
 4017684:	dc400117 	ldw	r17,4(sp)
 4017688:	dc000017 	ldw	r16,0(sp)
 401768c:	dec00a04 	addi	sp,sp,40
 4017690:	f800283a 	ret
 4017694:	a8800217 	ldw	r2,8(r21)
 4017698:	8c63883a 	add	r17,r17,r17
 401769c:	8c63883a 	add	r17,r17,r17
 40176a0:	1445c83a 	sub	r2,r2,r17
 40176a4:	a8800215 	stw	r2,8(r21)
 40176a8:	b5800204 	addi	r22,r22,8
 40176ac:	bdc00204 	addi	r23,r23,8
 40176b0:	103fdb1e 	bne	r2,zero,4017620 <__alt_mem_onchip_memory2_0+0xfc012460>
 40176b4:	0005883a 	mov	r2,zero
 40176b8:	003fe806 	br	401765c <__alt_mem_onchip_memory2_0+0xfc01249c>
 40176bc:	40148140 	call	4014814 <__sfvwrite_r>
 40176c0:	003fe606 	br	401765c <__alt_mem_onchip_memory2_0+0xfc01249c>

040176c4 <__sprint_r>:
 40176c4:	30c00217 	ldw	r3,8(r6)
 40176c8:	18000126 	beq	r3,zero,40176d0 <__sprint_r+0xc>
 40176cc:	40175c81 	jmpi	40175c8 <__sprint_r.part.0>
 40176d0:	30000115 	stw	zero,4(r6)
 40176d4:	0005883a 	mov	r2,zero
 40176d8:	f800283a 	ret

040176dc <___vfiprintf_internal_r>:
 40176dc:	deffca04 	addi	sp,sp,-216
 40176e0:	dd403115 	stw	r21,196(sp)
 40176e4:	dfc03515 	stw	ra,212(sp)
 40176e8:	df003415 	stw	fp,208(sp)
 40176ec:	ddc03315 	stw	r23,204(sp)
 40176f0:	dd803215 	stw	r22,200(sp)
 40176f4:	dd003015 	stw	r20,192(sp)
 40176f8:	dcc02f15 	stw	r19,188(sp)
 40176fc:	dc802e15 	stw	r18,184(sp)
 4017700:	dc402d15 	stw	r17,180(sp)
 4017704:	dc002c15 	stw	r16,176(sp)
 4017708:	d9002115 	stw	r4,132(sp)
 401770c:	d9402015 	stw	r5,128(sp)
 4017710:	d9c02215 	stw	r7,136(sp)
 4017714:	302b883a 	mov	r21,r6
 4017718:	20000226 	beq	r4,zero,4017724 <___vfiprintf_internal_r+0x48>
 401771c:	20800e17 	ldw	r2,56(r4)
 4017720:	1000cf26 	beq	r2,zero,4017a60 <___vfiprintf_internal_r+0x384>
 4017724:	d8c02017 	ldw	r3,128(sp)
 4017728:	1880030b 	ldhu	r2,12(r3)
 401772c:	10c8000c 	andi	r3,r2,8192
 4017730:	1800071e 	bne	r3,zero,4017750 <___vfiprintf_internal_r+0x74>
 4017734:	d9402017 	ldw	r5,128(sp)
 4017738:	00f7ffc4 	movi	r3,-8193
 401773c:	10880014 	ori	r2,r2,8192
 4017740:	29001917 	ldw	r4,100(r5)
 4017744:	2880030d 	sth	r2,12(r5)
 4017748:	20c6703a 	and	r3,r4,r3
 401774c:	28c01915 	stw	r3,100(r5)
 4017750:	10c0020c 	andi	r3,r2,8
 4017754:	1800a526 	beq	r3,zero,40179ec <___vfiprintf_internal_r+0x310>
 4017758:	d9002017 	ldw	r4,128(sp)
 401775c:	20c00417 	ldw	r3,16(r4)
 4017760:	1800a226 	beq	r3,zero,40179ec <___vfiprintf_internal_r+0x310>
 4017764:	1080068c 	andi	r2,r2,26
 4017768:	00c00284 	movi	r3,10
 401776c:	10c0a826 	beq	r2,r3,4017a10 <___vfiprintf_internal_r+0x334>
 4017770:	d9001a04 	addi	r4,sp,104
 4017774:	d94019c4 	addi	r5,sp,103
 4017778:	048100b4 	movhi	r18,1026
 401777c:	2145c83a 	sub	r2,r4,r5
 4017780:	94b7fa04 	addi	r18,r18,-8216
 4017784:	d9001e15 	stw	r4,120(sp)
 4017788:	d9401f15 	stw	r5,124(sp)
 401778c:	dec01a15 	stw	sp,104(sp)
 4017790:	d8001c15 	stw	zero,112(sp)
 4017794:	d8001b15 	stw	zero,108(sp)
 4017798:	d811883a 	mov	r8,sp
 401779c:	d8002615 	stw	zero,152(sp)
 40177a0:	d8002415 	stw	zero,144(sp)
 40177a4:	d8802815 	stw	r2,160(sp)
 40177a8:	a82d883a 	mov	r22,r21
 40177ac:	b0800007 	ldb	r2,0(r22)
 40177b0:	10040d26 	beq	r2,zero,40187e8 <___vfiprintf_internal_r+0x110c>
 40177b4:	00c00944 	movi	r3,37
 40177b8:	b029883a 	mov	r20,r22
 40177bc:	10c0021e 	bne	r2,r3,40177c8 <___vfiprintf_internal_r+0xec>
 40177c0:	00001606 	br	401781c <___vfiprintf_internal_r+0x140>
 40177c4:	10c00326 	beq	r2,r3,40177d4 <___vfiprintf_internal_r+0xf8>
 40177c8:	a5000044 	addi	r20,r20,1
 40177cc:	a0800007 	ldb	r2,0(r20)
 40177d0:	103ffc1e 	bne	r2,zero,40177c4 <__alt_mem_onchip_memory2_0+0xfc012604>
 40177d4:	a5a1c83a 	sub	r16,r20,r22
 40177d8:	80001026 	beq	r16,zero,401781c <___vfiprintf_internal_r+0x140>
 40177dc:	d8c01c17 	ldw	r3,112(sp)
 40177e0:	d8801b17 	ldw	r2,108(sp)
 40177e4:	45800015 	stw	r22,0(r8)
 40177e8:	80c7883a 	add	r3,r16,r3
 40177ec:	10800044 	addi	r2,r2,1
 40177f0:	44000115 	stw	r16,4(r8)
 40177f4:	d8c01c15 	stw	r3,112(sp)
 40177f8:	d8801b15 	stw	r2,108(sp)
 40177fc:	010001c4 	movi	r4,7
 4017800:	2080750e 	bge	r4,r2,40179d8 <___vfiprintf_internal_r+0x2fc>
 4017804:	1803951e 	bne	r3,zero,401865c <___vfiprintf_internal_r+0xf80>
 4017808:	d8c02417 	ldw	r3,144(sp)
 401780c:	d8001b15 	stw	zero,108(sp)
 4017810:	d811883a 	mov	r8,sp
 4017814:	1c07883a 	add	r3,r3,r16
 4017818:	d8c02415 	stw	r3,144(sp)
 401781c:	a0800007 	ldb	r2,0(r20)
 4017820:	1002e026 	beq	r2,zero,40183a4 <___vfiprintf_internal_r+0xcc8>
 4017824:	a5800044 	addi	r22,r20,1
 4017828:	a0c00047 	ldb	r3,1(r20)
 401782c:	d8001d85 	stb	zero,118(sp)
 4017830:	0027883a 	mov	r19,zero
 4017834:	d8002305 	stb	zero,140(sp)
 4017838:	043fffc4 	movi	r16,-1
 401783c:	d8002515 	stw	zero,148(sp)
 4017840:	0023883a 	mov	r17,zero
 4017844:	05001604 	movi	r20,88
 4017848:	05400244 	movi	r21,9
 401784c:	402f883a 	mov	r23,r8
 4017850:	b5800044 	addi	r22,r22,1
 4017854:	18bff804 	addi	r2,r3,-32
 4017858:	a0827736 	bltu	r20,r2,4018238 <___vfiprintf_internal_r+0xb5c>
 401785c:	100490ba 	slli	r2,r2,2
 4017860:	01010074 	movhi	r4,1025
 4017864:	211e1d04 	addi	r4,r4,30836
 4017868:	1105883a 	add	r2,r2,r4
 401786c:	10800017 	ldw	r2,0(r2)
 4017870:	1000683a 	jmp	r2
 4017874:	04017f38 	rdprs	r16,zero,1532
 4017878:	04018238 	rdprs	r16,zero,1544
 401787c:	04018238 	rdprs	r16,zero,1544
 4017880:	04017f54 	movui	r16,1533
 4017884:	04018238 	rdprs	r16,zero,1544
 4017888:	04018238 	rdprs	r16,zero,1544
 401788c:	04018238 	rdprs	r16,zero,1544
 4017890:	04018238 	rdprs	r16,zero,1544
 4017894:	04018238 	rdprs	r16,zero,1544
 4017898:	04018238 	rdprs	r16,zero,1544
 401789c:	0401815c 	xori	r16,zero,1541
 40178a0:	04018180 	call	401818 <__reset-0x3bfe7e8>
 40178a4:	04018238 	rdprs	r16,zero,1544
 40178a8:	04017a78 	rdprs	r16,zero,1513
 40178ac:	04018194 	movui	r16,1542
 40178b0:	04018238 	rdprs	r16,zero,1544
 40178b4:	04017f60 	cmpeqi	r16,zero,1533
 40178b8:	04017f6c 	andhi	r16,zero,1533
 40178bc:	04017f6c 	andhi	r16,zero,1533
 40178c0:	04017f6c 	andhi	r16,zero,1533
 40178c4:	04017f6c 	andhi	r16,zero,1533
 40178c8:	04017f6c 	andhi	r16,zero,1533
 40178cc:	04017f6c 	andhi	r16,zero,1533
 40178d0:	04017f6c 	andhi	r16,zero,1533
 40178d4:	04017f6c 	andhi	r16,zero,1533
 40178d8:	04017f6c 	andhi	r16,zero,1533
 40178dc:	04018238 	rdprs	r16,zero,1544
 40178e0:	04018238 	rdprs	r16,zero,1544
 40178e4:	04018238 	rdprs	r16,zero,1544
 40178e8:	04018238 	rdprs	r16,zero,1544
 40178ec:	04018238 	rdprs	r16,zero,1544
 40178f0:	04018238 	rdprs	r16,zero,1544
 40178f4:	04018238 	rdprs	r16,zero,1544
 40178f8:	04018238 	rdprs	r16,zero,1544
 40178fc:	04018238 	rdprs	r16,zero,1544
 4017900:	04018238 	rdprs	r16,zero,1544
 4017904:	04017fac 	andhi	r16,zero,1534
 4017908:	04018238 	rdprs	r16,zero,1544
 401790c:	04018238 	rdprs	r16,zero,1544
 4017910:	04018238 	rdprs	r16,zero,1544
 4017914:	04018238 	rdprs	r16,zero,1544
 4017918:	04018238 	rdprs	r16,zero,1544
 401791c:	04018238 	rdprs	r16,zero,1544
 4017920:	04018238 	rdprs	r16,zero,1544
 4017924:	04018238 	rdprs	r16,zero,1544
 4017928:	04018238 	rdprs	r16,zero,1544
 401792c:	04018238 	rdprs	r16,zero,1544
 4017930:	04017fe8 	cmpgeui	r16,zero,1535
 4017934:	04018238 	rdprs	r16,zero,1544
 4017938:	04018238 	rdprs	r16,zero,1544
 401793c:	04018238 	rdprs	r16,zero,1544
 4017940:	04018238 	rdprs	r16,zero,1544
 4017944:	04018238 	rdprs	r16,zero,1544
 4017948:	04018044 	movi	r16,1537
 401794c:	04018238 	rdprs	r16,zero,1544
 4017950:	04018238 	rdprs	r16,zero,1544
 4017954:	040180b8 	rdprs	r16,zero,1538
 4017958:	04018238 	rdprs	r16,zero,1544
 401795c:	04018238 	rdprs	r16,zero,1544
 4017960:	04018238 	rdprs	r16,zero,1544
 4017964:	04018238 	rdprs	r16,zero,1544
 4017968:	04018238 	rdprs	r16,zero,1544
 401796c:	04018238 	rdprs	r16,zero,1544
 4017970:	04018238 	rdprs	r16,zero,1544
 4017974:	04018238 	rdprs	r16,zero,1544
 4017978:	04018238 	rdprs	r16,zero,1544
 401797c:	04018238 	rdprs	r16,zero,1544
 4017980:	04017e60 	cmpeqi	r16,zero,1529
 4017984:	04017e90 	cmplti	r16,zero,1530
 4017988:	04018238 	rdprs	r16,zero,1544
 401798c:	04018238 	rdprs	r16,zero,1544
 4017990:	04018238 	rdprs	r16,zero,1544
 4017994:	040181e0 	cmpeqi	r16,zero,1543
 4017998:	04017e90 	cmplti	r16,zero,1530
 401799c:	04018238 	rdprs	r16,zero,1544
 40179a0:	04018238 	rdprs	r16,zero,1544
 40179a4:	04017d38 	rdprs	r16,zero,1524
 40179a8:	04018238 	rdprs	r16,zero,1544
 40179ac:	04017d4c 	andi	r16,zero,1525
 40179b0:	04017d84 	movi	r16,1526
 40179b4:	04017a84 	movi	r16,1514
 40179b8:	04017d2c 	andhi	r16,zero,1524
 40179bc:	04018238 	rdprs	r16,zero,1544
 40179c0:	040180f8 	rdprs	r16,zero,1539
 40179c4:	04018238 	rdprs	r16,zero,1544
 40179c8:	04018144 	movi	r16,1541
 40179cc:	04018238 	rdprs	r16,zero,1544
 40179d0:	04018238 	rdprs	r16,zero,1544
 40179d4:	04017e08 	cmpgei	r16,zero,1528
 40179d8:	42000204 	addi	r8,r8,8
 40179dc:	d8c02417 	ldw	r3,144(sp)
 40179e0:	1c07883a 	add	r3,r3,r16
 40179e4:	d8c02415 	stw	r3,144(sp)
 40179e8:	003f8c06 	br	401781c <__alt_mem_onchip_memory2_0+0xfc01265c>
 40179ec:	d9402017 	ldw	r5,128(sp)
 40179f0:	d9002117 	ldw	r4,132(sp)
 40179f4:	40123840 	call	4012384 <__swsetup_r>
 40179f8:	1003c11e 	bne	r2,zero,4018900 <___vfiprintf_internal_r+0x1224>
 40179fc:	d9402017 	ldw	r5,128(sp)
 4017a00:	00c00284 	movi	r3,10
 4017a04:	2880030b 	ldhu	r2,12(r5)
 4017a08:	1080068c 	andi	r2,r2,26
 4017a0c:	10ff581e 	bne	r2,r3,4017770 <__alt_mem_onchip_memory2_0+0xfc0125b0>
 4017a10:	d8c02017 	ldw	r3,128(sp)
 4017a14:	1880038f 	ldh	r2,14(r3)
 4017a18:	103f5516 	blt	r2,zero,4017770 <__alt_mem_onchip_memory2_0+0xfc0125b0>
 4017a1c:	d9c02217 	ldw	r7,136(sp)
 4017a20:	d9002117 	ldw	r4,132(sp)
 4017a24:	a80d883a 	mov	r6,r21
 4017a28:	180b883a 	mov	r5,r3
 4017a2c:	4018c040 	call	4018c04 <__sbprintf>
 4017a30:	dfc03517 	ldw	ra,212(sp)
 4017a34:	df003417 	ldw	fp,208(sp)
 4017a38:	ddc03317 	ldw	r23,204(sp)
 4017a3c:	dd803217 	ldw	r22,200(sp)
 4017a40:	dd403117 	ldw	r21,196(sp)
 4017a44:	dd003017 	ldw	r20,192(sp)
 4017a48:	dcc02f17 	ldw	r19,188(sp)
 4017a4c:	dc802e17 	ldw	r18,184(sp)
 4017a50:	dc402d17 	ldw	r17,180(sp)
 4017a54:	dc002c17 	ldw	r16,176(sp)
 4017a58:	dec03604 	addi	sp,sp,216
 4017a5c:	f800283a 	ret
 4017a60:	40143900 	call	4014390 <__sinit>
 4017a64:	003f2f06 	br	4017724 <__alt_mem_onchip_memory2_0+0xfc012564>
 4017a68:	d8c02517 	ldw	r3,148(sp)
 4017a6c:	d8802215 	stw	r2,136(sp)
 4017a70:	00c7c83a 	sub	r3,zero,r3
 4017a74:	d8c02515 	stw	r3,148(sp)
 4017a78:	8c400114 	ori	r17,r17,4
 4017a7c:	b0c00007 	ldb	r3,0(r22)
 4017a80:	003f7306 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 4017a84:	00800c04 	movi	r2,48
 4017a88:	d9402217 	ldw	r5,136(sp)
 4017a8c:	d8801d05 	stb	r2,116(sp)
 4017a90:	00801e04 	movi	r2,120
 4017a94:	d8801d45 	stb	r2,117(sp)
 4017a98:	d8001d85 	stb	zero,118(sp)
 4017a9c:	b811883a 	mov	r8,r23
 4017aa0:	28c00104 	addi	r3,r5,4
 4017aa4:	2cc00017 	ldw	r19,0(r5)
 4017aa8:	0029883a 	mov	r20,zero
 4017aac:	88800094 	ori	r2,r17,2
 4017ab0:	80032516 	blt	r16,zero,4018748 <___vfiprintf_internal_r+0x106c>
 4017ab4:	00bfdfc4 	movi	r2,-129
 4017ab8:	88a2703a 	and	r17,r17,r2
 4017abc:	d8c02215 	stw	r3,136(sp)
 4017ac0:	8c400094 	ori	r17,r17,2
 4017ac4:	98032a1e 	bne	r19,zero,4018770 <___vfiprintf_internal_r+0x1094>
 4017ac8:	008100b4 	movhi	r2,1026
 4017acc:	10b79a04 	addi	r2,r2,-8600
 4017ad0:	d8802615 	stw	r2,152(sp)
 4017ad4:	002b883a 	mov	r21,zero
 4017ad8:	8001741e 	bne	r16,zero,40180ac <___vfiprintf_internal_r+0x9d0>
 4017adc:	0021883a 	mov	r16,zero
 4017ae0:	0029883a 	mov	r20,zero
 4017ae4:	ddc01a04 	addi	r23,sp,104
 4017ae8:	8027883a 	mov	r19,r16
 4017aec:	8500010e 	bge	r16,r20,4017af4 <___vfiprintf_internal_r+0x418>
 4017af0:	a027883a 	mov	r19,r20
 4017af4:	ad403fcc 	andi	r21,r21,255
 4017af8:	ad40201c 	xori	r21,r21,128
 4017afc:	ad7fe004 	addi	r21,r21,-128
 4017b00:	a8000126 	beq	r21,zero,4017b08 <___vfiprintf_internal_r+0x42c>
 4017b04:	9cc00044 	addi	r19,r19,1
 4017b08:	89c0008c 	andi	r7,r17,2
 4017b0c:	38000126 	beq	r7,zero,4017b14 <___vfiprintf_internal_r+0x438>
 4017b10:	9cc00084 	addi	r19,r19,2
 4017b14:	88c0210c 	andi	r3,r17,132
 4017b18:	1801dd1e 	bne	r3,zero,4018290 <___vfiprintf_internal_r+0xbb4>
 4017b1c:	d9402517 	ldw	r5,148(sp)
 4017b20:	2cebc83a 	sub	r21,r5,r19
 4017b24:	0541da0e 	bge	zero,r21,4018290 <___vfiprintf_internal_r+0xbb4>
 4017b28:	07000404 	movi	fp,16
 4017b2c:	d8801c17 	ldw	r2,112(sp)
 4017b30:	e543be0e 	bge	fp,r21,4018a2c <___vfiprintf_internal_r+0x1350>
 4017b34:	014100b4 	movhi	r5,1026
 4017b38:	2977fe04 	addi	r5,r5,-8200
 4017b3c:	dc002715 	stw	r16,156(sp)
 4017b40:	d9801b17 	ldw	r6,108(sp)
 4017b44:	a821883a 	mov	r16,r21
 4017b48:	d9402315 	stw	r5,140(sp)
 4017b4c:	028001c4 	movi	r10,7
 4017b50:	d9c02915 	stw	r7,164(sp)
 4017b54:	182b883a 	mov	r21,r3
 4017b58:	00000506 	br	4017b70 <___vfiprintf_internal_r+0x494>
 4017b5c:	31000084 	addi	r4,r6,2
 4017b60:	42000204 	addi	r8,r8,8
 4017b64:	180d883a 	mov	r6,r3
 4017b68:	843ffc04 	addi	r16,r16,-16
 4017b6c:	e4000f0e 	bge	fp,r16,4017bac <___vfiprintf_internal_r+0x4d0>
 4017b70:	010100b4 	movhi	r4,1026
 4017b74:	10800404 	addi	r2,r2,16
 4017b78:	30c00044 	addi	r3,r6,1
 4017b7c:	2137fe04 	addi	r4,r4,-8200
 4017b80:	41000015 	stw	r4,0(r8)
 4017b84:	47000115 	stw	fp,4(r8)
 4017b88:	d8801c15 	stw	r2,112(sp)
 4017b8c:	d8c01b15 	stw	r3,108(sp)
 4017b90:	50fff20e 	bge	r10,r3,4017b5c <__alt_mem_onchip_memory2_0+0xfc01299c>
 4017b94:	1001b21e 	bne	r2,zero,4018260 <___vfiprintf_internal_r+0xb84>
 4017b98:	843ffc04 	addi	r16,r16,-16
 4017b9c:	000d883a 	mov	r6,zero
 4017ba0:	01000044 	movi	r4,1
 4017ba4:	d811883a 	mov	r8,sp
 4017ba8:	e43ff116 	blt	fp,r16,4017b70 <__alt_mem_onchip_memory2_0+0xfc0129b0>
 4017bac:	a807883a 	mov	r3,r21
 4017bb0:	d9c02917 	ldw	r7,164(sp)
 4017bb4:	802b883a 	mov	r21,r16
 4017bb8:	dc002717 	ldw	r16,156(sp)
 4017bbc:	d9402317 	ldw	r5,140(sp)
 4017bc0:	a885883a 	add	r2,r21,r2
 4017bc4:	45400115 	stw	r21,4(r8)
 4017bc8:	41400015 	stw	r5,0(r8)
 4017bcc:	d8801c15 	stw	r2,112(sp)
 4017bd0:	d9001b15 	stw	r4,108(sp)
 4017bd4:	014001c4 	movi	r5,7
 4017bd8:	29026216 	blt	r5,r4,4018564 <___vfiprintf_internal_r+0xe88>
 4017bdc:	d9801d87 	ldb	r6,118(sp)
 4017be0:	42000204 	addi	r8,r8,8
 4017be4:	21400044 	addi	r5,r4,1
 4017be8:	3001ae1e 	bne	r6,zero,40182a4 <___vfiprintf_internal_r+0xbc8>
 4017bec:	3801bb26 	beq	r7,zero,40182dc <___vfiprintf_internal_r+0xc00>
 4017bf0:	d9001d04 	addi	r4,sp,116
 4017bf4:	10800084 	addi	r2,r2,2
 4017bf8:	41000015 	stw	r4,0(r8)
 4017bfc:	01000084 	movi	r4,2
 4017c00:	41000115 	stw	r4,4(r8)
 4017c04:	d8801c15 	stw	r2,112(sp)
 4017c08:	d9401b15 	stw	r5,108(sp)
 4017c0c:	010001c4 	movi	r4,7
 4017c10:	2142680e 	bge	r4,r5,40185b4 <___vfiprintf_internal_r+0xed8>
 4017c14:	1002b11e 	bne	r2,zero,40186dc <___vfiprintf_internal_r+0x1000>
 4017c18:	01802004 	movi	r6,128
 4017c1c:	01400044 	movi	r5,1
 4017c20:	0009883a 	mov	r4,zero
 4017c24:	d811883a 	mov	r8,sp
 4017c28:	1981ae1e 	bne	r3,r6,40182e4 <___vfiprintf_internal_r+0xc08>
 4017c2c:	d8c02517 	ldw	r3,148(sp)
 4017c30:	1cf9c83a 	sub	fp,r3,r19
 4017c34:	0701ab0e 	bge	zero,fp,40182e4 <___vfiprintf_internal_r+0xc08>
 4017c38:	05400404 	movi	r21,16
 4017c3c:	af03a90e 	bge	r21,fp,4018ae4 <___vfiprintf_internal_r+0x1408>
 4017c40:	014100b4 	movhi	r5,1026
 4017c44:	2977fa04 	addi	r5,r5,-8216
 4017c48:	d9402315 	stw	r5,140(sp)
 4017c4c:	01c001c4 	movi	r7,7
 4017c50:	00000506 	br	4017c68 <___vfiprintf_internal_r+0x58c>
 4017c54:	21800084 	addi	r6,r4,2
 4017c58:	42000204 	addi	r8,r8,8
 4017c5c:	1809883a 	mov	r4,r3
 4017c60:	e73ffc04 	addi	fp,fp,-16
 4017c64:	af000d0e 	bge	r21,fp,4017c9c <___vfiprintf_internal_r+0x5c0>
 4017c68:	10800404 	addi	r2,r2,16
 4017c6c:	20c00044 	addi	r3,r4,1
 4017c70:	44800015 	stw	r18,0(r8)
 4017c74:	45400115 	stw	r21,4(r8)
 4017c78:	d8801c15 	stw	r2,112(sp)
 4017c7c:	d8c01b15 	stw	r3,108(sp)
 4017c80:	38fff40e 	bge	r7,r3,4017c54 <__alt_mem_onchip_memory2_0+0xfc012a94>
 4017c84:	10022b1e 	bne	r2,zero,4018534 <___vfiprintf_internal_r+0xe58>
 4017c88:	e73ffc04 	addi	fp,fp,-16
 4017c8c:	01800044 	movi	r6,1
 4017c90:	0009883a 	mov	r4,zero
 4017c94:	d811883a 	mov	r8,sp
 4017c98:	af3ff316 	blt	r21,fp,4017c68 <__alt_mem_onchip_memory2_0+0xfc012aa8>
 4017c9c:	d8c02317 	ldw	r3,140(sp)
 4017ca0:	1705883a 	add	r2,r2,fp
 4017ca4:	47000115 	stw	fp,4(r8)
 4017ca8:	40c00015 	stw	r3,0(r8)
 4017cac:	d8801c15 	stw	r2,112(sp)
 4017cb0:	d9801b15 	stw	r6,108(sp)
 4017cb4:	00c001c4 	movi	r3,7
 4017cb8:	19829416 	blt	r3,r6,401870c <___vfiprintf_internal_r+0x1030>
 4017cbc:	8521c83a 	sub	r16,r16,r20
 4017cc0:	42000204 	addi	r8,r8,8
 4017cc4:	31400044 	addi	r5,r6,1
 4017cc8:	3009883a 	mov	r4,r6
 4017ccc:	04018716 	blt	zero,r16,40182ec <___vfiprintf_internal_r+0xc10>
 4017cd0:	a085883a 	add	r2,r20,r2
 4017cd4:	45c00015 	stw	r23,0(r8)
 4017cd8:	45000115 	stw	r20,4(r8)
 4017cdc:	d8801c15 	stw	r2,112(sp)
 4017ce0:	d9401b15 	stw	r5,108(sp)
 4017ce4:	00c001c4 	movi	r3,7
 4017ce8:	1941c20e 	bge	r3,r5,40183f4 <___vfiprintf_internal_r+0xd18>
 4017cec:	1002531e 	bne	r2,zero,401863c <___vfiprintf_internal_r+0xf60>
 4017cf0:	d8001b15 	stw	zero,108(sp)
 4017cf4:	8c40010c 	andi	r17,r17,4
 4017cf8:	88023226 	beq	r17,zero,40185c4 <___vfiprintf_internal_r+0xee8>
 4017cfc:	d9002517 	ldw	r4,148(sp)
 4017d00:	24e3c83a 	sub	r17,r4,r19
 4017d04:	04432916 	blt	zero,r17,40189ac <___vfiprintf_internal_r+0x12d0>
 4017d08:	d8802517 	ldw	r2,148(sp)
 4017d0c:	14c0010e 	bge	r2,r19,4017d14 <___vfiprintf_internal_r+0x638>
 4017d10:	9805883a 	mov	r2,r19
 4017d14:	d8c02417 	ldw	r3,144(sp)
 4017d18:	1887883a 	add	r3,r3,r2
 4017d1c:	d8c02415 	stw	r3,144(sp)
 4017d20:	d8001b15 	stw	zero,108(sp)
 4017d24:	d811883a 	mov	r8,sp
 4017d28:	003ea006 	br	40177ac <__alt_mem_onchip_memory2_0+0xfc0125ec>
 4017d2c:	8c400814 	ori	r17,r17,32
 4017d30:	b0c00007 	ldb	r3,0(r22)
 4017d34:	003ec606 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 4017d38:	b0c00007 	ldb	r3,0(r22)
 4017d3c:	00801b04 	movi	r2,108
 4017d40:	18832026 	beq	r3,r2,40189c4 <___vfiprintf_internal_r+0x12e8>
 4017d44:	8c400414 	ori	r17,r17,16
 4017d48:	003ec106 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 4017d4c:	9cc03fcc 	andi	r19,r19,255
 4017d50:	b811883a 	mov	r8,r23
 4017d54:	9803981e 	bne	r19,zero,4018bb8 <___vfiprintf_internal_r+0x14dc>
 4017d58:	8880080c 	andi	r2,r17,32
 4017d5c:	1002be26 	beq	r2,zero,4018858 <___vfiprintf_internal_r+0x117c>
 4017d60:	d9002217 	ldw	r4,136(sp)
 4017d64:	d9402417 	ldw	r5,144(sp)
 4017d68:	20800017 	ldw	r2,0(r4)
 4017d6c:	2807d7fa 	srai	r3,r5,31
 4017d70:	21000104 	addi	r4,r4,4
 4017d74:	d9002215 	stw	r4,136(sp)
 4017d78:	11400015 	stw	r5,0(r2)
 4017d7c:	10c00115 	stw	r3,4(r2)
 4017d80:	003e8a06 	br	40177ac <__alt_mem_onchip_memory2_0+0xfc0125ec>
 4017d84:	9cc03fcc 	andi	r19,r19,255
 4017d88:	b811883a 	mov	r8,r23
 4017d8c:	9803871e 	bne	r19,zero,4018bac <___vfiprintf_internal_r+0x14d0>
 4017d90:	8880080c 	andi	r2,r17,32
 4017d94:	10009a26 	beq	r2,zero,4018000 <___vfiprintf_internal_r+0x924>
 4017d98:	d9002217 	ldw	r4,136(sp)
 4017d9c:	d8001d85 	stb	zero,118(sp)
 4017da0:	20800204 	addi	r2,r4,8
 4017da4:	24c00017 	ldw	r19,0(r4)
 4017da8:	25000117 	ldw	r20,4(r4)
 4017dac:	8002a416 	blt	r16,zero,4018840 <___vfiprintf_internal_r+0x1164>
 4017db0:	013fdfc4 	movi	r4,-129
 4017db4:	9d06b03a 	or	r3,r19,r20
 4017db8:	d8802215 	stw	r2,136(sp)
 4017dbc:	8922703a 	and	r17,r17,r4
 4017dc0:	18009b26 	beq	r3,zero,4018030 <___vfiprintf_internal_r+0x954>
 4017dc4:	002b883a 	mov	r21,zero
 4017dc8:	ddc01a04 	addi	r23,sp,104
 4017dcc:	9806d0fa 	srli	r3,r19,3
 4017dd0:	a008977a 	slli	r4,r20,29
 4017dd4:	a028d0fa 	srli	r20,r20,3
 4017dd8:	9cc001cc 	andi	r19,r19,7
 4017ddc:	98800c04 	addi	r2,r19,48
 4017de0:	bdffffc4 	addi	r23,r23,-1
 4017de4:	20e6b03a 	or	r19,r4,r3
 4017de8:	b8800005 	stb	r2,0(r23)
 4017dec:	9d06b03a 	or	r3,r19,r20
 4017df0:	183ff61e 	bne	r3,zero,4017dcc <__alt_mem_onchip_memory2_0+0xfc012c0c>
 4017df4:	88c0004c 	andi	r3,r17,1
 4017df8:	18021f1e 	bne	r3,zero,4018678 <___vfiprintf_internal_r+0xf9c>
 4017dfc:	d9401e17 	ldw	r5,120(sp)
 4017e00:	2de9c83a 	sub	r20,r5,r23
 4017e04:	003f3806 	br	4017ae8 <__alt_mem_onchip_memory2_0+0xfc012928>
 4017e08:	9cc03fcc 	andi	r19,r19,255
 4017e0c:	b811883a 	mov	r8,r23
 4017e10:	98034f1e 	bne	r19,zero,4018b50 <___vfiprintf_internal_r+0x1474>
 4017e14:	008100b4 	movhi	r2,1026
 4017e18:	10b79a04 	addi	r2,r2,-8600
 4017e1c:	d8802615 	stw	r2,152(sp)
 4017e20:	8880080c 	andi	r2,r17,32
 4017e24:	1000ac26 	beq	r2,zero,40180d8 <___vfiprintf_internal_r+0x9fc>
 4017e28:	d9002217 	ldw	r4,136(sp)
 4017e2c:	24c00017 	ldw	r19,0(r4)
 4017e30:	25000117 	ldw	r20,4(r4)
 4017e34:	21000204 	addi	r4,r4,8
 4017e38:	d9002215 	stw	r4,136(sp)
 4017e3c:	8880004c 	andi	r2,r17,1
 4017e40:	1001e726 	beq	r2,zero,40185e0 <___vfiprintf_internal_r+0xf04>
 4017e44:	9d04b03a 	or	r2,r19,r20
 4017e48:	10025c1e 	bne	r2,zero,40187bc <___vfiprintf_internal_r+0x10e0>
 4017e4c:	d8001d85 	stb	zero,118(sp)
 4017e50:	80024416 	blt	r16,zero,4018764 <___vfiprintf_internal_r+0x1088>
 4017e54:	00bfdfc4 	movi	r2,-129
 4017e58:	88a2703a 	and	r17,r17,r2
 4017e5c:	003f1d06 	br	4017ad4 <__alt_mem_onchip_memory2_0+0xfc012914>
 4017e60:	d8c02217 	ldw	r3,136(sp)
 4017e64:	04c00044 	movi	r19,1
 4017e68:	b811883a 	mov	r8,r23
 4017e6c:	18800017 	ldw	r2,0(r3)
 4017e70:	18c00104 	addi	r3,r3,4
 4017e74:	d8001d85 	stb	zero,118(sp)
 4017e78:	d8801005 	stb	r2,64(sp)
 4017e7c:	d8c02215 	stw	r3,136(sp)
 4017e80:	9829883a 	mov	r20,r19
 4017e84:	ddc01004 	addi	r23,sp,64
 4017e88:	0021883a 	mov	r16,zero
 4017e8c:	003f1e06 	br	4017b08 <__alt_mem_onchip_memory2_0+0xfc012948>
 4017e90:	9cc03fcc 	andi	r19,r19,255
 4017e94:	b811883a 	mov	r8,r23
 4017e98:	9803331e 	bne	r19,zero,4018b68 <___vfiprintf_internal_r+0x148c>
 4017e9c:	8880080c 	andi	r2,r17,32
 4017ea0:	10004826 	beq	r2,zero,4017fc4 <___vfiprintf_internal_r+0x8e8>
 4017ea4:	d9002217 	ldw	r4,136(sp)
 4017ea8:	20800117 	ldw	r2,4(r4)
 4017eac:	24c00017 	ldw	r19,0(r4)
 4017eb0:	21000204 	addi	r4,r4,8
 4017eb4:	d9002215 	stw	r4,136(sp)
 4017eb8:	1029883a 	mov	r20,r2
 4017ebc:	10024c16 	blt	r2,zero,40187f0 <___vfiprintf_internal_r+0x1114>
 4017ec0:	dd401d83 	ldbu	r21,118(sp)
 4017ec4:	80007116 	blt	r16,zero,401808c <___vfiprintf_internal_r+0x9b0>
 4017ec8:	00ffdfc4 	movi	r3,-129
 4017ecc:	9d04b03a 	or	r2,r19,r20
 4017ed0:	88e2703a 	and	r17,r17,r3
 4017ed4:	1000d126 	beq	r2,zero,401821c <___vfiprintf_internal_r+0xb40>
 4017ed8:	a0023526 	beq	r20,zero,40187b0 <___vfiprintf_internal_r+0x10d4>
 4017edc:	ddc01a04 	addi	r23,sp,104
 4017ee0:	4039883a 	mov	fp,r8
 4017ee4:	9809883a 	mov	r4,r19
 4017ee8:	a00b883a 	mov	r5,r20
 4017eec:	01800284 	movi	r6,10
 4017ef0:	000f883a 	mov	r7,zero
 4017ef4:	4019d140 	call	4019d14 <__umoddi3>
 4017ef8:	10800c04 	addi	r2,r2,48
 4017efc:	bdffffc4 	addi	r23,r23,-1
 4017f00:	9809883a 	mov	r4,r19
 4017f04:	a00b883a 	mov	r5,r20
 4017f08:	b8800005 	stb	r2,0(r23)
 4017f0c:	01800284 	movi	r6,10
 4017f10:	000f883a 	mov	r7,zero
 4017f14:	40197180 	call	4019718 <__udivdi3>
 4017f18:	1027883a 	mov	r19,r2
 4017f1c:	10c4b03a 	or	r2,r2,r3
 4017f20:	1829883a 	mov	r20,r3
 4017f24:	103fef1e 	bne	r2,zero,4017ee4 <__alt_mem_onchip_memory2_0+0xfc012d24>
 4017f28:	d9001e17 	ldw	r4,120(sp)
 4017f2c:	e011883a 	mov	r8,fp
 4017f30:	25e9c83a 	sub	r20,r4,r23
 4017f34:	003eec06 	br	4017ae8 <__alt_mem_onchip_memory2_0+0xfc012928>
 4017f38:	d8802307 	ldb	r2,140(sp)
 4017f3c:	1002361e 	bne	r2,zero,4018818 <___vfiprintf_internal_r+0x113c>
 4017f40:	00c00804 	movi	r3,32
 4017f44:	d8c02305 	stb	r3,140(sp)
 4017f48:	04c00044 	movi	r19,1
 4017f4c:	b0c00007 	ldb	r3,0(r22)
 4017f50:	003e3f06 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 4017f54:	8c400054 	ori	r17,r17,1
 4017f58:	b0c00007 	ldb	r3,0(r22)
 4017f5c:	003e3c06 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 4017f60:	8c402014 	ori	r17,r17,128
 4017f64:	b0c00007 	ldb	r3,0(r22)
 4017f68:	003e3906 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 4017f6c:	dc002715 	stw	r16,156(sp)
 4017f70:	d8002515 	stw	zero,148(sp)
 4017f74:	1f3ff404 	addi	fp,r3,-48
 4017f78:	0009883a 	mov	r4,zero
 4017f7c:	b021883a 	mov	r16,r22
 4017f80:	01400284 	movi	r5,10
 4017f84:	400dcd40 	call	400dcd4 <__mulsi3>
 4017f88:	80c00007 	ldb	r3,0(r16)
 4017f8c:	e089883a 	add	r4,fp,r2
 4017f90:	b5800044 	addi	r22,r22,1
 4017f94:	1f3ff404 	addi	fp,r3,-48
 4017f98:	b021883a 	mov	r16,r22
 4017f9c:	af3ff82e 	bgeu	r21,fp,4017f80 <__alt_mem_onchip_memory2_0+0xfc012dc0>
 4017fa0:	d9002515 	stw	r4,148(sp)
 4017fa4:	dc002717 	ldw	r16,156(sp)
 4017fa8:	003e2a06 	br	4017854 <__alt_mem_onchip_memory2_0+0xfc012694>
 4017fac:	9cc03fcc 	andi	r19,r19,255
 4017fb0:	b811883a 	mov	r8,r23
 4017fb4:	9802e91e 	bne	r19,zero,4018b5c <___vfiprintf_internal_r+0x1480>
 4017fb8:	8c400414 	ori	r17,r17,16
 4017fbc:	8880080c 	andi	r2,r17,32
 4017fc0:	103fb81e 	bne	r2,zero,4017ea4 <__alt_mem_onchip_memory2_0+0xfc012ce4>
 4017fc4:	8880040c 	andi	r2,r17,16
 4017fc8:	10022e26 	beq	r2,zero,4018884 <___vfiprintf_internal_r+0x11a8>
 4017fcc:	d9402217 	ldw	r5,136(sp)
 4017fd0:	2cc00017 	ldw	r19,0(r5)
 4017fd4:	29400104 	addi	r5,r5,4
 4017fd8:	d9402215 	stw	r5,136(sp)
 4017fdc:	9829d7fa 	srai	r20,r19,31
 4017fe0:	a005883a 	mov	r2,r20
 4017fe4:	003fb506 	br	4017ebc <__alt_mem_onchip_memory2_0+0xfc012cfc>
 4017fe8:	9cc03fcc 	andi	r19,r19,255
 4017fec:	b811883a 	mov	r8,r23
 4017ff0:	9802fa1e 	bne	r19,zero,4018bdc <___vfiprintf_internal_r+0x1500>
 4017ff4:	8c400414 	ori	r17,r17,16
 4017ff8:	8880080c 	andi	r2,r17,32
 4017ffc:	103f661e 	bne	r2,zero,4017d98 <__alt_mem_onchip_memory2_0+0xfc012bd8>
 4018000:	8880040c 	andi	r2,r17,16
 4018004:	10020626 	beq	r2,zero,4018820 <___vfiprintf_internal_r+0x1144>
 4018008:	d9402217 	ldw	r5,136(sp)
 401800c:	d8001d85 	stb	zero,118(sp)
 4018010:	0029883a 	mov	r20,zero
 4018014:	28800104 	addi	r2,r5,4
 4018018:	2cc00017 	ldw	r19,0(r5)
 401801c:	80020816 	blt	r16,zero,4018840 <___vfiprintf_internal_r+0x1164>
 4018020:	00ffdfc4 	movi	r3,-129
 4018024:	d8802215 	stw	r2,136(sp)
 4018028:	88e2703a 	and	r17,r17,r3
 401802c:	983f651e 	bne	r19,zero,4017dc4 <__alt_mem_onchip_memory2_0+0xfc012c04>
 4018030:	002b883a 	mov	r21,zero
 4018034:	8002cf26 	beq	r16,zero,4018b74 <___vfiprintf_internal_r+0x1498>
 4018038:	0027883a 	mov	r19,zero
 401803c:	0029883a 	mov	r20,zero
 4018040:	003f6106 	br	4017dc8 <__alt_mem_onchip_memory2_0+0xfc012c08>
 4018044:	9cc03fcc 	andi	r19,r19,255
 4018048:	b811883a 	mov	r8,r23
 401804c:	9802e01e 	bne	r19,zero,4018bd0 <___vfiprintf_internal_r+0x14f4>
 4018050:	8c400414 	ori	r17,r17,16
 4018054:	8880080c 	andi	r2,r17,32
 4018058:	1000641e 	bne	r2,zero,40181ec <___vfiprintf_internal_r+0xb10>
 401805c:	8880040c 	andi	r2,r17,16
 4018060:	1001c81e 	bne	r2,zero,4018784 <___vfiprintf_internal_r+0x10a8>
 4018064:	8880100c 	andi	r2,r17,64
 4018068:	d8001d85 	stb	zero,118(sp)
 401806c:	1002281e 	bne	r2,zero,4018910 <___vfiprintf_internal_r+0x1234>
 4018070:	d9002217 	ldw	r4,136(sp)
 4018074:	0029883a 	mov	r20,zero
 4018078:	20800104 	addi	r2,r4,4
 401807c:	24c00017 	ldw	r19,0(r4)
 4018080:	8001c60e 	bge	r16,zero,401879c <___vfiprintf_internal_r+0x10c0>
 4018084:	d8802215 	stw	r2,136(sp)
 4018088:	002b883a 	mov	r21,zero
 401808c:	9d04b03a 	or	r2,r19,r20
 4018090:	103f911e 	bne	r2,zero,4017ed8 <__alt_mem_onchip_memory2_0+0xfc012d18>
 4018094:	00800044 	movi	r2,1
 4018098:	10803fcc 	andi	r2,r2,255
 401809c:	00c00044 	movi	r3,1
 40180a0:	10c05f26 	beq	r2,r3,4018220 <___vfiprintf_internal_r+0xb44>
 40180a4:	00c00084 	movi	r3,2
 40180a8:	10ffe31e 	bne	r2,r3,4018038 <__alt_mem_onchip_memory2_0+0xfc012e78>
 40180ac:	0027883a 	mov	r19,zero
 40180b0:	0029883a 	mov	r20,zero
 40180b4:	00015106 	br	40185fc <___vfiprintf_internal_r+0xf20>
 40180b8:	9cc03fcc 	andi	r19,r19,255
 40180bc:	b811883a 	mov	r8,r23
 40180c0:	9802c01e 	bne	r19,zero,4018bc4 <___vfiprintf_internal_r+0x14e8>
 40180c4:	014100b4 	movhi	r5,1026
 40180c8:	29779504 	addi	r5,r5,-8620
 40180cc:	d9402615 	stw	r5,152(sp)
 40180d0:	8880080c 	andi	r2,r17,32
 40180d4:	103f541e 	bne	r2,zero,4017e28 <__alt_mem_onchip_memory2_0+0xfc012c68>
 40180d8:	8880040c 	andi	r2,r17,16
 40180dc:	1001f226 	beq	r2,zero,40188a8 <___vfiprintf_internal_r+0x11cc>
 40180e0:	d9402217 	ldw	r5,136(sp)
 40180e4:	0029883a 	mov	r20,zero
 40180e8:	2cc00017 	ldw	r19,0(r5)
 40180ec:	29400104 	addi	r5,r5,4
 40180f0:	d9402215 	stw	r5,136(sp)
 40180f4:	003f5106 	br	4017e3c <__alt_mem_onchip_memory2_0+0xfc012c7c>
 40180f8:	d8c02217 	ldw	r3,136(sp)
 40180fc:	b811883a 	mov	r8,r23
 4018100:	d8001d85 	stb	zero,118(sp)
 4018104:	1dc00017 	ldw	r23,0(r3)
 4018108:	1f000104 	addi	fp,r3,4
 401810c:	b8025926 	beq	r23,zero,4018a74 <___vfiprintf_internal_r+0x1398>
 4018110:	80023316 	blt	r16,zero,40189e0 <___vfiprintf_internal_r+0x1304>
 4018114:	800d883a 	mov	r6,r16
 4018118:	000b883a 	mov	r5,zero
 401811c:	b809883a 	mov	r4,r23
 4018120:	da002a15 	stw	r8,168(sp)
 4018124:	40159640 	call	4015964 <memchr>
 4018128:	da002a17 	ldw	r8,168(sp)
 401812c:	10026826 	beq	r2,zero,4018ad0 <___vfiprintf_internal_r+0x13f4>
 4018130:	15e9c83a 	sub	r20,r2,r23
 4018134:	dd401d83 	ldbu	r21,118(sp)
 4018138:	df002215 	stw	fp,136(sp)
 401813c:	0021883a 	mov	r16,zero
 4018140:	003e6906 	br	4017ae8 <__alt_mem_onchip_memory2_0+0xfc012928>
 4018144:	9cc03fcc 	andi	r19,r19,255
 4018148:	b811883a 	mov	r8,r23
 401814c:	983fc126 	beq	r19,zero,4018054 <__alt_mem_onchip_memory2_0+0xfc012e94>
 4018150:	d8c02303 	ldbu	r3,140(sp)
 4018154:	d8c01d85 	stb	r3,118(sp)
 4018158:	003fbe06 	br	4018054 <__alt_mem_onchip_memory2_0+0xfc012e94>
 401815c:	d9002217 	ldw	r4,136(sp)
 4018160:	d9402217 	ldw	r5,136(sp)
 4018164:	21000017 	ldw	r4,0(r4)
 4018168:	28800104 	addi	r2,r5,4
 401816c:	d9002515 	stw	r4,148(sp)
 4018170:	203e3d16 	blt	r4,zero,4017a68 <__alt_mem_onchip_memory2_0+0xfc0128a8>
 4018174:	d8802215 	stw	r2,136(sp)
 4018178:	b0c00007 	ldb	r3,0(r22)
 401817c:	003db406 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 4018180:	00c00ac4 	movi	r3,43
 4018184:	d8c02305 	stb	r3,140(sp)
 4018188:	04c00044 	movi	r19,1
 401818c:	b0c00007 	ldb	r3,0(r22)
 4018190:	003daf06 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 4018194:	b0c00007 	ldb	r3,0(r22)
 4018198:	01000a84 	movi	r4,42
 401819c:	b4000044 	addi	r16,r22,1
 40181a0:	19025e26 	beq	r3,r4,4018b1c <___vfiprintf_internal_r+0x1440>
 40181a4:	1f3ff404 	addi	fp,r3,-48
 40181a8:	0009883a 	mov	r4,zero
 40181ac:	af025236 	bltu	r21,fp,4018af8 <___vfiprintf_internal_r+0x141c>
 40181b0:	01400284 	movi	r5,10
 40181b4:	400dcd40 	call	400dcd4 <__mulsi3>
 40181b8:	80c00007 	ldb	r3,0(r16)
 40181bc:	1709883a 	add	r4,r2,fp
 40181c0:	85800044 	addi	r22,r16,1
 40181c4:	1f3ff404 	addi	fp,r3,-48
 40181c8:	b021883a 	mov	r16,r22
 40181cc:	af3ff82e 	bgeu	r21,fp,40181b0 <__alt_mem_onchip_memory2_0+0xfc012ff0>
 40181d0:	2021883a 	mov	r16,r4
 40181d4:	203d9f0e 	bge	r4,zero,4017854 <__alt_mem_onchip_memory2_0+0xfc012694>
 40181d8:	043fffc4 	movi	r16,-1
 40181dc:	003d9d06 	br	4017854 <__alt_mem_onchip_memory2_0+0xfc012694>
 40181e0:	8c401014 	ori	r17,r17,64
 40181e4:	b0c00007 	ldb	r3,0(r22)
 40181e8:	003d9906 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 40181ec:	d9002217 	ldw	r4,136(sp)
 40181f0:	d8001d85 	stb	zero,118(sp)
 40181f4:	20c00204 	addi	r3,r4,8
 40181f8:	24c00017 	ldw	r19,0(r4)
 40181fc:	25000117 	ldw	r20,4(r4)
 4018200:	8001e716 	blt	r16,zero,40189a0 <___vfiprintf_internal_r+0x12c4>
 4018204:	013fdfc4 	movi	r4,-129
 4018208:	9d04b03a 	or	r2,r19,r20
 401820c:	d8c02215 	stw	r3,136(sp)
 4018210:	8922703a 	and	r17,r17,r4
 4018214:	002b883a 	mov	r21,zero
 4018218:	103f2f1e 	bne	r2,zero,4017ed8 <__alt_mem_onchip_memory2_0+0xfc012d18>
 401821c:	803e2f26 	beq	r16,zero,4017adc <__alt_mem_onchip_memory2_0+0xfc01291c>
 4018220:	0027883a 	mov	r19,zero
 4018224:	9cc00c04 	addi	r19,r19,48
 4018228:	dcc019c5 	stb	r19,103(sp)
 401822c:	dd002817 	ldw	r20,160(sp)
 4018230:	ddc019c4 	addi	r23,sp,103
 4018234:	003e2c06 	br	4017ae8 <__alt_mem_onchip_memory2_0+0xfc012928>
 4018238:	9cc03fcc 	andi	r19,r19,255
 401823c:	b811883a 	mov	r8,r23
 4018240:	9802571e 	bne	r19,zero,4018ba0 <___vfiprintf_internal_r+0x14c4>
 4018244:	18005726 	beq	r3,zero,40183a4 <___vfiprintf_internal_r+0xcc8>
 4018248:	04c00044 	movi	r19,1
 401824c:	d8c01005 	stb	r3,64(sp)
 4018250:	d8001d85 	stb	zero,118(sp)
 4018254:	9829883a 	mov	r20,r19
 4018258:	ddc01004 	addi	r23,sp,64
 401825c:	003f0a06 	br	4017e88 <__alt_mem_onchip_memory2_0+0xfc012cc8>
 4018260:	d9402017 	ldw	r5,128(sp)
 4018264:	d9002117 	ldw	r4,132(sp)
 4018268:	d9801a04 	addi	r6,sp,104
 401826c:	da802a15 	stw	r10,168(sp)
 4018270:	40175c80 	call	40175c8 <__sprint_r.part.0>
 4018274:	da802a17 	ldw	r10,168(sp)
 4018278:	1000501e 	bne	r2,zero,40183bc <___vfiprintf_internal_r+0xce0>
 401827c:	d9801b17 	ldw	r6,108(sp)
 4018280:	d8801c17 	ldw	r2,112(sp)
 4018284:	d811883a 	mov	r8,sp
 4018288:	31000044 	addi	r4,r6,1
 401828c:	003e3606 	br	4017b68 <__alt_mem_onchip_memory2_0+0xfc0129a8>
 4018290:	d9001b17 	ldw	r4,108(sp)
 4018294:	d8801c17 	ldw	r2,112(sp)
 4018298:	21400044 	addi	r5,r4,1
 401829c:	d9801d87 	ldb	r6,118(sp)
 40182a0:	303e5226 	beq	r6,zero,4017bec <__alt_mem_onchip_memory2_0+0xfc012a2c>
 40182a4:	01800044 	movi	r6,1
 40182a8:	d9001d84 	addi	r4,sp,118
 40182ac:	1185883a 	add	r2,r2,r6
 40182b0:	41000015 	stw	r4,0(r8)
 40182b4:	41800115 	stw	r6,4(r8)
 40182b8:	d8801c15 	stw	r2,112(sp)
 40182bc:	d9401b15 	stw	r5,108(sp)
 40182c0:	010001c4 	movi	r4,7
 40182c4:	2140b00e 	bge	r4,r5,4018588 <___vfiprintf_internal_r+0xeac>
 40182c8:	1000f61e 	bne	r2,zero,40186a4 <___vfiprintf_internal_r+0xfc8>
 40182cc:	3800b31e 	bne	r7,zero,401859c <___vfiprintf_internal_r+0xec0>
 40182d0:	0009883a 	mov	r4,zero
 40182d4:	300b883a 	mov	r5,r6
 40182d8:	d811883a 	mov	r8,sp
 40182dc:	01802004 	movi	r6,128
 40182e0:	19be5226 	beq	r3,r6,4017c2c <__alt_mem_onchip_memory2_0+0xfc012a6c>
 40182e4:	8521c83a 	sub	r16,r16,r20
 40182e8:	043e790e 	bge	zero,r16,4017cd0 <__alt_mem_onchip_memory2_0+0xfc012b10>
 40182ec:	05400404 	movi	r21,16
 40182f0:	ac01b00e 	bge	r21,r16,40189b4 <___vfiprintf_internal_r+0x12d8>
 40182f4:	014100b4 	movhi	r5,1026
 40182f8:	2977fa04 	addi	r5,r5,-8216
 40182fc:	d9402315 	stw	r5,140(sp)
 4018300:	070001c4 	movi	fp,7
 4018304:	00000506 	br	401831c <___vfiprintf_internal_r+0xc40>
 4018308:	21400084 	addi	r5,r4,2
 401830c:	42000204 	addi	r8,r8,8
 4018310:	1809883a 	mov	r4,r3
 4018314:	843ffc04 	addi	r16,r16,-16
 4018318:	ac000d0e 	bge	r21,r16,4018350 <___vfiprintf_internal_r+0xc74>
 401831c:	10800404 	addi	r2,r2,16
 4018320:	20c00044 	addi	r3,r4,1
 4018324:	44800015 	stw	r18,0(r8)
 4018328:	45400115 	stw	r21,4(r8)
 401832c:	d8801c15 	stw	r2,112(sp)
 4018330:	d8c01b15 	stw	r3,108(sp)
 4018334:	e0fff40e 	bge	fp,r3,4018308 <__alt_mem_onchip_memory2_0+0xfc013148>
 4018338:	1000101e 	bne	r2,zero,401837c <___vfiprintf_internal_r+0xca0>
 401833c:	843ffc04 	addi	r16,r16,-16
 4018340:	01400044 	movi	r5,1
 4018344:	0009883a 	mov	r4,zero
 4018348:	d811883a 	mov	r8,sp
 401834c:	ac3ff316 	blt	r21,r16,401831c <__alt_mem_onchip_memory2_0+0xfc01315c>
 4018350:	d8c02317 	ldw	r3,140(sp)
 4018354:	1405883a 	add	r2,r2,r16
 4018358:	44000115 	stw	r16,4(r8)
 401835c:	40c00015 	stw	r3,0(r8)
 4018360:	d8801c15 	stw	r2,112(sp)
 4018364:	d9401b15 	stw	r5,108(sp)
 4018368:	00c001c4 	movi	r3,7
 401836c:	19401916 	blt	r3,r5,40183d4 <___vfiprintf_internal_r+0xcf8>
 4018370:	42000204 	addi	r8,r8,8
 4018374:	29400044 	addi	r5,r5,1
 4018378:	003e5506 	br	4017cd0 <__alt_mem_onchip_memory2_0+0xfc012b10>
 401837c:	d9402017 	ldw	r5,128(sp)
 4018380:	d9002117 	ldw	r4,132(sp)
 4018384:	d9801a04 	addi	r6,sp,104
 4018388:	40175c80 	call	40175c8 <__sprint_r.part.0>
 401838c:	10000b1e 	bne	r2,zero,40183bc <___vfiprintf_internal_r+0xce0>
 4018390:	d9001b17 	ldw	r4,108(sp)
 4018394:	d8801c17 	ldw	r2,112(sp)
 4018398:	d811883a 	mov	r8,sp
 401839c:	21400044 	addi	r5,r4,1
 40183a0:	003fdc06 	br	4018314 <__alt_mem_onchip_memory2_0+0xfc013154>
 40183a4:	d8801c17 	ldw	r2,112(sp)
 40183a8:	10000426 	beq	r2,zero,40183bc <___vfiprintf_internal_r+0xce0>
 40183ac:	d9402017 	ldw	r5,128(sp)
 40183b0:	d9002117 	ldw	r4,132(sp)
 40183b4:	d9801a04 	addi	r6,sp,104
 40183b8:	40175c80 	call	40175c8 <__sprint_r.part.0>
 40183bc:	d9402017 	ldw	r5,128(sp)
 40183c0:	2880030b 	ldhu	r2,12(r5)
 40183c4:	1080100c 	andi	r2,r2,64
 40183c8:	10014d1e 	bne	r2,zero,4018900 <___vfiprintf_internal_r+0x1224>
 40183cc:	d8802417 	ldw	r2,144(sp)
 40183d0:	003d9706 	br	4017a30 <__alt_mem_onchip_memory2_0+0xfc012870>
 40183d4:	1000d21e 	bne	r2,zero,4018720 <___vfiprintf_internal_r+0x1044>
 40183d8:	00c00044 	movi	r3,1
 40183dc:	a005883a 	mov	r2,r20
 40183e0:	ddc00015 	stw	r23,0(sp)
 40183e4:	dd000115 	stw	r20,4(sp)
 40183e8:	dd001c15 	stw	r20,112(sp)
 40183ec:	d8c01b15 	stw	r3,108(sp)
 40183f0:	d811883a 	mov	r8,sp
 40183f4:	42000204 	addi	r8,r8,8
 40183f8:	8c40010c 	andi	r17,r17,4
 40183fc:	88004026 	beq	r17,zero,4018500 <___vfiprintf_internal_r+0xe24>
 4018400:	d9002517 	ldw	r4,148(sp)
 4018404:	24e3c83a 	sub	r17,r4,r19
 4018408:	04403d0e 	bge	zero,r17,4018500 <___vfiprintf_internal_r+0xe24>
 401840c:	04000404 	movi	r16,16
 4018410:	8441a90e 	bge	r16,r17,4018ab8 <___vfiprintf_internal_r+0x13dc>
 4018414:	00c100b4 	movhi	r3,1026
 4018418:	18f7fe04 	addi	r3,r3,-8200
 401841c:	d9001b17 	ldw	r4,108(sp)
 4018420:	d8c02315 	stw	r3,140(sp)
 4018424:	050001c4 	movi	r20,7
 4018428:	dd402117 	ldw	r21,132(sp)
 401842c:	ddc02017 	ldw	r23,128(sp)
 4018430:	00000506 	br	4018448 <___vfiprintf_internal_r+0xd6c>
 4018434:	21400084 	addi	r5,r4,2
 4018438:	42000204 	addi	r8,r8,8
 401843c:	1809883a 	mov	r4,r3
 4018440:	8c7ffc04 	addi	r17,r17,-16
 4018444:	84400f0e 	bge	r16,r17,4018484 <___vfiprintf_internal_r+0xda8>
 4018448:	014100b4 	movhi	r5,1026
 401844c:	10800404 	addi	r2,r2,16
 4018450:	20c00044 	addi	r3,r4,1
 4018454:	2977fe04 	addi	r5,r5,-8200
 4018458:	41400015 	stw	r5,0(r8)
 401845c:	44000115 	stw	r16,4(r8)
 4018460:	d8801c15 	stw	r2,112(sp)
 4018464:	d8c01b15 	stw	r3,108(sp)
 4018468:	a0fff20e 	bge	r20,r3,4018434 <__alt_mem_onchip_memory2_0+0xfc013274>
 401846c:	1000141e 	bne	r2,zero,40184c0 <___vfiprintf_internal_r+0xde4>
 4018470:	8c7ffc04 	addi	r17,r17,-16
 4018474:	01400044 	movi	r5,1
 4018478:	0009883a 	mov	r4,zero
 401847c:	d811883a 	mov	r8,sp
 4018480:	847ff116 	blt	r16,r17,4018448 <__alt_mem_onchip_memory2_0+0xfc013288>
 4018484:	d8c02317 	ldw	r3,140(sp)
 4018488:	1445883a 	add	r2,r2,r17
 401848c:	44400115 	stw	r17,4(r8)
 4018490:	40c00015 	stw	r3,0(r8)
 4018494:	d8801c15 	stw	r2,112(sp)
 4018498:	d9401b15 	stw	r5,108(sp)
 401849c:	00c001c4 	movi	r3,7
 40184a0:	1940170e 	bge	r3,r5,4018500 <___vfiprintf_internal_r+0xe24>
 40184a4:	1000101e 	bne	r2,zero,40184e8 <___vfiprintf_internal_r+0xe0c>
 40184a8:	d8802517 	ldw	r2,148(sp)
 40184ac:	14c11616 	blt	r2,r19,4018908 <___vfiprintf_internal_r+0x122c>
 40184b0:	d9002417 	ldw	r4,144(sp)
 40184b4:	2089883a 	add	r4,r4,r2
 40184b8:	d9002415 	stw	r4,144(sp)
 40184bc:	003e1806 	br	4017d20 <__alt_mem_onchip_memory2_0+0xfc012b60>
 40184c0:	d9801a04 	addi	r6,sp,104
 40184c4:	b80b883a 	mov	r5,r23
 40184c8:	a809883a 	mov	r4,r21
 40184cc:	40175c80 	call	40175c8 <__sprint_r.part.0>
 40184d0:	103fba1e 	bne	r2,zero,40183bc <__alt_mem_onchip_memory2_0+0xfc0131fc>
 40184d4:	d9001b17 	ldw	r4,108(sp)
 40184d8:	d8801c17 	ldw	r2,112(sp)
 40184dc:	d811883a 	mov	r8,sp
 40184e0:	21400044 	addi	r5,r4,1
 40184e4:	003fd606 	br	4018440 <__alt_mem_onchip_memory2_0+0xfc013280>
 40184e8:	d9402017 	ldw	r5,128(sp)
 40184ec:	d9002117 	ldw	r4,132(sp)
 40184f0:	d9801a04 	addi	r6,sp,104
 40184f4:	40175c80 	call	40175c8 <__sprint_r.part.0>
 40184f8:	103fb01e 	bne	r2,zero,40183bc <__alt_mem_onchip_memory2_0+0xfc0131fc>
 40184fc:	d8801c17 	ldw	r2,112(sp)
 4018500:	d8c02517 	ldw	r3,148(sp)
 4018504:	1cc0010e 	bge	r3,r19,401850c <___vfiprintf_internal_r+0xe30>
 4018508:	9807883a 	mov	r3,r19
 401850c:	d9002417 	ldw	r4,144(sp)
 4018510:	20c9883a 	add	r4,r4,r3
 4018514:	d9002415 	stw	r4,144(sp)
 4018518:	103e0126 	beq	r2,zero,4017d20 <__alt_mem_onchip_memory2_0+0xfc012b60>
 401851c:	d9402017 	ldw	r5,128(sp)
 4018520:	d9002117 	ldw	r4,132(sp)
 4018524:	d9801a04 	addi	r6,sp,104
 4018528:	40175c80 	call	40175c8 <__sprint_r.part.0>
 401852c:	103dfc26 	beq	r2,zero,4017d20 <__alt_mem_onchip_memory2_0+0xfc012b60>
 4018530:	003fa206 	br	40183bc <__alt_mem_onchip_memory2_0+0xfc0131fc>
 4018534:	d9402017 	ldw	r5,128(sp)
 4018538:	d9002117 	ldw	r4,132(sp)
 401853c:	d9801a04 	addi	r6,sp,104
 4018540:	d9c02b15 	stw	r7,172(sp)
 4018544:	40175c80 	call	40175c8 <__sprint_r.part.0>
 4018548:	d9c02b17 	ldw	r7,172(sp)
 401854c:	103f9b1e 	bne	r2,zero,40183bc <__alt_mem_onchip_memory2_0+0xfc0131fc>
 4018550:	d9001b17 	ldw	r4,108(sp)
 4018554:	d8801c17 	ldw	r2,112(sp)
 4018558:	d811883a 	mov	r8,sp
 401855c:	21800044 	addi	r6,r4,1
 4018560:	003dbf06 	br	4017c60 <__alt_mem_onchip_memory2_0+0xfc012aa0>
 4018564:	1000d81e 	bne	r2,zero,40188c8 <___vfiprintf_internal_r+0x11ec>
 4018568:	d9001d87 	ldb	r4,118(sp)
 401856c:	20000a26 	beq	r4,zero,4018598 <___vfiprintf_internal_r+0xebc>
 4018570:	00800044 	movi	r2,1
 4018574:	d9001d84 	addi	r4,sp,118
 4018578:	100b883a 	mov	r5,r2
 401857c:	d9000015 	stw	r4,0(sp)
 4018580:	d8800115 	stw	r2,4(sp)
 4018584:	d811883a 	mov	r8,sp
 4018588:	2809883a 	mov	r4,r5
 401858c:	42000204 	addi	r8,r8,8
 4018590:	29400044 	addi	r5,r5,1
 4018594:	003d9506 	br	4017bec <__alt_mem_onchip_memory2_0+0xfc012a2c>
 4018598:	3800fd26 	beq	r7,zero,4018990 <___vfiprintf_internal_r+0x12b4>
 401859c:	00800084 	movi	r2,2
 40185a0:	d9001d04 	addi	r4,sp,116
 40185a4:	d9000015 	stw	r4,0(sp)
 40185a8:	d8800115 	stw	r2,4(sp)
 40185ac:	01400044 	movi	r5,1
 40185b0:	d811883a 	mov	r8,sp
 40185b4:	2809883a 	mov	r4,r5
 40185b8:	42000204 	addi	r8,r8,8
 40185bc:	29400044 	addi	r5,r5,1
 40185c0:	003f4606 	br	40182dc <__alt_mem_onchip_memory2_0+0xfc01311c>
 40185c4:	d8802517 	ldw	r2,148(sp)
 40185c8:	14c0010e 	bge	r2,r19,40185d0 <___vfiprintf_internal_r+0xef4>
 40185cc:	9805883a 	mov	r2,r19
 40185d0:	d9402417 	ldw	r5,144(sp)
 40185d4:	288b883a 	add	r5,r5,r2
 40185d8:	d9402415 	stw	r5,144(sp)
 40185dc:	003dd006 	br	4017d20 <__alt_mem_onchip_memory2_0+0xfc012b60>
 40185e0:	d8001d85 	stb	zero,118(sp)
 40185e4:	80005d16 	blt	r16,zero,401875c <___vfiprintf_internal_r+0x1080>
 40185e8:	00ffdfc4 	movi	r3,-129
 40185ec:	9d04b03a 	or	r2,r19,r20
 40185f0:	88e2703a 	and	r17,r17,r3
 40185f4:	103d3726 	beq	r2,zero,4017ad4 <__alt_mem_onchip_memory2_0+0xfc012914>
 40185f8:	002b883a 	mov	r21,zero
 40185fc:	d9002617 	ldw	r4,152(sp)
 4018600:	ddc01a04 	addi	r23,sp,104
 4018604:	988003cc 	andi	r2,r19,15
 4018608:	a006973a 	slli	r3,r20,28
 401860c:	2085883a 	add	r2,r4,r2
 4018610:	9826d13a 	srli	r19,r19,4
 4018614:	10800003 	ldbu	r2,0(r2)
 4018618:	a028d13a 	srli	r20,r20,4
 401861c:	bdffffc4 	addi	r23,r23,-1
 4018620:	1ce6b03a 	or	r19,r3,r19
 4018624:	b8800005 	stb	r2,0(r23)
 4018628:	9d04b03a 	or	r2,r19,r20
 401862c:	103ff51e 	bne	r2,zero,4018604 <__alt_mem_onchip_memory2_0+0xfc013444>
 4018630:	d8801e17 	ldw	r2,120(sp)
 4018634:	15e9c83a 	sub	r20,r2,r23
 4018638:	003d2b06 	br	4017ae8 <__alt_mem_onchip_memory2_0+0xfc012928>
 401863c:	d9402017 	ldw	r5,128(sp)
 4018640:	d9002117 	ldw	r4,132(sp)
 4018644:	d9801a04 	addi	r6,sp,104
 4018648:	40175c80 	call	40175c8 <__sprint_r.part.0>
 401864c:	103f5b1e 	bne	r2,zero,40183bc <__alt_mem_onchip_memory2_0+0xfc0131fc>
 4018650:	d8801c17 	ldw	r2,112(sp)
 4018654:	d811883a 	mov	r8,sp
 4018658:	003f6706 	br	40183f8 <__alt_mem_onchip_memory2_0+0xfc013238>
 401865c:	d9402017 	ldw	r5,128(sp)
 4018660:	d9002117 	ldw	r4,132(sp)
 4018664:	d9801a04 	addi	r6,sp,104
 4018668:	40175c80 	call	40175c8 <__sprint_r.part.0>
 401866c:	103f531e 	bne	r2,zero,40183bc <__alt_mem_onchip_memory2_0+0xfc0131fc>
 4018670:	d811883a 	mov	r8,sp
 4018674:	003cd906 	br	40179dc <__alt_mem_onchip_memory2_0+0xfc01281c>
 4018678:	10803fcc 	andi	r2,r2,255
 401867c:	1080201c 	xori	r2,r2,128
 4018680:	10bfe004 	addi	r2,r2,-128
 4018684:	00c00c04 	movi	r3,48
 4018688:	10ffe926 	beq	r2,r3,4018630 <__alt_mem_onchip_memory2_0+0xfc013470>
 401868c:	b8ffffc5 	stb	r3,-1(r23)
 4018690:	d8c01e17 	ldw	r3,120(sp)
 4018694:	b8bfffc4 	addi	r2,r23,-1
 4018698:	102f883a 	mov	r23,r2
 401869c:	18a9c83a 	sub	r20,r3,r2
 40186a0:	003d1106 	br	4017ae8 <__alt_mem_onchip_memory2_0+0xfc012928>
 40186a4:	d9402017 	ldw	r5,128(sp)
 40186a8:	d9002117 	ldw	r4,132(sp)
 40186ac:	d9801a04 	addi	r6,sp,104
 40186b0:	d8c02a15 	stw	r3,168(sp)
 40186b4:	d9c02b15 	stw	r7,172(sp)
 40186b8:	40175c80 	call	40175c8 <__sprint_r.part.0>
 40186bc:	d8c02a17 	ldw	r3,168(sp)
 40186c0:	d9c02b17 	ldw	r7,172(sp)
 40186c4:	103f3d1e 	bne	r2,zero,40183bc <__alt_mem_onchip_memory2_0+0xfc0131fc>
 40186c8:	d9001b17 	ldw	r4,108(sp)
 40186cc:	d8801c17 	ldw	r2,112(sp)
 40186d0:	d811883a 	mov	r8,sp
 40186d4:	21400044 	addi	r5,r4,1
 40186d8:	003d4406 	br	4017bec <__alt_mem_onchip_memory2_0+0xfc012a2c>
 40186dc:	d9402017 	ldw	r5,128(sp)
 40186e0:	d9002117 	ldw	r4,132(sp)
 40186e4:	d9801a04 	addi	r6,sp,104
 40186e8:	d8c02a15 	stw	r3,168(sp)
 40186ec:	40175c80 	call	40175c8 <__sprint_r.part.0>
 40186f0:	d8c02a17 	ldw	r3,168(sp)
 40186f4:	103f311e 	bne	r2,zero,40183bc <__alt_mem_onchip_memory2_0+0xfc0131fc>
 40186f8:	d9001b17 	ldw	r4,108(sp)
 40186fc:	d8801c17 	ldw	r2,112(sp)
 4018700:	d811883a 	mov	r8,sp
 4018704:	21400044 	addi	r5,r4,1
 4018708:	003ef406 	br	40182dc <__alt_mem_onchip_memory2_0+0xfc01311c>
 401870c:	1000bd1e 	bne	r2,zero,4018a04 <___vfiprintf_internal_r+0x1328>
 4018710:	01400044 	movi	r5,1
 4018714:	0009883a 	mov	r4,zero
 4018718:	d811883a 	mov	r8,sp
 401871c:	003ef106 	br	40182e4 <__alt_mem_onchip_memory2_0+0xfc013124>
 4018720:	d9402017 	ldw	r5,128(sp)
 4018724:	d9002117 	ldw	r4,132(sp)
 4018728:	d9801a04 	addi	r6,sp,104
 401872c:	40175c80 	call	40175c8 <__sprint_r.part.0>
 4018730:	103f221e 	bne	r2,zero,40183bc <__alt_mem_onchip_memory2_0+0xfc0131fc>
 4018734:	d9401b17 	ldw	r5,108(sp)
 4018738:	d8801c17 	ldw	r2,112(sp)
 401873c:	d811883a 	mov	r8,sp
 4018740:	29400044 	addi	r5,r5,1
 4018744:	003d6206 	br	4017cd0 <__alt_mem_onchip_memory2_0+0xfc012b10>
 4018748:	014100b4 	movhi	r5,1026
 401874c:	29779a04 	addi	r5,r5,-8600
 4018750:	d9402615 	stw	r5,152(sp)
 4018754:	d8c02215 	stw	r3,136(sp)
 4018758:	1023883a 	mov	r17,r2
 401875c:	9d04b03a 	or	r2,r19,r20
 4018760:	103fa51e 	bne	r2,zero,40185f8 <__alt_mem_onchip_memory2_0+0xfc013438>
 4018764:	002b883a 	mov	r21,zero
 4018768:	00800084 	movi	r2,2
 401876c:	003e4a06 	br	4018098 <__alt_mem_onchip_memory2_0+0xfc012ed8>
 4018770:	014100b4 	movhi	r5,1026
 4018774:	29779a04 	addi	r5,r5,-8600
 4018778:	002b883a 	mov	r21,zero
 401877c:	d9402615 	stw	r5,152(sp)
 4018780:	003f9e06 	br	40185fc <__alt_mem_onchip_memory2_0+0xfc01343c>
 4018784:	d9402217 	ldw	r5,136(sp)
 4018788:	d8001d85 	stb	zero,118(sp)
 401878c:	0029883a 	mov	r20,zero
 4018790:	28800104 	addi	r2,r5,4
 4018794:	2cc00017 	ldw	r19,0(r5)
 4018798:	803e3a16 	blt	r16,zero,4018084 <__alt_mem_onchip_memory2_0+0xfc012ec4>
 401879c:	00ffdfc4 	movi	r3,-129
 40187a0:	d8802215 	stw	r2,136(sp)
 40187a4:	88e2703a 	and	r17,r17,r3
 40187a8:	002b883a 	mov	r21,zero
 40187ac:	983e9b26 	beq	r19,zero,401821c <__alt_mem_onchip_memory2_0+0xfc01305c>
 40187b0:	00800244 	movi	r2,9
 40187b4:	14fdc936 	bltu	r2,r19,4017edc <__alt_mem_onchip_memory2_0+0xfc012d1c>
 40187b8:	003e9a06 	br	4018224 <__alt_mem_onchip_memory2_0+0xfc013064>
 40187bc:	00800c04 	movi	r2,48
 40187c0:	d8c01d45 	stb	r3,117(sp)
 40187c4:	d8801d05 	stb	r2,116(sp)
 40187c8:	d8001d85 	stb	zero,118(sp)
 40187cc:	88c00094 	ori	r3,r17,2
 40187d0:	80009c16 	blt	r16,zero,4018a44 <___vfiprintf_internal_r+0x1368>
 40187d4:	00bfdfc4 	movi	r2,-129
 40187d8:	88a2703a 	and	r17,r17,r2
 40187dc:	8c400094 	ori	r17,r17,2
 40187e0:	002b883a 	mov	r21,zero
 40187e4:	003f8506 	br	40185fc <__alt_mem_onchip_memory2_0+0xfc01343c>
 40187e8:	b029883a 	mov	r20,r22
 40187ec:	003c0b06 	br	401781c <__alt_mem_onchip_memory2_0+0xfc01265c>
 40187f0:	04e7c83a 	sub	r19,zero,r19
 40187f4:	05400b44 	movi	r21,45
 40187f8:	9804c03a 	cmpne	r2,r19,zero
 40187fc:	0529c83a 	sub	r20,zero,r20
 4018800:	dd401d85 	stb	r21,118(sp)
 4018804:	a0a9c83a 	sub	r20,r20,r2
 4018808:	80009716 	blt	r16,zero,4018a68 <___vfiprintf_internal_r+0x138c>
 401880c:	00bfdfc4 	movi	r2,-129
 4018810:	88a2703a 	and	r17,r17,r2
 4018814:	003db006 	br	4017ed8 <__alt_mem_onchip_memory2_0+0xfc012d18>
 4018818:	b0c00007 	ldb	r3,0(r22)
 401881c:	003c0c06 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 4018820:	8880100c 	andi	r2,r17,64
 4018824:	d8001d85 	stb	zero,118(sp)
 4018828:	1000461e 	bne	r2,zero,4018944 <___vfiprintf_internal_r+0x1268>
 401882c:	d9002217 	ldw	r4,136(sp)
 4018830:	0029883a 	mov	r20,zero
 4018834:	20800104 	addi	r2,r4,4
 4018838:	24c00017 	ldw	r19,0(r4)
 401883c:	803df80e 	bge	r16,zero,4018020 <__alt_mem_onchip_memory2_0+0xfc012e60>
 4018840:	9d06b03a 	or	r3,r19,r20
 4018844:	d8802215 	stw	r2,136(sp)
 4018848:	183d5e1e 	bne	r3,zero,4017dc4 <__alt_mem_onchip_memory2_0+0xfc012c04>
 401884c:	002b883a 	mov	r21,zero
 4018850:	0005883a 	mov	r2,zero
 4018854:	003e1006 	br	4018098 <__alt_mem_onchip_memory2_0+0xfc012ed8>
 4018858:	8880040c 	andi	r2,r17,16
 401885c:	1000321e 	bne	r2,zero,4018928 <___vfiprintf_internal_r+0x124c>
 4018860:	8c40100c 	andi	r17,r17,64
 4018864:	88008d26 	beq	r17,zero,4018a9c <___vfiprintf_internal_r+0x13c0>
 4018868:	d9402217 	ldw	r5,136(sp)
 401886c:	d8c02417 	ldw	r3,144(sp)
 4018870:	28800017 	ldw	r2,0(r5)
 4018874:	29400104 	addi	r5,r5,4
 4018878:	d9402215 	stw	r5,136(sp)
 401887c:	10c0000d 	sth	r3,0(r2)
 4018880:	003bca06 	br	40177ac <__alt_mem_onchip_memory2_0+0xfc0125ec>
 4018884:	8880100c 	andi	r2,r17,64
 4018888:	10003a26 	beq	r2,zero,4018974 <___vfiprintf_internal_r+0x1298>
 401888c:	d8802217 	ldw	r2,136(sp)
 4018890:	14c0000f 	ldh	r19,0(r2)
 4018894:	10800104 	addi	r2,r2,4
 4018898:	d8802215 	stw	r2,136(sp)
 401889c:	9829d7fa 	srai	r20,r19,31
 40188a0:	a005883a 	mov	r2,r20
 40188a4:	003d8506 	br	4017ebc <__alt_mem_onchip_memory2_0+0xfc012cfc>
 40188a8:	8880100c 	andi	r2,r17,64
 40188ac:	10002b26 	beq	r2,zero,401895c <___vfiprintf_internal_r+0x1280>
 40188b0:	d8802217 	ldw	r2,136(sp)
 40188b4:	0029883a 	mov	r20,zero
 40188b8:	14c0000b 	ldhu	r19,0(r2)
 40188bc:	10800104 	addi	r2,r2,4
 40188c0:	d8802215 	stw	r2,136(sp)
 40188c4:	003d5d06 	br	4017e3c <__alt_mem_onchip_memory2_0+0xfc012c7c>
 40188c8:	d9402017 	ldw	r5,128(sp)
 40188cc:	d9002117 	ldw	r4,132(sp)
 40188d0:	d9801a04 	addi	r6,sp,104
 40188d4:	d8c02a15 	stw	r3,168(sp)
 40188d8:	d9c02b15 	stw	r7,172(sp)
 40188dc:	40175c80 	call	40175c8 <__sprint_r.part.0>
 40188e0:	d8c02a17 	ldw	r3,168(sp)
 40188e4:	d9c02b17 	ldw	r7,172(sp)
 40188e8:	103eb41e 	bne	r2,zero,40183bc <__alt_mem_onchip_memory2_0+0xfc0131fc>
 40188ec:	d9001b17 	ldw	r4,108(sp)
 40188f0:	d8801c17 	ldw	r2,112(sp)
 40188f4:	d811883a 	mov	r8,sp
 40188f8:	21400044 	addi	r5,r4,1
 40188fc:	003e6706 	br	401829c <__alt_mem_onchip_memory2_0+0xfc0130dc>
 4018900:	00bfffc4 	movi	r2,-1
 4018904:	003c4a06 	br	4017a30 <__alt_mem_onchip_memory2_0+0xfc012870>
 4018908:	9805883a 	mov	r2,r19
 401890c:	003ee806 	br	40184b0 <__alt_mem_onchip_memory2_0+0xfc0132f0>
 4018910:	d8c02217 	ldw	r3,136(sp)
 4018914:	0029883a 	mov	r20,zero
 4018918:	18800104 	addi	r2,r3,4
 401891c:	1cc0000b 	ldhu	r19,0(r3)
 4018920:	803f9e0e 	bge	r16,zero,401879c <__alt_mem_onchip_memory2_0+0xfc0135dc>
 4018924:	003dd706 	br	4018084 <__alt_mem_onchip_memory2_0+0xfc012ec4>
 4018928:	d8c02217 	ldw	r3,136(sp)
 401892c:	d9002417 	ldw	r4,144(sp)
 4018930:	18800017 	ldw	r2,0(r3)
 4018934:	18c00104 	addi	r3,r3,4
 4018938:	d8c02215 	stw	r3,136(sp)
 401893c:	11000015 	stw	r4,0(r2)
 4018940:	003b9a06 	br	40177ac <__alt_mem_onchip_memory2_0+0xfc0125ec>
 4018944:	d8c02217 	ldw	r3,136(sp)
 4018948:	0029883a 	mov	r20,zero
 401894c:	18800104 	addi	r2,r3,4
 4018950:	1cc0000b 	ldhu	r19,0(r3)
 4018954:	803db20e 	bge	r16,zero,4018020 <__alt_mem_onchip_memory2_0+0xfc012e60>
 4018958:	003fb906 	br	4018840 <__alt_mem_onchip_memory2_0+0xfc013680>
 401895c:	d9002217 	ldw	r4,136(sp)
 4018960:	0029883a 	mov	r20,zero
 4018964:	24c00017 	ldw	r19,0(r4)
 4018968:	21000104 	addi	r4,r4,4
 401896c:	d9002215 	stw	r4,136(sp)
 4018970:	003d3206 	br	4017e3c <__alt_mem_onchip_memory2_0+0xfc012c7c>
 4018974:	d8c02217 	ldw	r3,136(sp)
 4018978:	1cc00017 	ldw	r19,0(r3)
 401897c:	18c00104 	addi	r3,r3,4
 4018980:	d8c02215 	stw	r3,136(sp)
 4018984:	9829d7fa 	srai	r20,r19,31
 4018988:	a005883a 	mov	r2,r20
 401898c:	003d4b06 	br	4017ebc <__alt_mem_onchip_memory2_0+0xfc012cfc>
 4018990:	0009883a 	mov	r4,zero
 4018994:	01400044 	movi	r5,1
 4018998:	d811883a 	mov	r8,sp
 401899c:	003e4f06 	br	40182dc <__alt_mem_onchip_memory2_0+0xfc01311c>
 40189a0:	d8c02215 	stw	r3,136(sp)
 40189a4:	002b883a 	mov	r21,zero
 40189a8:	003db806 	br	401808c <__alt_mem_onchip_memory2_0+0xfc012ecc>
 40189ac:	d811883a 	mov	r8,sp
 40189b0:	003e9606 	br	401840c <__alt_mem_onchip_memory2_0+0xfc01324c>
 40189b4:	010100b4 	movhi	r4,1026
 40189b8:	2137fa04 	addi	r4,r4,-8216
 40189bc:	d9002315 	stw	r4,140(sp)
 40189c0:	003e6306 	br	4018350 <__alt_mem_onchip_memory2_0+0xfc013190>
 40189c4:	b0c00043 	ldbu	r3,1(r22)
 40189c8:	8c400814 	ori	r17,r17,32
 40189cc:	b5800044 	addi	r22,r22,1
 40189d0:	18c03fcc 	andi	r3,r3,255
 40189d4:	18c0201c 	xori	r3,r3,128
 40189d8:	18ffe004 	addi	r3,r3,-128
 40189dc:	003b9c06 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 40189e0:	b809883a 	mov	r4,r23
 40189e4:	da002a15 	stw	r8,168(sp)
 40189e8:	400fee00 	call	400fee0 <strlen>
 40189ec:	1029883a 	mov	r20,r2
 40189f0:	dd401d83 	ldbu	r21,118(sp)
 40189f4:	df002215 	stw	fp,136(sp)
 40189f8:	0021883a 	mov	r16,zero
 40189fc:	da002a17 	ldw	r8,168(sp)
 4018a00:	003c3906 	br	4017ae8 <__alt_mem_onchip_memory2_0+0xfc012928>
 4018a04:	d9402017 	ldw	r5,128(sp)
 4018a08:	d9002117 	ldw	r4,132(sp)
 4018a0c:	d9801a04 	addi	r6,sp,104
 4018a10:	40175c80 	call	40175c8 <__sprint_r.part.0>
 4018a14:	103e691e 	bne	r2,zero,40183bc <__alt_mem_onchip_memory2_0+0xfc0131fc>
 4018a18:	d9001b17 	ldw	r4,108(sp)
 4018a1c:	d8801c17 	ldw	r2,112(sp)
 4018a20:	d811883a 	mov	r8,sp
 4018a24:	21400044 	addi	r5,r4,1
 4018a28:	003e2e06 	br	40182e4 <__alt_mem_onchip_memory2_0+0xfc013124>
 4018a2c:	010100b4 	movhi	r4,1026
 4018a30:	2137fe04 	addi	r4,r4,-8200
 4018a34:	d9002315 	stw	r4,140(sp)
 4018a38:	d9001b17 	ldw	r4,108(sp)
 4018a3c:	21000044 	addi	r4,r4,1
 4018a40:	003c5e06 	br	4017bbc <__alt_mem_onchip_memory2_0+0xfc0129fc>
 4018a44:	002b883a 	mov	r21,zero
 4018a48:	00800084 	movi	r2,2
 4018a4c:	10803fcc 	andi	r2,r2,255
 4018a50:	01000044 	movi	r4,1
 4018a54:	11002b26 	beq	r2,r4,4018b04 <___vfiprintf_internal_r+0x1428>
 4018a58:	01000084 	movi	r4,2
 4018a5c:	11002b1e 	bne	r2,r4,4018b0c <___vfiprintf_internal_r+0x1430>
 4018a60:	1823883a 	mov	r17,r3
 4018a64:	003ee506 	br	40185fc <__alt_mem_onchip_memory2_0+0xfc01343c>
 4018a68:	8807883a 	mov	r3,r17
 4018a6c:	00800044 	movi	r2,1
 4018a70:	003ff606 	br	4018a4c <__alt_mem_onchip_memory2_0+0xfc01388c>
 4018a74:	00800184 	movi	r2,6
 4018a78:	1400012e 	bgeu	r2,r16,4018a80 <___vfiprintf_internal_r+0x13a4>
 4018a7c:	1021883a 	mov	r16,r2
 4018a80:	8029883a 	mov	r20,r16
 4018a84:	8027883a 	mov	r19,r16
 4018a88:	80002216 	blt	r16,zero,4018b14 <___vfiprintf_internal_r+0x1438>
 4018a8c:	05c100b4 	movhi	r23,1026
 4018a90:	df002215 	stw	fp,136(sp)
 4018a94:	bdf79f04 	addi	r23,r23,-8580
 4018a98:	003cfb06 	br	4017e88 <__alt_mem_onchip_memory2_0+0xfc012cc8>
 4018a9c:	d9002217 	ldw	r4,136(sp)
 4018aa0:	d9402417 	ldw	r5,144(sp)
 4018aa4:	20800017 	ldw	r2,0(r4)
 4018aa8:	21000104 	addi	r4,r4,4
 4018aac:	d9002215 	stw	r4,136(sp)
 4018ab0:	11400015 	stw	r5,0(r2)
 4018ab4:	003b3d06 	br	40177ac <__alt_mem_onchip_memory2_0+0xfc0125ec>
 4018ab8:	014100b4 	movhi	r5,1026
 4018abc:	2977fe04 	addi	r5,r5,-8200
 4018ac0:	d9402315 	stw	r5,140(sp)
 4018ac4:	d9401b17 	ldw	r5,108(sp)
 4018ac8:	29400044 	addi	r5,r5,1
 4018acc:	003e6d06 	br	4018484 <__alt_mem_onchip_memory2_0+0xfc0132c4>
 4018ad0:	8029883a 	mov	r20,r16
 4018ad4:	dd401d83 	ldbu	r21,118(sp)
 4018ad8:	df002215 	stw	fp,136(sp)
 4018adc:	0021883a 	mov	r16,zero
 4018ae0:	003c0106 	br	4017ae8 <__alt_mem_onchip_memory2_0+0xfc012928>
 4018ae4:	00c100b4 	movhi	r3,1026
 4018ae8:	18f7fa04 	addi	r3,r3,-8216
 4018aec:	d8c02315 	stw	r3,140(sp)
 4018af0:	280d883a 	mov	r6,r5
 4018af4:	003c6906 	br	4017c9c <__alt_mem_onchip_memory2_0+0xfc012adc>
 4018af8:	802d883a 	mov	r22,r16
 4018afc:	0021883a 	mov	r16,zero
 4018b00:	003b5406 	br	4017854 <__alt_mem_onchip_memory2_0+0xfc012694>
 4018b04:	1823883a 	mov	r17,r3
 4018b08:	003cf306 	br	4017ed8 <__alt_mem_onchip_memory2_0+0xfc012d18>
 4018b0c:	1823883a 	mov	r17,r3
 4018b10:	003cad06 	br	4017dc8 <__alt_mem_onchip_memory2_0+0xfc012c08>
 4018b14:	0027883a 	mov	r19,zero
 4018b18:	003fdc06 	br	4018a8c <__alt_mem_onchip_memory2_0+0xfc0138cc>
 4018b1c:	d9402217 	ldw	r5,136(sp)
 4018b20:	8005883a 	mov	r2,r16
 4018b24:	b0c00043 	ldbu	r3,1(r22)
 4018b28:	2c000017 	ldw	r16,0(r5)
 4018b2c:	29000104 	addi	r4,r5,4
 4018b30:	d9002215 	stw	r4,136(sp)
 4018b34:	102d883a 	mov	r22,r2
 4018b38:	803fa50e 	bge	r16,zero,40189d0 <__alt_mem_onchip_memory2_0+0xfc013810>
 4018b3c:	18c03fcc 	andi	r3,r3,255
 4018b40:	18c0201c 	xori	r3,r3,128
 4018b44:	043fffc4 	movi	r16,-1
 4018b48:	18ffe004 	addi	r3,r3,-128
 4018b4c:	003b4006 	br	4017850 <__alt_mem_onchip_memory2_0+0xfc012690>
 4018b50:	d9402303 	ldbu	r5,140(sp)
 4018b54:	d9401d85 	stb	r5,118(sp)
 4018b58:	003cae06 	br	4017e14 <__alt_mem_onchip_memory2_0+0xfc012c54>
 4018b5c:	d8c02303 	ldbu	r3,140(sp)
 4018b60:	d8c01d85 	stb	r3,118(sp)
 4018b64:	003d1406 	br	4017fb8 <__alt_mem_onchip_memory2_0+0xfc012df8>
 4018b68:	d8c02303 	ldbu	r3,140(sp)
 4018b6c:	d8c01d85 	stb	r3,118(sp)
 4018b70:	003cca06 	br	4017e9c <__alt_mem_onchip_memory2_0+0xfc012cdc>
 4018b74:	8880004c 	andi	r2,r17,1
 4018b78:	002b883a 	mov	r21,zero
 4018b7c:	10000526 	beq	r2,zero,4018b94 <___vfiprintf_internal_r+0x14b8>
 4018b80:	00800c04 	movi	r2,48
 4018b84:	d88019c5 	stb	r2,103(sp)
 4018b88:	dd002817 	ldw	r20,160(sp)
 4018b8c:	ddc019c4 	addi	r23,sp,103
 4018b90:	003bd506 	br	4017ae8 <__alt_mem_onchip_memory2_0+0xfc012928>
 4018b94:	0029883a 	mov	r20,zero
 4018b98:	ddc01a04 	addi	r23,sp,104
 4018b9c:	003bd206 	br	4017ae8 <__alt_mem_onchip_memory2_0+0xfc012928>
 4018ba0:	d9002303 	ldbu	r4,140(sp)
 4018ba4:	d9001d85 	stb	r4,118(sp)
 4018ba8:	003da606 	br	4018244 <__alt_mem_onchip_memory2_0+0xfc013084>
 4018bac:	d8c02303 	ldbu	r3,140(sp)
 4018bb0:	d8c01d85 	stb	r3,118(sp)
 4018bb4:	003c7606 	br	4017d90 <__alt_mem_onchip_memory2_0+0xfc012bd0>
 4018bb8:	d8c02303 	ldbu	r3,140(sp)
 4018bbc:	d8c01d85 	stb	r3,118(sp)
 4018bc0:	003c6506 	br	4017d58 <__alt_mem_onchip_memory2_0+0xfc012b98>
 4018bc4:	d9002303 	ldbu	r4,140(sp)
 4018bc8:	d9001d85 	stb	r4,118(sp)
 4018bcc:	003d3d06 	br	40180c4 <__alt_mem_onchip_memory2_0+0xfc012f04>
 4018bd0:	d8c02303 	ldbu	r3,140(sp)
 4018bd4:	d8c01d85 	stb	r3,118(sp)
 4018bd8:	003d1d06 	br	4018050 <__alt_mem_onchip_memory2_0+0xfc012e90>
 4018bdc:	d8c02303 	ldbu	r3,140(sp)
 4018be0:	d8c01d85 	stb	r3,118(sp)
 4018be4:	003d0306 	br	4017ff4 <__alt_mem_onchip_memory2_0+0xfc012e34>

04018be8 <__vfiprintf_internal>:
 4018be8:	008100b4 	movhi	r2,1026
 4018bec:	10bfe004 	addi	r2,r2,-128
 4018bf0:	300f883a 	mov	r7,r6
 4018bf4:	280d883a 	mov	r6,r5
 4018bf8:	200b883a 	mov	r5,r4
 4018bfc:	11000017 	ldw	r4,0(r2)
 4018c00:	40176dc1 	jmpi	40176dc <___vfiprintf_internal_r>

04018c04 <__sbprintf>:
 4018c04:	2880030b 	ldhu	r2,12(r5)
 4018c08:	2ac01917 	ldw	r11,100(r5)
 4018c0c:	2a80038b 	ldhu	r10,14(r5)
 4018c10:	2a400717 	ldw	r9,28(r5)
 4018c14:	2a000917 	ldw	r8,36(r5)
 4018c18:	defee204 	addi	sp,sp,-1144
 4018c1c:	00c10004 	movi	r3,1024
 4018c20:	dc011a15 	stw	r16,1128(sp)
 4018c24:	10bfff4c 	andi	r2,r2,65533
 4018c28:	2821883a 	mov	r16,r5
 4018c2c:	d8cb883a 	add	r5,sp,r3
 4018c30:	dc811c15 	stw	r18,1136(sp)
 4018c34:	dc411b15 	stw	r17,1132(sp)
 4018c38:	dfc11d15 	stw	ra,1140(sp)
 4018c3c:	2025883a 	mov	r18,r4
 4018c40:	d881030d 	sth	r2,1036(sp)
 4018c44:	dac11915 	stw	r11,1124(sp)
 4018c48:	da81038d 	sth	r10,1038(sp)
 4018c4c:	da410715 	stw	r9,1052(sp)
 4018c50:	da010915 	stw	r8,1060(sp)
 4018c54:	dec10015 	stw	sp,1024(sp)
 4018c58:	dec10415 	stw	sp,1040(sp)
 4018c5c:	d8c10215 	stw	r3,1032(sp)
 4018c60:	d8c10515 	stw	r3,1044(sp)
 4018c64:	d8010615 	stw	zero,1048(sp)
 4018c68:	40176dc0 	call	40176dc <___vfiprintf_internal_r>
 4018c6c:	1023883a 	mov	r17,r2
 4018c70:	10000416 	blt	r2,zero,4018c84 <__sbprintf+0x80>
 4018c74:	d9410004 	addi	r5,sp,1024
 4018c78:	9009883a 	mov	r4,r18
 4018c7c:	4013fa40 	call	4013fa4 <_fflush_r>
 4018c80:	10000d1e 	bne	r2,zero,4018cb8 <__sbprintf+0xb4>
 4018c84:	d881030b 	ldhu	r2,1036(sp)
 4018c88:	1080100c 	andi	r2,r2,64
 4018c8c:	10000326 	beq	r2,zero,4018c9c <__sbprintf+0x98>
 4018c90:	8080030b 	ldhu	r2,12(r16)
 4018c94:	10801014 	ori	r2,r2,64
 4018c98:	8080030d 	sth	r2,12(r16)
 4018c9c:	8805883a 	mov	r2,r17
 4018ca0:	dfc11d17 	ldw	ra,1140(sp)
 4018ca4:	dc811c17 	ldw	r18,1136(sp)
 4018ca8:	dc411b17 	ldw	r17,1132(sp)
 4018cac:	dc011a17 	ldw	r16,1128(sp)
 4018cb0:	dec11e04 	addi	sp,sp,1144
 4018cb4:	f800283a 	ret
 4018cb8:	047fffc4 	movi	r17,-1
 4018cbc:	003ff106 	br	4018c84 <__alt_mem_onchip_memory2_0+0xfc013ac4>

04018cc0 <_write_r>:
 4018cc0:	defffd04 	addi	sp,sp,-12
 4018cc4:	2805883a 	mov	r2,r5
 4018cc8:	dc000015 	stw	r16,0(sp)
 4018ccc:	040100b4 	movhi	r16,1026
 4018cd0:	dc400115 	stw	r17,4(sp)
 4018cd4:	300b883a 	mov	r5,r6
 4018cd8:	8407da04 	addi	r16,r16,8040
 4018cdc:	2023883a 	mov	r17,r4
 4018ce0:	380d883a 	mov	r6,r7
 4018ce4:	1009883a 	mov	r4,r2
 4018ce8:	dfc00215 	stw	ra,8(sp)
 4018cec:	80000015 	stw	zero,0(r16)
 4018cf0:	401b9f80 	call	401b9f8 <write>
 4018cf4:	00ffffc4 	movi	r3,-1
 4018cf8:	10c00526 	beq	r2,r3,4018d10 <_write_r+0x50>
 4018cfc:	dfc00217 	ldw	ra,8(sp)
 4018d00:	dc400117 	ldw	r17,4(sp)
 4018d04:	dc000017 	ldw	r16,0(sp)
 4018d08:	dec00304 	addi	sp,sp,12
 4018d0c:	f800283a 	ret
 4018d10:	80c00017 	ldw	r3,0(r16)
 4018d14:	183ff926 	beq	r3,zero,4018cfc <__alt_mem_onchip_memory2_0+0xfc013b3c>
 4018d18:	88c00015 	stw	r3,0(r17)
 4018d1c:	003ff706 	br	4018cfc <__alt_mem_onchip_memory2_0+0xfc013b3c>

04018d20 <_close_r>:
 4018d20:	defffd04 	addi	sp,sp,-12
 4018d24:	dc000015 	stw	r16,0(sp)
 4018d28:	040100b4 	movhi	r16,1026
 4018d2c:	dc400115 	stw	r17,4(sp)
 4018d30:	8407da04 	addi	r16,r16,8040
 4018d34:	2023883a 	mov	r17,r4
 4018d38:	2809883a 	mov	r4,r5
 4018d3c:	dfc00215 	stw	ra,8(sp)
 4018d40:	80000015 	stw	zero,0(r16)
 4018d44:	401ad240 	call	401ad24 <close>
 4018d48:	00ffffc4 	movi	r3,-1
 4018d4c:	10c00526 	beq	r2,r3,4018d64 <_close_r+0x44>
 4018d50:	dfc00217 	ldw	ra,8(sp)
 4018d54:	dc400117 	ldw	r17,4(sp)
 4018d58:	dc000017 	ldw	r16,0(sp)
 4018d5c:	dec00304 	addi	sp,sp,12
 4018d60:	f800283a 	ret
 4018d64:	80c00017 	ldw	r3,0(r16)
 4018d68:	183ff926 	beq	r3,zero,4018d50 <__alt_mem_onchip_memory2_0+0xfc013b90>
 4018d6c:	88c00015 	stw	r3,0(r17)
 4018d70:	003ff706 	br	4018d50 <__alt_mem_onchip_memory2_0+0xfc013b90>

04018d74 <_calloc_r>:
 4018d74:	defffe04 	addi	sp,sp,-8
 4018d78:	2805883a 	mov	r2,r5
 4018d7c:	dc000015 	stw	r16,0(sp)
 4018d80:	300b883a 	mov	r5,r6
 4018d84:	2021883a 	mov	r16,r4
 4018d88:	1009883a 	mov	r4,r2
 4018d8c:	dfc00115 	stw	ra,4(sp)
 4018d90:	400dcd40 	call	400dcd4 <__mulsi3>
 4018d94:	100b883a 	mov	r5,r2
 4018d98:	8009883a 	mov	r4,r16
 4018d9c:	40151580 	call	4015158 <_malloc_r>
 4018da0:	10002926 	beq	r2,zero,4018e48 <_calloc_r+0xd4>
 4018da4:	11bfff17 	ldw	r6,-4(r2)
 4018da8:	1021883a 	mov	r16,r2
 4018dac:	00bfff04 	movi	r2,-4
 4018db0:	308c703a 	and	r6,r6,r2
 4018db4:	00c00904 	movi	r3,36
 4018db8:	308d883a 	add	r6,r6,r2
 4018dbc:	19801636 	bltu	r3,r6,4018e18 <_calloc_r+0xa4>
 4018dc0:	008004c4 	movi	r2,19
 4018dc4:	11800b2e 	bgeu	r2,r6,4018df4 <_calloc_r+0x80>
 4018dc8:	80000015 	stw	zero,0(r16)
 4018dcc:	80000115 	stw	zero,4(r16)
 4018dd0:	008006c4 	movi	r2,27
 4018dd4:	11801a2e 	bgeu	r2,r6,4018e40 <_calloc_r+0xcc>
 4018dd8:	80000215 	stw	zero,8(r16)
 4018ddc:	80000315 	stw	zero,12(r16)
 4018de0:	30c0151e 	bne	r6,r3,4018e38 <_calloc_r+0xc4>
 4018de4:	80000415 	stw	zero,16(r16)
 4018de8:	80800604 	addi	r2,r16,24
 4018dec:	80000515 	stw	zero,20(r16)
 4018df0:	00000106 	br	4018df8 <_calloc_r+0x84>
 4018df4:	8005883a 	mov	r2,r16
 4018df8:	10000015 	stw	zero,0(r2)
 4018dfc:	10000115 	stw	zero,4(r2)
 4018e00:	10000215 	stw	zero,8(r2)
 4018e04:	8005883a 	mov	r2,r16
 4018e08:	dfc00117 	ldw	ra,4(sp)
 4018e0c:	dc000017 	ldw	r16,0(sp)
 4018e10:	dec00204 	addi	sp,sp,8
 4018e14:	f800283a 	ret
 4018e18:	000b883a 	mov	r5,zero
 4018e1c:	8009883a 	mov	r4,r16
 4018e20:	4015ba40 	call	4015ba4 <memset>
 4018e24:	8005883a 	mov	r2,r16
 4018e28:	dfc00117 	ldw	ra,4(sp)
 4018e2c:	dc000017 	ldw	r16,0(sp)
 4018e30:	dec00204 	addi	sp,sp,8
 4018e34:	f800283a 	ret
 4018e38:	80800404 	addi	r2,r16,16
 4018e3c:	003fee06 	br	4018df8 <__alt_mem_onchip_memory2_0+0xfc013c38>
 4018e40:	80800204 	addi	r2,r16,8
 4018e44:	003fec06 	br	4018df8 <__alt_mem_onchip_memory2_0+0xfc013c38>
 4018e48:	0005883a 	mov	r2,zero
 4018e4c:	003fee06 	br	4018e08 <__alt_mem_onchip_memory2_0+0xfc013c48>

04018e50 <_fclose_r>:
 4018e50:	28003926 	beq	r5,zero,4018f38 <_fclose_r+0xe8>
 4018e54:	defffc04 	addi	sp,sp,-16
 4018e58:	dc400115 	stw	r17,4(sp)
 4018e5c:	dc000015 	stw	r16,0(sp)
 4018e60:	dfc00315 	stw	ra,12(sp)
 4018e64:	dc800215 	stw	r18,8(sp)
 4018e68:	2023883a 	mov	r17,r4
 4018e6c:	2821883a 	mov	r16,r5
 4018e70:	20000226 	beq	r4,zero,4018e7c <_fclose_r+0x2c>
 4018e74:	20800e17 	ldw	r2,56(r4)
 4018e78:	10002726 	beq	r2,zero,4018f18 <_fclose_r+0xc8>
 4018e7c:	8080030f 	ldh	r2,12(r16)
 4018e80:	1000071e 	bne	r2,zero,4018ea0 <_fclose_r+0x50>
 4018e84:	0005883a 	mov	r2,zero
 4018e88:	dfc00317 	ldw	ra,12(sp)
 4018e8c:	dc800217 	ldw	r18,8(sp)
 4018e90:	dc400117 	ldw	r17,4(sp)
 4018e94:	dc000017 	ldw	r16,0(sp)
 4018e98:	dec00404 	addi	sp,sp,16
 4018e9c:	f800283a 	ret
 4018ea0:	800b883a 	mov	r5,r16
 4018ea4:	8809883a 	mov	r4,r17
 4018ea8:	4013d880 	call	4013d88 <__sflush_r>
 4018eac:	1025883a 	mov	r18,r2
 4018eb0:	80800b17 	ldw	r2,44(r16)
 4018eb4:	10000426 	beq	r2,zero,4018ec8 <_fclose_r+0x78>
 4018eb8:	81400717 	ldw	r5,28(r16)
 4018ebc:	8809883a 	mov	r4,r17
 4018ec0:	103ee83a 	callr	r2
 4018ec4:	10001616 	blt	r2,zero,4018f20 <_fclose_r+0xd0>
 4018ec8:	8080030b 	ldhu	r2,12(r16)
 4018ecc:	1080200c 	andi	r2,r2,128
 4018ed0:	1000151e 	bne	r2,zero,4018f28 <_fclose_r+0xd8>
 4018ed4:	81400c17 	ldw	r5,48(r16)
 4018ed8:	28000526 	beq	r5,zero,4018ef0 <_fclose_r+0xa0>
 4018edc:	80801004 	addi	r2,r16,64
 4018ee0:	28800226 	beq	r5,r2,4018eec <_fclose_r+0x9c>
 4018ee4:	8809883a 	mov	r4,r17
 4018ee8:	40145040 	call	4014504 <_free_r>
 4018eec:	80000c15 	stw	zero,48(r16)
 4018ef0:	81401117 	ldw	r5,68(r16)
 4018ef4:	28000326 	beq	r5,zero,4018f04 <_fclose_r+0xb4>
 4018ef8:	8809883a 	mov	r4,r17
 4018efc:	40145040 	call	4014504 <_free_r>
 4018f00:	80001115 	stw	zero,68(r16)
 4018f04:	40143a00 	call	40143a0 <__sfp_lock_acquire>
 4018f08:	8000030d 	sth	zero,12(r16)
 4018f0c:	40143a40 	call	40143a4 <__sfp_lock_release>
 4018f10:	9005883a 	mov	r2,r18
 4018f14:	003fdc06 	br	4018e88 <__alt_mem_onchip_memory2_0+0xfc013cc8>
 4018f18:	40143900 	call	4014390 <__sinit>
 4018f1c:	003fd706 	br	4018e7c <__alt_mem_onchip_memory2_0+0xfc013cbc>
 4018f20:	04bfffc4 	movi	r18,-1
 4018f24:	003fe806 	br	4018ec8 <__alt_mem_onchip_memory2_0+0xfc013d08>
 4018f28:	81400417 	ldw	r5,16(r16)
 4018f2c:	8809883a 	mov	r4,r17
 4018f30:	40145040 	call	4014504 <_free_r>
 4018f34:	003fe706 	br	4018ed4 <__alt_mem_onchip_memory2_0+0xfc013d14>
 4018f38:	0005883a 	mov	r2,zero
 4018f3c:	f800283a 	ret

04018f40 <fclose>:
 4018f40:	008100b4 	movhi	r2,1026
 4018f44:	10bfe004 	addi	r2,r2,-128
 4018f48:	200b883a 	mov	r5,r4
 4018f4c:	11000017 	ldw	r4,0(r2)
 4018f50:	4018e501 	jmpi	4018e50 <_fclose_r>

04018f54 <__fputwc>:
 4018f54:	defff804 	addi	sp,sp,-32
 4018f58:	dcc00415 	stw	r19,16(sp)
 4018f5c:	dc800315 	stw	r18,12(sp)
 4018f60:	dc000115 	stw	r16,4(sp)
 4018f64:	dfc00715 	stw	ra,28(sp)
 4018f68:	dd400615 	stw	r21,24(sp)
 4018f6c:	dd000515 	stw	r20,20(sp)
 4018f70:	dc400215 	stw	r17,8(sp)
 4018f74:	2027883a 	mov	r19,r4
 4018f78:	2825883a 	mov	r18,r5
 4018f7c:	3021883a 	mov	r16,r6
 4018f80:	4014f480 	call	4014f48 <__locale_mb_cur_max>
 4018f84:	00c00044 	movi	r3,1
 4018f88:	10c03e26 	beq	r2,r3,4019084 <__fputwc+0x130>
 4018f8c:	81c01704 	addi	r7,r16,92
 4018f90:	900d883a 	mov	r6,r18
 4018f94:	d80b883a 	mov	r5,sp
 4018f98:	9809883a 	mov	r4,r19
 4018f9c:	40194240 	call	4019424 <_wcrtomb_r>
 4018fa0:	1029883a 	mov	r20,r2
 4018fa4:	00bfffc4 	movi	r2,-1
 4018fa8:	a0802026 	beq	r20,r2,401902c <__fputwc+0xd8>
 4018fac:	d9400003 	ldbu	r5,0(sp)
 4018fb0:	a0001c26 	beq	r20,zero,4019024 <__fputwc+0xd0>
 4018fb4:	0023883a 	mov	r17,zero
 4018fb8:	05400284 	movi	r21,10
 4018fbc:	00000906 	br	4018fe4 <__fputwc+0x90>
 4018fc0:	80800017 	ldw	r2,0(r16)
 4018fc4:	11400005 	stb	r5,0(r2)
 4018fc8:	80c00017 	ldw	r3,0(r16)
 4018fcc:	18c00044 	addi	r3,r3,1
 4018fd0:	80c00015 	stw	r3,0(r16)
 4018fd4:	8c400044 	addi	r17,r17,1
 4018fd8:	dc45883a 	add	r2,sp,r17
 4018fdc:	8d00112e 	bgeu	r17,r20,4019024 <__fputwc+0xd0>
 4018fe0:	11400003 	ldbu	r5,0(r2)
 4018fe4:	80c00217 	ldw	r3,8(r16)
 4018fe8:	18ffffc4 	addi	r3,r3,-1
 4018fec:	80c00215 	stw	r3,8(r16)
 4018ff0:	183ff30e 	bge	r3,zero,4018fc0 <__alt_mem_onchip_memory2_0+0xfc013e00>
 4018ff4:	80800617 	ldw	r2,24(r16)
 4018ff8:	18801916 	blt	r3,r2,4019060 <__fputwc+0x10c>
 4018ffc:	80800017 	ldw	r2,0(r16)
 4019000:	11400005 	stb	r5,0(r2)
 4019004:	80800017 	ldw	r2,0(r16)
 4019008:	10c00003 	ldbu	r3,0(r2)
 401900c:	10800044 	addi	r2,r2,1
 4019010:	1d402326 	beq	r3,r21,40190a0 <__fputwc+0x14c>
 4019014:	80800015 	stw	r2,0(r16)
 4019018:	8c400044 	addi	r17,r17,1
 401901c:	dc45883a 	add	r2,sp,r17
 4019020:	8d3fef36 	bltu	r17,r20,4018fe0 <__alt_mem_onchip_memory2_0+0xfc013e20>
 4019024:	9005883a 	mov	r2,r18
 4019028:	00000406 	br	401903c <__fputwc+0xe8>
 401902c:	80c0030b 	ldhu	r3,12(r16)
 4019030:	a005883a 	mov	r2,r20
 4019034:	18c01014 	ori	r3,r3,64
 4019038:	80c0030d 	sth	r3,12(r16)
 401903c:	dfc00717 	ldw	ra,28(sp)
 4019040:	dd400617 	ldw	r21,24(sp)
 4019044:	dd000517 	ldw	r20,20(sp)
 4019048:	dcc00417 	ldw	r19,16(sp)
 401904c:	dc800317 	ldw	r18,12(sp)
 4019050:	dc400217 	ldw	r17,8(sp)
 4019054:	dc000117 	ldw	r16,4(sp)
 4019058:	dec00804 	addi	sp,sp,32
 401905c:	f800283a 	ret
 4019060:	800d883a 	mov	r6,r16
 4019064:	29403fcc 	andi	r5,r5,255
 4019068:	9809883a 	mov	r4,r19
 401906c:	40192cc0 	call	40192cc <__swbuf_r>
 4019070:	10bfffe0 	cmpeqi	r2,r2,-1
 4019074:	10803fcc 	andi	r2,r2,255
 4019078:	103fd626 	beq	r2,zero,4018fd4 <__alt_mem_onchip_memory2_0+0xfc013e14>
 401907c:	00bfffc4 	movi	r2,-1
 4019080:	003fee06 	br	401903c <__alt_mem_onchip_memory2_0+0xfc013e7c>
 4019084:	90ffffc4 	addi	r3,r18,-1
 4019088:	01003f84 	movi	r4,254
 401908c:	20ffbf36 	bltu	r4,r3,4018f8c <__alt_mem_onchip_memory2_0+0xfc013dcc>
 4019090:	900b883a 	mov	r5,r18
 4019094:	dc800005 	stb	r18,0(sp)
 4019098:	1029883a 	mov	r20,r2
 401909c:	003fc506 	br	4018fb4 <__alt_mem_onchip_memory2_0+0xfc013df4>
 40190a0:	800d883a 	mov	r6,r16
 40190a4:	a80b883a 	mov	r5,r21
 40190a8:	9809883a 	mov	r4,r19
 40190ac:	40192cc0 	call	40192cc <__swbuf_r>
 40190b0:	10bfffe0 	cmpeqi	r2,r2,-1
 40190b4:	003fef06 	br	4019074 <__alt_mem_onchip_memory2_0+0xfc013eb4>

040190b8 <_fputwc_r>:
 40190b8:	3080030b 	ldhu	r2,12(r6)
 40190bc:	10c8000c 	andi	r3,r2,8192
 40190c0:	1800051e 	bne	r3,zero,40190d8 <_fputwc_r+0x20>
 40190c4:	30c01917 	ldw	r3,100(r6)
 40190c8:	10880014 	ori	r2,r2,8192
 40190cc:	3080030d 	sth	r2,12(r6)
 40190d0:	18880014 	ori	r2,r3,8192
 40190d4:	30801915 	stw	r2,100(r6)
 40190d8:	4018f541 	jmpi	4018f54 <__fputwc>

040190dc <fputwc>:
 40190dc:	008100b4 	movhi	r2,1026
 40190e0:	defffc04 	addi	sp,sp,-16
 40190e4:	10bfe004 	addi	r2,r2,-128
 40190e8:	dc000115 	stw	r16,4(sp)
 40190ec:	14000017 	ldw	r16,0(r2)
 40190f0:	dc400215 	stw	r17,8(sp)
 40190f4:	dfc00315 	stw	ra,12(sp)
 40190f8:	2023883a 	mov	r17,r4
 40190fc:	80000226 	beq	r16,zero,4019108 <fputwc+0x2c>
 4019100:	80800e17 	ldw	r2,56(r16)
 4019104:	10001026 	beq	r2,zero,4019148 <fputwc+0x6c>
 4019108:	2880030b 	ldhu	r2,12(r5)
 401910c:	10c8000c 	andi	r3,r2,8192
 4019110:	1800051e 	bne	r3,zero,4019128 <fputwc+0x4c>
 4019114:	28c01917 	ldw	r3,100(r5)
 4019118:	10880014 	ori	r2,r2,8192
 401911c:	2880030d 	sth	r2,12(r5)
 4019120:	18880014 	ori	r2,r3,8192
 4019124:	28801915 	stw	r2,100(r5)
 4019128:	280d883a 	mov	r6,r5
 401912c:	8009883a 	mov	r4,r16
 4019130:	880b883a 	mov	r5,r17
 4019134:	dfc00317 	ldw	ra,12(sp)
 4019138:	dc400217 	ldw	r17,8(sp)
 401913c:	dc000117 	ldw	r16,4(sp)
 4019140:	dec00404 	addi	sp,sp,16
 4019144:	4018f541 	jmpi	4018f54 <__fputwc>
 4019148:	8009883a 	mov	r4,r16
 401914c:	d9400015 	stw	r5,0(sp)
 4019150:	40143900 	call	4014390 <__sinit>
 4019154:	d9400017 	ldw	r5,0(sp)
 4019158:	003feb06 	br	4019108 <__alt_mem_onchip_memory2_0+0xfc013f48>

0401915c <_fstat_r>:
 401915c:	defffd04 	addi	sp,sp,-12
 4019160:	2805883a 	mov	r2,r5
 4019164:	dc000015 	stw	r16,0(sp)
 4019168:	040100b4 	movhi	r16,1026
 401916c:	dc400115 	stw	r17,4(sp)
 4019170:	8407da04 	addi	r16,r16,8040
 4019174:	2023883a 	mov	r17,r4
 4019178:	300b883a 	mov	r5,r6
 401917c:	1009883a 	mov	r4,r2
 4019180:	dfc00215 	stw	ra,8(sp)
 4019184:	80000015 	stw	zero,0(r16)
 4019188:	401ae640 	call	401ae64 <fstat>
 401918c:	00ffffc4 	movi	r3,-1
 4019190:	10c00526 	beq	r2,r3,40191a8 <_fstat_r+0x4c>
 4019194:	dfc00217 	ldw	ra,8(sp)
 4019198:	dc400117 	ldw	r17,4(sp)
 401919c:	dc000017 	ldw	r16,0(sp)
 40191a0:	dec00304 	addi	sp,sp,12
 40191a4:	f800283a 	ret
 40191a8:	80c00017 	ldw	r3,0(r16)
 40191ac:	183ff926 	beq	r3,zero,4019194 <__alt_mem_onchip_memory2_0+0xfc013fd4>
 40191b0:	88c00015 	stw	r3,0(r17)
 40191b4:	003ff706 	br	4019194 <__alt_mem_onchip_memory2_0+0xfc013fd4>

040191b8 <_isatty_r>:
 40191b8:	defffd04 	addi	sp,sp,-12
 40191bc:	dc000015 	stw	r16,0(sp)
 40191c0:	040100b4 	movhi	r16,1026
 40191c4:	dc400115 	stw	r17,4(sp)
 40191c8:	8407da04 	addi	r16,r16,8040
 40191cc:	2023883a 	mov	r17,r4
 40191d0:	2809883a 	mov	r4,r5
 40191d4:	dfc00215 	stw	ra,8(sp)
 40191d8:	80000015 	stw	zero,0(r16)
 40191dc:	401b14c0 	call	401b14c <isatty>
 40191e0:	00ffffc4 	movi	r3,-1
 40191e4:	10c00526 	beq	r2,r3,40191fc <_isatty_r+0x44>
 40191e8:	dfc00217 	ldw	ra,8(sp)
 40191ec:	dc400117 	ldw	r17,4(sp)
 40191f0:	dc000017 	ldw	r16,0(sp)
 40191f4:	dec00304 	addi	sp,sp,12
 40191f8:	f800283a 	ret
 40191fc:	80c00017 	ldw	r3,0(r16)
 4019200:	183ff926 	beq	r3,zero,40191e8 <__alt_mem_onchip_memory2_0+0xfc014028>
 4019204:	88c00015 	stw	r3,0(r17)
 4019208:	003ff706 	br	40191e8 <__alt_mem_onchip_memory2_0+0xfc014028>

0401920c <_lseek_r>:
 401920c:	defffd04 	addi	sp,sp,-12
 4019210:	2805883a 	mov	r2,r5
 4019214:	dc000015 	stw	r16,0(sp)
 4019218:	040100b4 	movhi	r16,1026
 401921c:	dc400115 	stw	r17,4(sp)
 4019220:	300b883a 	mov	r5,r6
 4019224:	8407da04 	addi	r16,r16,8040
 4019228:	2023883a 	mov	r17,r4
 401922c:	380d883a 	mov	r6,r7
 4019230:	1009883a 	mov	r4,r2
 4019234:	dfc00215 	stw	ra,8(sp)
 4019238:	80000015 	stw	zero,0(r16)
 401923c:	401b3200 	call	401b320 <lseek>
 4019240:	00ffffc4 	movi	r3,-1
 4019244:	10c00526 	beq	r2,r3,401925c <_lseek_r+0x50>
 4019248:	dfc00217 	ldw	ra,8(sp)
 401924c:	dc400117 	ldw	r17,4(sp)
 4019250:	dc000017 	ldw	r16,0(sp)
 4019254:	dec00304 	addi	sp,sp,12
 4019258:	f800283a 	ret
 401925c:	80c00017 	ldw	r3,0(r16)
 4019260:	183ff926 	beq	r3,zero,4019248 <__alt_mem_onchip_memory2_0+0xfc014088>
 4019264:	88c00015 	stw	r3,0(r17)
 4019268:	003ff706 	br	4019248 <__alt_mem_onchip_memory2_0+0xfc014088>

0401926c <_read_r>:
 401926c:	defffd04 	addi	sp,sp,-12
 4019270:	2805883a 	mov	r2,r5
 4019274:	dc000015 	stw	r16,0(sp)
 4019278:	040100b4 	movhi	r16,1026
 401927c:	dc400115 	stw	r17,4(sp)
 4019280:	300b883a 	mov	r5,r6
 4019284:	8407da04 	addi	r16,r16,8040
 4019288:	2023883a 	mov	r17,r4
 401928c:	380d883a 	mov	r6,r7
 4019290:	1009883a 	mov	r4,r2
 4019294:	dfc00215 	stw	ra,8(sp)
 4019298:	80000015 	stw	zero,0(r16)
 401929c:	401b4fc0 	call	401b4fc <read>
 40192a0:	00ffffc4 	movi	r3,-1
 40192a4:	10c00526 	beq	r2,r3,40192bc <_read_r+0x50>
 40192a8:	dfc00217 	ldw	ra,8(sp)
 40192ac:	dc400117 	ldw	r17,4(sp)
 40192b0:	dc000017 	ldw	r16,0(sp)
 40192b4:	dec00304 	addi	sp,sp,12
 40192b8:	f800283a 	ret
 40192bc:	80c00017 	ldw	r3,0(r16)
 40192c0:	183ff926 	beq	r3,zero,40192a8 <__alt_mem_onchip_memory2_0+0xfc0140e8>
 40192c4:	88c00015 	stw	r3,0(r17)
 40192c8:	003ff706 	br	40192a8 <__alt_mem_onchip_memory2_0+0xfc0140e8>

040192cc <__swbuf_r>:
 40192cc:	defffb04 	addi	sp,sp,-20
 40192d0:	dcc00315 	stw	r19,12(sp)
 40192d4:	dc800215 	stw	r18,8(sp)
 40192d8:	dc000015 	stw	r16,0(sp)
 40192dc:	dfc00415 	stw	ra,16(sp)
 40192e0:	dc400115 	stw	r17,4(sp)
 40192e4:	2025883a 	mov	r18,r4
 40192e8:	2827883a 	mov	r19,r5
 40192ec:	3021883a 	mov	r16,r6
 40192f0:	20000226 	beq	r4,zero,40192fc <__swbuf_r+0x30>
 40192f4:	20800e17 	ldw	r2,56(r4)
 40192f8:	10004226 	beq	r2,zero,4019404 <__swbuf_r+0x138>
 40192fc:	80800617 	ldw	r2,24(r16)
 4019300:	8100030b 	ldhu	r4,12(r16)
 4019304:	80800215 	stw	r2,8(r16)
 4019308:	2080020c 	andi	r2,r4,8
 401930c:	10003626 	beq	r2,zero,40193e8 <__swbuf_r+0x11c>
 4019310:	80c00417 	ldw	r3,16(r16)
 4019314:	18003426 	beq	r3,zero,40193e8 <__swbuf_r+0x11c>
 4019318:	2088000c 	andi	r2,r4,8192
 401931c:	9c403fcc 	andi	r17,r19,255
 4019320:	10001a26 	beq	r2,zero,401938c <__swbuf_r+0xc0>
 4019324:	80800017 	ldw	r2,0(r16)
 4019328:	81000517 	ldw	r4,20(r16)
 401932c:	10c7c83a 	sub	r3,r2,r3
 4019330:	1900200e 	bge	r3,r4,40193b4 <__swbuf_r+0xe8>
 4019334:	18c00044 	addi	r3,r3,1
 4019338:	81000217 	ldw	r4,8(r16)
 401933c:	11400044 	addi	r5,r2,1
 4019340:	81400015 	stw	r5,0(r16)
 4019344:	213fffc4 	addi	r4,r4,-1
 4019348:	81000215 	stw	r4,8(r16)
 401934c:	14c00005 	stb	r19,0(r2)
 4019350:	80800517 	ldw	r2,20(r16)
 4019354:	10c01e26 	beq	r2,r3,40193d0 <__swbuf_r+0x104>
 4019358:	8080030b 	ldhu	r2,12(r16)
 401935c:	1080004c 	andi	r2,r2,1
 4019360:	10000226 	beq	r2,zero,401936c <__swbuf_r+0xa0>
 4019364:	00800284 	movi	r2,10
 4019368:	88801926 	beq	r17,r2,40193d0 <__swbuf_r+0x104>
 401936c:	8805883a 	mov	r2,r17
 4019370:	dfc00417 	ldw	ra,16(sp)
 4019374:	dcc00317 	ldw	r19,12(sp)
 4019378:	dc800217 	ldw	r18,8(sp)
 401937c:	dc400117 	ldw	r17,4(sp)
 4019380:	dc000017 	ldw	r16,0(sp)
 4019384:	dec00504 	addi	sp,sp,20
 4019388:	f800283a 	ret
 401938c:	81401917 	ldw	r5,100(r16)
 4019390:	00b7ffc4 	movi	r2,-8193
 4019394:	21080014 	ori	r4,r4,8192
 4019398:	2884703a 	and	r2,r5,r2
 401939c:	80801915 	stw	r2,100(r16)
 40193a0:	80800017 	ldw	r2,0(r16)
 40193a4:	8100030d 	sth	r4,12(r16)
 40193a8:	81000517 	ldw	r4,20(r16)
 40193ac:	10c7c83a 	sub	r3,r2,r3
 40193b0:	193fe016 	blt	r3,r4,4019334 <__alt_mem_onchip_memory2_0+0xfc014174>
 40193b4:	800b883a 	mov	r5,r16
 40193b8:	9009883a 	mov	r4,r18
 40193bc:	4013fa40 	call	4013fa4 <_fflush_r>
 40193c0:	1000071e 	bne	r2,zero,40193e0 <__swbuf_r+0x114>
 40193c4:	80800017 	ldw	r2,0(r16)
 40193c8:	00c00044 	movi	r3,1
 40193cc:	003fda06 	br	4019338 <__alt_mem_onchip_memory2_0+0xfc014178>
 40193d0:	800b883a 	mov	r5,r16
 40193d4:	9009883a 	mov	r4,r18
 40193d8:	4013fa40 	call	4013fa4 <_fflush_r>
 40193dc:	103fe326 	beq	r2,zero,401936c <__alt_mem_onchip_memory2_0+0xfc0141ac>
 40193e0:	00bfffc4 	movi	r2,-1
 40193e4:	003fe206 	br	4019370 <__alt_mem_onchip_memory2_0+0xfc0141b0>
 40193e8:	800b883a 	mov	r5,r16
 40193ec:	9009883a 	mov	r4,r18
 40193f0:	40123840 	call	4012384 <__swsetup_r>
 40193f4:	103ffa1e 	bne	r2,zero,40193e0 <__alt_mem_onchip_memory2_0+0xfc014220>
 40193f8:	8100030b 	ldhu	r4,12(r16)
 40193fc:	80c00417 	ldw	r3,16(r16)
 4019400:	003fc506 	br	4019318 <__alt_mem_onchip_memory2_0+0xfc014158>
 4019404:	40143900 	call	4014390 <__sinit>
 4019408:	003fbc06 	br	40192fc <__alt_mem_onchip_memory2_0+0xfc01413c>

0401940c <__swbuf>:
 401940c:	008100b4 	movhi	r2,1026
 4019410:	10bfe004 	addi	r2,r2,-128
 4019414:	280d883a 	mov	r6,r5
 4019418:	200b883a 	mov	r5,r4
 401941c:	11000017 	ldw	r4,0(r2)
 4019420:	40192cc1 	jmpi	40192cc <__swbuf_r>

04019424 <_wcrtomb_r>:
 4019424:	defff604 	addi	sp,sp,-40
 4019428:	008100b4 	movhi	r2,1026
 401942c:	dc800815 	stw	r18,32(sp)
 4019430:	dc400715 	stw	r17,28(sp)
 4019434:	dc000615 	stw	r16,24(sp)
 4019438:	10bfe404 	addi	r2,r2,-112
 401943c:	dfc00915 	stw	ra,36(sp)
 4019440:	2021883a 	mov	r16,r4
 4019444:	3823883a 	mov	r17,r7
 4019448:	14800017 	ldw	r18,0(r2)
 401944c:	28001426 	beq	r5,zero,40194a0 <_wcrtomb_r+0x7c>
 4019450:	d9400415 	stw	r5,16(sp)
 4019454:	d9800515 	stw	r6,20(sp)
 4019458:	4014f3c0 	call	4014f3c <__locale_charset>
 401945c:	d9800517 	ldw	r6,20(sp)
 4019460:	d9400417 	ldw	r5,16(sp)
 4019464:	100f883a 	mov	r7,r2
 4019468:	dc400015 	stw	r17,0(sp)
 401946c:	8009883a 	mov	r4,r16
 4019470:	903ee83a 	callr	r18
 4019474:	00ffffc4 	movi	r3,-1
 4019478:	10c0031e 	bne	r2,r3,4019488 <_wcrtomb_r+0x64>
 401947c:	88000015 	stw	zero,0(r17)
 4019480:	00c02284 	movi	r3,138
 4019484:	80c00015 	stw	r3,0(r16)
 4019488:	dfc00917 	ldw	ra,36(sp)
 401948c:	dc800817 	ldw	r18,32(sp)
 4019490:	dc400717 	ldw	r17,28(sp)
 4019494:	dc000617 	ldw	r16,24(sp)
 4019498:	dec00a04 	addi	sp,sp,40
 401949c:	f800283a 	ret
 40194a0:	4014f3c0 	call	4014f3c <__locale_charset>
 40194a4:	100f883a 	mov	r7,r2
 40194a8:	dc400015 	stw	r17,0(sp)
 40194ac:	000d883a 	mov	r6,zero
 40194b0:	d9400104 	addi	r5,sp,4
 40194b4:	8009883a 	mov	r4,r16
 40194b8:	903ee83a 	callr	r18
 40194bc:	003fed06 	br	4019474 <__alt_mem_onchip_memory2_0+0xfc0142b4>

040194c0 <wcrtomb>:
 40194c0:	defff604 	addi	sp,sp,-40
 40194c4:	008100b4 	movhi	r2,1026
 40194c8:	dc800615 	stw	r18,24(sp)
 40194cc:	dc400515 	stw	r17,20(sp)
 40194d0:	10bfe004 	addi	r2,r2,-128
 40194d4:	dfc00915 	stw	ra,36(sp)
 40194d8:	dd000815 	stw	r20,32(sp)
 40194dc:	dcc00715 	stw	r19,28(sp)
 40194e0:	dc000415 	stw	r16,16(sp)
 40194e4:	3025883a 	mov	r18,r6
 40194e8:	14400017 	ldw	r17,0(r2)
 40194ec:	20001926 	beq	r4,zero,4019554 <wcrtomb+0x94>
 40194f0:	008100b4 	movhi	r2,1026
 40194f4:	10bfe404 	addi	r2,r2,-112
 40194f8:	15000017 	ldw	r20,0(r2)
 40194fc:	2021883a 	mov	r16,r4
 4019500:	2827883a 	mov	r19,r5
 4019504:	4014f3c0 	call	4014f3c <__locale_charset>
 4019508:	100f883a 	mov	r7,r2
 401950c:	dc800015 	stw	r18,0(sp)
 4019510:	980d883a 	mov	r6,r19
 4019514:	800b883a 	mov	r5,r16
 4019518:	8809883a 	mov	r4,r17
 401951c:	a03ee83a 	callr	r20
 4019520:	00ffffc4 	movi	r3,-1
 4019524:	10c0031e 	bne	r2,r3,4019534 <wcrtomb+0x74>
 4019528:	90000015 	stw	zero,0(r18)
 401952c:	00c02284 	movi	r3,138
 4019530:	88c00015 	stw	r3,0(r17)
 4019534:	dfc00917 	ldw	ra,36(sp)
 4019538:	dd000817 	ldw	r20,32(sp)
 401953c:	dcc00717 	ldw	r19,28(sp)
 4019540:	dc800617 	ldw	r18,24(sp)
 4019544:	dc400517 	ldw	r17,20(sp)
 4019548:	dc000417 	ldw	r16,16(sp)
 401954c:	dec00a04 	addi	sp,sp,40
 4019550:	f800283a 	ret
 4019554:	008100b4 	movhi	r2,1026
 4019558:	10bfe404 	addi	r2,r2,-112
 401955c:	14000017 	ldw	r16,0(r2)
 4019560:	4014f3c0 	call	4014f3c <__locale_charset>
 4019564:	100f883a 	mov	r7,r2
 4019568:	dc800015 	stw	r18,0(sp)
 401956c:	000d883a 	mov	r6,zero
 4019570:	d9400104 	addi	r5,sp,4
 4019574:	8809883a 	mov	r4,r17
 4019578:	803ee83a 	callr	r16
 401957c:	003fe806 	br	4019520 <__alt_mem_onchip_memory2_0+0xfc014360>

04019580 <__ascii_wctomb>:
 4019580:	28000526 	beq	r5,zero,4019598 <__ascii_wctomb+0x18>
 4019584:	00803fc4 	movi	r2,255
 4019588:	11800536 	bltu	r2,r6,40195a0 <__ascii_wctomb+0x20>
 401958c:	29800005 	stb	r6,0(r5)
 4019590:	00800044 	movi	r2,1
 4019594:	f800283a 	ret
 4019598:	0005883a 	mov	r2,zero
 401959c:	f800283a 	ret
 40195a0:	00802284 	movi	r2,138
 40195a4:	20800015 	stw	r2,0(r4)
 40195a8:	00bfffc4 	movi	r2,-1
 40195ac:	f800283a 	ret

040195b0 <_wctomb_r>:
 40195b0:	008100b4 	movhi	r2,1026
 40195b4:	defff904 	addi	sp,sp,-28
 40195b8:	10bfe404 	addi	r2,r2,-112
 40195bc:	dfc00615 	stw	ra,24(sp)
 40195c0:	dc400515 	stw	r17,20(sp)
 40195c4:	dc000415 	stw	r16,16(sp)
 40195c8:	3823883a 	mov	r17,r7
 40195cc:	14000017 	ldw	r16,0(r2)
 40195d0:	d9000115 	stw	r4,4(sp)
 40195d4:	d9400215 	stw	r5,8(sp)
 40195d8:	d9800315 	stw	r6,12(sp)
 40195dc:	4014f3c0 	call	4014f3c <__locale_charset>
 40195e0:	d9800317 	ldw	r6,12(sp)
 40195e4:	d9400217 	ldw	r5,8(sp)
 40195e8:	d9000117 	ldw	r4,4(sp)
 40195ec:	100f883a 	mov	r7,r2
 40195f0:	dc400015 	stw	r17,0(sp)
 40195f4:	803ee83a 	callr	r16
 40195f8:	dfc00617 	ldw	ra,24(sp)
 40195fc:	dc400517 	ldw	r17,20(sp)
 4019600:	dc000417 	ldw	r16,16(sp)
 4019604:	dec00704 	addi	sp,sp,28
 4019608:	f800283a 	ret

0401960c <__muldi3>:
 401960c:	defff604 	addi	sp,sp,-40
 4019610:	dd800615 	stw	r22,24(sp)
 4019614:	dd400515 	stw	r21,20(sp)
 4019618:	dc400115 	stw	r17,4(sp)
 401961c:	357fffcc 	andi	r21,r6,65535
 4019620:	2022d43a 	srli	r17,r4,16
 4019624:	25bfffcc 	andi	r22,r4,65535
 4019628:	dcc00315 	stw	r19,12(sp)
 401962c:	dc800215 	stw	r18,8(sp)
 4019630:	2027883a 	mov	r19,r4
 4019634:	2825883a 	mov	r18,r5
 4019638:	b009883a 	mov	r4,r22
 401963c:	a80b883a 	mov	r5,r21
 4019640:	dfc00915 	stw	ra,36(sp)
 4019644:	df000815 	stw	fp,32(sp)
 4019648:	ddc00715 	stw	r23,28(sp)
 401964c:	3839883a 	mov	fp,r7
 4019650:	302ed43a 	srli	r23,r6,16
 4019654:	dd000415 	stw	r20,16(sp)
 4019658:	dc000015 	stw	r16,0(sp)
 401965c:	3029883a 	mov	r20,r6
 4019660:	400dcd40 	call	400dcd4 <__mulsi3>
 4019664:	a80b883a 	mov	r5,r21
 4019668:	8809883a 	mov	r4,r17
 401966c:	1021883a 	mov	r16,r2
 4019670:	400dcd40 	call	400dcd4 <__mulsi3>
 4019674:	8809883a 	mov	r4,r17
 4019678:	b80b883a 	mov	r5,r23
 401967c:	102b883a 	mov	r21,r2
 4019680:	400dcd40 	call	400dcd4 <__mulsi3>
 4019684:	b80b883a 	mov	r5,r23
 4019688:	b009883a 	mov	r4,r22
 401968c:	1023883a 	mov	r17,r2
 4019690:	400dcd40 	call	400dcd4 <__mulsi3>
 4019694:	8006d43a 	srli	r3,r16,16
 4019698:	1545883a 	add	r2,r2,r21
 401969c:	1885883a 	add	r2,r3,r2
 40196a0:	1540022e 	bgeu	r2,r21,40196ac <__muldi3+0xa0>
 40196a4:	00c00074 	movhi	r3,1
 40196a8:	88e3883a 	add	r17,r17,r3
 40196ac:	1006d43a 	srli	r3,r2,16
 40196b0:	1004943a 	slli	r2,r2,16
 40196b4:	e00b883a 	mov	r5,fp
 40196b8:	9809883a 	mov	r4,r19
 40196bc:	843fffcc 	andi	r16,r16,65535
 40196c0:	1c63883a 	add	r17,r3,r17
 40196c4:	1421883a 	add	r16,r2,r16
 40196c8:	400dcd40 	call	400dcd4 <__mulsi3>
 40196cc:	900b883a 	mov	r5,r18
 40196d0:	a009883a 	mov	r4,r20
 40196d4:	1027883a 	mov	r19,r2
 40196d8:	400dcd40 	call	400dcd4 <__mulsi3>
 40196dc:	9885883a 	add	r2,r19,r2
 40196e0:	1447883a 	add	r3,r2,r17
 40196e4:	8005883a 	mov	r2,r16
 40196e8:	dfc00917 	ldw	ra,36(sp)
 40196ec:	df000817 	ldw	fp,32(sp)
 40196f0:	ddc00717 	ldw	r23,28(sp)
 40196f4:	dd800617 	ldw	r22,24(sp)
 40196f8:	dd400517 	ldw	r21,20(sp)
 40196fc:	dd000417 	ldw	r20,16(sp)
 4019700:	dcc00317 	ldw	r19,12(sp)
 4019704:	dc800217 	ldw	r18,8(sp)
 4019708:	dc400117 	ldw	r17,4(sp)
 401970c:	dc000017 	ldw	r16,0(sp)
 4019710:	dec00a04 	addi	sp,sp,40
 4019714:	f800283a 	ret

04019718 <__udivdi3>:
 4019718:	defff404 	addi	sp,sp,-48
 401971c:	dcc00515 	stw	r19,20(sp)
 4019720:	dc000215 	stw	r16,8(sp)
 4019724:	dfc00b15 	stw	ra,44(sp)
 4019728:	df000a15 	stw	fp,40(sp)
 401972c:	ddc00915 	stw	r23,36(sp)
 4019730:	dd800815 	stw	r22,32(sp)
 4019734:	dd400715 	stw	r21,28(sp)
 4019738:	dd000615 	stw	r20,24(sp)
 401973c:	dc800415 	stw	r18,16(sp)
 4019740:	dc400315 	stw	r17,12(sp)
 4019744:	2027883a 	mov	r19,r4
 4019748:	2821883a 	mov	r16,r5
 401974c:	3800461e 	bne	r7,zero,4019868 <__udivdi3+0x150>
 4019750:	3023883a 	mov	r17,r6
 4019754:	2025883a 	mov	r18,r4
 4019758:	2980572e 	bgeu	r5,r6,40198b8 <__udivdi3+0x1a0>
 401975c:	00bfffd4 	movui	r2,65535
 4019760:	282d883a 	mov	r22,r5
 4019764:	1180b236 	bltu	r2,r6,4019a30 <__udivdi3+0x318>
 4019768:	00803fc4 	movi	r2,255
 401976c:	1185803a 	cmpltu	r2,r2,r6
 4019770:	100490fa 	slli	r2,r2,3
 4019774:	3086d83a 	srl	r3,r6,r2
 4019778:	010100b4 	movhi	r4,1026
 401977c:	21374f04 	addi	r4,r4,-8900
 4019780:	20c7883a 	add	r3,r4,r3
 4019784:	18c00003 	ldbu	r3,0(r3)
 4019788:	1885883a 	add	r2,r3,r2
 401978c:	00c00804 	movi	r3,32
 4019790:	1887c83a 	sub	r3,r3,r2
 4019794:	18000526 	beq	r3,zero,40197ac <__udivdi3+0x94>
 4019798:	80e0983a 	sll	r16,r16,r3
 401979c:	9884d83a 	srl	r2,r19,r2
 40197a0:	30e2983a 	sll	r17,r6,r3
 40197a4:	98e4983a 	sll	r18,r19,r3
 40197a8:	142cb03a 	or	r22,r2,r16
 40197ac:	882ad43a 	srli	r21,r17,16
 40197b0:	b009883a 	mov	r4,r22
 40197b4:	8d3fffcc 	andi	r20,r17,65535
 40197b8:	a80b883a 	mov	r5,r21
 40197bc:	400dc7c0 	call	400dc7c <__umodsi3>
 40197c0:	b009883a 	mov	r4,r22
 40197c4:	a80b883a 	mov	r5,r21
 40197c8:	1027883a 	mov	r19,r2
 40197cc:	400dc180 	call	400dc18 <__udivsi3>
 40197d0:	100b883a 	mov	r5,r2
 40197d4:	a009883a 	mov	r4,r20
 40197d8:	102d883a 	mov	r22,r2
 40197dc:	400dcd40 	call	400dcd4 <__mulsi3>
 40197e0:	9826943a 	slli	r19,r19,16
 40197e4:	9006d43a 	srli	r3,r18,16
 40197e8:	1cc6b03a 	or	r3,r3,r19
 40197ec:	1880052e 	bgeu	r3,r2,4019804 <__udivdi3+0xec>
 40197f0:	1c47883a 	add	r3,r3,r17
 40197f4:	b13fffc4 	addi	r4,r22,-1
 40197f8:	1c400136 	bltu	r3,r17,4019800 <__udivdi3+0xe8>
 40197fc:	18814236 	bltu	r3,r2,4019d08 <__udivdi3+0x5f0>
 4019800:	202d883a 	mov	r22,r4
 4019804:	18a1c83a 	sub	r16,r3,r2
 4019808:	8009883a 	mov	r4,r16
 401980c:	a80b883a 	mov	r5,r21
 4019810:	400dc7c0 	call	400dc7c <__umodsi3>
 4019814:	1027883a 	mov	r19,r2
 4019818:	8009883a 	mov	r4,r16
 401981c:	a80b883a 	mov	r5,r21
 4019820:	9826943a 	slli	r19,r19,16
 4019824:	400dc180 	call	400dc18 <__udivsi3>
 4019828:	100b883a 	mov	r5,r2
 401982c:	a009883a 	mov	r4,r20
 4019830:	94bfffcc 	andi	r18,r18,65535
 4019834:	1021883a 	mov	r16,r2
 4019838:	94e4b03a 	or	r18,r18,r19
 401983c:	400dcd40 	call	400dcd4 <__mulsi3>
 4019840:	9080052e 	bgeu	r18,r2,4019858 <__udivdi3+0x140>
 4019844:	8ca5883a 	add	r18,r17,r18
 4019848:	80ffffc4 	addi	r3,r16,-1
 401984c:	94410c36 	bltu	r18,r17,4019c80 <__udivdi3+0x568>
 4019850:	90810b2e 	bgeu	r18,r2,4019c80 <__udivdi3+0x568>
 4019854:	843fff84 	addi	r16,r16,-2
 4019858:	b004943a 	slli	r2,r22,16
 401985c:	0007883a 	mov	r3,zero
 4019860:	1404b03a 	or	r2,r2,r16
 4019864:	00005e06 	br	40199e0 <__udivdi3+0x2c8>
 4019868:	29c05b36 	bltu	r5,r7,40199d8 <__udivdi3+0x2c0>
 401986c:	00bfffd4 	movui	r2,65535
 4019870:	11c0672e 	bgeu	r2,r7,4019a10 <__udivdi3+0x2f8>
 4019874:	00804034 	movhi	r2,256
 4019878:	10bfffc4 	addi	r2,r2,-1
 401987c:	11c10a36 	bltu	r2,r7,4019ca8 <__udivdi3+0x590>
 4019880:	00800404 	movi	r2,16
 4019884:	3886d83a 	srl	r3,r7,r2
 4019888:	010100b4 	movhi	r4,1026
 401988c:	21374f04 	addi	r4,r4,-8900
 4019890:	20c7883a 	add	r3,r4,r3
 4019894:	18c00003 	ldbu	r3,0(r3)
 4019898:	05c00804 	movi	r23,32
 401989c:	1885883a 	add	r2,r3,r2
 40198a0:	b8afc83a 	sub	r23,r23,r2
 40198a4:	b800671e 	bne	r23,zero,4019a44 <__udivdi3+0x32c>
 40198a8:	3c010536 	bltu	r7,r16,4019cc0 <__udivdi3+0x5a8>
 40198ac:	9985403a 	cmpgeu	r2,r19,r6
 40198b0:	0007883a 	mov	r3,zero
 40198b4:	00004a06 	br	40199e0 <__udivdi3+0x2c8>
 40198b8:	3000041e 	bne	r6,zero,40198cc <__udivdi3+0x1b4>
 40198bc:	000b883a 	mov	r5,zero
 40198c0:	01000044 	movi	r4,1
 40198c4:	400dc180 	call	400dc18 <__udivsi3>
 40198c8:	1023883a 	mov	r17,r2
 40198cc:	00bfffd4 	movui	r2,65535
 40198d0:	1440532e 	bgeu	r2,r17,4019a20 <__udivdi3+0x308>
 40198d4:	00804034 	movhi	r2,256
 40198d8:	10bfffc4 	addi	r2,r2,-1
 40198dc:	1440f436 	bltu	r2,r17,4019cb0 <__udivdi3+0x598>
 40198e0:	00800404 	movi	r2,16
 40198e4:	8886d83a 	srl	r3,r17,r2
 40198e8:	010100b4 	movhi	r4,1026
 40198ec:	21374f04 	addi	r4,r4,-8900
 40198f0:	20c7883a 	add	r3,r4,r3
 40198f4:	18c00003 	ldbu	r3,0(r3)
 40198f8:	1885883a 	add	r2,r3,r2
 40198fc:	00c00804 	movi	r3,32
 4019900:	1887c83a 	sub	r3,r3,r2
 4019904:	1800a51e 	bne	r3,zero,4019b9c <__udivdi3+0x484>
 4019908:	882ad43a 	srli	r21,r17,16
 401990c:	8461c83a 	sub	r16,r16,r17
 4019910:	8d3fffcc 	andi	r20,r17,65535
 4019914:	00c00044 	movi	r3,1
 4019918:	a80b883a 	mov	r5,r21
 401991c:	8009883a 	mov	r4,r16
 4019920:	d8c00115 	stw	r3,4(sp)
 4019924:	400dc7c0 	call	400dc7c <__umodsi3>
 4019928:	a80b883a 	mov	r5,r21
 401992c:	8009883a 	mov	r4,r16
 4019930:	1027883a 	mov	r19,r2
 4019934:	400dc180 	call	400dc18 <__udivsi3>
 4019938:	a00b883a 	mov	r5,r20
 401993c:	1009883a 	mov	r4,r2
 4019940:	102d883a 	mov	r22,r2
 4019944:	400dcd40 	call	400dcd4 <__mulsi3>
 4019948:	9826943a 	slli	r19,r19,16
 401994c:	900ed43a 	srli	r7,r18,16
 4019950:	d8c00117 	ldw	r3,4(sp)
 4019954:	3cceb03a 	or	r7,r7,r19
 4019958:	3880052e 	bgeu	r7,r2,4019970 <__udivdi3+0x258>
 401995c:	3c4f883a 	add	r7,r7,r17
 4019960:	b13fffc4 	addi	r4,r22,-1
 4019964:	3c400136 	bltu	r7,r17,401996c <__udivdi3+0x254>
 4019968:	3880e436 	bltu	r7,r2,4019cfc <__udivdi3+0x5e4>
 401996c:	202d883a 	mov	r22,r4
 4019970:	38a1c83a 	sub	r16,r7,r2
 4019974:	8009883a 	mov	r4,r16
 4019978:	a80b883a 	mov	r5,r21
 401997c:	d8c00115 	stw	r3,4(sp)
 4019980:	400dc7c0 	call	400dc7c <__umodsi3>
 4019984:	1027883a 	mov	r19,r2
 4019988:	8009883a 	mov	r4,r16
 401998c:	a80b883a 	mov	r5,r21
 4019990:	9826943a 	slli	r19,r19,16
 4019994:	400dc180 	call	400dc18 <__udivsi3>
 4019998:	a00b883a 	mov	r5,r20
 401999c:	1009883a 	mov	r4,r2
 40199a0:	94bfffcc 	andi	r18,r18,65535
 40199a4:	1021883a 	mov	r16,r2
 40199a8:	94e4b03a 	or	r18,r18,r19
 40199ac:	400dcd40 	call	400dcd4 <__mulsi3>
 40199b0:	d8c00117 	ldw	r3,4(sp)
 40199b4:	9080052e 	bgeu	r18,r2,40199cc <__udivdi3+0x2b4>
 40199b8:	8ca5883a 	add	r18,r17,r18
 40199bc:	813fffc4 	addi	r4,r16,-1
 40199c0:	9440ad36 	bltu	r18,r17,4019c78 <__udivdi3+0x560>
 40199c4:	9080ac2e 	bgeu	r18,r2,4019c78 <__udivdi3+0x560>
 40199c8:	843fff84 	addi	r16,r16,-2
 40199cc:	b004943a 	slli	r2,r22,16
 40199d0:	1404b03a 	or	r2,r2,r16
 40199d4:	00000206 	br	40199e0 <__udivdi3+0x2c8>
 40199d8:	0007883a 	mov	r3,zero
 40199dc:	0005883a 	mov	r2,zero
 40199e0:	dfc00b17 	ldw	ra,44(sp)
 40199e4:	df000a17 	ldw	fp,40(sp)
 40199e8:	ddc00917 	ldw	r23,36(sp)
 40199ec:	dd800817 	ldw	r22,32(sp)
 40199f0:	dd400717 	ldw	r21,28(sp)
 40199f4:	dd000617 	ldw	r20,24(sp)
 40199f8:	dcc00517 	ldw	r19,20(sp)
 40199fc:	dc800417 	ldw	r18,16(sp)
 4019a00:	dc400317 	ldw	r17,12(sp)
 4019a04:	dc000217 	ldw	r16,8(sp)
 4019a08:	dec00c04 	addi	sp,sp,48
 4019a0c:	f800283a 	ret
 4019a10:	00803fc4 	movi	r2,255
 4019a14:	11c5803a 	cmpltu	r2,r2,r7
 4019a18:	100490fa 	slli	r2,r2,3
 4019a1c:	003f9906 	br	4019884 <__alt_mem_onchip_memory2_0+0xfc0146c4>
 4019a20:	00803fc4 	movi	r2,255
 4019a24:	1445803a 	cmpltu	r2,r2,r17
 4019a28:	100490fa 	slli	r2,r2,3
 4019a2c:	003fad06 	br	40198e4 <__alt_mem_onchip_memory2_0+0xfc014724>
 4019a30:	00804034 	movhi	r2,256
 4019a34:	10bfffc4 	addi	r2,r2,-1
 4019a38:	11809f36 	bltu	r2,r6,4019cb8 <__udivdi3+0x5a0>
 4019a3c:	00800404 	movi	r2,16
 4019a40:	003f4c06 	br	4019774 <__alt_mem_onchip_memory2_0+0xfc0145b4>
 4019a44:	3dce983a 	sll	r7,r7,r23
 4019a48:	30b8d83a 	srl	fp,r6,r2
 4019a4c:	80a2d83a 	srl	r17,r16,r2
 4019a50:	35cc983a 	sll	r6,r6,r23
 4019a54:	3f38b03a 	or	fp,r7,fp
 4019a58:	e024d43a 	srli	r18,fp,16
 4019a5c:	9884d83a 	srl	r2,r19,r2
 4019a60:	85e0983a 	sll	r16,r16,r23
 4019a64:	8809883a 	mov	r4,r17
 4019a68:	900b883a 	mov	r5,r18
 4019a6c:	d9800015 	stw	r6,0(sp)
 4019a70:	1420b03a 	or	r16,r2,r16
 4019a74:	400dc7c0 	call	400dc7c <__umodsi3>
 4019a78:	900b883a 	mov	r5,r18
 4019a7c:	8809883a 	mov	r4,r17
 4019a80:	1029883a 	mov	r20,r2
 4019a84:	e5bfffcc 	andi	r22,fp,65535
 4019a88:	400dc180 	call	400dc18 <__udivsi3>
 4019a8c:	100b883a 	mov	r5,r2
 4019a90:	b009883a 	mov	r4,r22
 4019a94:	102b883a 	mov	r21,r2
 4019a98:	400dcd40 	call	400dcd4 <__mulsi3>
 4019a9c:	a028943a 	slli	r20,r20,16
 4019aa0:	8006d43a 	srli	r3,r16,16
 4019aa4:	1d06b03a 	or	r3,r3,r20
 4019aa8:	1880042e 	bgeu	r3,r2,4019abc <__udivdi3+0x3a4>
 4019aac:	1f07883a 	add	r3,r3,fp
 4019ab0:	a93fffc4 	addi	r4,r21,-1
 4019ab4:	1f00892e 	bgeu	r3,fp,4019cdc <__udivdi3+0x5c4>
 4019ab8:	202b883a 	mov	r21,r4
 4019abc:	18a3c83a 	sub	r17,r3,r2
 4019ac0:	8809883a 	mov	r4,r17
 4019ac4:	900b883a 	mov	r5,r18
 4019ac8:	400dc7c0 	call	400dc7c <__umodsi3>
 4019acc:	1029883a 	mov	r20,r2
 4019ad0:	8809883a 	mov	r4,r17
 4019ad4:	900b883a 	mov	r5,r18
 4019ad8:	a028943a 	slli	r20,r20,16
 4019adc:	400dc180 	call	400dc18 <__udivsi3>
 4019ae0:	100b883a 	mov	r5,r2
 4019ae4:	b009883a 	mov	r4,r22
 4019ae8:	843fffcc 	andi	r16,r16,65535
 4019aec:	1023883a 	mov	r17,r2
 4019af0:	8520b03a 	or	r16,r16,r20
 4019af4:	400dcd40 	call	400dcd4 <__mulsi3>
 4019af8:	8080042e 	bgeu	r16,r2,4019b0c <__udivdi3+0x3f4>
 4019afc:	8721883a 	add	r16,r16,fp
 4019b00:	88ffffc4 	addi	r3,r17,-1
 4019b04:	8700712e 	bgeu	r16,fp,4019ccc <__udivdi3+0x5b4>
 4019b08:	1823883a 	mov	r17,r3
 4019b0c:	a80e943a 	slli	r7,r21,16
 4019b10:	d8c00017 	ldw	r3,0(sp)
 4019b14:	80a1c83a 	sub	r16,r16,r2
 4019b18:	3c64b03a 	or	r18,r7,r17
 4019b1c:	1d3fffcc 	andi	r20,r3,65535
 4019b20:	9022d43a 	srli	r17,r18,16
 4019b24:	95bfffcc 	andi	r22,r18,65535
 4019b28:	a00b883a 	mov	r5,r20
 4019b2c:	b009883a 	mov	r4,r22
 4019b30:	182ad43a 	srli	r21,r3,16
 4019b34:	400dcd40 	call	400dcd4 <__mulsi3>
 4019b38:	a00b883a 	mov	r5,r20
 4019b3c:	8809883a 	mov	r4,r17
 4019b40:	1039883a 	mov	fp,r2
 4019b44:	400dcd40 	call	400dcd4 <__mulsi3>
 4019b48:	8809883a 	mov	r4,r17
 4019b4c:	a80b883a 	mov	r5,r21
 4019b50:	1029883a 	mov	r20,r2
 4019b54:	400dcd40 	call	400dcd4 <__mulsi3>
 4019b58:	a80b883a 	mov	r5,r21
 4019b5c:	b009883a 	mov	r4,r22
 4019b60:	1023883a 	mov	r17,r2
 4019b64:	400dcd40 	call	400dcd4 <__mulsi3>
 4019b68:	e006d43a 	srli	r3,fp,16
 4019b6c:	1505883a 	add	r2,r2,r20
 4019b70:	1887883a 	add	r3,r3,r2
 4019b74:	1d00022e 	bgeu	r3,r20,4019b80 <__udivdi3+0x468>
 4019b78:	00800074 	movhi	r2,1
 4019b7c:	88a3883a 	add	r17,r17,r2
 4019b80:	1804d43a 	srli	r2,r3,16
 4019b84:	1463883a 	add	r17,r2,r17
 4019b88:	84404436 	bltu	r16,r17,4019c9c <__udivdi3+0x584>
 4019b8c:	84403e26 	beq	r16,r17,4019c88 <__udivdi3+0x570>
 4019b90:	9005883a 	mov	r2,r18
 4019b94:	0007883a 	mov	r3,zero
 4019b98:	003f9106 	br	40199e0 <__alt_mem_onchip_memory2_0+0xfc014820>
 4019b9c:	88e2983a 	sll	r17,r17,r3
 4019ba0:	80aed83a 	srl	r23,r16,r2
 4019ba4:	80e0983a 	sll	r16,r16,r3
 4019ba8:	882ad43a 	srli	r21,r17,16
 4019bac:	9884d83a 	srl	r2,r19,r2
 4019bb0:	b809883a 	mov	r4,r23
 4019bb4:	a80b883a 	mov	r5,r21
 4019bb8:	98e4983a 	sll	r18,r19,r3
 4019bbc:	142cb03a 	or	r22,r2,r16
 4019bc0:	400dc7c0 	call	400dc7c <__umodsi3>
 4019bc4:	b809883a 	mov	r4,r23
 4019bc8:	a80b883a 	mov	r5,r21
 4019bcc:	1027883a 	mov	r19,r2
 4019bd0:	8d3fffcc 	andi	r20,r17,65535
 4019bd4:	400dc180 	call	400dc18 <__udivsi3>
 4019bd8:	a009883a 	mov	r4,r20
 4019bdc:	100b883a 	mov	r5,r2
 4019be0:	102f883a 	mov	r23,r2
 4019be4:	400dcd40 	call	400dcd4 <__mulsi3>
 4019be8:	9826943a 	slli	r19,r19,16
 4019bec:	b008d43a 	srli	r4,r22,16
 4019bf0:	24c8b03a 	or	r4,r4,r19
 4019bf4:	2080062e 	bgeu	r4,r2,4019c10 <__udivdi3+0x4f8>
 4019bf8:	2449883a 	add	r4,r4,r17
 4019bfc:	b8ffffc4 	addi	r3,r23,-1
 4019c00:	24403c36 	bltu	r4,r17,4019cf4 <__udivdi3+0x5dc>
 4019c04:	20803b2e 	bgeu	r4,r2,4019cf4 <__udivdi3+0x5dc>
 4019c08:	bdffff84 	addi	r23,r23,-2
 4019c0c:	2449883a 	add	r4,r4,r17
 4019c10:	20a1c83a 	sub	r16,r4,r2
 4019c14:	a80b883a 	mov	r5,r21
 4019c18:	8009883a 	mov	r4,r16
 4019c1c:	400dc7c0 	call	400dc7c <__umodsi3>
 4019c20:	a80b883a 	mov	r5,r21
 4019c24:	8009883a 	mov	r4,r16
 4019c28:	1027883a 	mov	r19,r2
 4019c2c:	400dc180 	call	400dc18 <__udivsi3>
 4019c30:	a009883a 	mov	r4,r20
 4019c34:	100b883a 	mov	r5,r2
 4019c38:	9826943a 	slli	r19,r19,16
 4019c3c:	1039883a 	mov	fp,r2
 4019c40:	400dcd40 	call	400dcd4 <__mulsi3>
 4019c44:	b13fffcc 	andi	r4,r22,65535
 4019c48:	24c8b03a 	or	r4,r4,r19
 4019c4c:	2080062e 	bgeu	r4,r2,4019c68 <__udivdi3+0x550>
 4019c50:	2449883a 	add	r4,r4,r17
 4019c54:	e0ffffc4 	addi	r3,fp,-1
 4019c58:	24402436 	bltu	r4,r17,4019cec <__udivdi3+0x5d4>
 4019c5c:	2080232e 	bgeu	r4,r2,4019cec <__udivdi3+0x5d4>
 4019c60:	e73fff84 	addi	fp,fp,-2
 4019c64:	2449883a 	add	r4,r4,r17
 4019c68:	b82e943a 	slli	r23,r23,16
 4019c6c:	20a1c83a 	sub	r16,r4,r2
 4019c70:	bf06b03a 	or	r3,r23,fp
 4019c74:	003f2806 	br	4019918 <__alt_mem_onchip_memory2_0+0xfc014758>
 4019c78:	2021883a 	mov	r16,r4
 4019c7c:	003f5306 	br	40199cc <__alt_mem_onchip_memory2_0+0xfc01480c>
 4019c80:	1821883a 	mov	r16,r3
 4019c84:	003ef406 	br	4019858 <__alt_mem_onchip_memory2_0+0xfc014698>
 4019c88:	1806943a 	slli	r3,r3,16
 4019c8c:	9de6983a 	sll	r19,r19,r23
 4019c90:	e73fffcc 	andi	fp,fp,65535
 4019c94:	1f07883a 	add	r3,r3,fp
 4019c98:	98ffbd2e 	bgeu	r19,r3,4019b90 <__alt_mem_onchip_memory2_0+0xfc0149d0>
 4019c9c:	90bfffc4 	addi	r2,r18,-1
 4019ca0:	0007883a 	mov	r3,zero
 4019ca4:	003f4e06 	br	40199e0 <__alt_mem_onchip_memory2_0+0xfc014820>
 4019ca8:	00800604 	movi	r2,24
 4019cac:	003ef506 	br	4019884 <__alt_mem_onchip_memory2_0+0xfc0146c4>
 4019cb0:	00800604 	movi	r2,24
 4019cb4:	003f0b06 	br	40198e4 <__alt_mem_onchip_memory2_0+0xfc014724>
 4019cb8:	00800604 	movi	r2,24
 4019cbc:	003ead06 	br	4019774 <__alt_mem_onchip_memory2_0+0xfc0145b4>
 4019cc0:	0007883a 	mov	r3,zero
 4019cc4:	00800044 	movi	r2,1
 4019cc8:	003f4506 	br	40199e0 <__alt_mem_onchip_memory2_0+0xfc014820>
 4019ccc:	80bf8e2e 	bgeu	r16,r2,4019b08 <__alt_mem_onchip_memory2_0+0xfc014948>
 4019cd0:	8c7fff84 	addi	r17,r17,-2
 4019cd4:	8721883a 	add	r16,r16,fp
 4019cd8:	003f8c06 	br	4019b0c <__alt_mem_onchip_memory2_0+0xfc01494c>
 4019cdc:	18bf762e 	bgeu	r3,r2,4019ab8 <__alt_mem_onchip_memory2_0+0xfc0148f8>
 4019ce0:	ad7fff84 	addi	r21,r21,-2
 4019ce4:	1f07883a 	add	r3,r3,fp
 4019ce8:	003f7406 	br	4019abc <__alt_mem_onchip_memory2_0+0xfc0148fc>
 4019cec:	1839883a 	mov	fp,r3
 4019cf0:	003fdd06 	br	4019c68 <__alt_mem_onchip_memory2_0+0xfc014aa8>
 4019cf4:	182f883a 	mov	r23,r3
 4019cf8:	003fc506 	br	4019c10 <__alt_mem_onchip_memory2_0+0xfc014a50>
 4019cfc:	b5bfff84 	addi	r22,r22,-2
 4019d00:	3c4f883a 	add	r7,r7,r17
 4019d04:	003f1a06 	br	4019970 <__alt_mem_onchip_memory2_0+0xfc0147b0>
 4019d08:	b5bfff84 	addi	r22,r22,-2
 4019d0c:	1c47883a 	add	r3,r3,r17
 4019d10:	003ebc06 	br	4019804 <__alt_mem_onchip_memory2_0+0xfc014644>

04019d14 <__umoddi3>:
 4019d14:	defff304 	addi	sp,sp,-52
 4019d18:	df000b15 	stw	fp,44(sp)
 4019d1c:	dc400415 	stw	r17,16(sp)
 4019d20:	dc000315 	stw	r16,12(sp)
 4019d24:	dfc00c15 	stw	ra,48(sp)
 4019d28:	ddc00a15 	stw	r23,40(sp)
 4019d2c:	dd800915 	stw	r22,36(sp)
 4019d30:	dd400815 	stw	r21,32(sp)
 4019d34:	dd000715 	stw	r20,28(sp)
 4019d38:	dcc00615 	stw	r19,24(sp)
 4019d3c:	dc800515 	stw	r18,20(sp)
 4019d40:	2021883a 	mov	r16,r4
 4019d44:	2823883a 	mov	r17,r5
 4019d48:	2839883a 	mov	fp,r5
 4019d4c:	3800401e 	bne	r7,zero,4019e50 <__umoddi3+0x13c>
 4019d50:	3027883a 	mov	r19,r6
 4019d54:	2029883a 	mov	r20,r4
 4019d58:	2980552e 	bgeu	r5,r6,4019eb0 <__umoddi3+0x19c>
 4019d5c:	00bfffd4 	movui	r2,65535
 4019d60:	1180a236 	bltu	r2,r6,4019fec <__umoddi3+0x2d8>
 4019d64:	01003fc4 	movi	r4,255
 4019d68:	2189803a 	cmpltu	r4,r4,r6
 4019d6c:	200890fa 	slli	r4,r4,3
 4019d70:	3104d83a 	srl	r2,r6,r4
 4019d74:	00c100b4 	movhi	r3,1026
 4019d78:	18f74f04 	addi	r3,r3,-8900
 4019d7c:	1885883a 	add	r2,r3,r2
 4019d80:	10c00003 	ldbu	r3,0(r2)
 4019d84:	00800804 	movi	r2,32
 4019d88:	1909883a 	add	r4,r3,r4
 4019d8c:	1125c83a 	sub	r18,r2,r4
 4019d90:	90000526 	beq	r18,zero,4019da8 <__umoddi3+0x94>
 4019d94:	8ca2983a 	sll	r17,r17,r18
 4019d98:	8108d83a 	srl	r4,r16,r4
 4019d9c:	34a6983a 	sll	r19,r6,r18
 4019da0:	84a8983a 	sll	r20,r16,r18
 4019da4:	2478b03a 	or	fp,r4,r17
 4019da8:	982cd43a 	srli	r22,r19,16
 4019dac:	e009883a 	mov	r4,fp
 4019db0:	9dffffcc 	andi	r23,r19,65535
 4019db4:	b00b883a 	mov	r5,r22
 4019db8:	400dc7c0 	call	400dc7c <__umodsi3>
 4019dbc:	b00b883a 	mov	r5,r22
 4019dc0:	e009883a 	mov	r4,fp
 4019dc4:	102b883a 	mov	r21,r2
 4019dc8:	400dc180 	call	400dc18 <__udivsi3>
 4019dcc:	100b883a 	mov	r5,r2
 4019dd0:	b809883a 	mov	r4,r23
 4019dd4:	400dcd40 	call	400dcd4 <__mulsi3>
 4019dd8:	a82a943a 	slli	r21,r21,16
 4019ddc:	a006d43a 	srli	r3,r20,16
 4019de0:	1d46b03a 	or	r3,r3,r21
 4019de4:	1880032e 	bgeu	r3,r2,4019df4 <__umoddi3+0xe0>
 4019de8:	1cc7883a 	add	r3,r3,r19
 4019dec:	1cc00136 	bltu	r3,r19,4019df4 <__umoddi3+0xe0>
 4019df0:	18813136 	bltu	r3,r2,401a2b8 <__umoddi3+0x5a4>
 4019df4:	18a1c83a 	sub	r16,r3,r2
 4019df8:	b00b883a 	mov	r5,r22
 4019dfc:	8009883a 	mov	r4,r16
 4019e00:	400dc7c0 	call	400dc7c <__umodsi3>
 4019e04:	b00b883a 	mov	r5,r22
 4019e08:	8009883a 	mov	r4,r16
 4019e0c:	1023883a 	mov	r17,r2
 4019e10:	400dc180 	call	400dc18 <__udivsi3>
 4019e14:	100b883a 	mov	r5,r2
 4019e18:	b809883a 	mov	r4,r23
 4019e1c:	8822943a 	slli	r17,r17,16
 4019e20:	400dcd40 	call	400dcd4 <__mulsi3>
 4019e24:	a0ffffcc 	andi	r3,r20,65535
 4019e28:	1c46b03a 	or	r3,r3,r17
 4019e2c:	1880042e 	bgeu	r3,r2,4019e40 <__umoddi3+0x12c>
 4019e30:	1cc7883a 	add	r3,r3,r19
 4019e34:	1cc00236 	bltu	r3,r19,4019e40 <__umoddi3+0x12c>
 4019e38:	1880012e 	bgeu	r3,r2,4019e40 <__umoddi3+0x12c>
 4019e3c:	1cc7883a 	add	r3,r3,r19
 4019e40:	1885c83a 	sub	r2,r3,r2
 4019e44:	1484d83a 	srl	r2,r2,r18
 4019e48:	0007883a 	mov	r3,zero
 4019e4c:	00005306 	br	4019f9c <__umoddi3+0x288>
 4019e50:	29c05036 	bltu	r5,r7,4019f94 <__umoddi3+0x280>
 4019e54:	00bfffd4 	movui	r2,65535
 4019e58:	11c05c2e 	bgeu	r2,r7,4019fcc <__umoddi3+0x2b8>
 4019e5c:	00804034 	movhi	r2,256
 4019e60:	10bfffc4 	addi	r2,r2,-1
 4019e64:	11c10636 	bltu	r2,r7,401a280 <__umoddi3+0x56c>
 4019e68:	01000404 	movi	r4,16
 4019e6c:	3904d83a 	srl	r2,r7,r4
 4019e70:	00c100b4 	movhi	r3,1026
 4019e74:	18f74f04 	addi	r3,r3,-8900
 4019e78:	1885883a 	add	r2,r3,r2
 4019e7c:	14c00003 	ldbu	r19,0(r2)
 4019e80:	00c00804 	movi	r3,32
 4019e84:	9927883a 	add	r19,r19,r4
 4019e88:	1ce9c83a 	sub	r20,r3,r19
 4019e8c:	a0005c1e 	bne	r20,zero,401a000 <__umoddi3+0x2ec>
 4019e90:	3c400136 	bltu	r7,r17,4019e98 <__umoddi3+0x184>
 4019e94:	81810a36 	bltu	r16,r6,401a2c0 <__umoddi3+0x5ac>
 4019e98:	8185c83a 	sub	r2,r16,r6
 4019e9c:	89e3c83a 	sub	r17,r17,r7
 4019ea0:	8089803a 	cmpltu	r4,r16,r2
 4019ea4:	8939c83a 	sub	fp,r17,r4
 4019ea8:	e007883a 	mov	r3,fp
 4019eac:	00003b06 	br	4019f9c <__umoddi3+0x288>
 4019eb0:	3000041e 	bne	r6,zero,4019ec4 <__umoddi3+0x1b0>
 4019eb4:	000b883a 	mov	r5,zero
 4019eb8:	01000044 	movi	r4,1
 4019ebc:	400dc180 	call	400dc18 <__udivsi3>
 4019ec0:	1027883a 	mov	r19,r2
 4019ec4:	00bfffd4 	movui	r2,65535
 4019ec8:	14c0442e 	bgeu	r2,r19,4019fdc <__umoddi3+0x2c8>
 4019ecc:	00804034 	movhi	r2,256
 4019ed0:	10bfffc4 	addi	r2,r2,-1
 4019ed4:	14c0ec36 	bltu	r2,r19,401a288 <__umoddi3+0x574>
 4019ed8:	00800404 	movi	r2,16
 4019edc:	9886d83a 	srl	r3,r19,r2
 4019ee0:	010100b4 	movhi	r4,1026
 4019ee4:	21374f04 	addi	r4,r4,-8900
 4019ee8:	20c7883a 	add	r3,r4,r3
 4019eec:	18c00003 	ldbu	r3,0(r3)
 4019ef0:	1887883a 	add	r3,r3,r2
 4019ef4:	00800804 	movi	r2,32
 4019ef8:	10e5c83a 	sub	r18,r2,r3
 4019efc:	9000ab1e 	bne	r18,zero,401a1ac <__umoddi3+0x498>
 4019f00:	982cd43a 	srli	r22,r19,16
 4019f04:	8ce3c83a 	sub	r17,r17,r19
 4019f08:	9dffffcc 	andi	r23,r19,65535
 4019f0c:	b00b883a 	mov	r5,r22
 4019f10:	8809883a 	mov	r4,r17
 4019f14:	400dc7c0 	call	400dc7c <__umodsi3>
 4019f18:	b00b883a 	mov	r5,r22
 4019f1c:	8809883a 	mov	r4,r17
 4019f20:	102b883a 	mov	r21,r2
 4019f24:	400dc180 	call	400dc18 <__udivsi3>
 4019f28:	b80b883a 	mov	r5,r23
 4019f2c:	1009883a 	mov	r4,r2
 4019f30:	400dcd40 	call	400dcd4 <__mulsi3>
 4019f34:	a82a943a 	slli	r21,r21,16
 4019f38:	a006d43a 	srli	r3,r20,16
 4019f3c:	1d46b03a 	or	r3,r3,r21
 4019f40:	1880042e 	bgeu	r3,r2,4019f54 <__umoddi3+0x240>
 4019f44:	1cc7883a 	add	r3,r3,r19
 4019f48:	1cc00236 	bltu	r3,r19,4019f54 <__umoddi3+0x240>
 4019f4c:	1880012e 	bgeu	r3,r2,4019f54 <__umoddi3+0x240>
 4019f50:	1cc7883a 	add	r3,r3,r19
 4019f54:	18a1c83a 	sub	r16,r3,r2
 4019f58:	b00b883a 	mov	r5,r22
 4019f5c:	8009883a 	mov	r4,r16
 4019f60:	400dc7c0 	call	400dc7c <__umodsi3>
 4019f64:	1023883a 	mov	r17,r2
 4019f68:	b00b883a 	mov	r5,r22
 4019f6c:	8009883a 	mov	r4,r16
 4019f70:	400dc180 	call	400dc18 <__udivsi3>
 4019f74:	8822943a 	slli	r17,r17,16
 4019f78:	b80b883a 	mov	r5,r23
 4019f7c:	1009883a 	mov	r4,r2
 4019f80:	400dcd40 	call	400dcd4 <__mulsi3>
 4019f84:	a53fffcc 	andi	r20,r20,65535
 4019f88:	a446b03a 	or	r3,r20,r17
 4019f8c:	18bfac2e 	bgeu	r3,r2,4019e40 <__alt_mem_onchip_memory2_0+0xfc014c80>
 4019f90:	003fa706 	br	4019e30 <__alt_mem_onchip_memory2_0+0xfc014c70>
 4019f94:	2005883a 	mov	r2,r4
 4019f98:	2807883a 	mov	r3,r5
 4019f9c:	dfc00c17 	ldw	ra,48(sp)
 4019fa0:	df000b17 	ldw	fp,44(sp)
 4019fa4:	ddc00a17 	ldw	r23,40(sp)
 4019fa8:	dd800917 	ldw	r22,36(sp)
 4019fac:	dd400817 	ldw	r21,32(sp)
 4019fb0:	dd000717 	ldw	r20,28(sp)
 4019fb4:	dcc00617 	ldw	r19,24(sp)
 4019fb8:	dc800517 	ldw	r18,20(sp)
 4019fbc:	dc400417 	ldw	r17,16(sp)
 4019fc0:	dc000317 	ldw	r16,12(sp)
 4019fc4:	dec00d04 	addi	sp,sp,52
 4019fc8:	f800283a 	ret
 4019fcc:	04c03fc4 	movi	r19,255
 4019fd0:	99c9803a 	cmpltu	r4,r19,r7
 4019fd4:	200890fa 	slli	r4,r4,3
 4019fd8:	003fa406 	br	4019e6c <__alt_mem_onchip_memory2_0+0xfc014cac>
 4019fdc:	00803fc4 	movi	r2,255
 4019fe0:	14c5803a 	cmpltu	r2,r2,r19
 4019fe4:	100490fa 	slli	r2,r2,3
 4019fe8:	003fbc06 	br	4019edc <__alt_mem_onchip_memory2_0+0xfc014d1c>
 4019fec:	00804034 	movhi	r2,256
 4019ff0:	10bfffc4 	addi	r2,r2,-1
 4019ff4:	1180a636 	bltu	r2,r6,401a290 <__umoddi3+0x57c>
 4019ff8:	01000404 	movi	r4,16
 4019ffc:	003f5c06 	br	4019d70 <__alt_mem_onchip_memory2_0+0xfc014bb0>
 401a000:	3d0e983a 	sll	r7,r7,r20
 401a004:	34ead83a 	srl	r21,r6,r19
 401a008:	8cc6d83a 	srl	r3,r17,r19
 401a00c:	8d10983a 	sll	r8,r17,r20
 401a010:	3d6ab03a 	or	r21,r7,r21
 401a014:	a82cd43a 	srli	r22,r21,16
 401a018:	84e2d83a 	srl	r17,r16,r19
 401a01c:	1809883a 	mov	r4,r3
 401a020:	b00b883a 	mov	r5,r22
 401a024:	8a22b03a 	or	r17,r17,r8
 401a028:	3524983a 	sll	r18,r6,r20
 401a02c:	dc400015 	stw	r17,0(sp)
 401a030:	d8c00115 	stw	r3,4(sp)
 401a034:	400dc7c0 	call	400dc7c <__umodsi3>
 401a038:	d8c00117 	ldw	r3,4(sp)
 401a03c:	b00b883a 	mov	r5,r22
 401a040:	1039883a 	mov	fp,r2
 401a044:	1809883a 	mov	r4,r3
 401a048:	400dc180 	call	400dc18 <__udivsi3>
 401a04c:	adffffcc 	andi	r23,r21,65535
 401a050:	100b883a 	mov	r5,r2
 401a054:	b809883a 	mov	r4,r23
 401a058:	1023883a 	mov	r17,r2
 401a05c:	400dcd40 	call	400dcd4 <__mulsi3>
 401a060:	d9400017 	ldw	r5,0(sp)
 401a064:	e008943a 	slli	r4,fp,16
 401a068:	8520983a 	sll	r16,r16,r20
 401a06c:	2806d43a 	srli	r3,r5,16
 401a070:	1906b03a 	or	r3,r3,r4
 401a074:	1880042e 	bgeu	r3,r2,401a088 <__umoddi3+0x374>
 401a078:	1d47883a 	add	r3,r3,r21
 401a07c:	893fffc4 	addi	r4,r17,-1
 401a080:	1d40892e 	bgeu	r3,r21,401a2a8 <__umoddi3+0x594>
 401a084:	2023883a 	mov	r17,r4
 401a088:	18b9c83a 	sub	fp,r3,r2
 401a08c:	b00b883a 	mov	r5,r22
 401a090:	e009883a 	mov	r4,fp
 401a094:	400dc7c0 	call	400dc7c <__umodsi3>
 401a098:	b00b883a 	mov	r5,r22
 401a09c:	e009883a 	mov	r4,fp
 401a0a0:	d8800215 	stw	r2,8(sp)
 401a0a4:	400dc180 	call	400dc18 <__udivsi3>
 401a0a8:	100b883a 	mov	r5,r2
 401a0ac:	b809883a 	mov	r4,r23
 401a0b0:	102d883a 	mov	r22,r2
 401a0b4:	400dcd40 	call	400dcd4 <__mulsi3>
 401a0b8:	d9800217 	ldw	r6,8(sp)
 401a0bc:	d8c00017 	ldw	r3,0(sp)
 401a0c0:	300c943a 	slli	r6,r6,16
 401a0c4:	1a3fffcc 	andi	r8,r3,65535
 401a0c8:	4190b03a 	or	r8,r8,r6
 401a0cc:	4080042e 	bgeu	r8,r2,401a0e0 <__umoddi3+0x3cc>
 401a0d0:	4551883a 	add	r8,r8,r21
 401a0d4:	b0ffffc4 	addi	r3,r22,-1
 401a0d8:	45406f2e 	bgeu	r8,r21,401a298 <__umoddi3+0x584>
 401a0dc:	182d883a 	mov	r22,r3
 401a0e0:	880e943a 	slli	r7,r17,16
 401a0e4:	9006d43a 	srli	r3,r18,16
 401a0e8:	91bfffcc 	andi	r6,r18,65535
 401a0ec:	3dacb03a 	or	r22,r7,r22
 401a0f0:	b02ed43a 	srli	r23,r22,16
 401a0f4:	b5bfffcc 	andi	r22,r22,65535
 401a0f8:	300b883a 	mov	r5,r6
 401a0fc:	b009883a 	mov	r4,r22
 401a100:	40a3c83a 	sub	r17,r8,r2
 401a104:	d8c00115 	stw	r3,4(sp)
 401a108:	d9800215 	stw	r6,8(sp)
 401a10c:	400dcd40 	call	400dcd4 <__mulsi3>
 401a110:	d9800217 	ldw	r6,8(sp)
 401a114:	b809883a 	mov	r4,r23
 401a118:	1039883a 	mov	fp,r2
 401a11c:	300b883a 	mov	r5,r6
 401a120:	400dcd40 	call	400dcd4 <__mulsi3>
 401a124:	d8c00117 	ldw	r3,4(sp)
 401a128:	b809883a 	mov	r4,r23
 401a12c:	d8800215 	stw	r2,8(sp)
 401a130:	180b883a 	mov	r5,r3
 401a134:	400dcd40 	call	400dcd4 <__mulsi3>
 401a138:	d8c00117 	ldw	r3,4(sp)
 401a13c:	b009883a 	mov	r4,r22
 401a140:	102f883a 	mov	r23,r2
 401a144:	180b883a 	mov	r5,r3
 401a148:	400dcd40 	call	400dcd4 <__mulsi3>
 401a14c:	d9800217 	ldw	r6,8(sp)
 401a150:	e006d43a 	srli	r3,fp,16
 401a154:	1185883a 	add	r2,r2,r6
 401a158:	1885883a 	add	r2,r3,r2
 401a15c:	1180022e 	bgeu	r2,r6,401a168 <__umoddi3+0x454>
 401a160:	00c00074 	movhi	r3,1
 401a164:	b8ef883a 	add	r23,r23,r3
 401a168:	1006d43a 	srli	r3,r2,16
 401a16c:	1004943a 	slli	r2,r2,16
 401a170:	e73fffcc 	andi	fp,fp,65535
 401a174:	1dc7883a 	add	r3,r3,r23
 401a178:	1739883a 	add	fp,r2,fp
 401a17c:	88c03a36 	bltu	r17,r3,401a268 <__umoddi3+0x554>
 401a180:	88c05126 	beq	r17,r3,401a2c8 <__umoddi3+0x5b4>
 401a184:	88c9c83a 	sub	r4,r17,r3
 401a188:	e00f883a 	mov	r7,fp
 401a18c:	81cfc83a 	sub	r7,r16,r7
 401a190:	81c7803a 	cmpltu	r3,r16,r7
 401a194:	20c7c83a 	sub	r3,r4,r3
 401a198:	1cc4983a 	sll	r2,r3,r19
 401a19c:	3d0ed83a 	srl	r7,r7,r20
 401a1a0:	1d06d83a 	srl	r3,r3,r20
 401a1a4:	11c4b03a 	or	r2,r2,r7
 401a1a8:	003f7c06 	br	4019f9c <__alt_mem_onchip_memory2_0+0xfc014ddc>
 401a1ac:	9ca6983a 	sll	r19,r19,r18
 401a1b0:	88f8d83a 	srl	fp,r17,r3
 401a1b4:	80c4d83a 	srl	r2,r16,r3
 401a1b8:	982cd43a 	srli	r22,r19,16
 401a1bc:	8ca2983a 	sll	r17,r17,r18
 401a1c0:	e009883a 	mov	r4,fp
 401a1c4:	b00b883a 	mov	r5,r22
 401a1c8:	146ab03a 	or	r21,r2,r17
 401a1cc:	400dc7c0 	call	400dc7c <__umodsi3>
 401a1d0:	b00b883a 	mov	r5,r22
 401a1d4:	e009883a 	mov	r4,fp
 401a1d8:	1029883a 	mov	r20,r2
 401a1dc:	9dffffcc 	andi	r23,r19,65535
 401a1e0:	400dc180 	call	400dc18 <__udivsi3>
 401a1e4:	b809883a 	mov	r4,r23
 401a1e8:	100b883a 	mov	r5,r2
 401a1ec:	400dcd40 	call	400dcd4 <__mulsi3>
 401a1f0:	a008943a 	slli	r4,r20,16
 401a1f4:	a806d43a 	srli	r3,r21,16
 401a1f8:	84a8983a 	sll	r20,r16,r18
 401a1fc:	1906b03a 	or	r3,r3,r4
 401a200:	1880042e 	bgeu	r3,r2,401a214 <__umoddi3+0x500>
 401a204:	1cc7883a 	add	r3,r3,r19
 401a208:	1cc00236 	bltu	r3,r19,401a214 <__umoddi3+0x500>
 401a20c:	1880012e 	bgeu	r3,r2,401a214 <__umoddi3+0x500>
 401a210:	1cc7883a 	add	r3,r3,r19
 401a214:	18a3c83a 	sub	r17,r3,r2
 401a218:	b00b883a 	mov	r5,r22
 401a21c:	8809883a 	mov	r4,r17
 401a220:	400dc7c0 	call	400dc7c <__umodsi3>
 401a224:	b00b883a 	mov	r5,r22
 401a228:	8809883a 	mov	r4,r17
 401a22c:	1021883a 	mov	r16,r2
 401a230:	400dc180 	call	400dc18 <__udivsi3>
 401a234:	100b883a 	mov	r5,r2
 401a238:	b809883a 	mov	r4,r23
 401a23c:	8020943a 	slli	r16,r16,16
 401a240:	400dcd40 	call	400dcd4 <__mulsi3>
 401a244:	a8ffffcc 	andi	r3,r21,65535
 401a248:	1c06b03a 	or	r3,r3,r16
 401a24c:	1880042e 	bgeu	r3,r2,401a260 <__umoddi3+0x54c>
 401a250:	1cc7883a 	add	r3,r3,r19
 401a254:	1cc00236 	bltu	r3,r19,401a260 <__umoddi3+0x54c>
 401a258:	1880012e 	bgeu	r3,r2,401a260 <__umoddi3+0x54c>
 401a25c:	1cc7883a 	add	r3,r3,r19
 401a260:	18a3c83a 	sub	r17,r3,r2
 401a264:	003f2906 	br	4019f0c <__alt_mem_onchip_memory2_0+0xfc014d4c>
 401a268:	e48fc83a 	sub	r7,fp,r18
 401a26c:	1d49c83a 	sub	r4,r3,r21
 401a270:	e1f9803a 	cmpltu	fp,fp,r7
 401a274:	2739c83a 	sub	fp,r4,fp
 401a278:	8f09c83a 	sub	r4,r17,fp
 401a27c:	003fc306 	br	401a18c <__alt_mem_onchip_memory2_0+0xfc014fcc>
 401a280:	01000604 	movi	r4,24
 401a284:	003ef906 	br	4019e6c <__alt_mem_onchip_memory2_0+0xfc014cac>
 401a288:	00800604 	movi	r2,24
 401a28c:	003f1306 	br	4019edc <__alt_mem_onchip_memory2_0+0xfc014d1c>
 401a290:	01000604 	movi	r4,24
 401a294:	003eb606 	br	4019d70 <__alt_mem_onchip_memory2_0+0xfc014bb0>
 401a298:	40bf902e 	bgeu	r8,r2,401a0dc <__alt_mem_onchip_memory2_0+0xfc014f1c>
 401a29c:	b5bfff84 	addi	r22,r22,-2
 401a2a0:	4551883a 	add	r8,r8,r21
 401a2a4:	003f8e06 	br	401a0e0 <__alt_mem_onchip_memory2_0+0xfc014f20>
 401a2a8:	18bf762e 	bgeu	r3,r2,401a084 <__alt_mem_onchip_memory2_0+0xfc014ec4>
 401a2ac:	8c7fff84 	addi	r17,r17,-2
 401a2b0:	1d47883a 	add	r3,r3,r21
 401a2b4:	003f7406 	br	401a088 <__alt_mem_onchip_memory2_0+0xfc014ec8>
 401a2b8:	1cc7883a 	add	r3,r3,r19
 401a2bc:	003ecd06 	br	4019df4 <__alt_mem_onchip_memory2_0+0xfc014c34>
 401a2c0:	8005883a 	mov	r2,r16
 401a2c4:	003ef806 	br	4019ea8 <__alt_mem_onchip_memory2_0+0xfc014ce8>
 401a2c8:	873fe736 	bltu	r16,fp,401a268 <__alt_mem_onchip_memory2_0+0xfc0150a8>
 401a2cc:	e00f883a 	mov	r7,fp
 401a2d0:	0009883a 	mov	r4,zero
 401a2d4:	003fad06 	br	401a18c <__alt_mem_onchip_memory2_0+0xfc014fcc>

0401a2d8 <__adddf3>:
 401a2d8:	02c00434 	movhi	r11,16
 401a2dc:	5affffc4 	addi	r11,r11,-1
 401a2e0:	2806d7fa 	srli	r3,r5,31
 401a2e4:	2ad4703a 	and	r10,r5,r11
 401a2e8:	3ad2703a 	and	r9,r7,r11
 401a2ec:	3804d53a 	srli	r2,r7,20
 401a2f0:	3018d77a 	srli	r12,r6,29
 401a2f4:	280ad53a 	srli	r5,r5,20
 401a2f8:	501490fa 	slli	r10,r10,3
 401a2fc:	2010d77a 	srli	r8,r4,29
 401a300:	481290fa 	slli	r9,r9,3
 401a304:	380ed7fa 	srli	r7,r7,31
 401a308:	defffb04 	addi	sp,sp,-20
 401a30c:	dc800215 	stw	r18,8(sp)
 401a310:	dc400115 	stw	r17,4(sp)
 401a314:	dc000015 	stw	r16,0(sp)
 401a318:	dfc00415 	stw	ra,16(sp)
 401a31c:	dcc00315 	stw	r19,12(sp)
 401a320:	1c803fcc 	andi	r18,r3,255
 401a324:	2c01ffcc 	andi	r16,r5,2047
 401a328:	5210b03a 	or	r8,r10,r8
 401a32c:	202290fa 	slli	r17,r4,3
 401a330:	1081ffcc 	andi	r2,r2,2047
 401a334:	4b12b03a 	or	r9,r9,r12
 401a338:	300c90fa 	slli	r6,r6,3
 401a33c:	91c07526 	beq	r18,r7,401a514 <__adddf3+0x23c>
 401a340:	8087c83a 	sub	r3,r16,r2
 401a344:	00c0ab0e 	bge	zero,r3,401a5f4 <__adddf3+0x31c>
 401a348:	10002a1e 	bne	r2,zero,401a3f4 <__adddf3+0x11c>
 401a34c:	4984b03a 	or	r2,r9,r6
 401a350:	1000961e 	bne	r2,zero,401a5ac <__adddf3+0x2d4>
 401a354:	888001cc 	andi	r2,r17,7
 401a358:	10000726 	beq	r2,zero,401a378 <__adddf3+0xa0>
 401a35c:	888003cc 	andi	r2,r17,15
 401a360:	00c00104 	movi	r3,4
 401a364:	10c00426 	beq	r2,r3,401a378 <__adddf3+0xa0>
 401a368:	88c7883a 	add	r3,r17,r3
 401a36c:	1c63803a 	cmpltu	r17,r3,r17
 401a370:	4451883a 	add	r8,r8,r17
 401a374:	1823883a 	mov	r17,r3
 401a378:	4080202c 	andhi	r2,r8,128
 401a37c:	10005926 	beq	r2,zero,401a4e4 <__adddf3+0x20c>
 401a380:	84000044 	addi	r16,r16,1
 401a384:	0081ffc4 	movi	r2,2047
 401a388:	8080ba26 	beq	r16,r2,401a674 <__adddf3+0x39c>
 401a38c:	00bfe034 	movhi	r2,65408
 401a390:	10bfffc4 	addi	r2,r2,-1
 401a394:	4090703a 	and	r8,r8,r2
 401a398:	4004977a 	slli	r2,r8,29
 401a39c:	4010927a 	slli	r8,r8,9
 401a3a0:	8822d0fa 	srli	r17,r17,3
 401a3a4:	8401ffcc 	andi	r16,r16,2047
 401a3a8:	4010d33a 	srli	r8,r8,12
 401a3ac:	9007883a 	mov	r3,r18
 401a3b0:	1444b03a 	or	r2,r2,r17
 401a3b4:	8401ffcc 	andi	r16,r16,2047
 401a3b8:	8020953a 	slli	r16,r16,20
 401a3bc:	18c03fcc 	andi	r3,r3,255
 401a3c0:	01000434 	movhi	r4,16
 401a3c4:	213fffc4 	addi	r4,r4,-1
 401a3c8:	180697fa 	slli	r3,r3,31
 401a3cc:	4110703a 	and	r8,r8,r4
 401a3d0:	4410b03a 	or	r8,r8,r16
 401a3d4:	40c6b03a 	or	r3,r8,r3
 401a3d8:	dfc00417 	ldw	ra,16(sp)
 401a3dc:	dcc00317 	ldw	r19,12(sp)
 401a3e0:	dc800217 	ldw	r18,8(sp)
 401a3e4:	dc400117 	ldw	r17,4(sp)
 401a3e8:	dc000017 	ldw	r16,0(sp)
 401a3ec:	dec00504 	addi	sp,sp,20
 401a3f0:	f800283a 	ret
 401a3f4:	0081ffc4 	movi	r2,2047
 401a3f8:	80bfd626 	beq	r16,r2,401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a3fc:	4a402034 	orhi	r9,r9,128
 401a400:	00800e04 	movi	r2,56
 401a404:	10c09f16 	blt	r2,r3,401a684 <__adddf3+0x3ac>
 401a408:	008007c4 	movi	r2,31
 401a40c:	10c0c216 	blt	r2,r3,401a718 <__adddf3+0x440>
 401a410:	00800804 	movi	r2,32
 401a414:	10c5c83a 	sub	r2,r2,r3
 401a418:	488a983a 	sll	r5,r9,r2
 401a41c:	30c8d83a 	srl	r4,r6,r3
 401a420:	3084983a 	sll	r2,r6,r2
 401a424:	48c6d83a 	srl	r3,r9,r3
 401a428:	290cb03a 	or	r6,r5,r4
 401a42c:	1004c03a 	cmpne	r2,r2,zero
 401a430:	308cb03a 	or	r6,r6,r2
 401a434:	898dc83a 	sub	r6,r17,r6
 401a438:	89a3803a 	cmpltu	r17,r17,r6
 401a43c:	40d1c83a 	sub	r8,r8,r3
 401a440:	4451c83a 	sub	r8,r8,r17
 401a444:	3023883a 	mov	r17,r6
 401a448:	4080202c 	andhi	r2,r8,128
 401a44c:	10002326 	beq	r2,zero,401a4dc <__adddf3+0x204>
 401a450:	04c02034 	movhi	r19,128
 401a454:	9cffffc4 	addi	r19,r19,-1
 401a458:	44e6703a 	and	r19,r8,r19
 401a45c:	98007626 	beq	r19,zero,401a638 <__adddf3+0x360>
 401a460:	9809883a 	mov	r4,r19
 401a464:	400fb2c0 	call	400fb2c <__clzsi2>
 401a468:	10fffe04 	addi	r3,r2,-8
 401a46c:	010007c4 	movi	r4,31
 401a470:	20c07716 	blt	r4,r3,401a650 <__adddf3+0x378>
 401a474:	00800804 	movi	r2,32
 401a478:	10c5c83a 	sub	r2,r2,r3
 401a47c:	8884d83a 	srl	r2,r17,r2
 401a480:	98d0983a 	sll	r8,r19,r3
 401a484:	88e2983a 	sll	r17,r17,r3
 401a488:	1204b03a 	or	r2,r2,r8
 401a48c:	1c007416 	blt	r3,r16,401a660 <__adddf3+0x388>
 401a490:	1c21c83a 	sub	r16,r3,r16
 401a494:	82000044 	addi	r8,r16,1
 401a498:	00c007c4 	movi	r3,31
 401a49c:	1a009116 	blt	r3,r8,401a6e4 <__adddf3+0x40c>
 401a4a0:	00c00804 	movi	r3,32
 401a4a4:	1a07c83a 	sub	r3,r3,r8
 401a4a8:	8a08d83a 	srl	r4,r17,r8
 401a4ac:	88e2983a 	sll	r17,r17,r3
 401a4b0:	10c6983a 	sll	r3,r2,r3
 401a4b4:	1210d83a 	srl	r8,r2,r8
 401a4b8:	8804c03a 	cmpne	r2,r17,zero
 401a4bc:	1906b03a 	or	r3,r3,r4
 401a4c0:	18a2b03a 	or	r17,r3,r2
 401a4c4:	0021883a 	mov	r16,zero
 401a4c8:	003fa206 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a4cc:	1890b03a 	or	r8,r3,r2
 401a4d0:	40017d26 	beq	r8,zero,401aac8 <__adddf3+0x7f0>
 401a4d4:	1011883a 	mov	r8,r2
 401a4d8:	1823883a 	mov	r17,r3
 401a4dc:	888001cc 	andi	r2,r17,7
 401a4e0:	103f9e1e 	bne	r2,zero,401a35c <__alt_mem_onchip_memory2_0+0xfc01519c>
 401a4e4:	4004977a 	slli	r2,r8,29
 401a4e8:	8822d0fa 	srli	r17,r17,3
 401a4ec:	4010d0fa 	srli	r8,r8,3
 401a4f0:	9007883a 	mov	r3,r18
 401a4f4:	1444b03a 	or	r2,r2,r17
 401a4f8:	0101ffc4 	movi	r4,2047
 401a4fc:	81002426 	beq	r16,r4,401a590 <__adddf3+0x2b8>
 401a500:	8120703a 	and	r16,r16,r4
 401a504:	01000434 	movhi	r4,16
 401a508:	213fffc4 	addi	r4,r4,-1
 401a50c:	4110703a 	and	r8,r8,r4
 401a510:	003fa806 	br	401a3b4 <__alt_mem_onchip_memory2_0+0xfc0151f4>
 401a514:	8089c83a 	sub	r4,r16,r2
 401a518:	01005e0e 	bge	zero,r4,401a694 <__adddf3+0x3bc>
 401a51c:	10002b26 	beq	r2,zero,401a5cc <__adddf3+0x2f4>
 401a520:	0081ffc4 	movi	r2,2047
 401a524:	80bf8b26 	beq	r16,r2,401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a528:	4a402034 	orhi	r9,r9,128
 401a52c:	00800e04 	movi	r2,56
 401a530:	1100a40e 	bge	r2,r4,401a7c4 <__adddf3+0x4ec>
 401a534:	498cb03a 	or	r6,r9,r6
 401a538:	300ac03a 	cmpne	r5,r6,zero
 401a53c:	0013883a 	mov	r9,zero
 401a540:	2c4b883a 	add	r5,r5,r17
 401a544:	2c63803a 	cmpltu	r17,r5,r17
 401a548:	4a11883a 	add	r8,r9,r8
 401a54c:	8a11883a 	add	r8,r17,r8
 401a550:	2823883a 	mov	r17,r5
 401a554:	4080202c 	andhi	r2,r8,128
 401a558:	103fe026 	beq	r2,zero,401a4dc <__alt_mem_onchip_memory2_0+0xfc01531c>
 401a55c:	84000044 	addi	r16,r16,1
 401a560:	0081ffc4 	movi	r2,2047
 401a564:	8080d226 	beq	r16,r2,401a8b0 <__adddf3+0x5d8>
 401a568:	00bfe034 	movhi	r2,65408
 401a56c:	10bfffc4 	addi	r2,r2,-1
 401a570:	4090703a 	and	r8,r8,r2
 401a574:	880ad07a 	srli	r5,r17,1
 401a578:	400897fa 	slli	r4,r8,31
 401a57c:	88c0004c 	andi	r3,r17,1
 401a580:	28e2b03a 	or	r17,r5,r3
 401a584:	4010d07a 	srli	r8,r8,1
 401a588:	2462b03a 	or	r17,r4,r17
 401a58c:	003f7106 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a590:	4088b03a 	or	r4,r8,r2
 401a594:	20014526 	beq	r4,zero,401aaac <__adddf3+0x7d4>
 401a598:	01000434 	movhi	r4,16
 401a59c:	42000234 	orhi	r8,r8,8
 401a5a0:	213fffc4 	addi	r4,r4,-1
 401a5a4:	4110703a 	and	r8,r8,r4
 401a5a8:	003f8206 	br	401a3b4 <__alt_mem_onchip_memory2_0+0xfc0151f4>
 401a5ac:	18ffffc4 	addi	r3,r3,-1
 401a5b0:	1800491e 	bne	r3,zero,401a6d8 <__adddf3+0x400>
 401a5b4:	898bc83a 	sub	r5,r17,r6
 401a5b8:	8963803a 	cmpltu	r17,r17,r5
 401a5bc:	4251c83a 	sub	r8,r8,r9
 401a5c0:	4451c83a 	sub	r8,r8,r17
 401a5c4:	2823883a 	mov	r17,r5
 401a5c8:	003f9f06 	br	401a448 <__alt_mem_onchip_memory2_0+0xfc015288>
 401a5cc:	4984b03a 	or	r2,r9,r6
 401a5d0:	103f6026 	beq	r2,zero,401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a5d4:	213fffc4 	addi	r4,r4,-1
 401a5d8:	2000931e 	bne	r4,zero,401a828 <__adddf3+0x550>
 401a5dc:	898d883a 	add	r6,r17,r6
 401a5e0:	3463803a 	cmpltu	r17,r6,r17
 401a5e4:	4251883a 	add	r8,r8,r9
 401a5e8:	8a11883a 	add	r8,r17,r8
 401a5ec:	3023883a 	mov	r17,r6
 401a5f0:	003fd806 	br	401a554 <__alt_mem_onchip_memory2_0+0xfc015394>
 401a5f4:	1800541e 	bne	r3,zero,401a748 <__adddf3+0x470>
 401a5f8:	80800044 	addi	r2,r16,1
 401a5fc:	1081ffcc 	andi	r2,r2,2047
 401a600:	00c00044 	movi	r3,1
 401a604:	1880a00e 	bge	r3,r2,401a888 <__adddf3+0x5b0>
 401a608:	8989c83a 	sub	r4,r17,r6
 401a60c:	8905803a 	cmpltu	r2,r17,r4
 401a610:	4267c83a 	sub	r19,r8,r9
 401a614:	98a7c83a 	sub	r19,r19,r2
 401a618:	9880202c 	andhi	r2,r19,128
 401a61c:	10006326 	beq	r2,zero,401a7ac <__adddf3+0x4d4>
 401a620:	3463c83a 	sub	r17,r6,r17
 401a624:	4a07c83a 	sub	r3,r9,r8
 401a628:	344d803a 	cmpltu	r6,r6,r17
 401a62c:	19a7c83a 	sub	r19,r3,r6
 401a630:	3825883a 	mov	r18,r7
 401a634:	983f8a1e 	bne	r19,zero,401a460 <__alt_mem_onchip_memory2_0+0xfc0152a0>
 401a638:	8809883a 	mov	r4,r17
 401a63c:	400fb2c0 	call	400fb2c <__clzsi2>
 401a640:	10800804 	addi	r2,r2,32
 401a644:	10fffe04 	addi	r3,r2,-8
 401a648:	010007c4 	movi	r4,31
 401a64c:	20ff890e 	bge	r4,r3,401a474 <__alt_mem_onchip_memory2_0+0xfc0152b4>
 401a650:	10bff604 	addi	r2,r2,-40
 401a654:	8884983a 	sll	r2,r17,r2
 401a658:	0023883a 	mov	r17,zero
 401a65c:	1c3f8c0e 	bge	r3,r16,401a490 <__alt_mem_onchip_memory2_0+0xfc0152d0>
 401a660:	023fe034 	movhi	r8,65408
 401a664:	423fffc4 	addi	r8,r8,-1
 401a668:	80e1c83a 	sub	r16,r16,r3
 401a66c:	1210703a 	and	r8,r2,r8
 401a670:	003f3806 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a674:	9007883a 	mov	r3,r18
 401a678:	0011883a 	mov	r8,zero
 401a67c:	0005883a 	mov	r2,zero
 401a680:	003f4c06 	br	401a3b4 <__alt_mem_onchip_memory2_0+0xfc0151f4>
 401a684:	498cb03a 	or	r6,r9,r6
 401a688:	300cc03a 	cmpne	r6,r6,zero
 401a68c:	0007883a 	mov	r3,zero
 401a690:	003f6806 	br	401a434 <__alt_mem_onchip_memory2_0+0xfc015274>
 401a694:	20009c1e 	bne	r4,zero,401a908 <__adddf3+0x630>
 401a698:	80800044 	addi	r2,r16,1
 401a69c:	1141ffcc 	andi	r5,r2,2047
 401a6a0:	01000044 	movi	r4,1
 401a6a4:	2140670e 	bge	r4,r5,401a844 <__adddf3+0x56c>
 401a6a8:	0101ffc4 	movi	r4,2047
 401a6ac:	11007f26 	beq	r2,r4,401a8ac <__adddf3+0x5d4>
 401a6b0:	898d883a 	add	r6,r17,r6
 401a6b4:	4247883a 	add	r3,r8,r9
 401a6b8:	3451803a 	cmpltu	r8,r6,r17
 401a6bc:	40d1883a 	add	r8,r8,r3
 401a6c0:	402297fa 	slli	r17,r8,31
 401a6c4:	300cd07a 	srli	r6,r6,1
 401a6c8:	4010d07a 	srli	r8,r8,1
 401a6cc:	1021883a 	mov	r16,r2
 401a6d0:	89a2b03a 	or	r17,r17,r6
 401a6d4:	003f1f06 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a6d8:	0081ffc4 	movi	r2,2047
 401a6dc:	80bf481e 	bne	r16,r2,401a400 <__alt_mem_onchip_memory2_0+0xfc015240>
 401a6e0:	003f1c06 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a6e4:	843ff844 	addi	r16,r16,-31
 401a6e8:	01000804 	movi	r4,32
 401a6ec:	1406d83a 	srl	r3,r2,r16
 401a6f0:	41005026 	beq	r8,r4,401a834 <__adddf3+0x55c>
 401a6f4:	01001004 	movi	r4,64
 401a6f8:	2211c83a 	sub	r8,r4,r8
 401a6fc:	1204983a 	sll	r2,r2,r8
 401a700:	88a2b03a 	or	r17,r17,r2
 401a704:	8822c03a 	cmpne	r17,r17,zero
 401a708:	1c62b03a 	or	r17,r3,r17
 401a70c:	0011883a 	mov	r8,zero
 401a710:	0021883a 	mov	r16,zero
 401a714:	003f7106 	br	401a4dc <__alt_mem_onchip_memory2_0+0xfc01531c>
 401a718:	193ff804 	addi	r4,r3,-32
 401a71c:	00800804 	movi	r2,32
 401a720:	4908d83a 	srl	r4,r9,r4
 401a724:	18804526 	beq	r3,r2,401a83c <__adddf3+0x564>
 401a728:	00801004 	movi	r2,64
 401a72c:	10c5c83a 	sub	r2,r2,r3
 401a730:	4886983a 	sll	r3,r9,r2
 401a734:	198cb03a 	or	r6,r3,r6
 401a738:	300cc03a 	cmpne	r6,r6,zero
 401a73c:	218cb03a 	or	r6,r4,r6
 401a740:	0007883a 	mov	r3,zero
 401a744:	003f3b06 	br	401a434 <__alt_mem_onchip_memory2_0+0xfc015274>
 401a748:	80002a26 	beq	r16,zero,401a7f4 <__adddf3+0x51c>
 401a74c:	0101ffc4 	movi	r4,2047
 401a750:	11006826 	beq	r2,r4,401a8f4 <__adddf3+0x61c>
 401a754:	00c7c83a 	sub	r3,zero,r3
 401a758:	42002034 	orhi	r8,r8,128
 401a75c:	01000e04 	movi	r4,56
 401a760:	20c07c16 	blt	r4,r3,401a954 <__adddf3+0x67c>
 401a764:	010007c4 	movi	r4,31
 401a768:	20c0da16 	blt	r4,r3,401aad4 <__adddf3+0x7fc>
 401a76c:	01000804 	movi	r4,32
 401a770:	20c9c83a 	sub	r4,r4,r3
 401a774:	4114983a 	sll	r10,r8,r4
 401a778:	88cad83a 	srl	r5,r17,r3
 401a77c:	8908983a 	sll	r4,r17,r4
 401a780:	40c6d83a 	srl	r3,r8,r3
 401a784:	5162b03a 	or	r17,r10,r5
 401a788:	2008c03a 	cmpne	r4,r4,zero
 401a78c:	8922b03a 	or	r17,r17,r4
 401a790:	3463c83a 	sub	r17,r6,r17
 401a794:	48c7c83a 	sub	r3,r9,r3
 401a798:	344d803a 	cmpltu	r6,r6,r17
 401a79c:	1991c83a 	sub	r8,r3,r6
 401a7a0:	1021883a 	mov	r16,r2
 401a7a4:	3825883a 	mov	r18,r7
 401a7a8:	003f2706 	br	401a448 <__alt_mem_onchip_memory2_0+0xfc015288>
 401a7ac:	24d0b03a 	or	r8,r4,r19
 401a7b0:	40001b1e 	bne	r8,zero,401a820 <__adddf3+0x548>
 401a7b4:	0005883a 	mov	r2,zero
 401a7b8:	0007883a 	mov	r3,zero
 401a7bc:	0021883a 	mov	r16,zero
 401a7c0:	003f4d06 	br	401a4f8 <__alt_mem_onchip_memory2_0+0xfc015338>
 401a7c4:	008007c4 	movi	r2,31
 401a7c8:	11003c16 	blt	r2,r4,401a8bc <__adddf3+0x5e4>
 401a7cc:	00800804 	movi	r2,32
 401a7d0:	1105c83a 	sub	r2,r2,r4
 401a7d4:	488e983a 	sll	r7,r9,r2
 401a7d8:	310ad83a 	srl	r5,r6,r4
 401a7dc:	3084983a 	sll	r2,r6,r2
 401a7e0:	4912d83a 	srl	r9,r9,r4
 401a7e4:	394ab03a 	or	r5,r7,r5
 401a7e8:	1004c03a 	cmpne	r2,r2,zero
 401a7ec:	288ab03a 	or	r5,r5,r2
 401a7f0:	003f5306 	br	401a540 <__alt_mem_onchip_memory2_0+0xfc015380>
 401a7f4:	4448b03a 	or	r4,r8,r17
 401a7f8:	20003e26 	beq	r4,zero,401a8f4 <__adddf3+0x61c>
 401a7fc:	00c6303a 	nor	r3,zero,r3
 401a800:	18003a1e 	bne	r3,zero,401a8ec <__adddf3+0x614>
 401a804:	3463c83a 	sub	r17,r6,r17
 401a808:	4a07c83a 	sub	r3,r9,r8
 401a80c:	344d803a 	cmpltu	r6,r6,r17
 401a810:	1991c83a 	sub	r8,r3,r6
 401a814:	1021883a 	mov	r16,r2
 401a818:	3825883a 	mov	r18,r7
 401a81c:	003f0a06 	br	401a448 <__alt_mem_onchip_memory2_0+0xfc015288>
 401a820:	2023883a 	mov	r17,r4
 401a824:	003f0d06 	br	401a45c <__alt_mem_onchip_memory2_0+0xfc01529c>
 401a828:	0081ffc4 	movi	r2,2047
 401a82c:	80bf3f1e 	bne	r16,r2,401a52c <__alt_mem_onchip_memory2_0+0xfc01536c>
 401a830:	003ec806 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a834:	0005883a 	mov	r2,zero
 401a838:	003fb106 	br	401a700 <__alt_mem_onchip_memory2_0+0xfc015540>
 401a83c:	0007883a 	mov	r3,zero
 401a840:	003fbc06 	br	401a734 <__alt_mem_onchip_memory2_0+0xfc015574>
 401a844:	4444b03a 	or	r2,r8,r17
 401a848:	8000871e 	bne	r16,zero,401aa68 <__adddf3+0x790>
 401a84c:	1000ba26 	beq	r2,zero,401ab38 <__adddf3+0x860>
 401a850:	4984b03a 	or	r2,r9,r6
 401a854:	103ebf26 	beq	r2,zero,401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a858:	8985883a 	add	r2,r17,r6
 401a85c:	4247883a 	add	r3,r8,r9
 401a860:	1451803a 	cmpltu	r8,r2,r17
 401a864:	40d1883a 	add	r8,r8,r3
 401a868:	40c0202c 	andhi	r3,r8,128
 401a86c:	1023883a 	mov	r17,r2
 401a870:	183f1a26 	beq	r3,zero,401a4dc <__alt_mem_onchip_memory2_0+0xfc01531c>
 401a874:	00bfe034 	movhi	r2,65408
 401a878:	10bfffc4 	addi	r2,r2,-1
 401a87c:	2021883a 	mov	r16,r4
 401a880:	4090703a 	and	r8,r8,r2
 401a884:	003eb306 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a888:	4444b03a 	or	r2,r8,r17
 401a88c:	8000291e 	bne	r16,zero,401a934 <__adddf3+0x65c>
 401a890:	10004b1e 	bne	r2,zero,401a9c0 <__adddf3+0x6e8>
 401a894:	4990b03a 	or	r8,r9,r6
 401a898:	40008b26 	beq	r8,zero,401aac8 <__adddf3+0x7f0>
 401a89c:	4811883a 	mov	r8,r9
 401a8a0:	3023883a 	mov	r17,r6
 401a8a4:	3825883a 	mov	r18,r7
 401a8a8:	003eaa06 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a8ac:	1021883a 	mov	r16,r2
 401a8b0:	0011883a 	mov	r8,zero
 401a8b4:	0005883a 	mov	r2,zero
 401a8b8:	003f0f06 	br	401a4f8 <__alt_mem_onchip_memory2_0+0xfc015338>
 401a8bc:	217ff804 	addi	r5,r4,-32
 401a8c0:	00800804 	movi	r2,32
 401a8c4:	494ad83a 	srl	r5,r9,r5
 401a8c8:	20807d26 	beq	r4,r2,401aac0 <__adddf3+0x7e8>
 401a8cc:	00801004 	movi	r2,64
 401a8d0:	1109c83a 	sub	r4,r2,r4
 401a8d4:	4912983a 	sll	r9,r9,r4
 401a8d8:	498cb03a 	or	r6,r9,r6
 401a8dc:	300cc03a 	cmpne	r6,r6,zero
 401a8e0:	298ab03a 	or	r5,r5,r6
 401a8e4:	0013883a 	mov	r9,zero
 401a8e8:	003f1506 	br	401a540 <__alt_mem_onchip_memory2_0+0xfc015380>
 401a8ec:	0101ffc4 	movi	r4,2047
 401a8f0:	113f9a1e 	bne	r2,r4,401a75c <__alt_mem_onchip_memory2_0+0xfc01559c>
 401a8f4:	4811883a 	mov	r8,r9
 401a8f8:	3023883a 	mov	r17,r6
 401a8fc:	1021883a 	mov	r16,r2
 401a900:	3825883a 	mov	r18,r7
 401a904:	003e9306 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a908:	8000161e 	bne	r16,zero,401a964 <__adddf3+0x68c>
 401a90c:	444ab03a 	or	r5,r8,r17
 401a910:	28005126 	beq	r5,zero,401aa58 <__adddf3+0x780>
 401a914:	0108303a 	nor	r4,zero,r4
 401a918:	20004d1e 	bne	r4,zero,401aa50 <__adddf3+0x778>
 401a91c:	89a3883a 	add	r17,r17,r6
 401a920:	4253883a 	add	r9,r8,r9
 401a924:	898d803a 	cmpltu	r6,r17,r6
 401a928:	3251883a 	add	r8,r6,r9
 401a92c:	1021883a 	mov	r16,r2
 401a930:	003f0806 	br	401a554 <__alt_mem_onchip_memory2_0+0xfc015394>
 401a934:	1000301e 	bne	r2,zero,401a9f8 <__adddf3+0x720>
 401a938:	4984b03a 	or	r2,r9,r6
 401a93c:	10007126 	beq	r2,zero,401ab04 <__adddf3+0x82c>
 401a940:	4811883a 	mov	r8,r9
 401a944:	3023883a 	mov	r17,r6
 401a948:	3825883a 	mov	r18,r7
 401a94c:	0401ffc4 	movi	r16,2047
 401a950:	003e8006 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a954:	4462b03a 	or	r17,r8,r17
 401a958:	8822c03a 	cmpne	r17,r17,zero
 401a95c:	0007883a 	mov	r3,zero
 401a960:	003f8b06 	br	401a790 <__alt_mem_onchip_memory2_0+0xfc0155d0>
 401a964:	0141ffc4 	movi	r5,2047
 401a968:	11403b26 	beq	r2,r5,401aa58 <__adddf3+0x780>
 401a96c:	0109c83a 	sub	r4,zero,r4
 401a970:	42002034 	orhi	r8,r8,128
 401a974:	01400e04 	movi	r5,56
 401a978:	29006716 	blt	r5,r4,401ab18 <__adddf3+0x840>
 401a97c:	014007c4 	movi	r5,31
 401a980:	29007016 	blt	r5,r4,401ab44 <__adddf3+0x86c>
 401a984:	01400804 	movi	r5,32
 401a988:	290bc83a 	sub	r5,r5,r4
 401a98c:	4154983a 	sll	r10,r8,r5
 401a990:	890ed83a 	srl	r7,r17,r4
 401a994:	894a983a 	sll	r5,r17,r5
 401a998:	4108d83a 	srl	r4,r8,r4
 401a99c:	51e2b03a 	or	r17,r10,r7
 401a9a0:	280ac03a 	cmpne	r5,r5,zero
 401a9a4:	8962b03a 	or	r17,r17,r5
 401a9a8:	89a3883a 	add	r17,r17,r6
 401a9ac:	2253883a 	add	r9,r4,r9
 401a9b0:	898d803a 	cmpltu	r6,r17,r6
 401a9b4:	3251883a 	add	r8,r6,r9
 401a9b8:	1021883a 	mov	r16,r2
 401a9bc:	003ee506 	br	401a554 <__alt_mem_onchip_memory2_0+0xfc015394>
 401a9c0:	4984b03a 	or	r2,r9,r6
 401a9c4:	103e6326 	beq	r2,zero,401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a9c8:	8987c83a 	sub	r3,r17,r6
 401a9cc:	88c9803a 	cmpltu	r4,r17,r3
 401a9d0:	4245c83a 	sub	r2,r8,r9
 401a9d4:	1105c83a 	sub	r2,r2,r4
 401a9d8:	1100202c 	andhi	r4,r2,128
 401a9dc:	203ebb26 	beq	r4,zero,401a4cc <__alt_mem_onchip_memory2_0+0xfc01530c>
 401a9e0:	3463c83a 	sub	r17,r6,r17
 401a9e4:	4a07c83a 	sub	r3,r9,r8
 401a9e8:	344d803a 	cmpltu	r6,r6,r17
 401a9ec:	1991c83a 	sub	r8,r3,r6
 401a9f0:	3825883a 	mov	r18,r7
 401a9f4:	003e5706 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401a9f8:	4984b03a 	or	r2,r9,r6
 401a9fc:	10002e26 	beq	r2,zero,401aab8 <__adddf3+0x7e0>
 401aa00:	4004d0fa 	srli	r2,r8,3
 401aa04:	8822d0fa 	srli	r17,r17,3
 401aa08:	4010977a 	slli	r8,r8,29
 401aa0c:	10c0022c 	andhi	r3,r2,8
 401aa10:	4462b03a 	or	r17,r8,r17
 401aa14:	18000826 	beq	r3,zero,401aa38 <__adddf3+0x760>
 401aa18:	4808d0fa 	srli	r4,r9,3
 401aa1c:	20c0022c 	andhi	r3,r4,8
 401aa20:	1800051e 	bne	r3,zero,401aa38 <__adddf3+0x760>
 401aa24:	300cd0fa 	srli	r6,r6,3
 401aa28:	4806977a 	slli	r3,r9,29
 401aa2c:	2005883a 	mov	r2,r4
 401aa30:	3825883a 	mov	r18,r7
 401aa34:	19a2b03a 	or	r17,r3,r6
 401aa38:	8810d77a 	srli	r8,r17,29
 401aa3c:	100490fa 	slli	r2,r2,3
 401aa40:	882290fa 	slli	r17,r17,3
 401aa44:	0401ffc4 	movi	r16,2047
 401aa48:	4090b03a 	or	r8,r8,r2
 401aa4c:	003e4106 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401aa50:	0141ffc4 	movi	r5,2047
 401aa54:	117fc71e 	bne	r2,r5,401a974 <__alt_mem_onchip_memory2_0+0xfc0157b4>
 401aa58:	4811883a 	mov	r8,r9
 401aa5c:	3023883a 	mov	r17,r6
 401aa60:	1021883a 	mov	r16,r2
 401aa64:	003e3b06 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401aa68:	10002f26 	beq	r2,zero,401ab28 <__adddf3+0x850>
 401aa6c:	4984b03a 	or	r2,r9,r6
 401aa70:	10001126 	beq	r2,zero,401aab8 <__adddf3+0x7e0>
 401aa74:	4004d0fa 	srli	r2,r8,3
 401aa78:	8822d0fa 	srli	r17,r17,3
 401aa7c:	4010977a 	slli	r8,r8,29
 401aa80:	10c0022c 	andhi	r3,r2,8
 401aa84:	4462b03a 	or	r17,r8,r17
 401aa88:	183feb26 	beq	r3,zero,401aa38 <__alt_mem_onchip_memory2_0+0xfc015878>
 401aa8c:	4808d0fa 	srli	r4,r9,3
 401aa90:	20c0022c 	andhi	r3,r4,8
 401aa94:	183fe81e 	bne	r3,zero,401aa38 <__alt_mem_onchip_memory2_0+0xfc015878>
 401aa98:	300cd0fa 	srli	r6,r6,3
 401aa9c:	4806977a 	slli	r3,r9,29
 401aaa0:	2005883a 	mov	r2,r4
 401aaa4:	19a2b03a 	or	r17,r3,r6
 401aaa8:	003fe306 	br	401aa38 <__alt_mem_onchip_memory2_0+0xfc015878>
 401aaac:	0011883a 	mov	r8,zero
 401aab0:	0005883a 	mov	r2,zero
 401aab4:	003e3f06 	br	401a3b4 <__alt_mem_onchip_memory2_0+0xfc0151f4>
 401aab8:	0401ffc4 	movi	r16,2047
 401aabc:	003e2506 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401aac0:	0013883a 	mov	r9,zero
 401aac4:	003f8406 	br	401a8d8 <__alt_mem_onchip_memory2_0+0xfc015718>
 401aac8:	0005883a 	mov	r2,zero
 401aacc:	0007883a 	mov	r3,zero
 401aad0:	003e8906 	br	401a4f8 <__alt_mem_onchip_memory2_0+0xfc015338>
 401aad4:	197ff804 	addi	r5,r3,-32
 401aad8:	01000804 	movi	r4,32
 401aadc:	414ad83a 	srl	r5,r8,r5
 401aae0:	19002426 	beq	r3,r4,401ab74 <__adddf3+0x89c>
 401aae4:	01001004 	movi	r4,64
 401aae8:	20c7c83a 	sub	r3,r4,r3
 401aaec:	40c6983a 	sll	r3,r8,r3
 401aaf0:	1c46b03a 	or	r3,r3,r17
 401aaf4:	1806c03a 	cmpne	r3,r3,zero
 401aaf8:	28e2b03a 	or	r17,r5,r3
 401aafc:	0007883a 	mov	r3,zero
 401ab00:	003f2306 	br	401a790 <__alt_mem_onchip_memory2_0+0xfc0155d0>
 401ab04:	0007883a 	mov	r3,zero
 401ab08:	5811883a 	mov	r8,r11
 401ab0c:	00bfffc4 	movi	r2,-1
 401ab10:	0401ffc4 	movi	r16,2047
 401ab14:	003e7806 	br	401a4f8 <__alt_mem_onchip_memory2_0+0xfc015338>
 401ab18:	4462b03a 	or	r17,r8,r17
 401ab1c:	8822c03a 	cmpne	r17,r17,zero
 401ab20:	0009883a 	mov	r4,zero
 401ab24:	003fa006 	br	401a9a8 <__alt_mem_onchip_memory2_0+0xfc0157e8>
 401ab28:	4811883a 	mov	r8,r9
 401ab2c:	3023883a 	mov	r17,r6
 401ab30:	0401ffc4 	movi	r16,2047
 401ab34:	003e0706 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401ab38:	4811883a 	mov	r8,r9
 401ab3c:	3023883a 	mov	r17,r6
 401ab40:	003e0406 	br	401a354 <__alt_mem_onchip_memory2_0+0xfc015194>
 401ab44:	21fff804 	addi	r7,r4,-32
 401ab48:	01400804 	movi	r5,32
 401ab4c:	41ced83a 	srl	r7,r8,r7
 401ab50:	21400a26 	beq	r4,r5,401ab7c <__adddf3+0x8a4>
 401ab54:	01401004 	movi	r5,64
 401ab58:	2909c83a 	sub	r4,r5,r4
 401ab5c:	4108983a 	sll	r4,r8,r4
 401ab60:	2448b03a 	or	r4,r4,r17
 401ab64:	2008c03a 	cmpne	r4,r4,zero
 401ab68:	3922b03a 	or	r17,r7,r4
 401ab6c:	0009883a 	mov	r4,zero
 401ab70:	003f8d06 	br	401a9a8 <__alt_mem_onchip_memory2_0+0xfc0157e8>
 401ab74:	0007883a 	mov	r3,zero
 401ab78:	003fdd06 	br	401aaf0 <__alt_mem_onchip_memory2_0+0xfc015930>
 401ab7c:	0009883a 	mov	r4,zero
 401ab80:	003ff706 	br	401ab60 <__alt_mem_onchip_memory2_0+0xfc0159a0>

0401ab84 <__eqdf2>:
 401ab84:	2804d53a 	srli	r2,r5,20
 401ab88:	3806d53a 	srli	r3,r7,20
 401ab8c:	02000434 	movhi	r8,16
 401ab90:	423fffc4 	addi	r8,r8,-1
 401ab94:	1081ffcc 	andi	r2,r2,2047
 401ab98:	0281ffc4 	movi	r10,2047
 401ab9c:	2a12703a 	and	r9,r5,r8
 401aba0:	18c1ffcc 	andi	r3,r3,2047
 401aba4:	3a10703a 	and	r8,r7,r8
 401aba8:	280ad7fa 	srli	r5,r5,31
 401abac:	380ed7fa 	srli	r7,r7,31
 401abb0:	12801026 	beq	r2,r10,401abf4 <__eqdf2+0x70>
 401abb4:	0281ffc4 	movi	r10,2047
 401abb8:	1a800a26 	beq	r3,r10,401abe4 <__eqdf2+0x60>
 401abbc:	10c00226 	beq	r2,r3,401abc8 <__eqdf2+0x44>
 401abc0:	00800044 	movi	r2,1
 401abc4:	f800283a 	ret
 401abc8:	4a3ffd1e 	bne	r9,r8,401abc0 <__alt_mem_onchip_memory2_0+0xfc015a00>
 401abcc:	21bffc1e 	bne	r4,r6,401abc0 <__alt_mem_onchip_memory2_0+0xfc015a00>
 401abd0:	29c00c26 	beq	r5,r7,401ac04 <__eqdf2+0x80>
 401abd4:	103ffa1e 	bne	r2,zero,401abc0 <__alt_mem_onchip_memory2_0+0xfc015a00>
 401abd8:	2244b03a 	or	r2,r4,r9
 401abdc:	1004c03a 	cmpne	r2,r2,zero
 401abe0:	f800283a 	ret
 401abe4:	3214b03a 	or	r10,r6,r8
 401abe8:	503ff426 	beq	r10,zero,401abbc <__alt_mem_onchip_memory2_0+0xfc0159fc>
 401abec:	00800044 	movi	r2,1
 401abf0:	f800283a 	ret
 401abf4:	2254b03a 	or	r10,r4,r9
 401abf8:	503fee26 	beq	r10,zero,401abb4 <__alt_mem_onchip_memory2_0+0xfc0159f4>
 401abfc:	00800044 	movi	r2,1
 401ac00:	f800283a 	ret
 401ac04:	0005883a 	mov	r2,zero
 401ac08:	f800283a 	ret

0401ac0c <__floatsidf>:
 401ac0c:	defffd04 	addi	sp,sp,-12
 401ac10:	dfc00215 	stw	ra,8(sp)
 401ac14:	dc400115 	stw	r17,4(sp)
 401ac18:	dc000015 	stw	r16,0(sp)
 401ac1c:	20002b26 	beq	r4,zero,401accc <__floatsidf+0xc0>
 401ac20:	2023883a 	mov	r17,r4
 401ac24:	2020d7fa 	srli	r16,r4,31
 401ac28:	20002d16 	blt	r4,zero,401ace0 <__floatsidf+0xd4>
 401ac2c:	8809883a 	mov	r4,r17
 401ac30:	400fb2c0 	call	400fb2c <__clzsi2>
 401ac34:	01410784 	movi	r5,1054
 401ac38:	288bc83a 	sub	r5,r5,r2
 401ac3c:	01010cc4 	movi	r4,1075
 401ac40:	2149c83a 	sub	r4,r4,r5
 401ac44:	00c007c4 	movi	r3,31
 401ac48:	1900160e 	bge	r3,r4,401aca4 <__floatsidf+0x98>
 401ac4c:	00c104c4 	movi	r3,1043
 401ac50:	1947c83a 	sub	r3,r3,r5
 401ac54:	88c6983a 	sll	r3,r17,r3
 401ac58:	00800434 	movhi	r2,16
 401ac5c:	10bfffc4 	addi	r2,r2,-1
 401ac60:	1886703a 	and	r3,r3,r2
 401ac64:	2941ffcc 	andi	r5,r5,2047
 401ac68:	800d883a 	mov	r6,r16
 401ac6c:	0005883a 	mov	r2,zero
 401ac70:	280a953a 	slli	r5,r5,20
 401ac74:	31803fcc 	andi	r6,r6,255
 401ac78:	01000434 	movhi	r4,16
 401ac7c:	300c97fa 	slli	r6,r6,31
 401ac80:	213fffc4 	addi	r4,r4,-1
 401ac84:	1906703a 	and	r3,r3,r4
 401ac88:	1946b03a 	or	r3,r3,r5
 401ac8c:	1986b03a 	or	r3,r3,r6
 401ac90:	dfc00217 	ldw	ra,8(sp)
 401ac94:	dc400117 	ldw	r17,4(sp)
 401ac98:	dc000017 	ldw	r16,0(sp)
 401ac9c:	dec00304 	addi	sp,sp,12
 401aca0:	f800283a 	ret
 401aca4:	00c002c4 	movi	r3,11
 401aca8:	1887c83a 	sub	r3,r3,r2
 401acac:	88c6d83a 	srl	r3,r17,r3
 401acb0:	8904983a 	sll	r2,r17,r4
 401acb4:	01000434 	movhi	r4,16
 401acb8:	213fffc4 	addi	r4,r4,-1
 401acbc:	2941ffcc 	andi	r5,r5,2047
 401acc0:	1906703a 	and	r3,r3,r4
 401acc4:	800d883a 	mov	r6,r16
 401acc8:	003fe906 	br	401ac70 <__alt_mem_onchip_memory2_0+0xfc015ab0>
 401accc:	000d883a 	mov	r6,zero
 401acd0:	000b883a 	mov	r5,zero
 401acd4:	0007883a 	mov	r3,zero
 401acd8:	0005883a 	mov	r2,zero
 401acdc:	003fe406 	br	401ac70 <__alt_mem_onchip_memory2_0+0xfc015ab0>
 401ace0:	0123c83a 	sub	r17,zero,r4
 401ace4:	003fd106 	br	401ac2c <__alt_mem_onchip_memory2_0+0xfc015a6c>

0401ace8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401ace8:	defffe04 	addi	sp,sp,-8
 401acec:	dfc00115 	stw	ra,4(sp)
 401acf0:	df000015 	stw	fp,0(sp)
 401acf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401acf8:	d0a01217 	ldw	r2,-32696(gp)
 401acfc:	10000326 	beq	r2,zero,401ad0c <alt_get_errno+0x24>
 401ad00:	d0a01217 	ldw	r2,-32696(gp)
 401ad04:	103ee83a 	callr	r2
 401ad08:	00000106 	br	401ad10 <alt_get_errno+0x28>
 401ad0c:	d0a80204 	addi	r2,gp,-24568
}
 401ad10:	e037883a 	mov	sp,fp
 401ad14:	dfc00117 	ldw	ra,4(sp)
 401ad18:	df000017 	ldw	fp,0(sp)
 401ad1c:	dec00204 	addi	sp,sp,8
 401ad20:	f800283a 	ret

0401ad24 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 401ad24:	defffb04 	addi	sp,sp,-20
 401ad28:	dfc00415 	stw	ra,16(sp)
 401ad2c:	df000315 	stw	fp,12(sp)
 401ad30:	df000304 	addi	fp,sp,12
 401ad34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 401ad38:	e0bfff17 	ldw	r2,-4(fp)
 401ad3c:	10000816 	blt	r2,zero,401ad60 <close+0x3c>
 401ad40:	01400304 	movi	r5,12
 401ad44:	e13fff17 	ldw	r4,-4(fp)
 401ad48:	400dcd40 	call	400dcd4 <__mulsi3>
 401ad4c:	1007883a 	mov	r3,r2
 401ad50:	008100b4 	movhi	r2,1026
 401ad54:	10bb6004 	addi	r2,r2,-4736
 401ad58:	1885883a 	add	r2,r3,r2
 401ad5c:	00000106 	br	401ad64 <close+0x40>
 401ad60:	0005883a 	mov	r2,zero
 401ad64:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 401ad68:	e0bffd17 	ldw	r2,-12(fp)
 401ad6c:	10001926 	beq	r2,zero,401add4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 401ad70:	e0bffd17 	ldw	r2,-12(fp)
 401ad74:	10800017 	ldw	r2,0(r2)
 401ad78:	10800417 	ldw	r2,16(r2)
 401ad7c:	10000626 	beq	r2,zero,401ad98 <close+0x74>
 401ad80:	e0bffd17 	ldw	r2,-12(fp)
 401ad84:	10800017 	ldw	r2,0(r2)
 401ad88:	10800417 	ldw	r2,16(r2)
 401ad8c:	e13ffd17 	ldw	r4,-12(fp)
 401ad90:	103ee83a 	callr	r2
 401ad94:	00000106 	br	401ad9c <close+0x78>
 401ad98:	0005883a 	mov	r2,zero
 401ad9c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 401ada0:	e13fff17 	ldw	r4,-4(fp)
 401ada4:	401b6000 	call	401b600 <alt_release_fd>
    if (rval < 0)
 401ada8:	e0bffe17 	ldw	r2,-8(fp)
 401adac:	1000070e 	bge	r2,zero,401adcc <close+0xa8>
    {
      ALT_ERRNO = -rval;
 401adb0:	401ace80 	call	401ace8 <alt_get_errno>
 401adb4:	1007883a 	mov	r3,r2
 401adb8:	e0bffe17 	ldw	r2,-8(fp)
 401adbc:	0085c83a 	sub	r2,zero,r2
 401adc0:	18800015 	stw	r2,0(r3)
      return -1;
 401adc4:	00bfffc4 	movi	r2,-1
 401adc8:	00000706 	br	401ade8 <close+0xc4>
    }
    return 0;
 401adcc:	0005883a 	mov	r2,zero
 401add0:	00000506 	br	401ade8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401add4:	401ace80 	call	401ace8 <alt_get_errno>
 401add8:	1007883a 	mov	r3,r2
 401addc:	00801444 	movi	r2,81
 401ade0:	18800015 	stw	r2,0(r3)
    return -1;
 401ade4:	00bfffc4 	movi	r2,-1
  }
}
 401ade8:	e037883a 	mov	sp,fp
 401adec:	dfc00117 	ldw	ra,4(sp)
 401adf0:	df000017 	ldw	fp,0(sp)
 401adf4:	dec00204 	addi	sp,sp,8
 401adf8:	f800283a 	ret

0401adfc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 401adfc:	defffc04 	addi	sp,sp,-16
 401ae00:	df000315 	stw	fp,12(sp)
 401ae04:	df000304 	addi	fp,sp,12
 401ae08:	e13ffd15 	stw	r4,-12(fp)
 401ae0c:	e17ffe15 	stw	r5,-8(fp)
 401ae10:	e1bfff15 	stw	r6,-4(fp)
  return len;
 401ae14:	e0bfff17 	ldw	r2,-4(fp)
}
 401ae18:	e037883a 	mov	sp,fp
 401ae1c:	df000017 	ldw	fp,0(sp)
 401ae20:	dec00104 	addi	sp,sp,4
 401ae24:	f800283a 	ret

0401ae28 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401ae28:	defffe04 	addi	sp,sp,-8
 401ae2c:	dfc00115 	stw	ra,4(sp)
 401ae30:	df000015 	stw	fp,0(sp)
 401ae34:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401ae38:	d0a01217 	ldw	r2,-32696(gp)
 401ae3c:	10000326 	beq	r2,zero,401ae4c <alt_get_errno+0x24>
 401ae40:	d0a01217 	ldw	r2,-32696(gp)
 401ae44:	103ee83a 	callr	r2
 401ae48:	00000106 	br	401ae50 <alt_get_errno+0x28>
 401ae4c:	d0a80204 	addi	r2,gp,-24568
}
 401ae50:	e037883a 	mov	sp,fp
 401ae54:	dfc00117 	ldw	ra,4(sp)
 401ae58:	df000017 	ldw	fp,0(sp)
 401ae5c:	dec00204 	addi	sp,sp,8
 401ae60:	f800283a 	ret

0401ae64 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 401ae64:	defffb04 	addi	sp,sp,-20
 401ae68:	dfc00415 	stw	ra,16(sp)
 401ae6c:	df000315 	stw	fp,12(sp)
 401ae70:	df000304 	addi	fp,sp,12
 401ae74:	e13ffe15 	stw	r4,-8(fp)
 401ae78:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401ae7c:	e0bffe17 	ldw	r2,-8(fp)
 401ae80:	10000816 	blt	r2,zero,401aea4 <fstat+0x40>
 401ae84:	01400304 	movi	r5,12
 401ae88:	e13ffe17 	ldw	r4,-8(fp)
 401ae8c:	400dcd40 	call	400dcd4 <__mulsi3>
 401ae90:	1007883a 	mov	r3,r2
 401ae94:	008100b4 	movhi	r2,1026
 401ae98:	10bb6004 	addi	r2,r2,-4736
 401ae9c:	1885883a 	add	r2,r3,r2
 401aea0:	00000106 	br	401aea8 <fstat+0x44>
 401aea4:	0005883a 	mov	r2,zero
 401aea8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 401aeac:	e0bffd17 	ldw	r2,-12(fp)
 401aeb0:	10001026 	beq	r2,zero,401aef4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 401aeb4:	e0bffd17 	ldw	r2,-12(fp)
 401aeb8:	10800017 	ldw	r2,0(r2)
 401aebc:	10800817 	ldw	r2,32(r2)
 401aec0:	10000726 	beq	r2,zero,401aee0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 401aec4:	e0bffd17 	ldw	r2,-12(fp)
 401aec8:	10800017 	ldw	r2,0(r2)
 401aecc:	10800817 	ldw	r2,32(r2)
 401aed0:	e17fff17 	ldw	r5,-4(fp)
 401aed4:	e13ffd17 	ldw	r4,-12(fp)
 401aed8:	103ee83a 	callr	r2
 401aedc:	00000a06 	br	401af08 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 401aee0:	e0bfff17 	ldw	r2,-4(fp)
 401aee4:	00c80004 	movi	r3,8192
 401aee8:	10c00115 	stw	r3,4(r2)
      return 0;
 401aeec:	0005883a 	mov	r2,zero
 401aef0:	00000506 	br	401af08 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401aef4:	401ae280 	call	401ae28 <alt_get_errno>
 401aef8:	1007883a 	mov	r3,r2
 401aefc:	00801444 	movi	r2,81
 401af00:	18800015 	stw	r2,0(r3)
    return -1;
 401af04:	00bfffc4 	movi	r2,-1
  }
}
 401af08:	e037883a 	mov	sp,fp
 401af0c:	dfc00117 	ldw	ra,4(sp)
 401af10:	df000017 	ldw	fp,0(sp)
 401af14:	dec00204 	addi	sp,sp,8
 401af18:	f800283a 	ret

0401af1c <gettimeofday>:
 */
 

#if defined (__GNUC__) && (__GNUC__ >= 4)
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, void *ptimezone_vptr)
{
 401af1c:	defff404 	addi	sp,sp,-48
 401af20:	dfc00b15 	stw	ra,44(sp)
 401af24:	df000a15 	stw	fp,40(sp)
 401af28:	dd000915 	stw	r20,36(sp)
 401af2c:	dcc00815 	stw	r19,32(sp)
 401af30:	dc800715 	stw	r18,28(sp)
 401af34:	dc400615 	stw	r17,24(sp)
 401af38:	dc000515 	stw	r16,20(sp)
 401af3c:	df000a04 	addi	fp,sp,40
 401af40:	e13ff915 	stw	r4,-28(fp)
 401af44:	e17ffa15 	stw	r5,-24(fp)
  struct timezone *ptimezone = (struct timezone*)ptimezone_vptr;
 401af48:	e0bffa17 	ldw	r2,-24(fp)
 401af4c:	e0bff615 	stw	r2,-40(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401af50:	d0a81117 	ldw	r2,-24508(gp)
#else
int ALT_GETTIMEOFDAY (struct timeval  *ptimeval, struct timezone *ptimezone)
{
#endif
  
  alt_u32 nticks = alt_nticks (); 
 401af54:	e0bff715 	stw	r2,-36(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401af58:	d0a81017 	ldw	r2,-24512(gp)
  alt_u32 tick_rate = alt_ticks_per_second ();
 401af5c:	e0bff815 	stw	r2,-32(fp)
   * non-zero system clock rate. If the system clock is not running, an error
   * is generated and the contents of "ptimeval" and "ptimezone" are not
   * updated.
   */

  if (tick_rate)
 401af60:	e0bff817 	ldw	r2,-32(fp)
 401af64:	10005f26 	beq	r2,zero,401b0e4 <gettimeofday+0x1c8>
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
 401af68:	d0a80b17 	ldw	r2,-24532(gp)
 401af6c:	1029883a 	mov	r20,r2
 401af70:	e17ff817 	ldw	r5,-32(fp)
 401af74:	e13ff717 	ldw	r4,-36(fp)
 401af78:	400dc180 	call	400dc18 <__udivsi3>
 401af7c:	a085883a 	add	r2,r20,r2
 401af80:	1007883a 	mov	r3,r2
 401af84:	e0bff917 	ldw	r2,-28(fp)
 401af88:	10c00015 	stw	r3,0(r2)
    ptimeval->tv_usec = alt_resettime.tv_usec +
 401af8c:	d0a80c17 	ldw	r2,-24528(gp)
 401af90:	1029883a 	mov	r20,r2
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
 401af94:	e0bff717 	ldw	r2,-36(fp)
 401af98:	1021883a 	mov	r16,r2
 401af9c:	0023883a 	mov	r17,zero
 401afa0:	e17ff817 	ldw	r5,-32(fp)
 401afa4:	010003f4 	movhi	r4,15
 401afa8:	21109004 	addi	r4,r4,16960
 401afac:	400dc180 	call	400dc18 <__udivsi3>
 401afb0:	1025883a 	mov	r18,r2
 401afb4:	0027883a 	mov	r19,zero
 401afb8:	900d883a 	mov	r6,r18
 401afbc:	980f883a 	mov	r7,r19
 401afc0:	8009883a 	mov	r4,r16
 401afc4:	880b883a 	mov	r5,r17
 401afc8:	401960c0 	call	401960c <__muldi3>
 401afcc:	1009883a 	mov	r4,r2
 401afd0:	180b883a 	mov	r5,r3
 401afd4:	2005883a 	mov	r2,r4
 401afd8:	2807883a 	mov	r3,r5
 401afdc:	018003f4 	movhi	r6,15
 401afe0:	31909004 	addi	r6,r6,16960
 401afe4:	000f883a 	mov	r7,zero
 401afe8:	1009883a 	mov	r4,r2
 401afec:	180b883a 	mov	r5,r3
 401aff0:	4019d140 	call	4019d14 <__umoddi3>
 401aff4:	1009883a 	mov	r4,r2
 401aff8:	180b883a 	mov	r5,r3
 401affc:	2005883a 	mov	r2,r4
 401b000:	2807883a 	mov	r3,r5
   */

  if (tick_rate)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
 401b004:	a085883a 	add	r2,r20,r2
 401b008:	1007883a 	mov	r3,r2
 401b00c:	e0bff917 	ldw	r2,-28(fp)
 401b010:	10c00115 	stw	r3,4(r2)
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 401b014:	00001406 	br	401b068 <gettimeofday+0x14c>
      if (ptimeval->tv_sec <= 0)
 401b018:	e0bff917 	ldw	r2,-28(fp)
 401b01c:	10800017 	ldw	r2,0(r2)
 401b020:	00800516 	blt	zero,r2,401b038 <gettimeofday+0x11c>
      {
          ptimeval->tv_sec = 0;
 401b024:	e0bff917 	ldw	r2,-28(fp)
 401b028:	10000015 	stw	zero,0(r2)
          ptimeval->tv_usec = 0;
 401b02c:	e0bff917 	ldw	r2,-28(fp)
 401b030:	10000115 	stw	zero,4(r2)
          break;
 401b034:	00000f06 	br	401b074 <gettimeofday+0x158>
      }
      else
      {
          ptimeval->tv_sec--;
 401b038:	e0bff917 	ldw	r2,-28(fp)
 401b03c:	10800017 	ldw	r2,0(r2)
 401b040:	10ffffc4 	addi	r3,r2,-1
 401b044:	e0bff917 	ldw	r2,-28(fp)
 401b048:	10c00015 	stw	r3,0(r2)
          ptimeval->tv_usec += ALT_US;
 401b04c:	e0bff917 	ldw	r2,-28(fp)
 401b050:	10c00117 	ldw	r3,4(r2)
 401b054:	008003f4 	movhi	r2,15
 401b058:	10909004 	addi	r2,r2,16960
 401b05c:	1887883a 	add	r3,r3,r2
 401b060:	e0bff917 	ldw	r2,-28(fp)
 401b064:	10c00115 	stw	r3,4(r2)
  {
    ptimeval->tv_sec  = alt_resettime.tv_sec  + nticks/tick_rate;
    ptimeval->tv_usec = alt_resettime.tv_usec +
     (alt_u32)(((alt_u64)nticks*(ALT_US/tick_rate))%ALT_US);
      
    while(ptimeval->tv_usec < 0) {
 401b068:	e0bff917 	ldw	r2,-28(fp)
 401b06c:	10800117 	ldw	r2,4(r2)
 401b070:	103fe916 	blt	r2,zero,401b018 <__alt_mem_onchip_memory2_0+0xfc015e58>
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 401b074:	00000c06 	br	401b0a8 <gettimeofday+0x18c>
      ptimeval->tv_sec++;
 401b078:	e0bff917 	ldw	r2,-28(fp)
 401b07c:	10800017 	ldw	r2,0(r2)
 401b080:	10c00044 	addi	r3,r2,1
 401b084:	e0bff917 	ldw	r2,-28(fp)
 401b088:	10c00015 	stw	r3,0(r2)
      ptimeval->tv_usec -= ALT_US;
 401b08c:	e0bff917 	ldw	r2,-28(fp)
 401b090:	10c00117 	ldw	r3,4(r2)
 401b094:	00bffc74 	movhi	r2,65521
 401b098:	10af7004 	addi	r2,r2,-16960
 401b09c:	1887883a 	add	r3,r3,r2
 401b0a0:	e0bff917 	ldw	r2,-28(fp)
 401b0a4:	10c00115 	stw	r3,4(r2)
          ptimeval->tv_sec--;
          ptimeval->tv_usec += ALT_US;
      }
    }
    
    while(ptimeval->tv_usec >= ALT_US) {
 401b0a8:	e0bff917 	ldw	r2,-28(fp)
 401b0ac:	10c00117 	ldw	r3,4(r2)
 401b0b0:	008003f4 	movhi	r2,15
 401b0b4:	10908fc4 	addi	r2,r2,16959
 401b0b8:	10ffef16 	blt	r2,r3,401b078 <__alt_mem_onchip_memory2_0+0xfc015eb8>
      ptimeval->tv_sec++;
      ptimeval->tv_usec -= ALT_US;
    }
      
    if (ptimezone)
 401b0bc:	e0bff617 	ldw	r2,-40(fp)
 401b0c0:	10000626 	beq	r2,zero,401b0dc <gettimeofday+0x1c0>
    { 
      ptimezone->tz_minuteswest = alt_timezone.tz_minuteswest;
 401b0c4:	d0e80917 	ldw	r3,-24540(gp)
 401b0c8:	e0bff617 	ldw	r2,-40(fp)
 401b0cc:	10c00015 	stw	r3,0(r2)
      ptimezone->tz_dsttime     = alt_timezone.tz_dsttime;
 401b0d0:	d0e80a17 	ldw	r3,-24536(gp)
 401b0d4:	e0bff617 	ldw	r2,-40(fp)
 401b0d8:	10c00115 	stw	r3,4(r2)
    }

    return 0;
 401b0dc:	0005883a 	mov	r2,zero
 401b0e0:	00000106 	br	401b0e8 <gettimeofday+0x1cc>
  }

  return -ENOTSUP;
 401b0e4:	00bfde84 	movi	r2,-134
}
 401b0e8:	e6fffb04 	addi	sp,fp,-20
 401b0ec:	dfc00617 	ldw	ra,24(sp)
 401b0f0:	df000517 	ldw	fp,20(sp)
 401b0f4:	dd000417 	ldw	r20,16(sp)
 401b0f8:	dcc00317 	ldw	r19,12(sp)
 401b0fc:	dc800217 	ldw	r18,8(sp)
 401b100:	dc400117 	ldw	r17,4(sp)
 401b104:	dc000017 	ldw	r16,0(sp)
 401b108:	dec00704 	addi	sp,sp,28
 401b10c:	f800283a 	ret

0401b110 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b110:	defffe04 	addi	sp,sp,-8
 401b114:	dfc00115 	stw	ra,4(sp)
 401b118:	df000015 	stw	fp,0(sp)
 401b11c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b120:	d0a01217 	ldw	r2,-32696(gp)
 401b124:	10000326 	beq	r2,zero,401b134 <alt_get_errno+0x24>
 401b128:	d0a01217 	ldw	r2,-32696(gp)
 401b12c:	103ee83a 	callr	r2
 401b130:	00000106 	br	401b138 <alt_get_errno+0x28>
 401b134:	d0a80204 	addi	r2,gp,-24568
}
 401b138:	e037883a 	mov	sp,fp
 401b13c:	dfc00117 	ldw	ra,4(sp)
 401b140:	df000017 	ldw	fp,0(sp)
 401b144:	dec00204 	addi	sp,sp,8
 401b148:	f800283a 	ret

0401b14c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 401b14c:	deffed04 	addi	sp,sp,-76
 401b150:	dfc01215 	stw	ra,72(sp)
 401b154:	df001115 	stw	fp,68(sp)
 401b158:	df001104 	addi	fp,sp,68
 401b15c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401b160:	e0bfff17 	ldw	r2,-4(fp)
 401b164:	10000816 	blt	r2,zero,401b188 <isatty+0x3c>
 401b168:	01400304 	movi	r5,12
 401b16c:	e13fff17 	ldw	r4,-4(fp)
 401b170:	400dcd40 	call	400dcd4 <__mulsi3>
 401b174:	1007883a 	mov	r3,r2
 401b178:	008100b4 	movhi	r2,1026
 401b17c:	10bb6004 	addi	r2,r2,-4736
 401b180:	1885883a 	add	r2,r3,r2
 401b184:	00000106 	br	401b18c <isatty+0x40>
 401b188:	0005883a 	mov	r2,zero
 401b18c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 401b190:	e0bfef17 	ldw	r2,-68(fp)
 401b194:	10000e26 	beq	r2,zero,401b1d0 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 401b198:	e0bfef17 	ldw	r2,-68(fp)
 401b19c:	10800017 	ldw	r2,0(r2)
 401b1a0:	10800817 	ldw	r2,32(r2)
 401b1a4:	1000021e 	bne	r2,zero,401b1b0 <isatty+0x64>
    {
      return 1;
 401b1a8:	00800044 	movi	r2,1
 401b1ac:	00000d06 	br	401b1e4 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 401b1b0:	e0bff004 	addi	r2,fp,-64
 401b1b4:	100b883a 	mov	r5,r2
 401b1b8:	e13fff17 	ldw	r4,-4(fp)
 401b1bc:	401ae640 	call	401ae64 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 401b1c0:	e0bff117 	ldw	r2,-60(fp)
 401b1c4:	10880020 	cmpeqi	r2,r2,8192
 401b1c8:	10803fcc 	andi	r2,r2,255
 401b1cc:	00000506 	br	401b1e4 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 401b1d0:	401b1100 	call	401b110 <alt_get_errno>
 401b1d4:	1007883a 	mov	r3,r2
 401b1d8:	00801444 	movi	r2,81
 401b1dc:	18800015 	stw	r2,0(r3)
    return 0;
 401b1e0:	0005883a 	mov	r2,zero
  }
}
 401b1e4:	e037883a 	mov	sp,fp
 401b1e8:	dfc00117 	ldw	ra,4(sp)
 401b1ec:	df000017 	ldw	fp,0(sp)
 401b1f0:	dec00204 	addi	sp,sp,8
 401b1f4:	f800283a 	ret

0401b1f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 401b1f8:	defffc04 	addi	sp,sp,-16
 401b1fc:	df000315 	stw	fp,12(sp)
 401b200:	df000304 	addi	fp,sp,12
 401b204:	e13ffd15 	stw	r4,-12(fp)
 401b208:	e17ffe15 	stw	r5,-8(fp)
 401b20c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 401b210:	e0fffe17 	ldw	r3,-8(fp)
 401b214:	e0bffd17 	ldw	r2,-12(fp)
 401b218:	18800c26 	beq	r3,r2,401b24c <alt_load_section+0x54>
  {
    while( to != end )
 401b21c:	00000806 	br	401b240 <alt_load_section+0x48>
    {
      *to++ = *from++;
 401b220:	e0bffe17 	ldw	r2,-8(fp)
 401b224:	10c00104 	addi	r3,r2,4
 401b228:	e0fffe15 	stw	r3,-8(fp)
 401b22c:	e0fffd17 	ldw	r3,-12(fp)
 401b230:	19000104 	addi	r4,r3,4
 401b234:	e13ffd15 	stw	r4,-12(fp)
 401b238:	18c00017 	ldw	r3,0(r3)
 401b23c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 401b240:	e0fffe17 	ldw	r3,-8(fp)
 401b244:	e0bfff17 	ldw	r2,-4(fp)
 401b248:	18bff51e 	bne	r3,r2,401b220 <__alt_mem_onchip_memory2_0+0xfc016060>
    {
      *to++ = *from++;
    }
  }
}
 401b24c:	0001883a 	nop
 401b250:	e037883a 	mov	sp,fp
 401b254:	df000017 	ldw	fp,0(sp)
 401b258:	dec00104 	addi	sp,sp,4
 401b25c:	f800283a 	ret

0401b260 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 401b260:	defffe04 	addi	sp,sp,-8
 401b264:	dfc00115 	stw	ra,4(sp)
 401b268:	df000015 	stw	fp,0(sp)
 401b26c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 401b270:	018100b4 	movhi	r6,1026
 401b274:	31bfef04 	addi	r6,r6,-68
 401b278:	014100b4 	movhi	r5,1026
 401b27c:	29780d04 	addi	r5,r5,-8140
 401b280:	010100b4 	movhi	r4,1026
 401b284:	213fef04 	addi	r4,r4,-68
 401b288:	401b1f80 	call	401b1f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 401b28c:	01810034 	movhi	r6,1024
 401b290:	31808c04 	addi	r6,r6,560
 401b294:	01410034 	movhi	r5,1024
 401b298:	29400804 	addi	r5,r5,32
 401b29c:	01010034 	movhi	r4,1024
 401b2a0:	21000804 	addi	r4,r4,32
 401b2a4:	401b1f80 	call	401b1f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 401b2a8:	018100b4 	movhi	r6,1026
 401b2ac:	31b80d04 	addi	r6,r6,-8140
 401b2b0:	014100b4 	movhi	r5,1026
 401b2b4:	2976af04 	addi	r5,r5,-9540
 401b2b8:	010100b4 	movhi	r4,1026
 401b2bc:	2136af04 	addi	r4,r4,-9540
 401b2c0:	401b1f80 	call	401b1f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 401b2c4:	401cba80 	call	401cba8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 401b2c8:	401cd680 	call	401cd68 <alt_icache_flush_all>
}
 401b2cc:	0001883a 	nop
 401b2d0:	e037883a 	mov	sp,fp
 401b2d4:	dfc00117 	ldw	ra,4(sp)
 401b2d8:	df000017 	ldw	fp,0(sp)
 401b2dc:	dec00204 	addi	sp,sp,8
 401b2e0:	f800283a 	ret

0401b2e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b2e4:	defffe04 	addi	sp,sp,-8
 401b2e8:	dfc00115 	stw	ra,4(sp)
 401b2ec:	df000015 	stw	fp,0(sp)
 401b2f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b2f4:	d0a01217 	ldw	r2,-32696(gp)
 401b2f8:	10000326 	beq	r2,zero,401b308 <alt_get_errno+0x24>
 401b2fc:	d0a01217 	ldw	r2,-32696(gp)
 401b300:	103ee83a 	callr	r2
 401b304:	00000106 	br	401b30c <alt_get_errno+0x28>
 401b308:	d0a80204 	addi	r2,gp,-24568
}
 401b30c:	e037883a 	mov	sp,fp
 401b310:	dfc00117 	ldw	ra,4(sp)
 401b314:	df000017 	ldw	fp,0(sp)
 401b318:	dec00204 	addi	sp,sp,8
 401b31c:	f800283a 	ret

0401b320 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 401b320:	defff904 	addi	sp,sp,-28
 401b324:	dfc00615 	stw	ra,24(sp)
 401b328:	df000515 	stw	fp,20(sp)
 401b32c:	df000504 	addi	fp,sp,20
 401b330:	e13ffd15 	stw	r4,-12(fp)
 401b334:	e17ffe15 	stw	r5,-8(fp)
 401b338:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 401b33c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401b340:	e0bffd17 	ldw	r2,-12(fp)
 401b344:	10000816 	blt	r2,zero,401b368 <lseek+0x48>
 401b348:	01400304 	movi	r5,12
 401b34c:	e13ffd17 	ldw	r4,-12(fp)
 401b350:	400dcd40 	call	400dcd4 <__mulsi3>
 401b354:	1007883a 	mov	r3,r2
 401b358:	008100b4 	movhi	r2,1026
 401b35c:	10bb6004 	addi	r2,r2,-4736
 401b360:	1885883a 	add	r2,r3,r2
 401b364:	00000106 	br	401b36c <lseek+0x4c>
 401b368:	0005883a 	mov	r2,zero
 401b36c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 401b370:	e0bffc17 	ldw	r2,-16(fp)
 401b374:	10001026 	beq	r2,zero,401b3b8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 401b378:	e0bffc17 	ldw	r2,-16(fp)
 401b37c:	10800017 	ldw	r2,0(r2)
 401b380:	10800717 	ldw	r2,28(r2)
 401b384:	10000926 	beq	r2,zero,401b3ac <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 401b388:	e0bffc17 	ldw	r2,-16(fp)
 401b38c:	10800017 	ldw	r2,0(r2)
 401b390:	10800717 	ldw	r2,28(r2)
 401b394:	e1bfff17 	ldw	r6,-4(fp)
 401b398:	e17ffe17 	ldw	r5,-8(fp)
 401b39c:	e13ffc17 	ldw	r4,-16(fp)
 401b3a0:	103ee83a 	callr	r2
 401b3a4:	e0bffb15 	stw	r2,-20(fp)
 401b3a8:	00000506 	br	401b3c0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 401b3ac:	00bfde84 	movi	r2,-134
 401b3b0:	e0bffb15 	stw	r2,-20(fp)
 401b3b4:	00000206 	br	401b3c0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 401b3b8:	00bfebc4 	movi	r2,-81
 401b3bc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 401b3c0:	e0bffb17 	ldw	r2,-20(fp)
 401b3c4:	1000070e 	bge	r2,zero,401b3e4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 401b3c8:	401b2e40 	call	401b2e4 <alt_get_errno>
 401b3cc:	1007883a 	mov	r3,r2
 401b3d0:	e0bffb17 	ldw	r2,-20(fp)
 401b3d4:	0085c83a 	sub	r2,zero,r2
 401b3d8:	18800015 	stw	r2,0(r3)
    rc = -1;
 401b3dc:	00bfffc4 	movi	r2,-1
 401b3e0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 401b3e4:	e0bffb17 	ldw	r2,-20(fp)
}
 401b3e8:	e037883a 	mov	sp,fp
 401b3ec:	dfc00117 	ldw	ra,4(sp)
 401b3f0:	df000017 	ldw	fp,0(sp)
 401b3f4:	dec00204 	addi	sp,sp,8
 401b3f8:	f800283a 	ret

0401b3fc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 401b3fc:	defffd04 	addi	sp,sp,-12
 401b400:	dfc00215 	stw	ra,8(sp)
 401b404:	df000115 	stw	fp,4(sp)
 401b408:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 401b40c:	0009883a 	mov	r4,zero
 401b410:	401bb2c0 	call	401bb2c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 401b414:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 401b418:	401bb640 	call	401bb64 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 401b41c:	018100b4 	movhi	r6,1026
 401b420:	31b80504 	addi	r6,r6,-8172
 401b424:	014100b4 	movhi	r5,1026
 401b428:	29780504 	addi	r5,r5,-8172
 401b42c:	010100b4 	movhi	r4,1026
 401b430:	21380504 	addi	r4,r4,-8172
 401b434:	401d10c0 	call	401d10c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 401b438:	401cca80 	call	401cca8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 401b43c:	010100b4 	movhi	r4,1026
 401b440:	21334204 	addi	r4,r4,-13048
 401b444:	401d7280 	call	401d728 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 401b448:	d0a80d17 	ldw	r2,-24524(gp)
 401b44c:	d0e80e17 	ldw	r3,-24520(gp)
 401b450:	d1280f17 	ldw	r4,-24516(gp)
 401b454:	200d883a 	mov	r6,r4
 401b458:	180b883a 	mov	r5,r3
 401b45c:	1009883a 	mov	r4,r2
 401b460:	400026c0 	call	400026c <main>
 401b464:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 401b468:	01000044 	movi	r4,1
 401b46c:	401ad240 	call	401ad24 <close>
  exit (result);
 401b470:	e13fff17 	ldw	r4,-4(fp)
 401b474:	401d73c0 	call	401d73c <exit>

0401b478 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 401b478:	defffe04 	addi	sp,sp,-8
 401b47c:	df000115 	stw	fp,4(sp)
 401b480:	df000104 	addi	fp,sp,4
 401b484:	e13fff15 	stw	r4,-4(fp)
}
 401b488:	0001883a 	nop
 401b48c:	e037883a 	mov	sp,fp
 401b490:	df000017 	ldw	fp,0(sp)
 401b494:	dec00104 	addi	sp,sp,4
 401b498:	f800283a 	ret

0401b49c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 401b49c:	defffe04 	addi	sp,sp,-8
 401b4a0:	df000115 	stw	fp,4(sp)
 401b4a4:	df000104 	addi	fp,sp,4
 401b4a8:	e13fff15 	stw	r4,-4(fp)
}
 401b4ac:	0001883a 	nop
 401b4b0:	e037883a 	mov	sp,fp
 401b4b4:	df000017 	ldw	fp,0(sp)
 401b4b8:	dec00104 	addi	sp,sp,4
 401b4bc:	f800283a 	ret

0401b4c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b4c0:	defffe04 	addi	sp,sp,-8
 401b4c4:	dfc00115 	stw	ra,4(sp)
 401b4c8:	df000015 	stw	fp,0(sp)
 401b4cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b4d0:	d0a01217 	ldw	r2,-32696(gp)
 401b4d4:	10000326 	beq	r2,zero,401b4e4 <alt_get_errno+0x24>
 401b4d8:	d0a01217 	ldw	r2,-32696(gp)
 401b4dc:	103ee83a 	callr	r2
 401b4e0:	00000106 	br	401b4e8 <alt_get_errno+0x28>
 401b4e4:	d0a80204 	addi	r2,gp,-24568
}
 401b4e8:	e037883a 	mov	sp,fp
 401b4ec:	dfc00117 	ldw	ra,4(sp)
 401b4f0:	df000017 	ldw	fp,0(sp)
 401b4f4:	dec00204 	addi	sp,sp,8
 401b4f8:	f800283a 	ret

0401b4fc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 401b4fc:	defff904 	addi	sp,sp,-28
 401b500:	dfc00615 	stw	ra,24(sp)
 401b504:	df000515 	stw	fp,20(sp)
 401b508:	df000504 	addi	fp,sp,20
 401b50c:	e13ffd15 	stw	r4,-12(fp)
 401b510:	e17ffe15 	stw	r5,-8(fp)
 401b514:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401b518:	e0bffd17 	ldw	r2,-12(fp)
 401b51c:	10000816 	blt	r2,zero,401b540 <read+0x44>
 401b520:	01400304 	movi	r5,12
 401b524:	e13ffd17 	ldw	r4,-12(fp)
 401b528:	400dcd40 	call	400dcd4 <__mulsi3>
 401b52c:	1007883a 	mov	r3,r2
 401b530:	008100b4 	movhi	r2,1026
 401b534:	10bb6004 	addi	r2,r2,-4736
 401b538:	1885883a 	add	r2,r3,r2
 401b53c:	00000106 	br	401b544 <read+0x48>
 401b540:	0005883a 	mov	r2,zero
 401b544:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401b548:	e0bffb17 	ldw	r2,-20(fp)
 401b54c:	10002226 	beq	r2,zero,401b5d8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401b550:	e0bffb17 	ldw	r2,-20(fp)
 401b554:	10800217 	ldw	r2,8(r2)
 401b558:	108000cc 	andi	r2,r2,3
 401b55c:	10800060 	cmpeqi	r2,r2,1
 401b560:	1000181e 	bne	r2,zero,401b5c4 <read+0xc8>
        (fd->dev->read))
 401b564:	e0bffb17 	ldw	r2,-20(fp)
 401b568:	10800017 	ldw	r2,0(r2)
 401b56c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 401b570:	10001426 	beq	r2,zero,401b5c4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 401b574:	e0bffb17 	ldw	r2,-20(fp)
 401b578:	10800017 	ldw	r2,0(r2)
 401b57c:	10800517 	ldw	r2,20(r2)
 401b580:	e0ffff17 	ldw	r3,-4(fp)
 401b584:	180d883a 	mov	r6,r3
 401b588:	e17ffe17 	ldw	r5,-8(fp)
 401b58c:	e13ffb17 	ldw	r4,-20(fp)
 401b590:	103ee83a 	callr	r2
 401b594:	e0bffc15 	stw	r2,-16(fp)
 401b598:	e0bffc17 	ldw	r2,-16(fp)
 401b59c:	1000070e 	bge	r2,zero,401b5bc <read+0xc0>
        {
          ALT_ERRNO = -rval;
 401b5a0:	401b4c00 	call	401b4c0 <alt_get_errno>
 401b5a4:	1007883a 	mov	r3,r2
 401b5a8:	e0bffc17 	ldw	r2,-16(fp)
 401b5ac:	0085c83a 	sub	r2,zero,r2
 401b5b0:	18800015 	stw	r2,0(r3)
          return -1;
 401b5b4:	00bfffc4 	movi	r2,-1
 401b5b8:	00000c06 	br	401b5ec <read+0xf0>
        }
        return rval;
 401b5bc:	e0bffc17 	ldw	r2,-16(fp)
 401b5c0:	00000a06 	br	401b5ec <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 401b5c4:	401b4c00 	call	401b4c0 <alt_get_errno>
 401b5c8:	1007883a 	mov	r3,r2
 401b5cc:	00800344 	movi	r2,13
 401b5d0:	18800015 	stw	r2,0(r3)
 401b5d4:	00000406 	br	401b5e8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 401b5d8:	401b4c00 	call	401b4c0 <alt_get_errno>
 401b5dc:	1007883a 	mov	r3,r2
 401b5e0:	00801444 	movi	r2,81
 401b5e4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401b5e8:	00bfffc4 	movi	r2,-1
}
 401b5ec:	e037883a 	mov	sp,fp
 401b5f0:	dfc00117 	ldw	ra,4(sp)
 401b5f4:	df000017 	ldw	fp,0(sp)
 401b5f8:	dec00204 	addi	sp,sp,8
 401b5fc:	f800283a 	ret

0401b600 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 401b600:	defffc04 	addi	sp,sp,-16
 401b604:	dfc00315 	stw	ra,12(sp)
 401b608:	df000215 	stw	fp,8(sp)
 401b60c:	dc000115 	stw	r16,4(sp)
 401b610:	df000204 	addi	fp,sp,8
 401b614:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 401b618:	e0bffe17 	ldw	r2,-8(fp)
 401b61c:	108000d0 	cmplti	r2,r2,3
 401b620:	1000111e 	bne	r2,zero,401b668 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 401b624:	040100b4 	movhi	r16,1026
 401b628:	843b6004 	addi	r16,r16,-4736
 401b62c:	e0bffe17 	ldw	r2,-8(fp)
 401b630:	01400304 	movi	r5,12
 401b634:	1009883a 	mov	r4,r2
 401b638:	400dcd40 	call	400dcd4 <__mulsi3>
 401b63c:	8085883a 	add	r2,r16,r2
 401b640:	10800204 	addi	r2,r2,8
 401b644:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 401b648:	040100b4 	movhi	r16,1026
 401b64c:	843b6004 	addi	r16,r16,-4736
 401b650:	e0bffe17 	ldw	r2,-8(fp)
 401b654:	01400304 	movi	r5,12
 401b658:	1009883a 	mov	r4,r2
 401b65c:	400dcd40 	call	400dcd4 <__mulsi3>
 401b660:	8085883a 	add	r2,r16,r2
 401b664:	10000015 	stw	zero,0(r2)
  }
}
 401b668:	0001883a 	nop
 401b66c:	e6ffff04 	addi	sp,fp,-4
 401b670:	dfc00217 	ldw	ra,8(sp)
 401b674:	df000117 	ldw	fp,4(sp)
 401b678:	dc000017 	ldw	r16,0(sp)
 401b67c:	dec00304 	addi	sp,sp,12
 401b680:	f800283a 	ret

0401b684 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 401b684:	defff904 	addi	sp,sp,-28
 401b688:	df000615 	stw	fp,24(sp)
 401b68c:	df000604 	addi	fp,sp,24
 401b690:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b694:	0005303a 	rdctl	r2,status
 401b698:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b69c:	e0fffe17 	ldw	r3,-8(fp)
 401b6a0:	00bfff84 	movi	r2,-2
 401b6a4:	1884703a 	and	r2,r3,r2
 401b6a8:	1001703a 	wrctl	status,r2
  
  return context;
 401b6ac:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 401b6b0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 401b6b4:	d0a01317 	ldw	r2,-32692(gp)
 401b6b8:	10c000c4 	addi	r3,r2,3
 401b6bc:	00bfff04 	movi	r2,-4
 401b6c0:	1884703a 	and	r2,r3,r2
 401b6c4:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 401b6c8:	d0e01317 	ldw	r3,-32692(gp)
 401b6cc:	e0bfff17 	ldw	r2,-4(fp)
 401b6d0:	1887883a 	add	r3,r3,r2
 401b6d4:	00820034 	movhi	r2,2048
 401b6d8:	10800004 	addi	r2,r2,0
 401b6dc:	10c0062e 	bgeu	r2,r3,401b6f8 <sbrk+0x74>
 401b6e0:	e0bffb17 	ldw	r2,-20(fp)
 401b6e4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b6e8:	e0bffa17 	ldw	r2,-24(fp)
 401b6ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 401b6f0:	00bfffc4 	movi	r2,-1
 401b6f4:	00000b06 	br	401b724 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 401b6f8:	d0a01317 	ldw	r2,-32692(gp)
 401b6fc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 401b700:	d0e01317 	ldw	r3,-32692(gp)
 401b704:	e0bfff17 	ldw	r2,-4(fp)
 401b708:	1885883a 	add	r2,r3,r2
 401b70c:	d0a01315 	stw	r2,-32692(gp)
 401b710:	e0bffb17 	ldw	r2,-20(fp)
 401b714:	e0bffc15 	stw	r2,-16(fp)
 401b718:	e0bffc17 	ldw	r2,-16(fp)
 401b71c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 401b720:	e0bffd17 	ldw	r2,-12(fp)
} 
 401b724:	e037883a 	mov	sp,fp
 401b728:	df000017 	ldw	fp,0(sp)
 401b72c:	dec00104 	addi	sp,sp,4
 401b730:	f800283a 	ret

0401b734 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 401b734:	defffa04 	addi	sp,sp,-24
 401b738:	df000515 	stw	fp,20(sp)
 401b73c:	df000504 	addi	fp,sp,20
 401b740:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401b744:	0005303a 	rdctl	r2,status
 401b748:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401b74c:	e0fffc17 	ldw	r3,-16(fp)
 401b750:	00bfff84 	movi	r2,-2
 401b754:	1884703a 	and	r2,r3,r2
 401b758:	1001703a 	wrctl	status,r2
  
  return context;
 401b75c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 401b760:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 401b764:	e0bfff17 	ldw	r2,-4(fp)
 401b768:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 401b76c:	e0bffd17 	ldw	r2,-12(fp)
 401b770:	10800017 	ldw	r2,0(r2)
 401b774:	e0fffd17 	ldw	r3,-12(fp)
 401b778:	18c00117 	ldw	r3,4(r3)
 401b77c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 401b780:	e0bffd17 	ldw	r2,-12(fp)
 401b784:	10800117 	ldw	r2,4(r2)
 401b788:	e0fffd17 	ldw	r3,-12(fp)
 401b78c:	18c00017 	ldw	r3,0(r3)
 401b790:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 401b794:	e0bffd17 	ldw	r2,-12(fp)
 401b798:	e0fffd17 	ldw	r3,-12(fp)
 401b79c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 401b7a0:	e0bffd17 	ldw	r2,-12(fp)
 401b7a4:	e0fffd17 	ldw	r3,-12(fp)
 401b7a8:	10c00015 	stw	r3,0(r2)
 401b7ac:	e0bffb17 	ldw	r2,-20(fp)
 401b7b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401b7b4:	e0bffe17 	ldw	r2,-8(fp)
 401b7b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401b7bc:	0001883a 	nop
 401b7c0:	e037883a 	mov	sp,fp
 401b7c4:	df000017 	ldw	fp,0(sp)
 401b7c8:	dec00104 	addi	sp,sp,4
 401b7cc:	f800283a 	ret

0401b7d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 401b7d0:	defffb04 	addi	sp,sp,-20
 401b7d4:	dfc00415 	stw	ra,16(sp)
 401b7d8:	df000315 	stw	fp,12(sp)
 401b7dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 401b7e0:	d0a01417 	ldw	r2,-32688(gp)
 401b7e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 401b7e8:	d0a81117 	ldw	r2,-24508(gp)
 401b7ec:	10800044 	addi	r2,r2,1
 401b7f0:	d0a81115 	stw	r2,-24508(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401b7f4:	00002e06 	br	401b8b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 401b7f8:	e0bffd17 	ldw	r2,-12(fp)
 401b7fc:	10800017 	ldw	r2,0(r2)
 401b800:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 401b804:	e0bffd17 	ldw	r2,-12(fp)
 401b808:	10800403 	ldbu	r2,16(r2)
 401b80c:	10803fcc 	andi	r2,r2,255
 401b810:	10000426 	beq	r2,zero,401b824 <alt_tick+0x54>
 401b814:	d0a81117 	ldw	r2,-24508(gp)
 401b818:	1000021e 	bne	r2,zero,401b824 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401b81c:	e0bffd17 	ldw	r2,-12(fp)
 401b820:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 401b824:	e0bffd17 	ldw	r2,-12(fp)
 401b828:	10800217 	ldw	r2,8(r2)
 401b82c:	d0e81117 	ldw	r3,-24508(gp)
 401b830:	18801d36 	bltu	r3,r2,401b8a8 <alt_tick+0xd8>
 401b834:	e0bffd17 	ldw	r2,-12(fp)
 401b838:	10800403 	ldbu	r2,16(r2)
 401b83c:	10803fcc 	andi	r2,r2,255
 401b840:	1000191e 	bne	r2,zero,401b8a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 401b844:	e0bffd17 	ldw	r2,-12(fp)
 401b848:	10800317 	ldw	r2,12(r2)
 401b84c:	e0fffd17 	ldw	r3,-12(fp)
 401b850:	18c00517 	ldw	r3,20(r3)
 401b854:	1809883a 	mov	r4,r3
 401b858:	103ee83a 	callr	r2
 401b85c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 401b860:	e0bfff17 	ldw	r2,-4(fp)
 401b864:	1000031e 	bne	r2,zero,401b874 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401b868:	e13ffd17 	ldw	r4,-12(fp)
 401b86c:	401b7340 	call	401b734 <alt_alarm_stop>
 401b870:	00000d06 	br	401b8a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 401b874:	e0bffd17 	ldw	r2,-12(fp)
 401b878:	10c00217 	ldw	r3,8(r2)
 401b87c:	e0bfff17 	ldw	r2,-4(fp)
 401b880:	1887883a 	add	r3,r3,r2
 401b884:	e0bffd17 	ldw	r2,-12(fp)
 401b888:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 401b88c:	e0bffd17 	ldw	r2,-12(fp)
 401b890:	10c00217 	ldw	r3,8(r2)
 401b894:	d0a81117 	ldw	r2,-24508(gp)
 401b898:	1880032e 	bgeu	r3,r2,401b8a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 401b89c:	e0bffd17 	ldw	r2,-12(fp)
 401b8a0:	00c00044 	movi	r3,1
 401b8a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 401b8a8:	e0bffe17 	ldw	r2,-8(fp)
 401b8ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 401b8b0:	e0fffd17 	ldw	r3,-12(fp)
 401b8b4:	d0a01404 	addi	r2,gp,-32688
 401b8b8:	18bfcf1e 	bne	r3,r2,401b7f8 <__alt_mem_onchip_memory2_0+0xfc016638>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401b8bc:	0001883a 	nop
}
 401b8c0:	0001883a 	nop
 401b8c4:	e037883a 	mov	sp,fp
 401b8c8:	dfc00117 	ldw	ra,4(sp)
 401b8cc:	df000017 	ldw	fp,0(sp)
 401b8d0:	dec00204 	addi	sp,sp,8
 401b8d4:	f800283a 	ret

0401b8d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b8d8:	defffe04 	addi	sp,sp,-8
 401b8dc:	dfc00115 	stw	ra,4(sp)
 401b8e0:	df000015 	stw	fp,0(sp)
 401b8e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b8e8:	d0a01217 	ldw	r2,-32696(gp)
 401b8ec:	10000326 	beq	r2,zero,401b8fc <alt_get_errno+0x24>
 401b8f0:	d0a01217 	ldw	r2,-32696(gp)
 401b8f4:	103ee83a 	callr	r2
 401b8f8:	00000106 	br	401b900 <alt_get_errno+0x28>
 401b8fc:	d0a80204 	addi	r2,gp,-24568
}
 401b900:	e037883a 	mov	sp,fp
 401b904:	dfc00117 	ldw	ra,4(sp)
 401b908:	df000017 	ldw	fp,0(sp)
 401b90c:	dec00204 	addi	sp,sp,8
 401b910:	f800283a 	ret

0401b914 <times>:
 *
 * ALT_TIMES is mapped onto the times() system call in alt_syscall.h
 */
 
clock_t ALT_TIMES (struct tms *buf)
{
 401b914:	defffc04 	addi	sp,sp,-16
 401b918:	dfc00315 	stw	ra,12(sp)
 401b91c:	df000215 	stw	fp,8(sp)
 401b920:	df000204 	addi	fp,sp,8
 401b924:	e13fff15 	stw	r4,-4(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401b928:	d0a81117 	ldw	r2,-24508(gp)
  clock_t ticks = alt_nticks(); 
 401b92c:	e0bffe15 	stw	r2,-8(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401b930:	d0a81017 	ldw	r2,-24512(gp)

  /* If there is no system clock present, generate an error */

  if (!alt_ticks_per_second())
 401b934:	1000061e 	bne	r2,zero,401b950 <times+0x3c>
  {
    ALT_ERRNO = ENOSYS;
 401b938:	401b8d80 	call	401b8d8 <alt_get_errno>
 401b93c:	1007883a 	mov	r3,r2
 401b940:	00801604 	movi	r2,88
 401b944:	18800015 	stw	r2,0(r3)
    return 0;
 401b948:	0005883a 	mov	r2,zero
 401b94c:	00000a06 	br	401b978 <times+0x64>
  }

  /* Otherwise return the elapsed time */

  buf->tms_utime  = 0;
 401b950:	e0bfff17 	ldw	r2,-4(fp)
 401b954:	10000015 	stw	zero,0(r2)
  buf->tms_stime  = ticks;
 401b958:	e0bfff17 	ldw	r2,-4(fp)
 401b95c:	e0fffe17 	ldw	r3,-8(fp)
 401b960:	10c00115 	stw	r3,4(r2)
  buf->tms_cutime = 0;
 401b964:	e0bfff17 	ldw	r2,-4(fp)
 401b968:	10000215 	stw	zero,8(r2)
  buf->tms_cstime = 0;
 401b96c:	e0bfff17 	ldw	r2,-4(fp)
 401b970:	10000315 	stw	zero,12(r2)

  return ticks;
 401b974:	e0bffe17 	ldw	r2,-8(fp)
}
 401b978:	e037883a 	mov	sp,fp
 401b97c:	dfc00117 	ldw	ra,4(sp)
 401b980:	df000017 	ldw	fp,0(sp)
 401b984:	dec00204 	addi	sp,sp,8
 401b988:	f800283a 	ret

0401b98c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 401b98c:	defffd04 	addi	sp,sp,-12
 401b990:	dfc00215 	stw	ra,8(sp)
 401b994:	df000115 	stw	fp,4(sp)
 401b998:	df000104 	addi	fp,sp,4
 401b99c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 401b9a0:	e13fff17 	ldw	r4,-4(fp)
 401b9a4:	401ca500 	call	401ca50 <alt_busy_sleep>
}
 401b9a8:	e037883a 	mov	sp,fp
 401b9ac:	dfc00117 	ldw	ra,4(sp)
 401b9b0:	df000017 	ldw	fp,0(sp)
 401b9b4:	dec00204 	addi	sp,sp,8
 401b9b8:	f800283a 	ret

0401b9bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401b9bc:	defffe04 	addi	sp,sp,-8
 401b9c0:	dfc00115 	stw	ra,4(sp)
 401b9c4:	df000015 	stw	fp,0(sp)
 401b9c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401b9cc:	d0a01217 	ldw	r2,-32696(gp)
 401b9d0:	10000326 	beq	r2,zero,401b9e0 <alt_get_errno+0x24>
 401b9d4:	d0a01217 	ldw	r2,-32696(gp)
 401b9d8:	103ee83a 	callr	r2
 401b9dc:	00000106 	br	401b9e4 <alt_get_errno+0x28>
 401b9e0:	d0a80204 	addi	r2,gp,-24568
}
 401b9e4:	e037883a 	mov	sp,fp
 401b9e8:	dfc00117 	ldw	ra,4(sp)
 401b9ec:	df000017 	ldw	fp,0(sp)
 401b9f0:	dec00204 	addi	sp,sp,8
 401b9f4:	f800283a 	ret

0401b9f8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 401b9f8:	defff904 	addi	sp,sp,-28
 401b9fc:	dfc00615 	stw	ra,24(sp)
 401ba00:	df000515 	stw	fp,20(sp)
 401ba04:	df000504 	addi	fp,sp,20
 401ba08:	e13ffd15 	stw	r4,-12(fp)
 401ba0c:	e17ffe15 	stw	r5,-8(fp)
 401ba10:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 401ba14:	e0bffd17 	ldw	r2,-12(fp)
 401ba18:	10000816 	blt	r2,zero,401ba3c <write+0x44>
 401ba1c:	01400304 	movi	r5,12
 401ba20:	e13ffd17 	ldw	r4,-12(fp)
 401ba24:	400dcd40 	call	400dcd4 <__mulsi3>
 401ba28:	1007883a 	mov	r3,r2
 401ba2c:	008100b4 	movhi	r2,1026
 401ba30:	10bb6004 	addi	r2,r2,-4736
 401ba34:	1885883a 	add	r2,r3,r2
 401ba38:	00000106 	br	401ba40 <write+0x48>
 401ba3c:	0005883a 	mov	r2,zero
 401ba40:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 401ba44:	e0bffb17 	ldw	r2,-20(fp)
 401ba48:	10002126 	beq	r2,zero,401bad0 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 401ba4c:	e0bffb17 	ldw	r2,-20(fp)
 401ba50:	10800217 	ldw	r2,8(r2)
 401ba54:	108000cc 	andi	r2,r2,3
 401ba58:	10001826 	beq	r2,zero,401babc <write+0xc4>
 401ba5c:	e0bffb17 	ldw	r2,-20(fp)
 401ba60:	10800017 	ldw	r2,0(r2)
 401ba64:	10800617 	ldw	r2,24(r2)
 401ba68:	10001426 	beq	r2,zero,401babc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 401ba6c:	e0bffb17 	ldw	r2,-20(fp)
 401ba70:	10800017 	ldw	r2,0(r2)
 401ba74:	10800617 	ldw	r2,24(r2)
 401ba78:	e0ffff17 	ldw	r3,-4(fp)
 401ba7c:	180d883a 	mov	r6,r3
 401ba80:	e17ffe17 	ldw	r5,-8(fp)
 401ba84:	e13ffb17 	ldw	r4,-20(fp)
 401ba88:	103ee83a 	callr	r2
 401ba8c:	e0bffc15 	stw	r2,-16(fp)
 401ba90:	e0bffc17 	ldw	r2,-16(fp)
 401ba94:	1000070e 	bge	r2,zero,401bab4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 401ba98:	401b9bc0 	call	401b9bc <alt_get_errno>
 401ba9c:	1007883a 	mov	r3,r2
 401baa0:	e0bffc17 	ldw	r2,-16(fp)
 401baa4:	0085c83a 	sub	r2,zero,r2
 401baa8:	18800015 	stw	r2,0(r3)
        return -1;
 401baac:	00bfffc4 	movi	r2,-1
 401bab0:	00000c06 	br	401bae4 <write+0xec>
      }
      return rval;
 401bab4:	e0bffc17 	ldw	r2,-16(fp)
 401bab8:	00000a06 	br	401bae4 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 401babc:	401b9bc0 	call	401b9bc <alt_get_errno>
 401bac0:	1007883a 	mov	r3,r2
 401bac4:	00800344 	movi	r2,13
 401bac8:	18800015 	stw	r2,0(r3)
 401bacc:	00000406 	br	401bae0 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 401bad0:	401b9bc0 	call	401b9bc <alt_get_errno>
 401bad4:	1007883a 	mov	r3,r2
 401bad8:	00801444 	movi	r2,81
 401badc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 401bae0:	00bfffc4 	movi	r2,-1
}
 401bae4:	e037883a 	mov	sp,fp
 401bae8:	dfc00117 	ldw	ra,4(sp)
 401baec:	df000017 	ldw	fp,0(sp)
 401baf0:	dec00204 	addi	sp,sp,8
 401baf4:	f800283a 	ret

0401baf8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 401baf8:	defffd04 	addi	sp,sp,-12
 401bafc:	dfc00215 	stw	ra,8(sp)
 401bb00:	df000115 	stw	fp,4(sp)
 401bb04:	df000104 	addi	fp,sp,4
 401bb08:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 401bb0c:	d1600f04 	addi	r5,gp,-32708
 401bb10:	e13fff17 	ldw	r4,-4(fp)
 401bb14:	401cc040 	call	401cc04 <alt_dev_llist_insert>
}
 401bb18:	e037883a 	mov	sp,fp
 401bb1c:	dfc00117 	ldw	ra,4(sp)
 401bb20:	df000017 	ldw	fp,0(sp)
 401bb24:	dec00204 	addi	sp,sp,8
 401bb28:	f800283a 	ret

0401bb2c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 401bb2c:	defffd04 	addi	sp,sp,-12
 401bb30:	dfc00215 	stw	ra,8(sp)
 401bb34:	df000115 	stw	fp,4(sp)
 401bb38:	df000104 	addi	fp,sp,4
 401bb3c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 401bb40:	401d40c0 	call	401d40c <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 401bb44:	00800044 	movi	r2,1
 401bb48:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 401bb4c:	0001883a 	nop
 401bb50:	e037883a 	mov	sp,fp
 401bb54:	dfc00117 	ldw	ra,4(sp)
 401bb58:	df000017 	ldw	fp,0(sp)
 401bb5c:	dec00204 	addi	sp,sp,8
 401bb60:	f800283a 	ret

0401bb64 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 401bb64:	defffe04 	addi	sp,sp,-8
 401bb68:	dfc00115 	stw	ra,4(sp)
 401bb6c:	df000015 	stw	fp,0(sp)
 401bb70:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 401bb74:	01c0fa04 	movi	r7,1000
 401bb78:	01800044 	movi	r6,1
 401bb7c:	000b883a 	mov	r5,zero
 401bb80:	01020034 	movhi	r4,2048
 401bb84:	21141004 	addi	r4,r4,20544
 401bb88:	401c8a80 	call	401c8a8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 401bb8c:	000d883a 	mov	r6,zero
 401bb90:	000b883a 	mov	r5,zero
 401bb94:	010100b4 	movhi	r4,1026
 401bb98:	213bca04 	addi	r4,r4,-4312
 401bb9c:	401bd300 	call	401bd30 <altera_avalon_jtag_uart_init>
 401bba0:	010100b4 	movhi	r4,1026
 401bba4:	213bc004 	addi	r4,r4,-4352
 401bba8:	401baf80 	call	401baf8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI, spi);
 401bbac:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 401bbb0:	0001883a 	nop
}
 401bbb4:	0001883a 	nop
 401bbb8:	e037883a 	mov	sp,fp
 401bbbc:	dfc00117 	ldw	ra,4(sp)
 401bbc0:	df000017 	ldw	fp,0(sp)
 401bbc4:	dec00204 	addi	sp,sp,8
 401bbc8:	f800283a 	ret

0401bbcc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 401bbcc:	defffa04 	addi	sp,sp,-24
 401bbd0:	dfc00515 	stw	ra,20(sp)
 401bbd4:	df000415 	stw	fp,16(sp)
 401bbd8:	df000404 	addi	fp,sp,16
 401bbdc:	e13ffd15 	stw	r4,-12(fp)
 401bbe0:	e17ffe15 	stw	r5,-8(fp)
 401bbe4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401bbe8:	e0bffd17 	ldw	r2,-12(fp)
 401bbec:	10800017 	ldw	r2,0(r2)
 401bbf0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401bbf4:	e0bffc17 	ldw	r2,-16(fp)
 401bbf8:	10c00a04 	addi	r3,r2,40
 401bbfc:	e0bffd17 	ldw	r2,-12(fp)
 401bc00:	10800217 	ldw	r2,8(r2)
 401bc04:	100f883a 	mov	r7,r2
 401bc08:	e1bfff17 	ldw	r6,-4(fp)
 401bc0c:	e17ffe17 	ldw	r5,-8(fp)
 401bc10:	1809883a 	mov	r4,r3
 401bc14:	401c1f40 	call	401c1f4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 401bc18:	e037883a 	mov	sp,fp
 401bc1c:	dfc00117 	ldw	ra,4(sp)
 401bc20:	df000017 	ldw	fp,0(sp)
 401bc24:	dec00204 	addi	sp,sp,8
 401bc28:	f800283a 	ret

0401bc2c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 401bc2c:	defffa04 	addi	sp,sp,-24
 401bc30:	dfc00515 	stw	ra,20(sp)
 401bc34:	df000415 	stw	fp,16(sp)
 401bc38:	df000404 	addi	fp,sp,16
 401bc3c:	e13ffd15 	stw	r4,-12(fp)
 401bc40:	e17ffe15 	stw	r5,-8(fp)
 401bc44:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401bc48:	e0bffd17 	ldw	r2,-12(fp)
 401bc4c:	10800017 	ldw	r2,0(r2)
 401bc50:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 401bc54:	e0bffc17 	ldw	r2,-16(fp)
 401bc58:	10c00a04 	addi	r3,r2,40
 401bc5c:	e0bffd17 	ldw	r2,-12(fp)
 401bc60:	10800217 	ldw	r2,8(r2)
 401bc64:	100f883a 	mov	r7,r2
 401bc68:	e1bfff17 	ldw	r6,-4(fp)
 401bc6c:	e17ffe17 	ldw	r5,-8(fp)
 401bc70:	1809883a 	mov	r4,r3
 401bc74:	401c4100 	call	401c410 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 401bc78:	e037883a 	mov	sp,fp
 401bc7c:	dfc00117 	ldw	ra,4(sp)
 401bc80:	df000017 	ldw	fp,0(sp)
 401bc84:	dec00204 	addi	sp,sp,8
 401bc88:	f800283a 	ret

0401bc8c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 401bc8c:	defffc04 	addi	sp,sp,-16
 401bc90:	dfc00315 	stw	ra,12(sp)
 401bc94:	df000215 	stw	fp,8(sp)
 401bc98:	df000204 	addi	fp,sp,8
 401bc9c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 401bca0:	e0bfff17 	ldw	r2,-4(fp)
 401bca4:	10800017 	ldw	r2,0(r2)
 401bca8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 401bcac:	e0bffe17 	ldw	r2,-8(fp)
 401bcb0:	10c00a04 	addi	r3,r2,40
 401bcb4:	e0bfff17 	ldw	r2,-4(fp)
 401bcb8:	10800217 	ldw	r2,8(r2)
 401bcbc:	100b883a 	mov	r5,r2
 401bcc0:	1809883a 	mov	r4,r3
 401bcc4:	401c09c0 	call	401c09c <altera_avalon_jtag_uart_close>
}
 401bcc8:	e037883a 	mov	sp,fp
 401bccc:	dfc00117 	ldw	ra,4(sp)
 401bcd0:	df000017 	ldw	fp,0(sp)
 401bcd4:	dec00204 	addi	sp,sp,8
 401bcd8:	f800283a 	ret

0401bcdc <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 401bcdc:	defffa04 	addi	sp,sp,-24
 401bce0:	dfc00515 	stw	ra,20(sp)
 401bce4:	df000415 	stw	fp,16(sp)
 401bce8:	df000404 	addi	fp,sp,16
 401bcec:	e13ffd15 	stw	r4,-12(fp)
 401bcf0:	e17ffe15 	stw	r5,-8(fp)
 401bcf4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 401bcf8:	e0bffd17 	ldw	r2,-12(fp)
 401bcfc:	10800017 	ldw	r2,0(r2)
 401bd00:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 401bd04:	e0bffc17 	ldw	r2,-16(fp)
 401bd08:	10800a04 	addi	r2,r2,40
 401bd0c:	e1bfff17 	ldw	r6,-4(fp)
 401bd10:	e17ffe17 	ldw	r5,-8(fp)
 401bd14:	1009883a 	mov	r4,r2
 401bd18:	401c1040 	call	401c104 <altera_avalon_jtag_uart_ioctl>
}
 401bd1c:	e037883a 	mov	sp,fp
 401bd20:	dfc00117 	ldw	ra,4(sp)
 401bd24:	df000017 	ldw	fp,0(sp)
 401bd28:	dec00204 	addi	sp,sp,8
 401bd2c:	f800283a 	ret

0401bd30 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 401bd30:	defffa04 	addi	sp,sp,-24
 401bd34:	dfc00515 	stw	ra,20(sp)
 401bd38:	df000415 	stw	fp,16(sp)
 401bd3c:	df000404 	addi	fp,sp,16
 401bd40:	e13ffd15 	stw	r4,-12(fp)
 401bd44:	e17ffe15 	stw	r5,-8(fp)
 401bd48:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401bd4c:	e0bffd17 	ldw	r2,-12(fp)
 401bd50:	00c00044 	movi	r3,1
 401bd54:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 401bd58:	e0bffd17 	ldw	r2,-12(fp)
 401bd5c:	10800017 	ldw	r2,0(r2)
 401bd60:	10800104 	addi	r2,r2,4
 401bd64:	1007883a 	mov	r3,r2
 401bd68:	e0bffd17 	ldw	r2,-12(fp)
 401bd6c:	10800817 	ldw	r2,32(r2)
 401bd70:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 401bd74:	e0bffe17 	ldw	r2,-8(fp)
 401bd78:	e0ffff17 	ldw	r3,-4(fp)
 401bd7c:	d8000015 	stw	zero,0(sp)
 401bd80:	e1fffd17 	ldw	r7,-12(fp)
 401bd84:	018100b4 	movhi	r6,1026
 401bd88:	31af7c04 	addi	r6,r6,-16912
 401bd8c:	180b883a 	mov	r5,r3
 401bd90:	1009883a 	mov	r4,r2
 401bd94:	401cd880 	call	401cd88 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 401bd98:	e0bffd17 	ldw	r2,-12(fp)
 401bd9c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 401bda0:	e0bffd17 	ldw	r2,-12(fp)
 401bda4:	10800204 	addi	r2,r2,8
 401bda8:	d0e81017 	ldw	r3,-24512(gp)
 401bdac:	e1fffd17 	ldw	r7,-12(fp)
 401bdb0:	018100b4 	movhi	r6,1026
 401bdb4:	31afff04 	addi	r6,r6,-16388
 401bdb8:	180b883a 	mov	r5,r3
 401bdbc:	1009883a 	mov	r4,r2
 401bdc0:	401c9240 	call	401c924 <alt_alarm_start>
 401bdc4:	1000040e 	bge	r2,zero,401bdd8 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 401bdc8:	e0fffd17 	ldw	r3,-12(fp)
 401bdcc:	00a00034 	movhi	r2,32768
 401bdd0:	10bfffc4 	addi	r2,r2,-1
 401bdd4:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 401bdd8:	0001883a 	nop
 401bddc:	e037883a 	mov	sp,fp
 401bde0:	dfc00117 	ldw	ra,4(sp)
 401bde4:	df000017 	ldw	fp,0(sp)
 401bde8:	dec00204 	addi	sp,sp,8
 401bdec:	f800283a 	ret

0401bdf0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 401bdf0:	defff804 	addi	sp,sp,-32
 401bdf4:	df000715 	stw	fp,28(sp)
 401bdf8:	df000704 	addi	fp,sp,28
 401bdfc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 401be00:	e0bfff17 	ldw	r2,-4(fp)
 401be04:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 401be08:	e0bffb17 	ldw	r2,-20(fp)
 401be0c:	10800017 	ldw	r2,0(r2)
 401be10:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401be14:	e0bffc17 	ldw	r2,-16(fp)
 401be18:	10800104 	addi	r2,r2,4
 401be1c:	10800037 	ldwio	r2,0(r2)
 401be20:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 401be24:	e0bffd17 	ldw	r2,-12(fp)
 401be28:	1080c00c 	andi	r2,r2,768
 401be2c:	10006d26 	beq	r2,zero,401bfe4 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 401be30:	e0bffd17 	ldw	r2,-12(fp)
 401be34:	1080400c 	andi	r2,r2,256
 401be38:	10003526 	beq	r2,zero,401bf10 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 401be3c:	00800074 	movhi	r2,1
 401be40:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401be44:	e0bffb17 	ldw	r2,-20(fp)
 401be48:	10800a17 	ldw	r2,40(r2)
 401be4c:	10800044 	addi	r2,r2,1
 401be50:	1081ffcc 	andi	r2,r2,2047
 401be54:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 401be58:	e0bffb17 	ldw	r2,-20(fp)
 401be5c:	10c00b17 	ldw	r3,44(r2)
 401be60:	e0bffe17 	ldw	r2,-8(fp)
 401be64:	18801526 	beq	r3,r2,401bebc <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401be68:	e0bffc17 	ldw	r2,-16(fp)
 401be6c:	10800037 	ldwio	r2,0(r2)
 401be70:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 401be74:	e0bff917 	ldw	r2,-28(fp)
 401be78:	10a0000c 	andi	r2,r2,32768
 401be7c:	10001126 	beq	r2,zero,401bec4 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 401be80:	e0bffb17 	ldw	r2,-20(fp)
 401be84:	10800a17 	ldw	r2,40(r2)
 401be88:	e0fff917 	ldw	r3,-28(fp)
 401be8c:	1809883a 	mov	r4,r3
 401be90:	e0fffb17 	ldw	r3,-20(fp)
 401be94:	1885883a 	add	r2,r3,r2
 401be98:	10800e04 	addi	r2,r2,56
 401be9c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401bea0:	e0bffb17 	ldw	r2,-20(fp)
 401bea4:	10800a17 	ldw	r2,40(r2)
 401bea8:	10800044 	addi	r2,r2,1
 401beac:	10c1ffcc 	andi	r3,r2,2047
 401beb0:	e0bffb17 	ldw	r2,-20(fp)
 401beb4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 401beb8:	003fe206 	br	401be44 <__alt_mem_onchip_memory2_0+0xfc016c84>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 401bebc:	0001883a 	nop
 401bec0:	00000106 	br	401bec8 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 401bec4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 401bec8:	e0bff917 	ldw	r2,-28(fp)
 401becc:	10bfffec 	andhi	r2,r2,65535
 401bed0:	10000f26 	beq	r2,zero,401bf10 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401bed4:	e0bffb17 	ldw	r2,-20(fp)
 401bed8:	10c00817 	ldw	r3,32(r2)
 401bedc:	00bfff84 	movi	r2,-2
 401bee0:	1886703a 	and	r3,r3,r2
 401bee4:	e0bffb17 	ldw	r2,-20(fp)
 401bee8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 401beec:	e0bffc17 	ldw	r2,-16(fp)
 401bef0:	10800104 	addi	r2,r2,4
 401bef4:	1007883a 	mov	r3,r2
 401bef8:	e0bffb17 	ldw	r2,-20(fp)
 401befc:	10800817 	ldw	r2,32(r2)
 401bf00:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401bf04:	e0bffc17 	ldw	r2,-16(fp)
 401bf08:	10800104 	addi	r2,r2,4
 401bf0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401bf10:	e0bffd17 	ldw	r2,-12(fp)
 401bf14:	1080800c 	andi	r2,r2,512
 401bf18:	103fbe26 	beq	r2,zero,401be14 <__alt_mem_onchip_memory2_0+0xfc016c54>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 401bf1c:	e0bffd17 	ldw	r2,-12(fp)
 401bf20:	1004d43a 	srli	r2,r2,16
 401bf24:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 401bf28:	00001406 	br	401bf7c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 401bf2c:	e0bffc17 	ldw	r2,-16(fp)
 401bf30:	e0fffb17 	ldw	r3,-20(fp)
 401bf34:	18c00d17 	ldw	r3,52(r3)
 401bf38:	e13ffb17 	ldw	r4,-20(fp)
 401bf3c:	20c7883a 	add	r3,r4,r3
 401bf40:	18c20e04 	addi	r3,r3,2104
 401bf44:	18c00003 	ldbu	r3,0(r3)
 401bf48:	18c03fcc 	andi	r3,r3,255
 401bf4c:	18c0201c 	xori	r3,r3,128
 401bf50:	18ffe004 	addi	r3,r3,-128
 401bf54:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401bf58:	e0bffb17 	ldw	r2,-20(fp)
 401bf5c:	10800d17 	ldw	r2,52(r2)
 401bf60:	10800044 	addi	r2,r2,1
 401bf64:	10c1ffcc 	andi	r3,r2,2047
 401bf68:	e0bffb17 	ldw	r2,-20(fp)
 401bf6c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 401bf70:	e0bffa17 	ldw	r2,-24(fp)
 401bf74:	10bfffc4 	addi	r2,r2,-1
 401bf78:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 401bf7c:	e0bffa17 	ldw	r2,-24(fp)
 401bf80:	10000526 	beq	r2,zero,401bf98 <altera_avalon_jtag_uart_irq+0x1a8>
 401bf84:	e0bffb17 	ldw	r2,-20(fp)
 401bf88:	10c00d17 	ldw	r3,52(r2)
 401bf8c:	e0bffb17 	ldw	r2,-20(fp)
 401bf90:	10800c17 	ldw	r2,48(r2)
 401bf94:	18bfe51e 	bne	r3,r2,401bf2c <__alt_mem_onchip_memory2_0+0xfc016d6c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 401bf98:	e0bffa17 	ldw	r2,-24(fp)
 401bf9c:	103f9d26 	beq	r2,zero,401be14 <__alt_mem_onchip_memory2_0+0xfc016c54>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401bfa0:	e0bffb17 	ldw	r2,-20(fp)
 401bfa4:	10c00817 	ldw	r3,32(r2)
 401bfa8:	00bfff44 	movi	r2,-3
 401bfac:	1886703a 	and	r3,r3,r2
 401bfb0:	e0bffb17 	ldw	r2,-20(fp)
 401bfb4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401bfb8:	e0bffb17 	ldw	r2,-20(fp)
 401bfbc:	10800017 	ldw	r2,0(r2)
 401bfc0:	10800104 	addi	r2,r2,4
 401bfc4:	1007883a 	mov	r3,r2
 401bfc8:	e0bffb17 	ldw	r2,-20(fp)
 401bfcc:	10800817 	ldw	r2,32(r2)
 401bfd0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 401bfd4:	e0bffc17 	ldw	r2,-16(fp)
 401bfd8:	10800104 	addi	r2,r2,4
 401bfdc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 401bfe0:	003f8c06 	br	401be14 <__alt_mem_onchip_memory2_0+0xfc016c54>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 401bfe4:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 401bfe8:	0001883a 	nop
 401bfec:	e037883a 	mov	sp,fp
 401bff0:	df000017 	ldw	fp,0(sp)
 401bff4:	dec00104 	addi	sp,sp,4
 401bff8:	f800283a 	ret

0401bffc <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 401bffc:	defff804 	addi	sp,sp,-32
 401c000:	df000715 	stw	fp,28(sp)
 401c004:	df000704 	addi	fp,sp,28
 401c008:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 401c00c:	e0bffb17 	ldw	r2,-20(fp)
 401c010:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 401c014:	e0bff917 	ldw	r2,-28(fp)
 401c018:	10800017 	ldw	r2,0(r2)
 401c01c:	10800104 	addi	r2,r2,4
 401c020:	10800037 	ldwio	r2,0(r2)
 401c024:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 401c028:	e0bffa17 	ldw	r2,-24(fp)
 401c02c:	1081000c 	andi	r2,r2,1024
 401c030:	10000b26 	beq	r2,zero,401c060 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 401c034:	e0bff917 	ldw	r2,-28(fp)
 401c038:	10800017 	ldw	r2,0(r2)
 401c03c:	10800104 	addi	r2,r2,4
 401c040:	1007883a 	mov	r3,r2
 401c044:	e0bff917 	ldw	r2,-28(fp)
 401c048:	10800817 	ldw	r2,32(r2)
 401c04c:	10810014 	ori	r2,r2,1024
 401c050:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 401c054:	e0bff917 	ldw	r2,-28(fp)
 401c058:	10000915 	stw	zero,36(r2)
 401c05c:	00000a06 	br	401c088 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 401c060:	e0bff917 	ldw	r2,-28(fp)
 401c064:	10c00917 	ldw	r3,36(r2)
 401c068:	00a00034 	movhi	r2,32768
 401c06c:	10bfff04 	addi	r2,r2,-4
 401c070:	10c00536 	bltu	r2,r3,401c088 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 401c074:	e0bff917 	ldw	r2,-28(fp)
 401c078:	10800917 	ldw	r2,36(r2)
 401c07c:	10c00044 	addi	r3,r2,1
 401c080:	e0bff917 	ldw	r2,-28(fp)
 401c084:	10c00915 	stw	r3,36(r2)
 401c088:	d0a81017 	ldw	r2,-24512(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 401c08c:	e037883a 	mov	sp,fp
 401c090:	df000017 	ldw	fp,0(sp)
 401c094:	dec00104 	addi	sp,sp,4
 401c098:	f800283a 	ret

0401c09c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 401c09c:	defffd04 	addi	sp,sp,-12
 401c0a0:	df000215 	stw	fp,8(sp)
 401c0a4:	df000204 	addi	fp,sp,8
 401c0a8:	e13ffe15 	stw	r4,-8(fp)
 401c0ac:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401c0b0:	00000506 	br	401c0c8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401c0b4:	e0bfff17 	ldw	r2,-4(fp)
 401c0b8:	1090000c 	andi	r2,r2,16384
 401c0bc:	10000226 	beq	r2,zero,401c0c8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 401c0c0:	00bffd44 	movi	r2,-11
 401c0c4:	00000b06 	br	401c0f4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 401c0c8:	e0bffe17 	ldw	r2,-8(fp)
 401c0cc:	10c00d17 	ldw	r3,52(r2)
 401c0d0:	e0bffe17 	ldw	r2,-8(fp)
 401c0d4:	10800c17 	ldw	r2,48(r2)
 401c0d8:	18800526 	beq	r3,r2,401c0f0 <altera_avalon_jtag_uart_close+0x54>
 401c0dc:	e0bffe17 	ldw	r2,-8(fp)
 401c0e0:	10c00917 	ldw	r3,36(r2)
 401c0e4:	e0bffe17 	ldw	r2,-8(fp)
 401c0e8:	10800117 	ldw	r2,4(r2)
 401c0ec:	18bff136 	bltu	r3,r2,401c0b4 <__alt_mem_onchip_memory2_0+0xfc016ef4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 401c0f0:	0005883a 	mov	r2,zero
}
 401c0f4:	e037883a 	mov	sp,fp
 401c0f8:	df000017 	ldw	fp,0(sp)
 401c0fc:	dec00104 	addi	sp,sp,4
 401c100:	f800283a 	ret

0401c104 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 401c104:	defffa04 	addi	sp,sp,-24
 401c108:	df000515 	stw	fp,20(sp)
 401c10c:	df000504 	addi	fp,sp,20
 401c110:	e13ffd15 	stw	r4,-12(fp)
 401c114:	e17ffe15 	stw	r5,-8(fp)
 401c118:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 401c11c:	00bff9c4 	movi	r2,-25
 401c120:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 401c124:	e0bffe17 	ldw	r2,-8(fp)
 401c128:	10da8060 	cmpeqi	r3,r2,27137
 401c12c:	1800031e 	bne	r3,zero,401c13c <altera_avalon_jtag_uart_ioctl+0x38>
 401c130:	109a80a0 	cmpeqi	r2,r2,27138
 401c134:	1000181e 	bne	r2,zero,401c198 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 401c138:	00002906 	br	401c1e0 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 401c13c:	e0bffd17 	ldw	r2,-12(fp)
 401c140:	10c00117 	ldw	r3,4(r2)
 401c144:	00a00034 	movhi	r2,32768
 401c148:	10bfffc4 	addi	r2,r2,-1
 401c14c:	18802126 	beq	r3,r2,401c1d4 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 401c150:	e0bfff17 	ldw	r2,-4(fp)
 401c154:	10800017 	ldw	r2,0(r2)
 401c158:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 401c15c:	e0bffc17 	ldw	r2,-16(fp)
 401c160:	10800090 	cmplti	r2,r2,2
 401c164:	1000061e 	bne	r2,zero,401c180 <altera_avalon_jtag_uart_ioctl+0x7c>
 401c168:	e0fffc17 	ldw	r3,-16(fp)
 401c16c:	00a00034 	movhi	r2,32768
 401c170:	10bfffc4 	addi	r2,r2,-1
 401c174:	18800226 	beq	r3,r2,401c180 <altera_avalon_jtag_uart_ioctl+0x7c>
 401c178:	e0bffc17 	ldw	r2,-16(fp)
 401c17c:	00000206 	br	401c188 <altera_avalon_jtag_uart_ioctl+0x84>
 401c180:	00a00034 	movhi	r2,32768
 401c184:	10bfff84 	addi	r2,r2,-2
 401c188:	e0fffd17 	ldw	r3,-12(fp)
 401c18c:	18800115 	stw	r2,4(r3)
      rc = 0;
 401c190:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401c194:	00000f06 	br	401c1d4 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 401c198:	e0bffd17 	ldw	r2,-12(fp)
 401c19c:	10c00117 	ldw	r3,4(r2)
 401c1a0:	00a00034 	movhi	r2,32768
 401c1a4:	10bfffc4 	addi	r2,r2,-1
 401c1a8:	18800c26 	beq	r3,r2,401c1dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 401c1ac:	e0bffd17 	ldw	r2,-12(fp)
 401c1b0:	10c00917 	ldw	r3,36(r2)
 401c1b4:	e0bffd17 	ldw	r2,-12(fp)
 401c1b8:	10800117 	ldw	r2,4(r2)
 401c1bc:	1885803a 	cmpltu	r2,r3,r2
 401c1c0:	10c03fcc 	andi	r3,r2,255
 401c1c4:	e0bfff17 	ldw	r2,-4(fp)
 401c1c8:	10c00015 	stw	r3,0(r2)
      rc = 0;
 401c1cc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 401c1d0:	00000206 	br	401c1dc <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 401c1d4:	0001883a 	nop
 401c1d8:	00000106 	br	401c1e0 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 401c1dc:	0001883a 	nop

  default:
    break;
  }

  return rc;
 401c1e0:	e0bffb17 	ldw	r2,-20(fp)
}
 401c1e4:	e037883a 	mov	sp,fp
 401c1e8:	df000017 	ldw	fp,0(sp)
 401c1ec:	dec00104 	addi	sp,sp,4
 401c1f0:	f800283a 	ret

0401c1f4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 401c1f4:	defff304 	addi	sp,sp,-52
 401c1f8:	dfc00c15 	stw	ra,48(sp)
 401c1fc:	df000b15 	stw	fp,44(sp)
 401c200:	df000b04 	addi	fp,sp,44
 401c204:	e13ffc15 	stw	r4,-16(fp)
 401c208:	e17ffd15 	stw	r5,-12(fp)
 401c20c:	e1bffe15 	stw	r6,-8(fp)
 401c210:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 401c214:	e0bffd17 	ldw	r2,-12(fp)
 401c218:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401c21c:	00004706 	br	401c33c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 401c220:	e0bffc17 	ldw	r2,-16(fp)
 401c224:	10800a17 	ldw	r2,40(r2)
 401c228:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 401c22c:	e0bffc17 	ldw	r2,-16(fp)
 401c230:	10800b17 	ldw	r2,44(r2)
 401c234:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 401c238:	e0fff717 	ldw	r3,-36(fp)
 401c23c:	e0bff817 	ldw	r2,-32(fp)
 401c240:	18800536 	bltu	r3,r2,401c258 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 401c244:	e0fff717 	ldw	r3,-36(fp)
 401c248:	e0bff817 	ldw	r2,-32(fp)
 401c24c:	1885c83a 	sub	r2,r3,r2
 401c250:	e0bff615 	stw	r2,-40(fp)
 401c254:	00000406 	br	401c268 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 401c258:	00c20004 	movi	r3,2048
 401c25c:	e0bff817 	ldw	r2,-32(fp)
 401c260:	1885c83a 	sub	r2,r3,r2
 401c264:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401c268:	e0bff617 	ldw	r2,-40(fp)
 401c26c:	10001e26 	beq	r2,zero,401c2e8 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 401c270:	e0fffe17 	ldw	r3,-8(fp)
 401c274:	e0bff617 	ldw	r2,-40(fp)
 401c278:	1880022e 	bgeu	r3,r2,401c284 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 401c27c:	e0bffe17 	ldw	r2,-8(fp)
 401c280:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 401c284:	e0bffc17 	ldw	r2,-16(fp)
 401c288:	10c00e04 	addi	r3,r2,56
 401c28c:	e0bff817 	ldw	r2,-32(fp)
 401c290:	1885883a 	add	r2,r3,r2
 401c294:	e1bff617 	ldw	r6,-40(fp)
 401c298:	100b883a 	mov	r5,r2
 401c29c:	e13ff517 	ldw	r4,-44(fp)
 401c2a0:	400fbdc0 	call	400fbdc <memcpy>
      ptr   += n;
 401c2a4:	e0fff517 	ldw	r3,-44(fp)
 401c2a8:	e0bff617 	ldw	r2,-40(fp)
 401c2ac:	1885883a 	add	r2,r3,r2
 401c2b0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 401c2b4:	e0fffe17 	ldw	r3,-8(fp)
 401c2b8:	e0bff617 	ldw	r2,-40(fp)
 401c2bc:	1885c83a 	sub	r2,r3,r2
 401c2c0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401c2c4:	e0fff817 	ldw	r3,-32(fp)
 401c2c8:	e0bff617 	ldw	r2,-40(fp)
 401c2cc:	1885883a 	add	r2,r3,r2
 401c2d0:	10c1ffcc 	andi	r3,r2,2047
 401c2d4:	e0bffc17 	ldw	r2,-16(fp)
 401c2d8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 401c2dc:	e0bffe17 	ldw	r2,-8(fp)
 401c2e0:	00bfcf16 	blt	zero,r2,401c220 <__alt_mem_onchip_memory2_0+0xfc017060>
 401c2e4:	00000106 	br	401c2ec <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 401c2e8:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 401c2ec:	e0fff517 	ldw	r3,-44(fp)
 401c2f0:	e0bffd17 	ldw	r2,-12(fp)
 401c2f4:	1880141e 	bne	r3,r2,401c348 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 401c2f8:	e0bfff17 	ldw	r2,-4(fp)
 401c2fc:	1090000c 	andi	r2,r2,16384
 401c300:	1000131e 	bne	r2,zero,401c350 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 401c304:	0001883a 	nop
 401c308:	e0bffc17 	ldw	r2,-16(fp)
 401c30c:	10c00a17 	ldw	r3,40(r2)
 401c310:	e0bff717 	ldw	r2,-36(fp)
 401c314:	1880051e 	bne	r3,r2,401c32c <altera_avalon_jtag_uart_read+0x138>
 401c318:	e0bffc17 	ldw	r2,-16(fp)
 401c31c:	10c00917 	ldw	r3,36(r2)
 401c320:	e0bffc17 	ldw	r2,-16(fp)
 401c324:	10800117 	ldw	r2,4(r2)
 401c328:	18bff736 	bltu	r3,r2,401c308 <__alt_mem_onchip_memory2_0+0xfc017148>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 401c32c:	e0bffc17 	ldw	r2,-16(fp)
 401c330:	10c00a17 	ldw	r3,40(r2)
 401c334:	e0bff717 	ldw	r2,-36(fp)
 401c338:	18800726 	beq	r3,r2,401c358 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 401c33c:	e0bffe17 	ldw	r2,-8(fp)
 401c340:	00bfb716 	blt	zero,r2,401c220 <__alt_mem_onchip_memory2_0+0xfc017060>
 401c344:	00000506 	br	401c35c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 401c348:	0001883a 	nop
 401c34c:	00000306 	br	401c35c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 401c350:	0001883a 	nop
 401c354:	00000106 	br	401c35c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 401c358:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 401c35c:	e0fff517 	ldw	r3,-44(fp)
 401c360:	e0bffd17 	ldw	r2,-12(fp)
 401c364:	18801826 	beq	r3,r2,401c3c8 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c368:	0005303a 	rdctl	r2,status
 401c36c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c370:	e0fffb17 	ldw	r3,-20(fp)
 401c374:	00bfff84 	movi	r2,-2
 401c378:	1884703a 	and	r2,r3,r2
 401c37c:	1001703a 	wrctl	status,r2
  
  return context;
 401c380:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 401c384:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401c388:	e0bffc17 	ldw	r2,-16(fp)
 401c38c:	10800817 	ldw	r2,32(r2)
 401c390:	10c00054 	ori	r3,r2,1
 401c394:	e0bffc17 	ldw	r2,-16(fp)
 401c398:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401c39c:	e0bffc17 	ldw	r2,-16(fp)
 401c3a0:	10800017 	ldw	r2,0(r2)
 401c3a4:	10800104 	addi	r2,r2,4
 401c3a8:	1007883a 	mov	r3,r2
 401c3ac:	e0bffc17 	ldw	r2,-16(fp)
 401c3b0:	10800817 	ldw	r2,32(r2)
 401c3b4:	18800035 	stwio	r2,0(r3)
 401c3b8:	e0bffa17 	ldw	r2,-24(fp)
 401c3bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c3c0:	e0bff917 	ldw	r2,-28(fp)
 401c3c4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 401c3c8:	e0fff517 	ldw	r3,-44(fp)
 401c3cc:	e0bffd17 	ldw	r2,-12(fp)
 401c3d0:	18800426 	beq	r3,r2,401c3e4 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 401c3d4:	e0fff517 	ldw	r3,-44(fp)
 401c3d8:	e0bffd17 	ldw	r2,-12(fp)
 401c3dc:	1885c83a 	sub	r2,r3,r2
 401c3e0:	00000606 	br	401c3fc <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 401c3e4:	e0bfff17 	ldw	r2,-4(fp)
 401c3e8:	1090000c 	andi	r2,r2,16384
 401c3ec:	10000226 	beq	r2,zero,401c3f8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 401c3f0:	00bffd44 	movi	r2,-11
 401c3f4:	00000106 	br	401c3fc <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 401c3f8:	00bffec4 	movi	r2,-5
}
 401c3fc:	e037883a 	mov	sp,fp
 401c400:	dfc00117 	ldw	ra,4(sp)
 401c404:	df000017 	ldw	fp,0(sp)
 401c408:	dec00204 	addi	sp,sp,8
 401c40c:	f800283a 	ret

0401c410 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 401c410:	defff304 	addi	sp,sp,-52
 401c414:	dfc00c15 	stw	ra,48(sp)
 401c418:	df000b15 	stw	fp,44(sp)
 401c41c:	df000b04 	addi	fp,sp,44
 401c420:	e13ffc15 	stw	r4,-16(fp)
 401c424:	e17ffd15 	stw	r5,-12(fp)
 401c428:	e1bffe15 	stw	r6,-8(fp)
 401c42c:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 401c430:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 401c434:	e0bffd17 	ldw	r2,-12(fp)
 401c438:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401c43c:	00003706 	br	401c51c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 401c440:	e0bffc17 	ldw	r2,-16(fp)
 401c444:	10800c17 	ldw	r2,48(r2)
 401c448:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 401c44c:	e0bffc17 	ldw	r2,-16(fp)
 401c450:	10800d17 	ldw	r2,52(r2)
 401c454:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 401c458:	e0fff917 	ldw	r3,-28(fp)
 401c45c:	e0bff517 	ldw	r2,-44(fp)
 401c460:	1880062e 	bgeu	r3,r2,401c47c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 401c464:	e0fff517 	ldw	r3,-44(fp)
 401c468:	e0bff917 	ldw	r2,-28(fp)
 401c46c:	1885c83a 	sub	r2,r3,r2
 401c470:	10bfffc4 	addi	r2,r2,-1
 401c474:	e0bff615 	stw	r2,-40(fp)
 401c478:	00000b06 	br	401c4a8 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 401c47c:	e0bff517 	ldw	r2,-44(fp)
 401c480:	10000526 	beq	r2,zero,401c498 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 401c484:	00c20004 	movi	r3,2048
 401c488:	e0bff917 	ldw	r2,-28(fp)
 401c48c:	1885c83a 	sub	r2,r3,r2
 401c490:	e0bff615 	stw	r2,-40(fp)
 401c494:	00000406 	br	401c4a8 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401c498:	00c1ffc4 	movi	r3,2047
 401c49c:	e0bff917 	ldw	r2,-28(fp)
 401c4a0:	1885c83a 	sub	r2,r3,r2
 401c4a4:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 401c4a8:	e0bff617 	ldw	r2,-40(fp)
 401c4ac:	10001e26 	beq	r2,zero,401c528 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 401c4b0:	e0fffe17 	ldw	r3,-8(fp)
 401c4b4:	e0bff617 	ldw	r2,-40(fp)
 401c4b8:	1880022e 	bgeu	r3,r2,401c4c4 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 401c4bc:	e0bffe17 	ldw	r2,-8(fp)
 401c4c0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 401c4c4:	e0bffc17 	ldw	r2,-16(fp)
 401c4c8:	10c20e04 	addi	r3,r2,2104
 401c4cc:	e0bff917 	ldw	r2,-28(fp)
 401c4d0:	1885883a 	add	r2,r3,r2
 401c4d4:	e1bff617 	ldw	r6,-40(fp)
 401c4d8:	e17ffd17 	ldw	r5,-12(fp)
 401c4dc:	1009883a 	mov	r4,r2
 401c4e0:	400fbdc0 	call	400fbdc <memcpy>
      ptr   += n;
 401c4e4:	e0fffd17 	ldw	r3,-12(fp)
 401c4e8:	e0bff617 	ldw	r2,-40(fp)
 401c4ec:	1885883a 	add	r2,r3,r2
 401c4f0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 401c4f4:	e0fffe17 	ldw	r3,-8(fp)
 401c4f8:	e0bff617 	ldw	r2,-40(fp)
 401c4fc:	1885c83a 	sub	r2,r3,r2
 401c500:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 401c504:	e0fff917 	ldw	r3,-28(fp)
 401c508:	e0bff617 	ldw	r2,-40(fp)
 401c50c:	1885883a 	add	r2,r3,r2
 401c510:	10c1ffcc 	andi	r3,r2,2047
 401c514:	e0bffc17 	ldw	r2,-16(fp)
 401c518:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 401c51c:	e0bffe17 	ldw	r2,-8(fp)
 401c520:	00bfc716 	blt	zero,r2,401c440 <__alt_mem_onchip_memory2_0+0xfc017280>
 401c524:	00000106 	br	401c52c <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401c528:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c52c:	0005303a 	rdctl	r2,status
 401c530:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c534:	e0fffb17 	ldw	r3,-20(fp)
 401c538:	00bfff84 	movi	r2,-2
 401c53c:	1884703a 	and	r2,r3,r2
 401c540:	1001703a 	wrctl	status,r2
  
  return context;
 401c544:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401c548:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 401c54c:	e0bffc17 	ldw	r2,-16(fp)
 401c550:	10800817 	ldw	r2,32(r2)
 401c554:	10c00094 	ori	r3,r2,2
 401c558:	e0bffc17 	ldw	r2,-16(fp)
 401c55c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 401c560:	e0bffc17 	ldw	r2,-16(fp)
 401c564:	10800017 	ldw	r2,0(r2)
 401c568:	10800104 	addi	r2,r2,4
 401c56c:	1007883a 	mov	r3,r2
 401c570:	e0bffc17 	ldw	r2,-16(fp)
 401c574:	10800817 	ldw	r2,32(r2)
 401c578:	18800035 	stwio	r2,0(r3)
 401c57c:	e0bffa17 	ldw	r2,-24(fp)
 401c580:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c584:	e0bff817 	ldw	r2,-32(fp)
 401c588:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 401c58c:	e0bffe17 	ldw	r2,-8(fp)
 401c590:	0080100e 	bge	zero,r2,401c5d4 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 401c594:	e0bfff17 	ldw	r2,-4(fp)
 401c598:	1090000c 	andi	r2,r2,16384
 401c59c:	1000101e 	bne	r2,zero,401c5e0 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 401c5a0:	0001883a 	nop
 401c5a4:	e0bffc17 	ldw	r2,-16(fp)
 401c5a8:	10c00d17 	ldw	r3,52(r2)
 401c5ac:	e0bff517 	ldw	r2,-44(fp)
 401c5b0:	1880051e 	bne	r3,r2,401c5c8 <altera_avalon_jtag_uart_write+0x1b8>
 401c5b4:	e0bffc17 	ldw	r2,-16(fp)
 401c5b8:	10c00917 	ldw	r3,36(r2)
 401c5bc:	e0bffc17 	ldw	r2,-16(fp)
 401c5c0:	10800117 	ldw	r2,4(r2)
 401c5c4:	18bff736 	bltu	r3,r2,401c5a4 <__alt_mem_onchip_memory2_0+0xfc0173e4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 401c5c8:	e0bffc17 	ldw	r2,-16(fp)
 401c5cc:	10800917 	ldw	r2,36(r2)
 401c5d0:	1000051e 	bne	r2,zero,401c5e8 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 401c5d4:	e0bffe17 	ldw	r2,-8(fp)
 401c5d8:	00bfd016 	blt	zero,r2,401c51c <__alt_mem_onchip_memory2_0+0xfc01735c>
 401c5dc:	00000306 	br	401c5ec <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401c5e0:	0001883a 	nop
 401c5e4:	00000106 	br	401c5ec <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 401c5e8:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 401c5ec:	e0fffd17 	ldw	r3,-12(fp)
 401c5f0:	e0bff717 	ldw	r2,-36(fp)
 401c5f4:	18800426 	beq	r3,r2,401c608 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 401c5f8:	e0fffd17 	ldw	r3,-12(fp)
 401c5fc:	e0bff717 	ldw	r2,-36(fp)
 401c600:	1885c83a 	sub	r2,r3,r2
 401c604:	00000606 	br	401c620 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 401c608:	e0bfff17 	ldw	r2,-4(fp)
 401c60c:	1090000c 	andi	r2,r2,16384
 401c610:	10000226 	beq	r2,zero,401c61c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 401c614:	00bffd44 	movi	r2,-11
 401c618:	00000106 	br	401c620 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 401c61c:	00bffec4 	movi	r2,-5
}
 401c620:	e037883a 	mov	sp,fp
 401c624:	dfc00117 	ldw	ra,4(sp)
 401c628:	df000017 	ldw	fp,0(sp)
 401c62c:	dec00204 	addi	sp,sp,8
 401c630:	f800283a 	ret

0401c634 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 401c634:	defff404 	addi	sp,sp,-48
 401c638:	df000b15 	stw	fp,44(sp)
 401c63c:	df000b04 	addi	fp,sp,44
 401c640:	e13ffc15 	stw	r4,-16(fp)
 401c644:	e17ffd15 	stw	r5,-12(fp)
 401c648:	e1bffe15 	stw	r6,-8(fp)
 401c64c:	e1ffff15 	stw	r7,-4(fp)
  const alt_u8 * write_end = write_data + write_length;
 401c650:	e0ffff17 	ldw	r3,-4(fp)
 401c654:	e0bffe17 	ldw	r2,-8(fp)
 401c658:	1885883a 	add	r2,r3,r2
 401c65c:	e0bff815 	stw	r2,-32(fp)
  alt_u8 * read_end = read_data + read_length;
 401c660:	e0c00217 	ldw	r3,8(fp)
 401c664:	e0800117 	ldw	r2,4(fp)
 401c668:	1885883a 	add	r2,r3,r2
 401c66c:	e0bff915 	stw	r2,-28(fp)

  alt_u32 write_zeros = read_length;
 401c670:	e0800117 	ldw	r2,4(fp)
 401c674:	e0bff515 	stw	r2,-44(fp)
  alt_u32 read_ignore = write_length;
 401c678:	e0bffe17 	ldw	r2,-8(fp)
 401c67c:	e0bff615 	stw	r2,-40(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 401c680:	00800044 	movi	r2,1
 401c684:	e0bff715 	stw	r2,-36(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 401c688:	e0bffc17 	ldw	r2,-16(fp)
 401c68c:	10800504 	addi	r2,r2,20
 401c690:	1009883a 	mov	r4,r2
 401c694:	00c00044 	movi	r3,1
 401c698:	e0bffd17 	ldw	r2,-12(fp)
 401c69c:	1884983a 	sll	r2,r3,r2
 401c6a0:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 401c6a4:	e0800317 	ldw	r2,12(fp)
 401c6a8:	1080008c 	andi	r2,r2,2
 401c6ac:	1000051e 	bne	r2,zero,401c6c4 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 401c6b0:	e0bffc17 	ldw	r2,-16(fp)
 401c6b4:	10800304 	addi	r2,r2,12
 401c6b8:	1007883a 	mov	r3,r2
 401c6bc:	00810004 	movi	r2,1024
 401c6c0:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401c6c4:	e0bffc17 	ldw	r2,-16(fp)
 401c6c8:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401c6cc:	e0bffc17 	ldw	r2,-16(fp)
 401c6d0:	10800204 	addi	r2,r2,8
 401c6d4:	10800037 	ldwio	r2,0(r2)
 401c6d8:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401c6dc:	e0bffa17 	ldw	r2,-24(fp)
 401c6e0:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401c6e4:	10000226 	beq	r2,zero,401c6f0 <alt_avalon_spi_command+0xbc>
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401c6e8:	e0bff717 	ldw	r2,-36(fp)
 401c6ec:	1000031e 	bne	r2,zero,401c6fc <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 401c6f0:	e0bffa17 	ldw	r2,-24(fp)
 401c6f4:	1080200c 	andi	r2,r2,128
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 401c6f8:	103ff426 	beq	r2,zero,401c6cc <__alt_mem_onchip_memory2_0+0xfc01750c>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 401c6fc:	e0bffa17 	ldw	r2,-24(fp)
 401c700:	1080100c 	andi	r2,r2,64
 401c704:	10001e26 	beq	r2,zero,401c780 <alt_avalon_spi_command+0x14c>
 401c708:	e0bff717 	ldw	r2,-36(fp)
 401c70c:	00801c0e 	bge	zero,r2,401c780 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 401c710:	e0bff717 	ldw	r2,-36(fp)
 401c714:	10bfffc4 	addi	r2,r2,-1
 401c718:	e0bff715 	stw	r2,-36(fp)

      if (write_data < write_end)
 401c71c:	e0ffff17 	ldw	r3,-4(fp)
 401c720:	e0bff817 	ldw	r2,-32(fp)
 401c724:	18800a2e 	bgeu	r3,r2,401c750 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 401c728:	e0bffc17 	ldw	r2,-16(fp)
 401c72c:	10800104 	addi	r2,r2,4
 401c730:	1009883a 	mov	r4,r2
 401c734:	e0bfff17 	ldw	r2,-4(fp)
 401c738:	10c00044 	addi	r3,r2,1
 401c73c:	e0ffff15 	stw	r3,-4(fp)
 401c740:	10800003 	ldbu	r2,0(r2)
 401c744:	10803fcc 	andi	r2,r2,255
 401c748:	20800035 	stwio	r2,0(r4)
 401c74c:	00000c06 	br	401c780 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 401c750:	e0bff517 	ldw	r2,-44(fp)
 401c754:	10000826 	beq	r2,zero,401c778 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 401c758:	e0bff517 	ldw	r2,-44(fp)
 401c75c:	10bfffc4 	addi	r2,r2,-1
 401c760:	e0bff515 	stw	r2,-44(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 401c764:	e0bffc17 	ldw	r2,-16(fp)
 401c768:	10800104 	addi	r2,r2,4
 401c76c:	0007883a 	mov	r3,zero
 401c770:	10c00035 	stwio	r3,0(r2)
 401c774:	00000206 	br	401c780 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 401c778:	00bf0004 	movi	r2,-1024
 401c77c:	e0bff715 	stw	r2,-36(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 401c780:	e0bffa17 	ldw	r2,-24(fp)
 401c784:	1080200c 	andi	r2,r2,128
 401c788:	103fd026 	beq	r2,zero,401c6cc <__alt_mem_onchip_memory2_0+0xfc01750c>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 401c78c:	e0bffc17 	ldw	r2,-16(fp)
 401c790:	10800037 	ldwio	r2,0(r2)
 401c794:	e0bffb15 	stw	r2,-20(fp)

      if (read_ignore > 0)
 401c798:	e0bff617 	ldw	r2,-40(fp)
 401c79c:	10000426 	beq	r2,zero,401c7b0 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 401c7a0:	e0bff617 	ldw	r2,-40(fp)
 401c7a4:	10bfffc4 	addi	r2,r2,-1
 401c7a8:	e0bff615 	stw	r2,-40(fp)
 401c7ac:	00000506 	br	401c7c4 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 401c7b0:	e0800217 	ldw	r2,8(fp)
 401c7b4:	10c00044 	addi	r3,r2,1
 401c7b8:	e0c00215 	stw	r3,8(fp)
 401c7bc:	e0fffb17 	ldw	r3,-20(fp)
 401c7c0:	10c00005 	stb	r3,0(r2)
      credits++;
 401c7c4:	e0bff717 	ldw	r2,-36(fp)
 401c7c8:	10800044 	addi	r2,r2,1
 401c7cc:	e0bff715 	stw	r2,-36(fp)

      if (read_ignore == 0 && read_data == read_end)
 401c7d0:	e0bff617 	ldw	r2,-40(fp)
 401c7d4:	103fbd1e 	bne	r2,zero,401c6cc <__alt_mem_onchip_memory2_0+0xfc01750c>
 401c7d8:	e0c00217 	ldw	r3,8(fp)
 401c7dc:	e0bff917 	ldw	r2,-28(fp)
 401c7e0:	18bfba1e 	bne	r3,r2,401c6cc <__alt_mem_onchip_memory2_0+0xfc01750c>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 401c7e4:	e0bffc17 	ldw	r2,-16(fp)
 401c7e8:	10800204 	addi	r2,r2,8
 401c7ec:	10800037 	ldwio	r2,0(r2)
 401c7f0:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 401c7f4:	e0bffa17 	ldw	r2,-24(fp)
 401c7f8:	1080080c 	andi	r2,r2,32
 401c7fc:	103ff926 	beq	r2,zero,401c7e4 <__alt_mem_onchip_memory2_0+0xfc017624>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 401c800:	e0800317 	ldw	r2,12(fp)
 401c804:	1080004c 	andi	r2,r2,1
 401c808:	1000041e 	bne	r2,zero,401c81c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 401c80c:	e0bffc17 	ldw	r2,-16(fp)
 401c810:	10800304 	addi	r2,r2,12
 401c814:	0007883a 	mov	r3,zero
 401c818:	10c00035 	stwio	r3,0(r2)

  return read_length;
 401c81c:	e0800117 	ldw	r2,4(fp)
}
 401c820:	e037883a 	mov	sp,fp
 401c824:	df000017 	ldw	fp,0(sp)
 401c828:	dec00104 	addi	sp,sp,4
 401c82c:	f800283a 	ret

0401c830 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 401c830:	defffa04 	addi	sp,sp,-24
 401c834:	dfc00515 	stw	ra,20(sp)
 401c838:	df000415 	stw	fp,16(sp)
 401c83c:	df000404 	addi	fp,sp,16
 401c840:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 401c844:	0007883a 	mov	r3,zero
 401c848:	e0bfff17 	ldw	r2,-4(fp)
 401c84c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 401c850:	e0bfff17 	ldw	r2,-4(fp)
 401c854:	10800104 	addi	r2,r2,4
 401c858:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c85c:	0005303a 	rdctl	r2,status
 401c860:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c864:	e0fffd17 	ldw	r3,-12(fp)
 401c868:	00bfff84 	movi	r2,-2
 401c86c:	1884703a 	and	r2,r3,r2
 401c870:	1001703a 	wrctl	status,r2
  
  return context;
 401c874:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 401c878:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 401c87c:	401b7d00 	call	401b7d0 <alt_tick>
 401c880:	e0bffc17 	ldw	r2,-16(fp)
 401c884:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401c888:	e0bffe17 	ldw	r2,-8(fp)
 401c88c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 401c890:	0001883a 	nop
 401c894:	e037883a 	mov	sp,fp
 401c898:	dfc00117 	ldw	ra,4(sp)
 401c89c:	df000017 	ldw	fp,0(sp)
 401c8a0:	dec00204 	addi	sp,sp,8
 401c8a4:	f800283a 	ret

0401c8a8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 401c8a8:	defff804 	addi	sp,sp,-32
 401c8ac:	dfc00715 	stw	ra,28(sp)
 401c8b0:	df000615 	stw	fp,24(sp)
 401c8b4:	df000604 	addi	fp,sp,24
 401c8b8:	e13ffc15 	stw	r4,-16(fp)
 401c8bc:	e17ffd15 	stw	r5,-12(fp)
 401c8c0:	e1bffe15 	stw	r6,-8(fp)
 401c8c4:	e1ffff15 	stw	r7,-4(fp)
 401c8c8:	e0bfff17 	ldw	r2,-4(fp)
 401c8cc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 401c8d0:	d0a81017 	ldw	r2,-24512(gp)
 401c8d4:	1000021e 	bne	r2,zero,401c8e0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 401c8d8:	e0bffb17 	ldw	r2,-20(fp)
 401c8dc:	d0a81015 	stw	r2,-24512(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 401c8e0:	e0bffc17 	ldw	r2,-16(fp)
 401c8e4:	10800104 	addi	r2,r2,4
 401c8e8:	00c001c4 	movi	r3,7
 401c8ec:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 401c8f0:	d8000015 	stw	zero,0(sp)
 401c8f4:	e1fffc17 	ldw	r7,-16(fp)
 401c8f8:	018100b4 	movhi	r6,1026
 401c8fc:	31b20c04 	addi	r6,r6,-14288
 401c900:	e17ffe17 	ldw	r5,-8(fp)
 401c904:	e13ffd17 	ldw	r4,-12(fp)
 401c908:	401cd880 	call	401cd88 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401c90c:	0001883a 	nop
 401c910:	e037883a 	mov	sp,fp
 401c914:	dfc00117 	ldw	ra,4(sp)
 401c918:	df000017 	ldw	fp,0(sp)
 401c91c:	dec00204 	addi	sp,sp,8
 401c920:	f800283a 	ret

0401c924 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 401c924:	defff504 	addi	sp,sp,-44
 401c928:	df000a15 	stw	fp,40(sp)
 401c92c:	df000a04 	addi	fp,sp,40
 401c930:	e13ffc15 	stw	r4,-16(fp)
 401c934:	e17ffd15 	stw	r5,-12(fp)
 401c938:	e1bffe15 	stw	r6,-8(fp)
 401c93c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 401c940:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 401c944:	d0a81017 	ldw	r2,-24512(gp)
  
  if (alt_ticks_per_second ())
 401c948:	10003c26 	beq	r2,zero,401ca3c <alt_alarm_start+0x118>
  {
    if (alarm)
 401c94c:	e0bffc17 	ldw	r2,-16(fp)
 401c950:	10003826 	beq	r2,zero,401ca34 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 401c954:	e0bffc17 	ldw	r2,-16(fp)
 401c958:	e0fffe17 	ldw	r3,-8(fp)
 401c95c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 401c960:	e0bffc17 	ldw	r2,-16(fp)
 401c964:	e0ffff17 	ldw	r3,-4(fp)
 401c968:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401c96c:	0005303a 	rdctl	r2,status
 401c970:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401c974:	e0fff917 	ldw	r3,-28(fp)
 401c978:	00bfff84 	movi	r2,-2
 401c97c:	1884703a 	and	r2,r3,r2
 401c980:	1001703a 	wrctl	status,r2
  
  return context;
 401c984:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401c988:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401c98c:	d0a81117 	ldw	r2,-24508(gp)
      
      current_nticks = alt_nticks();
 401c990:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 401c994:	e0fffd17 	ldw	r3,-12(fp)
 401c998:	e0bff617 	ldw	r2,-40(fp)
 401c99c:	1885883a 	add	r2,r3,r2
 401c9a0:	10c00044 	addi	r3,r2,1
 401c9a4:	e0bffc17 	ldw	r2,-16(fp)
 401c9a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401c9ac:	e0bffc17 	ldw	r2,-16(fp)
 401c9b0:	10c00217 	ldw	r3,8(r2)
 401c9b4:	e0bff617 	ldw	r2,-40(fp)
 401c9b8:	1880042e 	bgeu	r3,r2,401c9cc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401c9bc:	e0bffc17 	ldw	r2,-16(fp)
 401c9c0:	00c00044 	movi	r3,1
 401c9c4:	10c00405 	stb	r3,16(r2)
 401c9c8:	00000206 	br	401c9d4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401c9cc:	e0bffc17 	ldw	r2,-16(fp)
 401c9d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 401c9d4:	e0bffc17 	ldw	r2,-16(fp)
 401c9d8:	d0e01404 	addi	r3,gp,-32688
 401c9dc:	e0fffa15 	stw	r3,-24(fp)
 401c9e0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401c9e4:	e0bffb17 	ldw	r2,-20(fp)
 401c9e8:	e0fffa17 	ldw	r3,-24(fp)
 401c9ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401c9f0:	e0bffa17 	ldw	r2,-24(fp)
 401c9f4:	10c00017 	ldw	r3,0(r2)
 401c9f8:	e0bffb17 	ldw	r2,-20(fp)
 401c9fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401ca00:	e0bffa17 	ldw	r2,-24(fp)
 401ca04:	10800017 	ldw	r2,0(r2)
 401ca08:	e0fffb17 	ldw	r3,-20(fp)
 401ca0c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401ca10:	e0bffa17 	ldw	r2,-24(fp)
 401ca14:	e0fffb17 	ldw	r3,-20(fp)
 401ca18:	10c00015 	stw	r3,0(r2)
 401ca1c:	e0bff817 	ldw	r2,-32(fp)
 401ca20:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ca24:	e0bff717 	ldw	r2,-36(fp)
 401ca28:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401ca2c:	0005883a 	mov	r2,zero
 401ca30:	00000306 	br	401ca40 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 401ca34:	00bffa84 	movi	r2,-22
 401ca38:	00000106 	br	401ca40 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401ca3c:	00bfde84 	movi	r2,-134
  }
}
 401ca40:	e037883a 	mov	sp,fp
 401ca44:	df000017 	ldw	fp,0(sp)
 401ca48:	dec00104 	addi	sp,sp,4
 401ca4c:	f800283a 	ret

0401ca50 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 401ca50:	defffa04 	addi	sp,sp,-24
 401ca54:	dfc00515 	stw	ra,20(sp)
 401ca58:	df000415 	stw	fp,16(sp)
 401ca5c:	df000404 	addi	fp,sp,16
 401ca60:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 401ca64:	00800244 	movi	r2,9
 401ca68:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401ca6c:	014003f4 	movhi	r5,15
 401ca70:	29509004 	addi	r5,r5,16960
 401ca74:	e13ffd17 	ldw	r4,-12(fp)
 401ca78:	400dcd40 	call	400dcd4 <__mulsi3>
 401ca7c:	100b883a 	mov	r5,r2
 401ca80:	0100bef4 	movhi	r4,763
 401ca84:	213c2004 	addi	r4,r4,-3968
 401ca88:	400dc180 	call	400dc18 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401ca8c:	100b883a 	mov	r5,r2
 401ca90:	01200034 	movhi	r4,32768
 401ca94:	213fffc4 	addi	r4,r4,-1
 401ca98:	400dc180 	call	400dc18 <__udivsi3>
 401ca9c:	100b883a 	mov	r5,r2
 401caa0:	e13fff17 	ldw	r4,-4(fp)
 401caa4:	400dc180 	call	400dc18 <__udivsi3>
 401caa8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 401caac:	e0bffe17 	ldw	r2,-8(fp)
 401cab0:	10002a26 	beq	r2,zero,401cb5c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 401cab4:	e03ffc15 	stw	zero,-16(fp)
 401cab8:	00001706 	br	401cb18 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 401cabc:	00a00034 	movhi	r2,32768
 401cac0:	10bfffc4 	addi	r2,r2,-1
 401cac4:	10bfffc4 	addi	r2,r2,-1
 401cac8:	103ffe1e 	bne	r2,zero,401cac4 <__alt_mem_onchip_memory2_0+0xfc017904>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 401cacc:	014003f4 	movhi	r5,15
 401cad0:	29509004 	addi	r5,r5,16960
 401cad4:	e13ffd17 	ldw	r4,-12(fp)
 401cad8:	400dcd40 	call	400dcd4 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 401cadc:	100b883a 	mov	r5,r2
 401cae0:	0100bef4 	movhi	r4,763
 401cae4:	213c2004 	addi	r4,r4,-3968
 401cae8:	400dc180 	call	400dc18 <__udivsi3>
 401caec:	100b883a 	mov	r5,r2
 401caf0:	01200034 	movhi	r4,32768
 401caf4:	213fffc4 	addi	r4,r4,-1
 401caf8:	400dc180 	call	400dc18 <__udivsi3>
 401cafc:	1007883a 	mov	r3,r2
 401cb00:	e0bfff17 	ldw	r2,-4(fp)
 401cb04:	10c5c83a 	sub	r2,r2,r3
 401cb08:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401cb0c:	e0bffc17 	ldw	r2,-16(fp)
 401cb10:	10800044 	addi	r2,r2,1
 401cb14:	e0bffc15 	stw	r2,-16(fp)
 401cb18:	e0fffc17 	ldw	r3,-16(fp)
 401cb1c:	e0bffe17 	ldw	r2,-8(fp)
 401cb20:	18bfe616 	blt	r3,r2,401cabc <__alt_mem_onchip_memory2_0+0xfc0178fc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401cb24:	014003f4 	movhi	r5,15
 401cb28:	29509004 	addi	r5,r5,16960
 401cb2c:	e13ffd17 	ldw	r4,-12(fp)
 401cb30:	400dcd40 	call	400dcd4 <__mulsi3>
 401cb34:	100b883a 	mov	r5,r2
 401cb38:	0100bef4 	movhi	r4,763
 401cb3c:	213c2004 	addi	r4,r4,-3968
 401cb40:	400dc180 	call	400dc18 <__udivsi3>
 401cb44:	e17fff17 	ldw	r5,-4(fp)
 401cb48:	1009883a 	mov	r4,r2
 401cb4c:	400dcd40 	call	400dcd4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401cb50:	10bfffc4 	addi	r2,r2,-1
 401cb54:	103ffe1e 	bne	r2,zero,401cb50 <__alt_mem_onchip_memory2_0+0xfc017990>
 401cb58:	00000d06 	br	401cb90 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401cb5c:	014003f4 	movhi	r5,15
 401cb60:	29509004 	addi	r5,r5,16960
 401cb64:	e13ffd17 	ldw	r4,-12(fp)
 401cb68:	400dcd40 	call	400dcd4 <__mulsi3>
 401cb6c:	100b883a 	mov	r5,r2
 401cb70:	0100bef4 	movhi	r4,763
 401cb74:	213c2004 	addi	r4,r4,-3968
 401cb78:	400dc180 	call	400dc18 <__udivsi3>
 401cb7c:	e17fff17 	ldw	r5,-4(fp)
 401cb80:	1009883a 	mov	r4,r2
 401cb84:	400dcd40 	call	400dcd4 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 401cb88:	10bfffc4 	addi	r2,r2,-1
 401cb8c:	00bffe16 	blt	zero,r2,401cb88 <__alt_mem_onchip_memory2_0+0xfc0179c8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 401cb90:	0005883a 	mov	r2,zero
}
 401cb94:	e037883a 	mov	sp,fp
 401cb98:	dfc00117 	ldw	ra,4(sp)
 401cb9c:	df000017 	ldw	fp,0(sp)
 401cba0:	dec00204 	addi	sp,sp,8
 401cba4:	f800283a 	ret

0401cba8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 401cba8:	deffff04 	addi	sp,sp,-4
 401cbac:	df000015 	stw	fp,0(sp)
 401cbb0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 401cbb4:	0001883a 	nop
 401cbb8:	e037883a 	mov	sp,fp
 401cbbc:	df000017 	ldw	fp,0(sp)
 401cbc0:	dec00104 	addi	sp,sp,4
 401cbc4:	f800283a 	ret

0401cbc8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401cbc8:	defffe04 	addi	sp,sp,-8
 401cbcc:	dfc00115 	stw	ra,4(sp)
 401cbd0:	df000015 	stw	fp,0(sp)
 401cbd4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401cbd8:	d0a01217 	ldw	r2,-32696(gp)
 401cbdc:	10000326 	beq	r2,zero,401cbec <alt_get_errno+0x24>
 401cbe0:	d0a01217 	ldw	r2,-32696(gp)
 401cbe4:	103ee83a 	callr	r2
 401cbe8:	00000106 	br	401cbf0 <alt_get_errno+0x28>
 401cbec:	d0a80204 	addi	r2,gp,-24568
}
 401cbf0:	e037883a 	mov	sp,fp
 401cbf4:	dfc00117 	ldw	ra,4(sp)
 401cbf8:	df000017 	ldw	fp,0(sp)
 401cbfc:	dec00204 	addi	sp,sp,8
 401cc00:	f800283a 	ret

0401cc04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 401cc04:	defffa04 	addi	sp,sp,-24
 401cc08:	dfc00515 	stw	ra,20(sp)
 401cc0c:	df000415 	stw	fp,16(sp)
 401cc10:	df000404 	addi	fp,sp,16
 401cc14:	e13ffe15 	stw	r4,-8(fp)
 401cc18:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401cc1c:	e0bffe17 	ldw	r2,-8(fp)
 401cc20:	10000326 	beq	r2,zero,401cc30 <alt_dev_llist_insert+0x2c>
 401cc24:	e0bffe17 	ldw	r2,-8(fp)
 401cc28:	10800217 	ldw	r2,8(r2)
 401cc2c:	1000061e 	bne	r2,zero,401cc48 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 401cc30:	401cbc80 	call	401cbc8 <alt_get_errno>
 401cc34:	1007883a 	mov	r3,r2
 401cc38:	00800584 	movi	r2,22
 401cc3c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 401cc40:	00bffa84 	movi	r2,-22
 401cc44:	00001306 	br	401cc94 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 401cc48:	e0bffe17 	ldw	r2,-8(fp)
 401cc4c:	e0ffff17 	ldw	r3,-4(fp)
 401cc50:	e0fffc15 	stw	r3,-16(fp)
 401cc54:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 401cc58:	e0bffd17 	ldw	r2,-12(fp)
 401cc5c:	e0fffc17 	ldw	r3,-16(fp)
 401cc60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 401cc64:	e0bffc17 	ldw	r2,-16(fp)
 401cc68:	10c00017 	ldw	r3,0(r2)
 401cc6c:	e0bffd17 	ldw	r2,-12(fp)
 401cc70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 401cc74:	e0bffc17 	ldw	r2,-16(fp)
 401cc78:	10800017 	ldw	r2,0(r2)
 401cc7c:	e0fffd17 	ldw	r3,-12(fp)
 401cc80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 401cc84:	e0bffc17 	ldw	r2,-16(fp)
 401cc88:	e0fffd17 	ldw	r3,-12(fp)
 401cc8c:	10c00015 	stw	r3,0(r2)

  return 0;  
 401cc90:	0005883a 	mov	r2,zero
}
 401cc94:	e037883a 	mov	sp,fp
 401cc98:	dfc00117 	ldw	ra,4(sp)
 401cc9c:	df000017 	ldw	fp,0(sp)
 401cca0:	dec00204 	addi	sp,sp,8
 401cca4:	f800283a 	ret

0401cca8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 401cca8:	defffd04 	addi	sp,sp,-12
 401ccac:	dfc00215 	stw	ra,8(sp)
 401ccb0:	df000115 	stw	fp,4(sp)
 401ccb4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401ccb8:	008100b4 	movhi	r2,1026
 401ccbc:	10b6ae04 	addi	r2,r2,-9544
 401ccc0:	e0bfff15 	stw	r2,-4(fp)
 401ccc4:	00000606 	br	401cce0 <_do_ctors+0x38>
        (*ctor) (); 
 401ccc8:	e0bfff17 	ldw	r2,-4(fp)
 401cccc:	10800017 	ldw	r2,0(r2)
 401ccd0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 401ccd4:	e0bfff17 	ldw	r2,-4(fp)
 401ccd8:	10bfff04 	addi	r2,r2,-4
 401ccdc:	e0bfff15 	stw	r2,-4(fp)
 401cce0:	e0ffff17 	ldw	r3,-4(fp)
 401cce4:	008100b4 	movhi	r2,1026
 401cce8:	10b6af04 	addi	r2,r2,-9540
 401ccec:	18bff62e 	bgeu	r3,r2,401ccc8 <__alt_mem_onchip_memory2_0+0xfc017b08>
        (*ctor) (); 
}
 401ccf0:	0001883a 	nop
 401ccf4:	e037883a 	mov	sp,fp
 401ccf8:	dfc00117 	ldw	ra,4(sp)
 401ccfc:	df000017 	ldw	fp,0(sp)
 401cd00:	dec00204 	addi	sp,sp,8
 401cd04:	f800283a 	ret

0401cd08 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 401cd08:	defffd04 	addi	sp,sp,-12
 401cd0c:	dfc00215 	stw	ra,8(sp)
 401cd10:	df000115 	stw	fp,4(sp)
 401cd14:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401cd18:	008100b4 	movhi	r2,1026
 401cd1c:	10b6ae04 	addi	r2,r2,-9544
 401cd20:	e0bfff15 	stw	r2,-4(fp)
 401cd24:	00000606 	br	401cd40 <_do_dtors+0x38>
        (*dtor) (); 
 401cd28:	e0bfff17 	ldw	r2,-4(fp)
 401cd2c:	10800017 	ldw	r2,0(r2)
 401cd30:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 401cd34:	e0bfff17 	ldw	r2,-4(fp)
 401cd38:	10bfff04 	addi	r2,r2,-4
 401cd3c:	e0bfff15 	stw	r2,-4(fp)
 401cd40:	e0ffff17 	ldw	r3,-4(fp)
 401cd44:	008100b4 	movhi	r2,1026
 401cd48:	10b6af04 	addi	r2,r2,-9540
 401cd4c:	18bff62e 	bgeu	r3,r2,401cd28 <__alt_mem_onchip_memory2_0+0xfc017b68>
        (*dtor) (); 
}
 401cd50:	0001883a 	nop
 401cd54:	e037883a 	mov	sp,fp
 401cd58:	dfc00117 	ldw	ra,4(sp)
 401cd5c:	df000017 	ldw	fp,0(sp)
 401cd60:	dec00204 	addi	sp,sp,8
 401cd64:	f800283a 	ret

0401cd68 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 401cd68:	deffff04 	addi	sp,sp,-4
 401cd6c:	df000015 	stw	fp,0(sp)
 401cd70:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 401cd74:	0001883a 	nop
 401cd78:	e037883a 	mov	sp,fp
 401cd7c:	df000017 	ldw	fp,0(sp)
 401cd80:	dec00104 	addi	sp,sp,4
 401cd84:	f800283a 	ret

0401cd88 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401cd88:	defff904 	addi	sp,sp,-28
 401cd8c:	dfc00615 	stw	ra,24(sp)
 401cd90:	df000515 	stw	fp,20(sp)
 401cd94:	df000504 	addi	fp,sp,20
 401cd98:	e13ffc15 	stw	r4,-16(fp)
 401cd9c:	e17ffd15 	stw	r5,-12(fp)
 401cda0:	e1bffe15 	stw	r6,-8(fp)
 401cda4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 401cda8:	e0800217 	ldw	r2,8(fp)
 401cdac:	d8800015 	stw	r2,0(sp)
 401cdb0:	e1ffff17 	ldw	r7,-4(fp)
 401cdb4:	e1bffe17 	ldw	r6,-8(fp)
 401cdb8:	e17ffd17 	ldw	r5,-12(fp)
 401cdbc:	e13ffc17 	ldw	r4,-16(fp)
 401cdc0:	401cf380 	call	401cf38 <alt_iic_isr_register>
}  
 401cdc4:	e037883a 	mov	sp,fp
 401cdc8:	dfc00117 	ldw	ra,4(sp)
 401cdcc:	df000017 	ldw	fp,0(sp)
 401cdd0:	dec00204 	addi	sp,sp,8
 401cdd4:	f800283a 	ret

0401cdd8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 401cdd8:	defff904 	addi	sp,sp,-28
 401cddc:	df000615 	stw	fp,24(sp)
 401cde0:	df000604 	addi	fp,sp,24
 401cde4:	e13ffe15 	stw	r4,-8(fp)
 401cde8:	e17fff15 	stw	r5,-4(fp)
 401cdec:	e0bfff17 	ldw	r2,-4(fp)
 401cdf0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401cdf4:	0005303a 	rdctl	r2,status
 401cdf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401cdfc:	e0fffb17 	ldw	r3,-20(fp)
 401ce00:	00bfff84 	movi	r2,-2
 401ce04:	1884703a 	and	r2,r3,r2
 401ce08:	1001703a 	wrctl	status,r2
  
  return context;
 401ce0c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401ce10:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 401ce14:	00c00044 	movi	r3,1
 401ce18:	e0bffa17 	ldw	r2,-24(fp)
 401ce1c:	1884983a 	sll	r2,r3,r2
 401ce20:	1007883a 	mov	r3,r2
 401ce24:	d0a81217 	ldw	r2,-24504(gp)
 401ce28:	1884b03a 	or	r2,r3,r2
 401ce2c:	d0a81215 	stw	r2,-24504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401ce30:	d0a81217 	ldw	r2,-24504(gp)
 401ce34:	100170fa 	wrctl	ienable,r2
 401ce38:	e0bffc17 	ldw	r2,-16(fp)
 401ce3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401ce40:	e0bffd17 	ldw	r2,-12(fp)
 401ce44:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401ce48:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 401ce4c:	0001883a 	nop
}
 401ce50:	e037883a 	mov	sp,fp
 401ce54:	df000017 	ldw	fp,0(sp)
 401ce58:	dec00104 	addi	sp,sp,4
 401ce5c:	f800283a 	ret

0401ce60 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401ce60:	defff904 	addi	sp,sp,-28
 401ce64:	df000615 	stw	fp,24(sp)
 401ce68:	df000604 	addi	fp,sp,24
 401ce6c:	e13ffe15 	stw	r4,-8(fp)
 401ce70:	e17fff15 	stw	r5,-4(fp)
 401ce74:	e0bfff17 	ldw	r2,-4(fp)
 401ce78:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401ce7c:	0005303a 	rdctl	r2,status
 401ce80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401ce84:	e0fffb17 	ldw	r3,-20(fp)
 401ce88:	00bfff84 	movi	r2,-2
 401ce8c:	1884703a 	and	r2,r3,r2
 401ce90:	1001703a 	wrctl	status,r2
  
  return context;
 401ce94:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401ce98:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 401ce9c:	00c00044 	movi	r3,1
 401cea0:	e0bffa17 	ldw	r2,-24(fp)
 401cea4:	1884983a 	sll	r2,r3,r2
 401cea8:	0084303a 	nor	r2,zero,r2
 401ceac:	1007883a 	mov	r3,r2
 401ceb0:	d0a81217 	ldw	r2,-24504(gp)
 401ceb4:	1884703a 	and	r2,r3,r2
 401ceb8:	d0a81215 	stw	r2,-24504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401cebc:	d0a81217 	ldw	r2,-24504(gp)
 401cec0:	100170fa 	wrctl	ienable,r2
 401cec4:	e0bffc17 	ldw	r2,-16(fp)
 401cec8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401cecc:	e0bffd17 	ldw	r2,-12(fp)
 401ced0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 401ced4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 401ced8:	0001883a 	nop
}
 401cedc:	e037883a 	mov	sp,fp
 401cee0:	df000017 	ldw	fp,0(sp)
 401cee4:	dec00104 	addi	sp,sp,4
 401cee8:	f800283a 	ret

0401ceec <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 401ceec:	defffc04 	addi	sp,sp,-16
 401cef0:	df000315 	stw	fp,12(sp)
 401cef4:	df000304 	addi	fp,sp,12
 401cef8:	e13ffe15 	stw	r4,-8(fp)
 401cefc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401cf00:	000530fa 	rdctl	r2,ienable
 401cf04:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 401cf08:	00c00044 	movi	r3,1
 401cf0c:	e0bfff17 	ldw	r2,-4(fp)
 401cf10:	1884983a 	sll	r2,r3,r2
 401cf14:	1007883a 	mov	r3,r2
 401cf18:	e0bffd17 	ldw	r2,-12(fp)
 401cf1c:	1884703a 	and	r2,r3,r2
 401cf20:	1004c03a 	cmpne	r2,r2,zero
 401cf24:	10803fcc 	andi	r2,r2,255
}
 401cf28:	e037883a 	mov	sp,fp
 401cf2c:	df000017 	ldw	fp,0(sp)
 401cf30:	dec00104 	addi	sp,sp,4
 401cf34:	f800283a 	ret

0401cf38 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401cf38:	defff504 	addi	sp,sp,-44
 401cf3c:	dfc00a15 	stw	ra,40(sp)
 401cf40:	df000915 	stw	fp,36(sp)
 401cf44:	df000904 	addi	fp,sp,36
 401cf48:	e13ffc15 	stw	r4,-16(fp)
 401cf4c:	e17ffd15 	stw	r5,-12(fp)
 401cf50:	e1bffe15 	stw	r6,-8(fp)
 401cf54:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401cf58:	00bffa84 	movi	r2,-22
 401cf5c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401cf60:	e0bffd17 	ldw	r2,-12(fp)
 401cf64:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401cf68:	e0bff817 	ldw	r2,-32(fp)
 401cf6c:	10800808 	cmpgei	r2,r2,32
 401cf70:	1000271e 	bne	r2,zero,401d010 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401cf74:	0005303a 	rdctl	r2,status
 401cf78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401cf7c:	e0fffb17 	ldw	r3,-20(fp)
 401cf80:	00bfff84 	movi	r2,-2
 401cf84:	1884703a 	and	r2,r3,r2
 401cf88:	1001703a 	wrctl	status,r2
  
  return context;
 401cf8c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401cf90:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 401cf94:	008100b4 	movhi	r2,1026
 401cf98:	10891a04 	addi	r2,r2,9320
 401cf9c:	e0fff817 	ldw	r3,-32(fp)
 401cfa0:	180690fa 	slli	r3,r3,3
 401cfa4:	10c5883a 	add	r2,r2,r3
 401cfa8:	e0fffe17 	ldw	r3,-8(fp)
 401cfac:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 401cfb0:	008100b4 	movhi	r2,1026
 401cfb4:	10891a04 	addi	r2,r2,9320
 401cfb8:	e0fff817 	ldw	r3,-32(fp)
 401cfbc:	180690fa 	slli	r3,r3,3
 401cfc0:	10c5883a 	add	r2,r2,r3
 401cfc4:	10800104 	addi	r2,r2,4
 401cfc8:	e0ffff17 	ldw	r3,-4(fp)
 401cfcc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 401cfd0:	e0bffe17 	ldw	r2,-8(fp)
 401cfd4:	10000526 	beq	r2,zero,401cfec <alt_iic_isr_register+0xb4>
 401cfd8:	e0bff817 	ldw	r2,-32(fp)
 401cfdc:	100b883a 	mov	r5,r2
 401cfe0:	e13ffc17 	ldw	r4,-16(fp)
 401cfe4:	401cdd80 	call	401cdd8 <alt_ic_irq_enable>
 401cfe8:	00000406 	br	401cffc <alt_iic_isr_register+0xc4>
 401cfec:	e0bff817 	ldw	r2,-32(fp)
 401cff0:	100b883a 	mov	r5,r2
 401cff4:	e13ffc17 	ldw	r4,-16(fp)
 401cff8:	401ce600 	call	401ce60 <alt_ic_irq_disable>
 401cffc:	e0bff715 	stw	r2,-36(fp)
 401d000:	e0bffa17 	ldw	r2,-24(fp)
 401d004:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401d008:	e0bff917 	ldw	r2,-28(fp)
 401d00c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401d010:	e0bff717 	ldw	r2,-36(fp)
}
 401d014:	e037883a 	mov	sp,fp
 401d018:	dfc00117 	ldw	ra,4(sp)
 401d01c:	df000017 	ldw	fp,0(sp)
 401d020:	dec00204 	addi	sp,sp,8
 401d024:	f800283a 	ret

0401d028 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401d028:	defff804 	addi	sp,sp,-32
 401d02c:	dfc00715 	stw	ra,28(sp)
 401d030:	df000615 	stw	fp,24(sp)
 401d034:	dc000515 	stw	r16,20(sp)
 401d038:	df000604 	addi	fp,sp,24
 401d03c:	e13ffb15 	stw	r4,-20(fp)
 401d040:	e17ffc15 	stw	r5,-16(fp)
 401d044:	e1bffd15 	stw	r6,-12(fp)
 401d048:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 401d04c:	e1bffe17 	ldw	r6,-8(fp)
 401d050:	e17ffd17 	ldw	r5,-12(fp)
 401d054:	e13ffc17 	ldw	r4,-16(fp)
 401d058:	401d2b00 	call	401d2b0 <open>
 401d05c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 401d060:	e0bffa17 	ldw	r2,-24(fp)
 401d064:	10002216 	blt	r2,zero,401d0f0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 401d068:	040100b4 	movhi	r16,1026
 401d06c:	843b6004 	addi	r16,r16,-4736
 401d070:	e0bffa17 	ldw	r2,-24(fp)
 401d074:	01400304 	movi	r5,12
 401d078:	1009883a 	mov	r4,r2
 401d07c:	400dcd40 	call	400dcd4 <__mulsi3>
 401d080:	8085883a 	add	r2,r16,r2
 401d084:	10c00017 	ldw	r3,0(r2)
 401d088:	e0bffb17 	ldw	r2,-20(fp)
 401d08c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401d090:	040100b4 	movhi	r16,1026
 401d094:	843b6004 	addi	r16,r16,-4736
 401d098:	e0bffa17 	ldw	r2,-24(fp)
 401d09c:	01400304 	movi	r5,12
 401d0a0:	1009883a 	mov	r4,r2
 401d0a4:	400dcd40 	call	400dcd4 <__mulsi3>
 401d0a8:	8085883a 	add	r2,r16,r2
 401d0ac:	10800104 	addi	r2,r2,4
 401d0b0:	10c00017 	ldw	r3,0(r2)
 401d0b4:	e0bffb17 	ldw	r2,-20(fp)
 401d0b8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 401d0bc:	040100b4 	movhi	r16,1026
 401d0c0:	843b6004 	addi	r16,r16,-4736
 401d0c4:	e0bffa17 	ldw	r2,-24(fp)
 401d0c8:	01400304 	movi	r5,12
 401d0cc:	1009883a 	mov	r4,r2
 401d0d0:	400dcd40 	call	400dcd4 <__mulsi3>
 401d0d4:	8085883a 	add	r2,r16,r2
 401d0d8:	10800204 	addi	r2,r2,8
 401d0dc:	10c00017 	ldw	r3,0(r2)
 401d0e0:	e0bffb17 	ldw	r2,-20(fp)
 401d0e4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401d0e8:	e13ffa17 	ldw	r4,-24(fp)
 401d0ec:	401b6000 	call	401b600 <alt_release_fd>
  }
} 
 401d0f0:	0001883a 	nop
 401d0f4:	e6ffff04 	addi	sp,fp,-4
 401d0f8:	dfc00217 	ldw	ra,8(sp)
 401d0fc:	df000117 	ldw	fp,4(sp)
 401d100:	dc000017 	ldw	r16,0(sp)
 401d104:	dec00304 	addi	sp,sp,12
 401d108:	f800283a 	ret

0401d10c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401d10c:	defffb04 	addi	sp,sp,-20
 401d110:	dfc00415 	stw	ra,16(sp)
 401d114:	df000315 	stw	fp,12(sp)
 401d118:	df000304 	addi	fp,sp,12
 401d11c:	e13ffd15 	stw	r4,-12(fp)
 401d120:	e17ffe15 	stw	r5,-8(fp)
 401d124:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401d128:	01c07fc4 	movi	r7,511
 401d12c:	01800044 	movi	r6,1
 401d130:	e17ffd17 	ldw	r5,-12(fp)
 401d134:	010100b4 	movhi	r4,1026
 401d138:	213b6304 	addi	r4,r4,-4724
 401d13c:	401d0280 	call	401d028 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401d140:	01c07fc4 	movi	r7,511
 401d144:	000d883a 	mov	r6,zero
 401d148:	e17ffe17 	ldw	r5,-8(fp)
 401d14c:	010100b4 	movhi	r4,1026
 401d150:	213b6004 	addi	r4,r4,-4736
 401d154:	401d0280 	call	401d028 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401d158:	01c07fc4 	movi	r7,511
 401d15c:	01800044 	movi	r6,1
 401d160:	e17fff17 	ldw	r5,-4(fp)
 401d164:	010100b4 	movhi	r4,1026
 401d168:	213b6604 	addi	r4,r4,-4712
 401d16c:	401d0280 	call	401d028 <alt_open_fd>
}  
 401d170:	0001883a 	nop
 401d174:	e037883a 	mov	sp,fp
 401d178:	dfc00117 	ldw	ra,4(sp)
 401d17c:	df000017 	ldw	fp,0(sp)
 401d180:	dec00204 	addi	sp,sp,8
 401d184:	f800283a 	ret

0401d188 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401d188:	defffe04 	addi	sp,sp,-8
 401d18c:	dfc00115 	stw	ra,4(sp)
 401d190:	df000015 	stw	fp,0(sp)
 401d194:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401d198:	d0a01217 	ldw	r2,-32696(gp)
 401d19c:	10000326 	beq	r2,zero,401d1ac <alt_get_errno+0x24>
 401d1a0:	d0a01217 	ldw	r2,-32696(gp)
 401d1a4:	103ee83a 	callr	r2
 401d1a8:	00000106 	br	401d1b0 <alt_get_errno+0x28>
 401d1ac:	d0a80204 	addi	r2,gp,-24568
}
 401d1b0:	e037883a 	mov	sp,fp
 401d1b4:	dfc00117 	ldw	ra,4(sp)
 401d1b8:	df000017 	ldw	fp,0(sp)
 401d1bc:	dec00204 	addi	sp,sp,8
 401d1c0:	f800283a 	ret

0401d1c4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 401d1c4:	defffb04 	addi	sp,sp,-20
 401d1c8:	dfc00415 	stw	ra,16(sp)
 401d1cc:	df000315 	stw	fp,12(sp)
 401d1d0:	dc000215 	stw	r16,8(sp)
 401d1d4:	df000304 	addi	fp,sp,12
 401d1d8:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 401d1dc:	e0bffe17 	ldw	r2,-8(fp)
 401d1e0:	10800217 	ldw	r2,8(r2)
 401d1e4:	10d00034 	orhi	r3,r2,16384
 401d1e8:	e0bffe17 	ldw	r2,-8(fp)
 401d1ec:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401d1f0:	e03ffd15 	stw	zero,-12(fp)
 401d1f4:	00002306 	br	401d284 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401d1f8:	040100b4 	movhi	r16,1026
 401d1fc:	843b6004 	addi	r16,r16,-4736
 401d200:	e0bffd17 	ldw	r2,-12(fp)
 401d204:	01400304 	movi	r5,12
 401d208:	1009883a 	mov	r4,r2
 401d20c:	400dcd40 	call	400dcd4 <__mulsi3>
 401d210:	8085883a 	add	r2,r16,r2
 401d214:	10c00017 	ldw	r3,0(r2)
 401d218:	e0bffe17 	ldw	r2,-8(fp)
 401d21c:	10800017 	ldw	r2,0(r2)
 401d220:	1880151e 	bne	r3,r2,401d278 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401d224:	040100b4 	movhi	r16,1026
 401d228:	843b6004 	addi	r16,r16,-4736
 401d22c:	e0bffd17 	ldw	r2,-12(fp)
 401d230:	01400304 	movi	r5,12
 401d234:	1009883a 	mov	r4,r2
 401d238:	400dcd40 	call	400dcd4 <__mulsi3>
 401d23c:	8085883a 	add	r2,r16,r2
 401d240:	10800204 	addi	r2,r2,8
 401d244:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401d248:	10000b0e 	bge	r2,zero,401d278 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 401d24c:	01400304 	movi	r5,12
 401d250:	e13ffd17 	ldw	r4,-12(fp)
 401d254:	400dcd40 	call	400dcd4 <__mulsi3>
 401d258:	1007883a 	mov	r3,r2
 401d25c:	008100b4 	movhi	r2,1026
 401d260:	10bb6004 	addi	r2,r2,-4736
 401d264:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401d268:	e0bffe17 	ldw	r2,-8(fp)
 401d26c:	18800226 	beq	r3,r2,401d278 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401d270:	00bffcc4 	movi	r2,-13
 401d274:	00000806 	br	401d298 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401d278:	e0bffd17 	ldw	r2,-12(fp)
 401d27c:	10800044 	addi	r2,r2,1
 401d280:	e0bffd15 	stw	r2,-12(fp)
 401d284:	d0a01117 	ldw	r2,-32700(gp)
 401d288:	1007883a 	mov	r3,r2
 401d28c:	e0bffd17 	ldw	r2,-12(fp)
 401d290:	18bfd92e 	bgeu	r3,r2,401d1f8 <__alt_mem_onchip_memory2_0+0xfc018038>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 401d294:	0005883a 	mov	r2,zero
}
 401d298:	e6ffff04 	addi	sp,fp,-4
 401d29c:	dfc00217 	ldw	ra,8(sp)
 401d2a0:	df000117 	ldw	fp,4(sp)
 401d2a4:	dc000017 	ldw	r16,0(sp)
 401d2a8:	dec00304 	addi	sp,sp,12
 401d2ac:	f800283a 	ret

0401d2b0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 401d2b0:	defff604 	addi	sp,sp,-40
 401d2b4:	dfc00915 	stw	ra,36(sp)
 401d2b8:	df000815 	stw	fp,32(sp)
 401d2bc:	df000804 	addi	fp,sp,32
 401d2c0:	e13ffd15 	stw	r4,-12(fp)
 401d2c4:	e17ffe15 	stw	r5,-8(fp)
 401d2c8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 401d2cc:	00bfffc4 	movi	r2,-1
 401d2d0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 401d2d4:	00bffb44 	movi	r2,-19
 401d2d8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 401d2dc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 401d2e0:	d1600f04 	addi	r5,gp,-32708
 401d2e4:	e13ffd17 	ldw	r4,-12(fp)
 401d2e8:	401d4300 	call	401d430 <alt_find_dev>
 401d2ec:	e0bff815 	stw	r2,-32(fp)
 401d2f0:	e0bff817 	ldw	r2,-32(fp)
 401d2f4:	1000051e 	bne	r2,zero,401d30c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 401d2f8:	e13ffd17 	ldw	r4,-12(fp)
 401d2fc:	401d4c00 	call	401d4c0 <alt_find_file>
 401d300:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 401d304:	00800044 	movi	r2,1
 401d308:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 401d30c:	e0bff817 	ldw	r2,-32(fp)
 401d310:	10002b26 	beq	r2,zero,401d3c0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 401d314:	e13ff817 	ldw	r4,-32(fp)
 401d318:	401d5c80 	call	401d5c8 <alt_get_fd>
 401d31c:	e0bff915 	stw	r2,-28(fp)
 401d320:	e0bff917 	ldw	r2,-28(fp)
 401d324:	1000030e 	bge	r2,zero,401d334 <open+0x84>
    {
      status = index;
 401d328:	e0bff917 	ldw	r2,-28(fp)
 401d32c:	e0bffa15 	stw	r2,-24(fp)
 401d330:	00002506 	br	401d3c8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 401d334:	01400304 	movi	r5,12
 401d338:	e13ff917 	ldw	r4,-28(fp)
 401d33c:	400dcd40 	call	400dcd4 <__mulsi3>
 401d340:	1007883a 	mov	r3,r2
 401d344:	008100b4 	movhi	r2,1026
 401d348:	10bb6004 	addi	r2,r2,-4736
 401d34c:	1885883a 	add	r2,r3,r2
 401d350:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 401d354:	e0fffe17 	ldw	r3,-8(fp)
 401d358:	00900034 	movhi	r2,16384
 401d35c:	10bfffc4 	addi	r2,r2,-1
 401d360:	1886703a 	and	r3,r3,r2
 401d364:	e0bffc17 	ldw	r2,-16(fp)
 401d368:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 401d36c:	e0bffb17 	ldw	r2,-20(fp)
 401d370:	1000051e 	bne	r2,zero,401d388 <open+0xd8>
 401d374:	e13ffc17 	ldw	r4,-16(fp)
 401d378:	401d1c40 	call	401d1c4 <alt_file_locked>
 401d37c:	e0bffa15 	stw	r2,-24(fp)
 401d380:	e0bffa17 	ldw	r2,-24(fp)
 401d384:	10001016 	blt	r2,zero,401d3c8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401d388:	e0bff817 	ldw	r2,-32(fp)
 401d38c:	10800317 	ldw	r2,12(r2)
 401d390:	10000826 	beq	r2,zero,401d3b4 <open+0x104>
 401d394:	e0bff817 	ldw	r2,-32(fp)
 401d398:	10800317 	ldw	r2,12(r2)
 401d39c:	e1ffff17 	ldw	r7,-4(fp)
 401d3a0:	e1bffe17 	ldw	r6,-8(fp)
 401d3a4:	e17ffd17 	ldw	r5,-12(fp)
 401d3a8:	e13ffc17 	ldw	r4,-16(fp)
 401d3ac:	103ee83a 	callr	r2
 401d3b0:	00000106 	br	401d3b8 <open+0x108>
 401d3b4:	0005883a 	mov	r2,zero
 401d3b8:	e0bffa15 	stw	r2,-24(fp)
 401d3bc:	00000206 	br	401d3c8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 401d3c0:	00bffb44 	movi	r2,-19
 401d3c4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 401d3c8:	e0bffa17 	ldw	r2,-24(fp)
 401d3cc:	1000090e 	bge	r2,zero,401d3f4 <open+0x144>
  {
    alt_release_fd (index);  
 401d3d0:	e13ff917 	ldw	r4,-28(fp)
 401d3d4:	401b6000 	call	401b600 <alt_release_fd>
    ALT_ERRNO = -status;
 401d3d8:	401d1880 	call	401d188 <alt_get_errno>
 401d3dc:	1007883a 	mov	r3,r2
 401d3e0:	e0bffa17 	ldw	r2,-24(fp)
 401d3e4:	0085c83a 	sub	r2,zero,r2
 401d3e8:	18800015 	stw	r2,0(r3)
    return -1;
 401d3ec:	00bfffc4 	movi	r2,-1
 401d3f0:	00000106 	br	401d3f8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 401d3f4:	e0bff917 	ldw	r2,-28(fp)
}
 401d3f8:	e037883a 	mov	sp,fp
 401d3fc:	dfc00117 	ldw	ra,4(sp)
 401d400:	df000017 	ldw	fp,0(sp)
 401d404:	dec00204 	addi	sp,sp,8
 401d408:	f800283a 	ret

0401d40c <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 401d40c:	deffff04 	addi	sp,sp,-4
 401d410:	df000015 	stw	fp,0(sp)
 401d414:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 401d418:	000170fa 	wrctl	ienable,zero
}
 401d41c:	0001883a 	nop
 401d420:	e037883a 	mov	sp,fp
 401d424:	df000017 	ldw	fp,0(sp)
 401d428:	dec00104 	addi	sp,sp,4
 401d42c:	f800283a 	ret

0401d430 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401d430:	defffa04 	addi	sp,sp,-24
 401d434:	dfc00515 	stw	ra,20(sp)
 401d438:	df000415 	stw	fp,16(sp)
 401d43c:	df000404 	addi	fp,sp,16
 401d440:	e13ffe15 	stw	r4,-8(fp)
 401d444:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 401d448:	e0bfff17 	ldw	r2,-4(fp)
 401d44c:	10800017 	ldw	r2,0(r2)
 401d450:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 401d454:	e13ffe17 	ldw	r4,-8(fp)
 401d458:	400fee00 	call	400fee0 <strlen>
 401d45c:	10800044 	addi	r2,r2,1
 401d460:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401d464:	00000d06 	br	401d49c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 401d468:	e0bffc17 	ldw	r2,-16(fp)
 401d46c:	10800217 	ldw	r2,8(r2)
 401d470:	e0fffd17 	ldw	r3,-12(fp)
 401d474:	180d883a 	mov	r6,r3
 401d478:	e17ffe17 	ldw	r5,-8(fp)
 401d47c:	1009883a 	mov	r4,r2
 401d480:	401d7740 	call	401d774 <memcmp>
 401d484:	1000021e 	bne	r2,zero,401d490 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 401d488:	e0bffc17 	ldw	r2,-16(fp)
 401d48c:	00000706 	br	401d4ac <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401d490:	e0bffc17 	ldw	r2,-16(fp)
 401d494:	10800017 	ldw	r2,0(r2)
 401d498:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401d49c:	e0fffc17 	ldw	r3,-16(fp)
 401d4a0:	e0bfff17 	ldw	r2,-4(fp)
 401d4a4:	18bff01e 	bne	r3,r2,401d468 <__alt_mem_onchip_memory2_0+0xfc0182a8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 401d4a8:	0005883a 	mov	r2,zero
}
 401d4ac:	e037883a 	mov	sp,fp
 401d4b0:	dfc00117 	ldw	ra,4(sp)
 401d4b4:	df000017 	ldw	fp,0(sp)
 401d4b8:	dec00204 	addi	sp,sp,8
 401d4bc:	f800283a 	ret

0401d4c0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 401d4c0:	defffb04 	addi	sp,sp,-20
 401d4c4:	dfc00415 	stw	ra,16(sp)
 401d4c8:	df000315 	stw	fp,12(sp)
 401d4cc:	df000304 	addi	fp,sp,12
 401d4d0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 401d4d4:	d0a00d17 	ldw	r2,-32716(gp)
 401d4d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401d4dc:	00003106 	br	401d5a4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 401d4e0:	e0bffd17 	ldw	r2,-12(fp)
 401d4e4:	10800217 	ldw	r2,8(r2)
 401d4e8:	1009883a 	mov	r4,r2
 401d4ec:	400fee00 	call	400fee0 <strlen>
 401d4f0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 401d4f4:	e0bffd17 	ldw	r2,-12(fp)
 401d4f8:	10c00217 	ldw	r3,8(r2)
 401d4fc:	e0bffe17 	ldw	r2,-8(fp)
 401d500:	10bfffc4 	addi	r2,r2,-1
 401d504:	1885883a 	add	r2,r3,r2
 401d508:	10800003 	ldbu	r2,0(r2)
 401d50c:	10803fcc 	andi	r2,r2,255
 401d510:	1080201c 	xori	r2,r2,128
 401d514:	10bfe004 	addi	r2,r2,-128
 401d518:	10800bd8 	cmpnei	r2,r2,47
 401d51c:	1000031e 	bne	r2,zero,401d52c <alt_find_file+0x6c>
    {
      len -= 1;
 401d520:	e0bffe17 	ldw	r2,-8(fp)
 401d524:	10bfffc4 	addi	r2,r2,-1
 401d528:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401d52c:	e0bffe17 	ldw	r2,-8(fp)
 401d530:	e0ffff17 	ldw	r3,-4(fp)
 401d534:	1885883a 	add	r2,r3,r2
 401d538:	10800003 	ldbu	r2,0(r2)
 401d53c:	10803fcc 	andi	r2,r2,255
 401d540:	1080201c 	xori	r2,r2,128
 401d544:	10bfe004 	addi	r2,r2,-128
 401d548:	10800be0 	cmpeqi	r2,r2,47
 401d54c:	1000081e 	bne	r2,zero,401d570 <alt_find_file+0xb0>
 401d550:	e0bffe17 	ldw	r2,-8(fp)
 401d554:	e0ffff17 	ldw	r3,-4(fp)
 401d558:	1885883a 	add	r2,r3,r2
 401d55c:	10800003 	ldbu	r2,0(r2)
 401d560:	10803fcc 	andi	r2,r2,255
 401d564:	1080201c 	xori	r2,r2,128
 401d568:	10bfe004 	addi	r2,r2,-128
 401d56c:	10000a1e 	bne	r2,zero,401d598 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401d570:	e0bffd17 	ldw	r2,-12(fp)
 401d574:	10800217 	ldw	r2,8(r2)
 401d578:	e0fffe17 	ldw	r3,-8(fp)
 401d57c:	180d883a 	mov	r6,r3
 401d580:	e17fff17 	ldw	r5,-4(fp)
 401d584:	1009883a 	mov	r4,r2
 401d588:	401d7740 	call	401d774 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401d58c:	1000021e 	bne	r2,zero,401d598 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401d590:	e0bffd17 	ldw	r2,-12(fp)
 401d594:	00000706 	br	401d5b4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 401d598:	e0bffd17 	ldw	r2,-12(fp)
 401d59c:	10800017 	ldw	r2,0(r2)
 401d5a0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401d5a4:	e0fffd17 	ldw	r3,-12(fp)
 401d5a8:	d0a00d04 	addi	r2,gp,-32716
 401d5ac:	18bfcc1e 	bne	r3,r2,401d4e0 <__alt_mem_onchip_memory2_0+0xfc018320>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 401d5b0:	0005883a 	mov	r2,zero
}
 401d5b4:	e037883a 	mov	sp,fp
 401d5b8:	dfc00117 	ldw	ra,4(sp)
 401d5bc:	df000017 	ldw	fp,0(sp)
 401d5c0:	dec00204 	addi	sp,sp,8
 401d5c4:	f800283a 	ret

0401d5c8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 401d5c8:	defffa04 	addi	sp,sp,-24
 401d5cc:	dfc00515 	stw	ra,20(sp)
 401d5d0:	df000415 	stw	fp,16(sp)
 401d5d4:	dc000315 	stw	r16,12(sp)
 401d5d8:	df000404 	addi	fp,sp,16
 401d5dc:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 401d5e0:	00bffa04 	movi	r2,-24
 401d5e4:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401d5e8:	e03ffc15 	stw	zero,-16(fp)
 401d5ec:	00001d06 	br	401d664 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401d5f0:	040100b4 	movhi	r16,1026
 401d5f4:	843b6004 	addi	r16,r16,-4736
 401d5f8:	e0bffc17 	ldw	r2,-16(fp)
 401d5fc:	01400304 	movi	r5,12
 401d600:	1009883a 	mov	r4,r2
 401d604:	400dcd40 	call	400dcd4 <__mulsi3>
 401d608:	8085883a 	add	r2,r16,r2
 401d60c:	10800017 	ldw	r2,0(r2)
 401d610:	1000111e 	bne	r2,zero,401d658 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 401d614:	040100b4 	movhi	r16,1026
 401d618:	843b6004 	addi	r16,r16,-4736
 401d61c:	e0bffc17 	ldw	r2,-16(fp)
 401d620:	01400304 	movi	r5,12
 401d624:	1009883a 	mov	r4,r2
 401d628:	400dcd40 	call	400dcd4 <__mulsi3>
 401d62c:	8085883a 	add	r2,r16,r2
 401d630:	e0fffe17 	ldw	r3,-8(fp)
 401d634:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 401d638:	d0e01117 	ldw	r3,-32700(gp)
 401d63c:	e0bffc17 	ldw	r2,-16(fp)
 401d640:	1880020e 	bge	r3,r2,401d64c <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 401d644:	e0bffc17 	ldw	r2,-16(fp)
 401d648:	d0a01115 	stw	r2,-32700(gp)
      }
      rc = i;
 401d64c:	e0bffc17 	ldw	r2,-16(fp)
 401d650:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 401d654:	00000606 	br	401d670 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 401d658:	e0bffc17 	ldw	r2,-16(fp)
 401d65c:	10800044 	addi	r2,r2,1
 401d660:	e0bffc15 	stw	r2,-16(fp)
 401d664:	e0bffc17 	ldw	r2,-16(fp)
 401d668:	10800810 	cmplti	r2,r2,32
 401d66c:	103fe01e 	bne	r2,zero,401d5f0 <__alt_mem_onchip_memory2_0+0xfc018430>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401d670:	e0bffd17 	ldw	r2,-12(fp)
}
 401d674:	e6ffff04 	addi	sp,fp,-4
 401d678:	dfc00217 	ldw	ra,8(sp)
 401d67c:	df000117 	ldw	fp,4(sp)
 401d680:	dc000017 	ldw	r16,0(sp)
 401d684:	dec00304 	addi	sp,sp,12
 401d688:	f800283a 	ret

0401d68c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 401d68c:	defffe04 	addi	sp,sp,-8
 401d690:	df000115 	stw	fp,4(sp)
 401d694:	df000104 	addi	fp,sp,4
 401d698:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 401d69c:	e0bfff17 	ldw	r2,-4(fp)
 401d6a0:	10bffe84 	addi	r2,r2,-6
 401d6a4:	10c00428 	cmpgeui	r3,r2,16
 401d6a8:	18001a1e 	bne	r3,zero,401d714 <alt_exception_cause_generated_bad_addr+0x88>
 401d6ac:	100690ba 	slli	r3,r2,2
 401d6b0:	008100b4 	movhi	r2,1026
 401d6b4:	10b5b104 	addi	r2,r2,-10556
 401d6b8:	1885883a 	add	r2,r3,r2
 401d6bc:	10800017 	ldw	r2,0(r2)
 401d6c0:	1000683a 	jmp	r2
 401d6c4:	0401d704 	movi	r16,1884
 401d6c8:	0401d704 	movi	r16,1884
 401d6cc:	0401d714 	movui	r16,1884
 401d6d0:	0401d714 	movui	r16,1884
 401d6d4:	0401d714 	movui	r16,1884
 401d6d8:	0401d704 	movi	r16,1884
 401d6dc:	0401d70c 	andi	r16,zero,1884
 401d6e0:	0401d714 	movui	r16,1884
 401d6e4:	0401d704 	movi	r16,1884
 401d6e8:	0401d704 	movi	r16,1884
 401d6ec:	0401d714 	movui	r16,1884
 401d6f0:	0401d704 	movi	r16,1884
 401d6f4:	0401d70c 	andi	r16,zero,1884
 401d6f8:	0401d714 	movui	r16,1884
 401d6fc:	0401d714 	movui	r16,1884
 401d700:	0401d704 	movi	r16,1884
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 401d704:	00800044 	movi	r2,1
 401d708:	00000306 	br	401d718 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401d70c:	0005883a 	mov	r2,zero
 401d710:	00000106 	br	401d718 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 401d714:	0005883a 	mov	r2,zero
  }
}
 401d718:	e037883a 	mov	sp,fp
 401d71c:	df000017 	ldw	fp,0(sp)
 401d720:	dec00104 	addi	sp,sp,4
 401d724:	f800283a 	ret

0401d728 <atexit>:
 401d728:	200b883a 	mov	r5,r4
 401d72c:	000f883a 	mov	r7,zero
 401d730:	000d883a 	mov	r6,zero
 401d734:	0009883a 	mov	r4,zero
 401d738:	401d7f01 	jmpi	401d7f0 <__register_exitproc>

0401d73c <exit>:
 401d73c:	defffe04 	addi	sp,sp,-8
 401d740:	000b883a 	mov	r5,zero
 401d744:	dc000015 	stw	r16,0(sp)
 401d748:	dfc00115 	stw	ra,4(sp)
 401d74c:	2021883a 	mov	r16,r4
 401d750:	401d9080 	call	401d908 <__call_exitprocs>
 401d754:	008100b4 	movhi	r2,1026
 401d758:	10bfdf04 	addi	r2,r2,-132
 401d75c:	11000017 	ldw	r4,0(r2)
 401d760:	20800f17 	ldw	r2,60(r4)
 401d764:	10000126 	beq	r2,zero,401d76c <exit+0x30>
 401d768:	103ee83a 	callr	r2
 401d76c:	8009883a 	mov	r4,r16
 401d770:	401da880 	call	401da88 <_exit>

0401d774 <memcmp>:
 401d774:	01c000c4 	movi	r7,3
 401d778:	3980192e 	bgeu	r7,r6,401d7e0 <memcmp+0x6c>
 401d77c:	2144b03a 	or	r2,r4,r5
 401d780:	11c4703a 	and	r2,r2,r7
 401d784:	10000f26 	beq	r2,zero,401d7c4 <memcmp+0x50>
 401d788:	20800003 	ldbu	r2,0(r4)
 401d78c:	28c00003 	ldbu	r3,0(r5)
 401d790:	10c0151e 	bne	r2,r3,401d7e8 <memcmp+0x74>
 401d794:	31bfff84 	addi	r6,r6,-2
 401d798:	01ffffc4 	movi	r7,-1
 401d79c:	00000406 	br	401d7b0 <memcmp+0x3c>
 401d7a0:	20800003 	ldbu	r2,0(r4)
 401d7a4:	28c00003 	ldbu	r3,0(r5)
 401d7a8:	31bfffc4 	addi	r6,r6,-1
 401d7ac:	10c00e1e 	bne	r2,r3,401d7e8 <memcmp+0x74>
 401d7b0:	21000044 	addi	r4,r4,1
 401d7b4:	29400044 	addi	r5,r5,1
 401d7b8:	31fff91e 	bne	r6,r7,401d7a0 <__alt_mem_onchip_memory2_0+0xfc0185e0>
 401d7bc:	0005883a 	mov	r2,zero
 401d7c0:	f800283a 	ret
 401d7c4:	20c00017 	ldw	r3,0(r4)
 401d7c8:	28800017 	ldw	r2,0(r5)
 401d7cc:	18bfee1e 	bne	r3,r2,401d788 <__alt_mem_onchip_memory2_0+0xfc0185c8>
 401d7d0:	31bfff04 	addi	r6,r6,-4
 401d7d4:	21000104 	addi	r4,r4,4
 401d7d8:	29400104 	addi	r5,r5,4
 401d7dc:	39bff936 	bltu	r7,r6,401d7c4 <__alt_mem_onchip_memory2_0+0xfc018604>
 401d7e0:	303fe91e 	bne	r6,zero,401d788 <__alt_mem_onchip_memory2_0+0xfc0185c8>
 401d7e4:	003ff506 	br	401d7bc <__alt_mem_onchip_memory2_0+0xfc0185fc>
 401d7e8:	10c5c83a 	sub	r2,r2,r3
 401d7ec:	f800283a 	ret

0401d7f0 <__register_exitproc>:
 401d7f0:	defffa04 	addi	sp,sp,-24
 401d7f4:	dc000315 	stw	r16,12(sp)
 401d7f8:	040100b4 	movhi	r16,1026
 401d7fc:	843fdf04 	addi	r16,r16,-132
 401d800:	80c00017 	ldw	r3,0(r16)
 401d804:	dc400415 	stw	r17,16(sp)
 401d808:	dfc00515 	stw	ra,20(sp)
 401d80c:	18805217 	ldw	r2,328(r3)
 401d810:	2023883a 	mov	r17,r4
 401d814:	10003726 	beq	r2,zero,401d8f4 <__register_exitproc+0x104>
 401d818:	10c00117 	ldw	r3,4(r2)
 401d81c:	010007c4 	movi	r4,31
 401d820:	20c00e16 	blt	r4,r3,401d85c <__register_exitproc+0x6c>
 401d824:	1a000044 	addi	r8,r3,1
 401d828:	8800221e 	bne	r17,zero,401d8b4 <__register_exitproc+0xc4>
 401d82c:	18c00084 	addi	r3,r3,2
 401d830:	18c7883a 	add	r3,r3,r3
 401d834:	18c7883a 	add	r3,r3,r3
 401d838:	12000115 	stw	r8,4(r2)
 401d83c:	10c7883a 	add	r3,r2,r3
 401d840:	19400015 	stw	r5,0(r3)
 401d844:	0005883a 	mov	r2,zero
 401d848:	dfc00517 	ldw	ra,20(sp)
 401d84c:	dc400417 	ldw	r17,16(sp)
 401d850:	dc000317 	ldw	r16,12(sp)
 401d854:	dec00604 	addi	sp,sp,24
 401d858:	f800283a 	ret
 401d85c:	00800034 	movhi	r2,0
 401d860:	10800004 	addi	r2,r2,0
 401d864:	10002626 	beq	r2,zero,401d900 <__register_exitproc+0x110>
 401d868:	01006404 	movi	r4,400
 401d86c:	d9400015 	stw	r5,0(sp)
 401d870:	d9800115 	stw	r6,4(sp)
 401d874:	d9c00215 	stw	r7,8(sp)
 401d878:	00000000 	call	0 <__reset-0x4000000>
 401d87c:	d9400017 	ldw	r5,0(sp)
 401d880:	d9800117 	ldw	r6,4(sp)
 401d884:	d9c00217 	ldw	r7,8(sp)
 401d888:	10001d26 	beq	r2,zero,401d900 <__register_exitproc+0x110>
 401d88c:	81000017 	ldw	r4,0(r16)
 401d890:	10000115 	stw	zero,4(r2)
 401d894:	02000044 	movi	r8,1
 401d898:	22405217 	ldw	r9,328(r4)
 401d89c:	0007883a 	mov	r3,zero
 401d8a0:	12400015 	stw	r9,0(r2)
 401d8a4:	20805215 	stw	r2,328(r4)
 401d8a8:	10006215 	stw	zero,392(r2)
 401d8ac:	10006315 	stw	zero,396(r2)
 401d8b0:	883fde26 	beq	r17,zero,401d82c <__alt_mem_onchip_memory2_0+0xfc01866c>
 401d8b4:	18c9883a 	add	r4,r3,r3
 401d8b8:	2109883a 	add	r4,r4,r4
 401d8bc:	1109883a 	add	r4,r2,r4
 401d8c0:	21802215 	stw	r6,136(r4)
 401d8c4:	01800044 	movi	r6,1
 401d8c8:	12406217 	ldw	r9,392(r2)
 401d8cc:	30cc983a 	sll	r6,r6,r3
 401d8d0:	4992b03a 	or	r9,r9,r6
 401d8d4:	12406215 	stw	r9,392(r2)
 401d8d8:	21c04215 	stw	r7,264(r4)
 401d8dc:	01000084 	movi	r4,2
 401d8e0:	893fd21e 	bne	r17,r4,401d82c <__alt_mem_onchip_memory2_0+0xfc01866c>
 401d8e4:	11006317 	ldw	r4,396(r2)
 401d8e8:	218cb03a 	or	r6,r4,r6
 401d8ec:	11806315 	stw	r6,396(r2)
 401d8f0:	003fce06 	br	401d82c <__alt_mem_onchip_memory2_0+0xfc01866c>
 401d8f4:	18805304 	addi	r2,r3,332
 401d8f8:	18805215 	stw	r2,328(r3)
 401d8fc:	003fc606 	br	401d818 <__alt_mem_onchip_memory2_0+0xfc018658>
 401d900:	00bfffc4 	movi	r2,-1
 401d904:	003fd006 	br	401d848 <__alt_mem_onchip_memory2_0+0xfc018688>

0401d908 <__call_exitprocs>:
 401d908:	defff504 	addi	sp,sp,-44
 401d90c:	df000915 	stw	fp,36(sp)
 401d910:	dd400615 	stw	r21,24(sp)
 401d914:	dc800315 	stw	r18,12(sp)
 401d918:	dfc00a15 	stw	ra,40(sp)
 401d91c:	ddc00815 	stw	r23,32(sp)
 401d920:	dd800715 	stw	r22,28(sp)
 401d924:	dd000515 	stw	r20,20(sp)
 401d928:	dcc00415 	stw	r19,16(sp)
 401d92c:	dc400215 	stw	r17,8(sp)
 401d930:	dc000115 	stw	r16,4(sp)
 401d934:	d9000015 	stw	r4,0(sp)
 401d938:	2839883a 	mov	fp,r5
 401d93c:	04800044 	movi	r18,1
 401d940:	057fffc4 	movi	r21,-1
 401d944:	008100b4 	movhi	r2,1026
 401d948:	10bfdf04 	addi	r2,r2,-132
 401d94c:	12000017 	ldw	r8,0(r2)
 401d950:	45005217 	ldw	r20,328(r8)
 401d954:	44c05204 	addi	r19,r8,328
 401d958:	a0001c26 	beq	r20,zero,401d9cc <__call_exitprocs+0xc4>
 401d95c:	a0800117 	ldw	r2,4(r20)
 401d960:	15ffffc4 	addi	r23,r2,-1
 401d964:	b8000d16 	blt	r23,zero,401d99c <__call_exitprocs+0x94>
 401d968:	14000044 	addi	r16,r2,1
 401d96c:	8421883a 	add	r16,r16,r16
 401d970:	8421883a 	add	r16,r16,r16
 401d974:	84402004 	addi	r17,r16,128
 401d978:	a463883a 	add	r17,r20,r17
 401d97c:	a421883a 	add	r16,r20,r16
 401d980:	e0001e26 	beq	fp,zero,401d9fc <__call_exitprocs+0xf4>
 401d984:	80804017 	ldw	r2,256(r16)
 401d988:	e0801c26 	beq	fp,r2,401d9fc <__call_exitprocs+0xf4>
 401d98c:	bdffffc4 	addi	r23,r23,-1
 401d990:	843fff04 	addi	r16,r16,-4
 401d994:	8c7fff04 	addi	r17,r17,-4
 401d998:	bd7ff91e 	bne	r23,r21,401d980 <__alt_mem_onchip_memory2_0+0xfc0187c0>
 401d99c:	00800034 	movhi	r2,0
 401d9a0:	10800004 	addi	r2,r2,0
 401d9a4:	10000926 	beq	r2,zero,401d9cc <__call_exitprocs+0xc4>
 401d9a8:	a0800117 	ldw	r2,4(r20)
 401d9ac:	1000301e 	bne	r2,zero,401da70 <__call_exitprocs+0x168>
 401d9b0:	a0800017 	ldw	r2,0(r20)
 401d9b4:	10003226 	beq	r2,zero,401da80 <__call_exitprocs+0x178>
 401d9b8:	a009883a 	mov	r4,r20
 401d9bc:	98800015 	stw	r2,0(r19)
 401d9c0:	00000000 	call	0 <__reset-0x4000000>
 401d9c4:	9d000017 	ldw	r20,0(r19)
 401d9c8:	a03fe41e 	bne	r20,zero,401d95c <__alt_mem_onchip_memory2_0+0xfc01879c>
 401d9cc:	dfc00a17 	ldw	ra,40(sp)
 401d9d0:	df000917 	ldw	fp,36(sp)
 401d9d4:	ddc00817 	ldw	r23,32(sp)
 401d9d8:	dd800717 	ldw	r22,28(sp)
 401d9dc:	dd400617 	ldw	r21,24(sp)
 401d9e0:	dd000517 	ldw	r20,20(sp)
 401d9e4:	dcc00417 	ldw	r19,16(sp)
 401d9e8:	dc800317 	ldw	r18,12(sp)
 401d9ec:	dc400217 	ldw	r17,8(sp)
 401d9f0:	dc000117 	ldw	r16,4(sp)
 401d9f4:	dec00b04 	addi	sp,sp,44
 401d9f8:	f800283a 	ret
 401d9fc:	a0800117 	ldw	r2,4(r20)
 401da00:	80c00017 	ldw	r3,0(r16)
 401da04:	10bfffc4 	addi	r2,r2,-1
 401da08:	15c01426 	beq	r2,r23,401da5c <__call_exitprocs+0x154>
 401da0c:	80000015 	stw	zero,0(r16)
 401da10:	183fde26 	beq	r3,zero,401d98c <__alt_mem_onchip_memory2_0+0xfc0187cc>
 401da14:	95c8983a 	sll	r4,r18,r23
 401da18:	a0806217 	ldw	r2,392(r20)
 401da1c:	a5800117 	ldw	r22,4(r20)
 401da20:	2084703a 	and	r2,r4,r2
 401da24:	10000b26 	beq	r2,zero,401da54 <__call_exitprocs+0x14c>
 401da28:	a0806317 	ldw	r2,396(r20)
 401da2c:	2088703a 	and	r4,r4,r2
 401da30:	20000c1e 	bne	r4,zero,401da64 <__call_exitprocs+0x15c>
 401da34:	89400017 	ldw	r5,0(r17)
 401da38:	d9000017 	ldw	r4,0(sp)
 401da3c:	183ee83a 	callr	r3
 401da40:	a0800117 	ldw	r2,4(r20)
 401da44:	15bfbf1e 	bne	r2,r22,401d944 <__alt_mem_onchip_memory2_0+0xfc018784>
 401da48:	98800017 	ldw	r2,0(r19)
 401da4c:	153fcf26 	beq	r2,r20,401d98c <__alt_mem_onchip_memory2_0+0xfc0187cc>
 401da50:	003fbc06 	br	401d944 <__alt_mem_onchip_memory2_0+0xfc018784>
 401da54:	183ee83a 	callr	r3
 401da58:	003ff906 	br	401da40 <__alt_mem_onchip_memory2_0+0xfc018880>
 401da5c:	a5c00115 	stw	r23,4(r20)
 401da60:	003feb06 	br	401da10 <__alt_mem_onchip_memory2_0+0xfc018850>
 401da64:	89000017 	ldw	r4,0(r17)
 401da68:	183ee83a 	callr	r3
 401da6c:	003ff406 	br	401da40 <__alt_mem_onchip_memory2_0+0xfc018880>
 401da70:	a0800017 	ldw	r2,0(r20)
 401da74:	a027883a 	mov	r19,r20
 401da78:	1029883a 	mov	r20,r2
 401da7c:	003fb606 	br	401d958 <__alt_mem_onchip_memory2_0+0xfc018798>
 401da80:	0005883a 	mov	r2,zero
 401da84:	003ffb06 	br	401da74 <__alt_mem_onchip_memory2_0+0xfc0188b4>

0401da88 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 401da88:	defffd04 	addi	sp,sp,-12
 401da8c:	df000215 	stw	fp,8(sp)
 401da90:	df000204 	addi	fp,sp,8
 401da94:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 401da98:	0001883a 	nop
 401da9c:	e0bfff17 	ldw	r2,-4(fp)
 401daa0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 401daa4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 401daa8:	10000226 	beq	r2,zero,401dab4 <_exit+0x2c>
    ALT_SIM_FAIL();
 401daac:	002af070 	cmpltui	zero,zero,43969
 401dab0:	00000106 	br	401dab8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 401dab4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 401dab8:	003fff06 	br	401dab8 <__alt_mem_onchip_memory2_0+0xfc0188f8>
